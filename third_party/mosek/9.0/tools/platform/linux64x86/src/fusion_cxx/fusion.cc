#include "monty.h"
#include "fusion_p.h"

template<typename T> struct _checked_ptr_1 
{
  T * ptr;
  size_t sz;
  _checked_ptr_1<T>(T * ptr, size_t sz) : ptr(ptr), sz(sz) {} 
  T & operator[](ptrdiff_t i) { assert(i >= 0 && i < sz); return ptr[i]; } 
  const T & operator[](ptrdiff_t i) const { assert(i >= 0 && i < sz); return ptr[i]; } 
  void update(T * ptr_, size_t sz_) { ptr = ptr_; sz = sz_; }
};

template<typename T> struct _checked_ptr_2
{
  T * ptr; 
  size_t sz0, sz1; 
  _checked_ptr_2<T>(T * ptr, size_t sz0, size_t sz1) : ptr(ptr), sz0(sz0),sz1(sz1) {} 
  T & operator()(ptrdiff_t i0, ptrdiff_t i1) { assert(i0 >= 0 && i0 < sz0 && i1 >= 0 && i1 < sz1); return ptr[i0 * sz1 + i1]; } 
  const T & operator()(ptrdiff_t i0, ptrdiff_t i1) const { assert(i0 >= 0 && i0 < sz0 && i1 >= 0 && i1 < sz1); return ptr[i0 * sz1 + i1]; } 
  void update(T * ptr_, size_t sz0_, size_t sz1_) { ptr = ptr_; sz0 = sz0_; sz1 = sz1_; }
};

// See http://www.cplusplus.com/articles/DE18T05o/
//                 A      && ( (       B      && B1 && B2      ) || (      C      &&   C1 &&   C2  ) )
// A a and b a have different signs
// B, B1, B2 a and b are both non-negative, r is less than both a and b
// C, C1, C2 a and b are both negative, r is greater than both a and b

struct InternalNumericOverflow {};

template<typename T> 
static inline T checked_add(T a, T b, bool & overflow) {
  int r = a+b;
  overflow = ((a ^ b) >= 0) && ( (( (a & b) >= 0) && r < a && r < b) || ( ((a & b) < 0) && a < r && b < r) );
  return r;
}

template<typename T>
static inline T safe_add_(T a, T b) {
  bool overflow; 
  T r = checked_add(a,b,overflow);
  if (overflow)
    throw InternalNumericOverflow();
  else
    return r;
}

static inline           int safe_add(int a, int b) { return safe_add_<long long int>(a,b); }
static inline long long int safe_add(long long int a, long long int b) { return safe_add_<long long int>(a,b); }
static inline long long int safe_add(int a, long long int b) { return safe_add_<long long int>(a,b); }
static inline long long int safe_add(long long int a, int b) { return safe_add_<long long int>(a,b); }

template<typename T>
static inline T checked_mul(T a, T b, bool & overflow) {
  T r = a * b;
  overflow = b != 0 && (((a ^ b) >= 0 && a > std::numeric_limits<T>::max() / b) || ((a ^ b) < 0 && a < std::numeric_limits<T>::min() / b));
  return r;
}

template<typename T>
static inline T safe_mul_(T a, T b) {
  bool overflow; 
  T r = checked_mul(a,b,overflow);
  if (overflow)
    throw InternalNumericOverflow();
  else
    return r;
}

static inline           int safe_mul(int a, int b) { return safe_mul_<long long int>(a,b); }
static inline long long int safe_mul(long long int a, long long int b) { return safe_mul_<long long int>(a,b); }
static inline long long int safe_mul(int a, long long int b) { return safe_mul_<long long int>(a,b); }
static inline long long int safe_mul(long long int a, int b) { return safe_mul_<long long int>(a,b); }

std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::StatusKey val){switch (val){case StatusKey::Unknown: os << "StatusKey::Unknown"; break;case StatusKey::Basic: os << "StatusKey::Basic"; break;case StatusKey::SuperBasic: os << "StatusKey::SuperBasic"; break;case StatusKey::OnBound: os << "StatusKey::OnBound"; break;case StatusKey::Infinity: os << "StatusKey::Infinity"; break;default: os << "StatusKey.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::SolutionType val){switch (val){case SolutionType::Default: os << "SolutionType::Default"; break;case SolutionType::Basic: os << "SolutionType::Basic"; break;case SolutionType::Interior: os << "SolutionType::Interior"; break;case SolutionType::Integer: os << "SolutionType::Integer"; break;default: os << "SolutionType.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::ProblemStatus val){switch (val){case ProblemStatus::Unknown: os << "ProblemStatus::Unknown"; break;case ProblemStatus::PrimalAndDualFeasible: os << "ProblemStatus::PrimalAndDualFeasible"; break;case ProblemStatus::PrimalFeasible: os << "ProblemStatus::PrimalFeasible"; break;case ProblemStatus::DualFeasible: os << "ProblemStatus::DualFeasible"; break;case ProblemStatus::PrimalInfeasible: os << "ProblemStatus::PrimalInfeasible"; break;case ProblemStatus::DualInfeasible: os << "ProblemStatus::DualInfeasible"; break;case ProblemStatus::PrimalAndDualInfeasible: os << "ProblemStatus::PrimalAndDualInfeasible"; break;case ProblemStatus::IllPosed: os << "ProblemStatus::IllPosed"; break;case ProblemStatus::PrimalInfeasibleOrUnbounded: os << "ProblemStatus::PrimalInfeasibleOrUnbounded"; break;default: os << "ProblemStatus.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::AccSolutionStatus val){switch (val){case AccSolutionStatus::Anything: os << "AccSolutionStatus::Anything"; break;case AccSolutionStatus::Optimal: os << "AccSolutionStatus::Optimal"; break;case AccSolutionStatus::Feasible: os << "AccSolutionStatus::Feasible"; break;case AccSolutionStatus::Certificate: os << "AccSolutionStatus::Certificate"; break;default: os << "AccSolutionStatus.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::SolutionStatus val){switch (val){case SolutionStatus::Undefined: os << "SolutionStatus::Undefined"; break;case SolutionStatus::Unknown: os << "SolutionStatus::Unknown"; break;case SolutionStatus::Optimal: os << "SolutionStatus::Optimal"; break;case SolutionStatus::Feasible: os << "SolutionStatus::Feasible"; break;case SolutionStatus::Certificate: os << "SolutionStatus::Certificate"; break;case SolutionStatus::IllposedCert: os << "SolutionStatus::IllposedCert"; break;default: os << "SolutionStatus.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::ObjectiveSense val){switch (val){case ObjectiveSense::Undefined: os << "ObjectiveSense::Undefined"; break;case ObjectiveSense::Minimize: os << "ObjectiveSense::Minimize"; break;case ObjectiveSense::Maximize: os << "ObjectiveSense::Maximize"; break;default: os << "ObjectiveSense.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::QConeKey val){switch (val){case QConeKey::InQCone: os << "QConeKey::InQCone"; break;case QConeKey::InRotatedQCone: os << "QConeKey::InRotatedQCone"; break;case QConeKey::InPExpCone: os << "QConeKey::InPExpCone"; break;case QConeKey::InPPowCone: os << "QConeKey::InPPowCone"; break;case QConeKey::InDExpCone: os << "QConeKey::InDExpCone"; break;case QConeKey::InDPowCone: os << "QConeKey::InDPowCone"; break;default: os << "QConeKey.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::PSDKey val){switch (val){case PSDKey::IsSymPSD: os << "PSDKey::IsSymPSD"; break;case PSDKey::IsTrilPSD: os << "PSDKey::IsTrilPSD"; break;default: os << "PSDKey.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::RelationKey val){switch (val){case RelationKey::EqualsTo: os << "RelationKey::EqualsTo"; break;case RelationKey::LessThan: os << "RelationKey::LessThan"; break;case RelationKey::GreaterThan: os << "RelationKey::GreaterThan"; break;case RelationKey::IsFree: os << "RelationKey::IsFree"; break;case RelationKey::InRange: os << "RelationKey::InRange"; break;default: os << "RelationKey.<invalid>"; break;}return os;}mosek::fusion::Sort::Sort(mosek::fusion::p_Sort *_impl) : _impl(_impl) { /*std::cout << "Sort() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Sort::~Sort() { delete _impl; _impl = nullptr; }mosek::fusion::p_Sort::p_Sort  (::mosek::fusion::Sort * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::Sort::argTransposeSort  ( std::shared_ptr< monty::ndarray< long long,1 > > _151,    std::shared_ptr< monty::ndarray< long long,1 > > _152,    int _153,    int _154,    int _155,    std::shared_ptr< monty::ndarray< long long,1 > > _156) { mosek::fusion::p_Sort::argTransposeSort(_151,_152,_153,_154,_155,_156); }void mosek::fusion::p_Sort::argTransposeSort(std::shared_ptr< monty::ndarray< long long,1 > > _151,std::shared_ptr< monty::ndarray< long long,1 > > _152,int _153,int _154,int _155,std::shared_ptr< monty::ndarray< long long,1 > > _156){
  _checked_ptr_1<long long> _ptr__151(_151 ? _151->raw() : nullptr, _151 ? _151->size(0) : 0);
  _checked_ptr_1<long long> _ptr__152(_152 ? _152->raw() : nullptr, _152 ? _152->size(0) : 0);
  _checked_ptr_1<long long> _ptr__156(_156 ? _156->raw() : nullptr, _156 ? _156->size(0) : 0);
  int _6695 = (int)0;
  int _6696 = safe_add( safe_mul( _153,_155 ),(int)1 );
  for (int _157 = _6695; _157 < _6696; ++_157)
  {
    {
      _ptr__152[_157] = (int)0;
    }
  }
  int _6697 = (int)0;
  int _6698 = (int)((_156)->size(0));
  for (int _158 = _6697; _158 < _6698; ++_158)
  {
    {
      ++ _ptr__152[safe_add( safe_add( safe_mul( (_ptr__156[_ptr__151[_158]] / safe_mul( _154,_155 )),_155 ),(_ptr__156[_ptr__151[_158]] % _155) ),(int)1 )];
    }
  }
  int _6699 = (int)0;
  int _6700 = safe_mul( _153,_155 );
  for (int _159 = _6699; _159 < _6700; ++_159)
  {
    {
      _ptr__152[safe_add( _159,(int)1 )] = safe_add( _ptr__152[safe_add( _159,(int)1 )],_ptr__152[_159] );
    }
  }
  std::vector<long long> _6701;
  for (int _161 = (int)0, _6702 = (int)((_151)->size(0)); _161 < _6702 ; ++_161)
  {
    _6701.push_back(_ptr__151[_161]);
  }
  auto _6703 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6701.size()),_6701.begin(),_6701.end()));
  std::shared_ptr< monty::ndarray< long long,1 > > _160 = _6703;
  _checked_ptr_1<long long> _ptr__160(_160 ? _160->raw() : nullptr,_160 ? _160->size(0) : 0);
  long long _6704 = (long long)0;
  long long _6705 = (long long)((_156)->size(0));
  for (long long _162 = _6704; _162 < _6705; ++_162)
  {
    {
      long long _163 = safe_add( safe_mul( (_ptr__156[_ptr__160[_162]] / safe_mul( _154,_155 )),_155 ),(_ptr__156[_ptr__160[_162]] % _155) );
      _ptr__151[_ptr__152[_163]] = _ptr__160[_162];
      ++ _ptr__152[_163];
    }
  }
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _164,    std::shared_ptr< monty::ndarray< long long,1 > > _165) { mosek::fusion::p_Sort::argsort(_164,_165); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _164,std::shared_ptr< monty::ndarray< long long,1 > > _165){
  _checked_ptr_1<long long> _ptr__164(_164 ? _164->raw() : nullptr, _164 ? _164->size(0) : 0);
  _checked_ptr_1<long long> _ptr__165(_165 ? _165->raw() : nullptr, _165 ? _165->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_164,_165,(long long)((int)0),(long long)((int)((_164)->size(0))),false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _166,    std::shared_ptr< monty::ndarray< int,1 > > _167) { mosek::fusion::p_Sort::argsort(_166,_167); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _166,std::shared_ptr< monty::ndarray< int,1 > > _167){
  _checked_ptr_1<long long> _ptr__166(_166 ? _166->raw() : nullptr, _166 ? _166->size(0) : 0);
  _checked_ptr_1<int> _ptr__167(_167 ? _167->raw() : nullptr, _167 ? _167->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_166,_167,(long long)((int)0),(long long)((int)((_166)->size(0))),false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _168,    std::shared_ptr< monty::ndarray< long long,1 > > _169,    std::shared_ptr< monty::ndarray< long long,1 > > _170) { mosek::fusion::p_Sort::argsort(_168,_169,_170); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _168,std::shared_ptr< monty::ndarray< long long,1 > > _169,std::shared_ptr< monty::ndarray< long long,1 > > _170){
  _checked_ptr_1<long long> _ptr__168(_168 ? _168->raw() : nullptr, _168 ? _168->size(0) : 0);
  _checked_ptr_1<long long> _ptr__169(_169 ? _169->raw() : nullptr, _169 ? _169->size(0) : 0);
  _checked_ptr_1<long long> _ptr__170(_170 ? _170->raw() : nullptr, _170 ? _170->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_168,_169,_170,(long long)((int)0),(long long)((int)((_168)->size(0))),false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _171,    std::shared_ptr< monty::ndarray< int,1 > > _172,    std::shared_ptr< monty::ndarray< int,1 > > _173) { mosek::fusion::p_Sort::argsort(_171,_172,_173); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _171,std::shared_ptr< monty::ndarray< int,1 > > _172,std::shared_ptr< monty::ndarray< int,1 > > _173){
  _checked_ptr_1<long long> _ptr__171(_171 ? _171->raw() : nullptr, _171 ? _171->size(0) : 0);
  _checked_ptr_1<int> _ptr__172(_172 ? _172->raw() : nullptr, _172 ? _172->size(0) : 0);
  _checked_ptr_1<int> _ptr__173(_173 ? _173->raw() : nullptr, _173 ? _173->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_171,_172,_173,(long long)((int)0),(long long)((int)((_171)->size(0))),false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _174,    std::shared_ptr< monty::ndarray< long long,1 > > _175,    long long _176,    long long _177) { mosek::fusion::p_Sort::argsort(_174,_175,_176,_177); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _174,std::shared_ptr< monty::ndarray< long long,1 > > _175,long long _176,long long _177){
  _checked_ptr_1<long long> _ptr__174(_174 ? _174->raw() : nullptr, _174 ? _174->size(0) : 0);
  _checked_ptr_1<long long> _ptr__175(_175 ? _175->raw() : nullptr, _175 ? _175->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_174,_175,_176,_177,false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _178,    std::shared_ptr< monty::ndarray< int,1 > > _179,    long long _180,    long long _181) { mosek::fusion::p_Sort::argsort(_178,_179,_180,_181); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _178,std::shared_ptr< monty::ndarray< int,1 > > _179,long long _180,long long _181){
  _checked_ptr_1<long long> _ptr__178(_178 ? _178->raw() : nullptr, _178 ? _178->size(0) : 0);
  _checked_ptr_1<int> _ptr__179(_179 ? _179->raw() : nullptr, _179 ? _179->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_178,_179,_180,_181,false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _182,    std::shared_ptr< monty::ndarray< long long,1 > > _183,    std::shared_ptr< monty::ndarray< long long,1 > > _184,    long long _185,    long long _186) { mosek::fusion::p_Sort::argsort(_182,_183,_184,_185,_186); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _182,std::shared_ptr< monty::ndarray< long long,1 > > _183,std::shared_ptr< monty::ndarray< long long,1 > > _184,long long _185,long long _186){
  _checked_ptr_1<long long> _ptr__182(_182 ? _182->raw() : nullptr, _182 ? _182->size(0) : 0);
  _checked_ptr_1<long long> _ptr__183(_183 ? _183->raw() : nullptr, _183 ? _183->size(0) : 0);
  _checked_ptr_1<long long> _ptr__184(_184 ? _184->raw() : nullptr, _184 ? _184->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_182,_183,_184,_185,_186,false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _187,    std::shared_ptr< monty::ndarray< int,1 > > _188,    std::shared_ptr< monty::ndarray< int,1 > > _189,    long long _190,    long long _191) { mosek::fusion::p_Sort::argsort(_187,_188,_189,_190,_191); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _187,std::shared_ptr< monty::ndarray< int,1 > > _188,std::shared_ptr< monty::ndarray< int,1 > > _189,long long _190,long long _191){
  _checked_ptr_1<long long> _ptr__187(_187 ? _187->raw() : nullptr, _187 ? _187->size(0) : 0);
  _checked_ptr_1<int> _ptr__188(_188 ? _188->raw() : nullptr, _188 ? _188->size(0) : 0);
  _checked_ptr_1<int> _ptr__189(_189 ? _189->raw() : nullptr, _189 ? _189->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_187,_188,_189,_190,_191,false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _192,    std::shared_ptr< monty::ndarray< long long,1 > > _193,    long long _194,    long long _195,    bool _196) { mosek::fusion::p_Sort::argsort(_192,_193,_194,_195,_196); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _192,std::shared_ptr< monty::ndarray< long long,1 > > _193,long long _194,long long _195,bool _196){
  _checked_ptr_1<long long> _ptr__192(_192 ? _192->raw() : nullptr, _192 ? _192->size(0) : 0);
  _checked_ptr_1<long long> _ptr__193(_193 ? _193->raw() : nullptr, _193 ? _193->size(0) : 0);
  if (((!_196) || ((_195 - _194) < (int)16)))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_192,_193,_194,_195);
    }
  }
  else if((!::mosek::fusion::p_Sort::issorted(_192,_193,_194,_195,_196)))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _197 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)4)));
      _checked_ptr_1<long long> _ptr__197(_197 ? _197->raw() : nullptr,_197 ? _197->size(0) : 0);
      int _198 = (int)2;
      ::mosek::fusion::p_Sort::getminmax(_192,_193,nullptr,_194,_195,_197);
      if (((_ptr__197[(int)1] - _ptr__197[(int)0]) < safe_mul( _198,(_195 - _194) )))
      {
        {
          ::mosek::fusion::p_Sort::argbucketsort(_192,_193,_194,_195,_ptr__197[(int)0],_ptr__197[(int)1]);
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::argsort(_192,_193,_194,_195);
        }
      }
    }
  }
  {}
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _199,    std::shared_ptr< monty::ndarray< int,1 > > _200,    long long _201,    long long _202,    bool _203) { mosek::fusion::p_Sort::argsort(_199,_200,_201,_202,_203); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _199,std::shared_ptr< monty::ndarray< int,1 > > _200,long long _201,long long _202,bool _203){
  _checked_ptr_1<long long> _ptr__199(_199 ? _199->raw() : nullptr, _199 ? _199->size(0) : 0);
  _checked_ptr_1<int> _ptr__200(_200 ? _200->raw() : nullptr, _200 ? _200->size(0) : 0);
  if (((!_203) || ((_202 - _201) < (int)16)))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_199,_200,_201,_202);
    }
  }
  else if((!::mosek::fusion::p_Sort::issorted(_199,_200,_201,_202,_203)))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _204 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)4)));
      _checked_ptr_1<int> _ptr__204(_204 ? _204->raw() : nullptr,_204 ? _204->size(0) : 0);
      int _205 = (int)2;
      ::mosek::fusion::p_Sort::getminmax(_199,_200,nullptr,_201,_202,_204);
      if (((_ptr__204[(int)1] - _ptr__204[(int)0]) < safe_mul( _205,(_202 - _201) )))
      {
        {
          ::mosek::fusion::p_Sort::argbucketsort(_199,_200,_201,_202,_ptr__204[(int)0],_ptr__204[(int)1]);
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::argsort(_199,_200,_201,_202);
        }
      }
    }
  }
  {}
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _206,    std::shared_ptr< monty::ndarray< long long,1 > > _207,    std::shared_ptr< monty::ndarray< long long,1 > > _208,    long long _209,    long long _210,    bool _211) { mosek::fusion::p_Sort::argsort(_206,_207,_208,_209,_210,_211); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _206,std::shared_ptr< monty::ndarray< long long,1 > > _207,std::shared_ptr< monty::ndarray< long long,1 > > _208,long long _209,long long _210,bool _211){
  _checked_ptr_1<long long> _ptr__206(_206 ? _206->raw() : nullptr, _206 ? _206->size(0) : 0);
  _checked_ptr_1<long long> _ptr__207(_207 ? _207->raw() : nullptr, _207 ? _207->size(0) : 0);
  _checked_ptr_1<long long> _ptr__208(_208 ? _208->raw() : nullptr, _208 ? _208->size(0) : 0);
  if (((!_211) || ((_210 - _209) < (int)16)))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_206,_207,_208,_209,_210);
    }
  }
  else if((!::mosek::fusion::p_Sort::issorted(_206,_207,_208,_209,_210,_211)))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _212 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)4)));
      _checked_ptr_1<long long> _ptr__212(_212 ? _212->raw() : nullptr,_212 ? _212->size(0) : 0);
      int _213 = (int)2;
      ::mosek::fusion::p_Sort::getminmax(_206,_207,_208,_209,_210,_212);
      if ((((_ptr__212[(int)1] - _ptr__212[(int)0]) < safe_mul( _213,(_210 - _209) )) && ((_ptr__212[(int)3] - _ptr__212[(int)2]) < safe_mul( _213,(_210 - _209) ))))
      {
        {
          ::mosek::fusion::p_Sort::argbucketsort(_206,_208,_209,_210,_ptr__212[(int)2],_ptr__212[(int)3]);
          ::mosek::fusion::p_Sort::argbucketsort(_206,_207,_209,_210,_ptr__212[(int)0],_ptr__212[(int)1]);
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::argsort(_206,_207,_208,_209,_210);
        }
      }
    }
  }
  {}
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _214,    std::shared_ptr< monty::ndarray< int,1 > > _215,    std::shared_ptr< monty::ndarray< int,1 > > _216,    long long _217,    long long _218,    bool _219) { mosek::fusion::p_Sort::argsort(_214,_215,_216,_217,_218,_219); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _214,std::shared_ptr< monty::ndarray< int,1 > > _215,std::shared_ptr< monty::ndarray< int,1 > > _216,long long _217,long long _218,bool _219){
  _checked_ptr_1<long long> _ptr__214(_214 ? _214->raw() : nullptr, _214 ? _214->size(0) : 0);
  _checked_ptr_1<int> _ptr__215(_215 ? _215->raw() : nullptr, _215 ? _215->size(0) : 0);
  _checked_ptr_1<int> _ptr__216(_216 ? _216->raw() : nullptr, _216 ? _216->size(0) : 0);
  if (((!_219) || ((_218 - _217) < (int)16)))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_214,_215,_216,_217,_218);
    }
  }
  else if((!::mosek::fusion::p_Sort::issorted(_214,_215,_216,_217,_218,_219)))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _220 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)4)));
      _checked_ptr_1<int> _ptr__220(_220 ? _220->raw() : nullptr,_220 ? _220->size(0) : 0);
      int _221 = (int)2;
      ::mosek::fusion::p_Sort::getminmax(_214,_215,_216,_217,_218,_220);
      if ((((_ptr__220[(int)1] - _ptr__220[(int)0]) < safe_mul( _221,(_218 - _217) )) && ((_ptr__220[(int)3] - _ptr__220[(int)2]) < safe_mul( _221,(_218 - _217) ))))
      {
        {
          ::mosek::fusion::p_Sort::argbucketsort(_214,_216,_217,_218,_ptr__220[(int)2],_ptr__220[(int)3]);
          ::mosek::fusion::p_Sort::argbucketsort(_214,_215,_217,_218,_ptr__220[(int)0],_ptr__220[(int)1]);
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::argsort(_214,_215,_216,_217,_218);
        }
      }
    }
  }
  {}
}
void mosek::fusion::Sort::argbucketsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _222,    std::shared_ptr< monty::ndarray< long long,1 > > _223,    long long _224,    long long _225,    long long _226,    long long _227) { mosek::fusion::p_Sort::argbucketsort(_222,_223,_224,_225,_226,_227); }void mosek::fusion::p_Sort::argbucketsort(std::shared_ptr< monty::ndarray< long long,1 > > _222,std::shared_ptr< monty::ndarray< long long,1 > > _223,long long _224,long long _225,long long _226,long long _227){
  _checked_ptr_1<long long> _ptr__222(_222 ? _222->raw() : nullptr, _222 ? _222->size(0) : 0);
  _checked_ptr_1<long long> _ptr__223(_223 ? _223->raw() : nullptr, _223 ? _223->size(0) : 0);
  ::mosek::fusion::Utils::Tools::bucketsort(_222,_224,_225,_223,_226,_227);
}
void mosek::fusion::Sort::argbucketsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _228,    std::shared_ptr< monty::ndarray< int,1 > > _229,    long long _230,    long long _231,    int _232,    int _233) { mosek::fusion::p_Sort::argbucketsort(_228,_229,_230,_231,_232,_233); }void mosek::fusion::p_Sort::argbucketsort(std::shared_ptr< monty::ndarray< long long,1 > > _228,std::shared_ptr< monty::ndarray< int,1 > > _229,long long _230,long long _231,int _232,int _233){
  _checked_ptr_1<long long> _ptr__228(_228 ? _228->raw() : nullptr, _228 ? _228->size(0) : 0);
  _checked_ptr_1<int> _ptr__229(_229 ? _229->raw() : nullptr, _229 ? _229->size(0) : 0);
  ::mosek::fusion::Utils::Tools::bucketsort(_228,_230,_231,_229,_232,_233);
}
void mosek::fusion::Sort::getminmax  ( std::shared_ptr< monty::ndarray< long long,1 > > _234,    std::shared_ptr< monty::ndarray< long long,1 > > _235,    std::shared_ptr< monty::ndarray< long long,1 > > _236,    long long _237,    long long _238,    std::shared_ptr< monty::ndarray< long long,1 > > _239) { mosek::fusion::p_Sort::getminmax(_234,_235,_236,_237,_238,_239); }void mosek::fusion::p_Sort::getminmax(std::shared_ptr< monty::ndarray< long long,1 > > _234,std::shared_ptr< monty::ndarray< long long,1 > > _235,std::shared_ptr< monty::ndarray< long long,1 > > _236,long long _237,long long _238,std::shared_ptr< monty::ndarray< long long,1 > > _239){
  _checked_ptr_1<long long> _ptr__234(_234 ? _234->raw() : nullptr, _234 ? _234->size(0) : 0);
  _checked_ptr_1<long long> _ptr__235(_235 ? _235->raw() : nullptr, _235 ? _235->size(0) : 0);
  _checked_ptr_1<long long> _ptr__236(_236 ? _236->raw() : nullptr, _236 ? _236->size(0) : 0);
  _checked_ptr_1<long long> _ptr__239(_239 ? _239->raw() : nullptr, _239 ? _239->size(0) : 0);
  _ptr__239[(int)0] = _ptr__235[_ptr__234[_237]];
  _ptr__239[(int)1] = _ptr__235[_ptr__234[_237]];
  long long _6706 = safe_add( _237,(int)1 );
  long long _6707 = _238;
  for (long long _240 = _6706; _240 < _6707; ++_240)
  {
    {
      if ((_ptr__239[(int)0] > _ptr__235[_ptr__234[_240]]))
      {
        {
          _ptr__239[(int)0] = _ptr__235[_ptr__234[_240]];
        }
      }
      {}
      if ((_ptr__239[(int)1] < _ptr__235[_ptr__234[_240]]))
      {
        {
          _ptr__239[(int)1] = _ptr__235[_ptr__234[_240]];
        }
      }
      {}
    }
  }
  if ((NULL != _236.get()))
  {
    {
      _ptr__239[(int)2] = _ptr__236[_ptr__234[_237]];
      _ptr__239[(int)3] = _ptr__236[_ptr__234[_237]];
      long long _6708 = safe_add( _237,(int)1 );
      long long _6709 = _238;
      for (long long _241 = _6708; _241 < _6709; ++_241)
      {
        {
          if ((_ptr__239[(int)2] > _ptr__236[_ptr__234[_241]]))
          {
            {
              _ptr__239[(int)2] = _ptr__236[_ptr__234[_241]];
            }
          }
          {}
          if ((_ptr__239[(int)3] < _ptr__236[_ptr__234[_241]]))
          {
            {
              _ptr__239[(int)3] = _ptr__236[_ptr__234[_241]];
            }
          }
          {}
        }
      }
    }
  }
  {}
}
void mosek::fusion::Sort::getminmax  ( std::shared_ptr< monty::ndarray< long long,1 > > _242,    std::shared_ptr< monty::ndarray< int,1 > > _243,    std::shared_ptr< monty::ndarray< int,1 > > _244,    long long _245,    long long _246,    std::shared_ptr< monty::ndarray< int,1 > > _247) { mosek::fusion::p_Sort::getminmax(_242,_243,_244,_245,_246,_247); }void mosek::fusion::p_Sort::getminmax(std::shared_ptr< monty::ndarray< long long,1 > > _242,std::shared_ptr< monty::ndarray< int,1 > > _243,std::shared_ptr< monty::ndarray< int,1 > > _244,long long _245,long long _246,std::shared_ptr< monty::ndarray< int,1 > > _247){
  _checked_ptr_1<long long> _ptr__242(_242 ? _242->raw() : nullptr, _242 ? _242->size(0) : 0);
  _checked_ptr_1<int> _ptr__243(_243 ? _243->raw() : nullptr, _243 ? _243->size(0) : 0);
  _checked_ptr_1<int> _ptr__244(_244 ? _244->raw() : nullptr, _244 ? _244->size(0) : 0);
  _checked_ptr_1<int> _ptr__247(_247 ? _247->raw() : nullptr, _247 ? _247->size(0) : 0);
  _ptr__247[(int)0] = _ptr__243[_ptr__242[_245]];
  _ptr__247[(int)1] = _ptr__243[_ptr__242[_245]];
  long long _6710 = safe_add( _245,(int)1 );
  long long _6711 = _246;
  for (long long _248 = _6710; _248 < _6711; ++_248)
  {
    {
      if ((_ptr__247[(int)0] > _ptr__243[_ptr__242[_248]]))
      {
        {
          _ptr__247[(int)0] = _ptr__243[_ptr__242[_248]];
        }
      }
      {}
      if ((_ptr__247[(int)1] < _ptr__243[_ptr__242[_248]]))
      {
        {
          _ptr__247[(int)1] = _ptr__243[_ptr__242[_248]];
        }
      }
      {}
    }
  }
  if ((NULL != _244.get()))
  {
    {
      _ptr__247[(int)2] = _ptr__244[_ptr__242[_245]];
      _ptr__247[(int)3] = _ptr__244[_ptr__242[_245]];
      long long _6712 = safe_add( _245,(int)1 );
      long long _6713 = _246;
      for (long long _249 = _6712; _249 < _6713; ++_249)
      {
        {
          if ((_ptr__247[(int)2] > _ptr__244[_ptr__242[_249]]))
          {
            {
              _ptr__247[(int)2] = _ptr__244[_ptr__242[_249]];
            }
          }
          {}
          if ((_ptr__247[(int)3] < _ptr__244[_ptr__242[_249]]))
          {
            {
              _ptr__247[(int)3] = _ptr__244[_ptr__242[_249]];
            }
          }
          {}
        }
      }
    }
  }
  {}
}
bool mosek::fusion::Sort::issorted  ( std::shared_ptr< monty::ndarray< long long,1 > > _250,    std::shared_ptr< monty::ndarray< long long,1 > > _251,    long long _252,    long long _253,    bool _254) { return mosek::fusion::p_Sort::issorted(_250,_251,_252,_253,_254); }bool mosek::fusion::p_Sort::issorted(std::shared_ptr< monty::ndarray< long long,1 > > _250,std::shared_ptr< monty::ndarray< long long,1 > > _251,long long _252,long long _253,bool _254){
  _checked_ptr_1<long long> _ptr__250(_250 ? _250->raw() : nullptr, _250 ? _250->size(0) : 0);
  _checked_ptr_1<long long> _ptr__251(_251 ? _251->raw() : nullptr, _251 ? _251->size(0) : 0);
  long long _6714 = _252;
  long long _6715 = (_253 - (int)1);
  for (long long _255 = _6714; _255 < _6715; ++_255)
  {
    {
      if ((_ptr__251[_ptr__250[_255]] > _ptr__251[_ptr__250[safe_add( _255,(int)1 )]]))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
bool mosek::fusion::Sort::issorted  ( std::shared_ptr< monty::ndarray< long long,1 > > _256,    std::shared_ptr< monty::ndarray< int,1 > > _257,    long long _258,    long long _259,    bool _260) { return mosek::fusion::p_Sort::issorted(_256,_257,_258,_259,_260); }bool mosek::fusion::p_Sort::issorted(std::shared_ptr< monty::ndarray< long long,1 > > _256,std::shared_ptr< monty::ndarray< int,1 > > _257,long long _258,long long _259,bool _260){
  _checked_ptr_1<long long> _ptr__256(_256 ? _256->raw() : nullptr, _256 ? _256->size(0) : 0);
  _checked_ptr_1<int> _ptr__257(_257 ? _257->raw() : nullptr, _257 ? _257->size(0) : 0);
  long long _6716 = _258;
  long long _6717 = (_259 - (int)1);
  for (long long _261 = _6716; _261 < _6717; ++_261)
  {
    {
      if ((_ptr__257[_ptr__256[_261]] > _ptr__257[_ptr__256[safe_add( _261,(int)1 )]]))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
bool mosek::fusion::Sort::issorted  ( std::shared_ptr< monty::ndarray< long long,1 > > _262,    std::shared_ptr< monty::ndarray< long long,1 > > _263,    std::shared_ptr< monty::ndarray< long long,1 > > _264,    long long _265,    long long _266,    bool _267) { return mosek::fusion::p_Sort::issorted(_262,_263,_264,_265,_266,_267); }bool mosek::fusion::p_Sort::issorted(std::shared_ptr< monty::ndarray< long long,1 > > _262,std::shared_ptr< monty::ndarray< long long,1 > > _263,std::shared_ptr< monty::ndarray< long long,1 > > _264,long long _265,long long _266,bool _267){
  _checked_ptr_1<long long> _ptr__262(_262 ? _262->raw() : nullptr, _262 ? _262->size(0) : 0);
  _checked_ptr_1<long long> _ptr__263(_263 ? _263->raw() : nullptr, _263 ? _263->size(0) : 0);
  _checked_ptr_1<long long> _ptr__264(_264 ? _264->raw() : nullptr, _264 ? _264->size(0) : 0);
  long long _6718 = _265;
  long long _6719 = (_266 - (int)1);
  for (long long _268 = _6718; _268 < _6719; ++_268)
  {
    {
      if (((_ptr__263[_ptr__262[_268]] > _ptr__263[_ptr__262[safe_add( _268,(int)1 )]]) || ((_ptr__263[_ptr__262[safe_add( _268,(int)1 )]] == _ptr__263[_ptr__262[_268]]) && (_ptr__264[_ptr__262[_268]] > _ptr__264[_ptr__262[safe_add( _268,(int)1 )]]))))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
bool mosek::fusion::Sort::issorted  ( std::shared_ptr< monty::ndarray< long long,1 > > _269,    std::shared_ptr< monty::ndarray< int,1 > > _270,    std::shared_ptr< monty::ndarray< int,1 > > _271,    long long _272,    long long _273,    bool _274) { return mosek::fusion::p_Sort::issorted(_269,_270,_271,_272,_273,_274); }bool mosek::fusion::p_Sort::issorted(std::shared_ptr< monty::ndarray< long long,1 > > _269,std::shared_ptr< monty::ndarray< int,1 > > _270,std::shared_ptr< monty::ndarray< int,1 > > _271,long long _272,long long _273,bool _274){
  _checked_ptr_1<long long> _ptr__269(_269 ? _269->raw() : nullptr, _269 ? _269->size(0) : 0);
  _checked_ptr_1<int> _ptr__270(_270 ? _270->raw() : nullptr, _270 ? _270->size(0) : 0);
  _checked_ptr_1<int> _ptr__271(_271 ? _271->raw() : nullptr, _271 ? _271->size(0) : 0);
  long long _6720 = _272;
  long long _6721 = (_273 - (int)1);
  for (long long _275 = _6720; _275 < _6721; ++_275)
  {
    {
      if (((_ptr__270[_ptr__269[_275]] > _ptr__270[_ptr__269[safe_add( _275,(int)1 )]]) || ((_ptr__270[_ptr__269[_275]] == _ptr__270[_ptr__269[safe_add( _275,(int)1 )]]) && (_ptr__271[_ptr__269[_275]] > _ptr__271[_ptr__269[safe_add( _275,(int)1 )]]))))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
void mosek::fusion::p_Sort::destroy(){}void mosek::fusion::Sort::destroy() { mosek::fusion::p_Sort::_get_impl(this)->destroy(); }mosek::fusion::IndexCounter::IndexCounter(mosek::fusion::p_IndexCounter *_impl) : _impl(_impl) { /*std::cout << "IndexCounter() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::IndexCounter::~IndexCounter() { delete _impl; _impl = nullptr; }mosek::fusion::p_IndexCounter::p_IndexCounter  (::mosek::fusion::IndexCounter * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::IndexCounter::t mosek::fusion::p_IndexCounter::_new_IndexCounter  (std::shared_ptr< monty::ndarray< int,1 > > _276){ return new mosek::fusion::IndexCounter(_276); }mosek::fusion::IndexCounter::IndexCounter  (std::shared_ptr< monty::ndarray< int,1 > > _276) :    IndexCounter(new mosek::fusion::p_IndexCounter(this)){ mosek::fusion::p_IndexCounter::_get_impl(this)->_initialize(_276); }void mosek::fusion::p_IndexCounter::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _276){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__276(_276 ? _276->raw() : nullptr, _276 ? _276->size(0) : 0);
    n = (int)((_276)->size(0));
    ii = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(n)));
    st = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(n)));
    start = (long long)0;
    strides = ::mosek::fusion::p_Set::strides(_276);
    std::vector<int> _6722;
    for (int _277 = (int)0, _6723 = (int)((_276)->size(0)); _277 < _6723 ; ++_277)
    {
      _6722.push_back(_ptr__276[_277]);
    }
    auto _6724 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6722.size()),_6722.begin(),_6722.end()));
    dims = _6724;
  }
}mosek::fusion::IndexCounter::t mosek::fusion::p_IndexCounter::_new_IndexCounter  (long long _278,    std::shared_ptr< monty::ndarray< int,1 > > _279,    std::shared_ptr< monty::ndarray< int,1 > > _280){ return new mosek::fusion::IndexCounter(_278,_279,_280); }mosek::fusion::IndexCounter::IndexCounter  (long long _278,    std::shared_ptr< monty::ndarray< int,1 > > _279,    std::shared_ptr< monty::ndarray< int,1 > > _280) :    IndexCounter(new mosek::fusion::p_IndexCounter(this)){ mosek::fusion::p_IndexCounter::_get_impl(this)->_initialize(_278,_279,_280); }void mosek::fusion::p_IndexCounter::_initialize  (long long _278,    std::shared_ptr< monty::ndarray< int,1 > > _279,    std::shared_ptr< monty::ndarray< int,1 > > _280){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__279(_279 ? _279->raw() : nullptr, _279 ? _279->size(0) : 0);
    _checked_ptr_1<int> _ptr__280(_280 ? _280->raw() : nullptr, _280 ? _280->size(0) : 0);
    int _281 = (int)((_280)->size(0));
    n = (int)((_279)->size(0));
    ii = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(n)));
    st = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(n)));
    int _6725 = (int)0;
    int _6726 = n;
    for (int _282 = _6725; _282 < _6726; ++_282)
    {
      {
        ((*st)(_282)) = _278;
      }
    }
    strides = ::mosek::fusion::p_Set::strides(_280);
    dims = _279;
    start = _278;
  }
}mosek::fusion::IndexCounter::t mosek::fusion::p_IndexCounter::_new_IndexCounter  (long long _283,    std::shared_ptr< monty::ndarray< int,1 > > _284,    std::shared_ptr< monty::ndarray< long long,1 > > _285){ return new mosek::fusion::IndexCounter(_283,_284,_285); }mosek::fusion::IndexCounter::IndexCounter  (long long _283,    std::shared_ptr< monty::ndarray< int,1 > > _284,    std::shared_ptr< monty::ndarray< long long,1 > > _285) :    IndexCounter(new mosek::fusion::p_IndexCounter(this)){ mosek::fusion::p_IndexCounter::_get_impl(this)->_initialize(_283,_284,_285); }void mosek::fusion::p_IndexCounter::_initialize  (long long _283,    std::shared_ptr< monty::ndarray< int,1 > > _284,    std::shared_ptr< monty::ndarray< long long,1 > > _285){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__284(_284 ? _284->raw() : nullptr, _284 ? _284->size(0) : 0);
    _checked_ptr_1<long long> _ptr__285(_285 ? _285->raw() : nullptr, _285 ? _285->size(0) : 0);
    n = (int)((_284)->size(0));
    ii = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(n)));
    st = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(n)));
    int _6727 = (int)0;
    int _6728 = n;
    for (int _286 = _6727; _286 < _6728; ++_286)
    {
      {
        ((*st)(_286)) = _283;
      }
    }
    strides = _285;
    dims = _284;
    start = _283;
  }
}bool mosek::fusion::IndexCounter :: atEnd() { return mosek::fusion::p_IndexCounter::_get_impl(this)->atEnd(); }bool mosek::fusion::p_IndexCounter::atEnd(){
  return (((*ii)((n - (int)1))) >= ((*dims)((n - (int)1))));
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::IndexCounter :: getIndex() { return mosek::fusion::p_IndexCounter::_get_impl(this)->getIndex(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_IndexCounter::getIndex(){
  return ii;
}
long long mosek::fusion::IndexCounter :: next() { return mosek::fusion::p_IndexCounter::_get_impl(this)->next(); }long long mosek::fusion::p_IndexCounter::next(){
  long long _287 = _pubthis->get();
  _pubthis->inc();
  return _287;
}
long long mosek::fusion::IndexCounter :: get() { return mosek::fusion::p_IndexCounter::_get_impl(this)->get(); }long long mosek::fusion::p_IndexCounter::get(){
  return ((*st)((int)0));
}
void mosek::fusion::IndexCounter :: inc() { mosek::fusion::p_IndexCounter::_get_impl(this)->inc(); }void mosek::fusion::p_IndexCounter::inc(){
  ++ ((*ii)((int)0));
  ((*st)((int)0)) = safe_add( ((*st)((int)0)),((*strides)((n - (int)1))) );
  int _288;
  {
    _288 = (int)0;
    for(;((_288 < (n - (int)1)) && (((*ii)(_288)) == ((*dims)(((n - _288) - (int)1)))));++ _288)
    {
      {
        ((*ii)(_288)) = (int)0;
        ++ ((*ii)(safe_add( _288,(int)1 )));
        ((*st)(safe_add( _288,(int)1 ))) = safe_add( ((*st)(safe_add( _288,(int)1 ))),((*strides)(((n - _288) - (int)2))) );
      }
    }
  }
  int _6729 = (int)0;
  int _6730 = _288;
  for (int _289 = _6729; _289 < _6730; ++_289)
  {
    {
      ((*st)(_289)) = ((*st)(_288));
    }
  }
}
void mosek::fusion::IndexCounter :: reset() { mosek::fusion::p_IndexCounter::_get_impl(this)->reset(); }void mosek::fusion::p_IndexCounter::reset(){
  st = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(n)));
  int _6731 = (int)0;
  int _6732 = n;
  for (int _290 = _6731; _290 < _6732; ++_290)
  {
    {
      ((*st)(_290)) = start;
    }
  }
}
void mosek::fusion::p_IndexCounter::destroy(){dims.reset();strides.reset();st.reset();ii.reset();}void mosek::fusion::IndexCounter::destroy() { mosek::fusion::p_IndexCounter::_get_impl(this)->destroy(); }mosek::fusion::CommonTools::CommonTools(mosek::fusion::p_CommonTools *_impl) : _impl(_impl) { /*std::cout << "CommonTools() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::CommonTools::~CommonTools() { delete _impl; _impl = nullptr; }mosek::fusion::p_CommonTools::p_CommonTools  (::mosek::fusion::CommonTools * _pubthis) :     _pubthis(_pubthis){}std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::CommonTools::resize  ( std::shared_ptr< monty::ndarray< long long,1 > > _291,    int _292) { return mosek::fusion::p_CommonTools::resize(_291,_292); }std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_CommonTools::resize(std::shared_ptr< monty::ndarray< long long,1 > > _291,int _292){
  _checked_ptr_1<long long> _ptr__291(_291 ? _291->raw() : nullptr, _291 ? _291->size(0) : 0);
  if ((_292 == (int)((_291)->size(0))))
  {
    {
      return _291;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _293 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_292)));
      _checked_ptr_1<long long> _ptr__293(_293 ? _293->raw() : nullptr,_293 ? _293->size(0) : 0);
      if ((_292 > (int)((_291)->size(0))))
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_291,(int)0,_293,(int)0,(int)((_291)->size(0)));
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_291,(int)0,_293,(int)0,_292);
        }
      }
      return _293;
    }
  }
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::CommonTools::resize  ( std::shared_ptr< monty::ndarray< int,1 > > _294,    int _295) { return mosek::fusion::p_CommonTools::resize(_294,_295); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_CommonTools::resize(std::shared_ptr< monty::ndarray< int,1 > > _294,int _295){
  _checked_ptr_1<int> _ptr__294(_294 ? _294->raw() : nullptr, _294 ? _294->size(0) : 0);
  if ((_295 == (int)((_294)->size(0))))
  {
    {
      return _294;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _296 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_295)));
      _checked_ptr_1<int> _ptr__296(_296 ? _296->raw() : nullptr,_296 ? _296->size(0) : 0);
      if ((_295 > (int)((_294)->size(0))))
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_294,(int)0,_296,(int)0,(int)((_294)->size(0)));
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_294,(int)0,_296,(int)0,_295);
        }
      }
      return _296;
    }
  }
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::CommonTools::resize  ( std::shared_ptr< monty::ndarray< double,1 > > _297,    int _298) { return mosek::fusion::p_CommonTools::resize(_297,_298); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_CommonTools::resize(std::shared_ptr< monty::ndarray< double,1 > > _297,int _298){
  _checked_ptr_1<double> _ptr__297(_297 ? _297->raw() : nullptr, _297 ? _297->size(0) : 0);
  if ((_298 == (int)((_297)->size(0))))
  {
    {
      return _297;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _299 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_298)));
      _checked_ptr_1<double> _ptr__299(_299 ? _299->raw() : nullptr,_299 ? _299->size(0) : 0);
      if ((_298 > (int)((_297)->size(0))))
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_297,(int)0,_299,(int)0,(int)((_297)->size(0)));
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_297,(int)0,_299,(int)0,_298);
        }
      }
      return _299;
    }
  }
}
int mosek::fusion::CommonTools::binarySearch  ( std::shared_ptr< monty::ndarray< int,1 > > _300,    int _301) { return mosek::fusion::p_CommonTools::binarySearch(_300,_301); }int mosek::fusion::p_CommonTools::binarySearch(std::shared_ptr< monty::ndarray< int,1 > > _300,int _301){
  _checked_ptr_1<int> _ptr__300(_300 ? _300->raw() : nullptr, _300 ? _300->size(0) : 0);
  int _302 = (int)0;
  int _303 = (int)((_300)->size(0));
  if ((_ptr__300[_302] == _301))
  {
    {
      return _302;
    }
  }
  else if((_ptr__300[(_303 - (int)1)] == _301))
  {
    {
      return (_303 - (int)1);
    }
  }
  {}
  while ( (_302 < (_303 - (int)1)) )
  {
    {
      int _304 = ((_303 - _302) / (int)2);
      if ((_301 < _ptr__300[_304]))
      {
        {
          _302 = safe_add( _304,(int)1 );
        }
      }
      else if((_301 > _ptr__300[_304]))
      {
        {
          _303 = _304;
        }
      }
      else
      {
        {
          return _304;
        }
      }
    }
  }
  return (-(int)1);
}
int mosek::fusion::CommonTools::binarySearch  ( std::shared_ptr< monty::ndarray< long long,1 > > _305,    long long _306) { return mosek::fusion::p_CommonTools::binarySearch(_305,_306); }int mosek::fusion::p_CommonTools::binarySearch(std::shared_ptr< monty::ndarray< long long,1 > > _305,long long _306){
  _checked_ptr_1<long long> _ptr__305(_305 ? _305->raw() : nullptr, _305 ? _305->size(0) : 0);
  int _307 = ::mosek::fusion::p_CommonTools::binarySearchL(_305,_306);
  if (((_307 < (int)((_305)->size(0))) && (_ptr__305[_307] == _306)))
  {
    {
      return _307;
    }
  }
  else
  {
    {
      return (-(int)1);
    }
  }
}
int mosek::fusion::CommonTools::binarySearchR  ( std::shared_ptr< monty::ndarray< long long,1 > > _308,    long long _309) { return mosek::fusion::p_CommonTools::binarySearchR(_308,_309); }int mosek::fusion::p_CommonTools::binarySearchR(std::shared_ptr< monty::ndarray< long long,1 > > _308,long long _309){
  _checked_ptr_1<long long> _ptr__308(_308 ? _308->raw() : nullptr, _308 ? _308->size(0) : 0);
  int _310 = (int)0;
  int _311 = (int)((_308)->size(0));
  if ((_ptr__308[_310] > _309))
  {
    {
      return _310;
    }
  }
  {}
  while ( (_310 < (_311 - (int)1)) )
  {
    {
      int _312 = (safe_add( _311,_310 ) / (int)2);
      if ((_309 >= _ptr__308[_312]))
      {
        {
          _310 = _312;
        }
      }
      else
      {
        {
          _311 = _312;
        }
      }
    }
  }
  return _311;
}
int mosek::fusion::CommonTools::binarySearchL  ( std::shared_ptr< monty::ndarray< long long,1 > > _313,    long long _314) { return mosek::fusion::p_CommonTools::binarySearchL(_313,_314); }int mosek::fusion::p_CommonTools::binarySearchL(std::shared_ptr< monty::ndarray< long long,1 > > _313,long long _314){
  _checked_ptr_1<long long> _ptr__313(_313 ? _313->raw() : nullptr, _313 ? _313->size(0) : 0);
  int _315 = (int)0;
  int _316 = (int)((_313)->size(0));
  if ((_314 <= _ptr__313[_315]))
  {
    {
      return _315;
    }
  }
  {}
  while ( (_315 < (_316 - (int)1)) )
  {
    {
      int _317 = (safe_add( _316,_315 ) / (int)2);
      if ((_ptr__313[_317] < _314))
      {
        {
          _315 = _317;
        }
      }
      else
      {
        {
          _316 = _317;
        }
      }
    }
  }
  return _316;
}
void mosek::fusion::CommonTools::ndIncr  ( std::shared_ptr< monty::ndarray< int,1 > > _318,    std::shared_ptr< monty::ndarray< int,1 > > _319,    std::shared_ptr< monty::ndarray< int,1 > > _320) { mosek::fusion::p_CommonTools::ndIncr(_318,_319,_320); }void mosek::fusion::p_CommonTools::ndIncr(std::shared_ptr< monty::ndarray< int,1 > > _318,std::shared_ptr< monty::ndarray< int,1 > > _319,std::shared_ptr< monty::ndarray< int,1 > > _320){
  _checked_ptr_1<int> _ptr__318(_318 ? _318->raw() : nullptr, _318 ? _318->size(0) : 0);
  _checked_ptr_1<int> _ptr__319(_319 ? _319->raw() : nullptr, _319 ? _319->size(0) : 0);
  _checked_ptr_1<int> _ptr__320(_320 ? _320->raw() : nullptr, _320 ? _320->size(0) : 0);
  int _321 = ((int)((_318)->size(0)) - (int)1);
  ++ _ptr__318[_321];
  while ( ((_321 > (int)0) && (_ptr__318[_321] >= _ptr__320[_321])) )
  {
    {
      _ptr__318[_321] = _ptr__319[_321];
      ++ _ptr__318[(_321 - (int)1)];
    }
  }
}
void mosek::fusion::CommonTools::transposeTriplets  ( std::shared_ptr< monty::ndarray< int,1 > > _322,    std::shared_ptr< monty::ndarray< int,1 > > _323,    std::shared_ptr< monty::ndarray< double,1 > > _324,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > _325,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > _326,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _327,    long long _328,    int _329,    int _330) { mosek::fusion::p_CommonTools::transposeTriplets(_322,_323,_324,_325,_326,_327,_328,_329,_330); }void mosek::fusion::p_CommonTools::transposeTriplets(std::shared_ptr< monty::ndarray< int,1 > > _322,std::shared_ptr< monty::ndarray< int,1 > > _323,std::shared_ptr< monty::ndarray< double,1 > > _324,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > _325,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > _326,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _327,long long _328,int _329,int _330){
  _checked_ptr_1<int> _ptr__322(_322 ? _322->raw() : nullptr, _322 ? _322->size(0) : 0);
  _checked_ptr_1<int> _ptr__323(_323 ? _323->raw() : nullptr, _323 ? _323->size(0) : 0);
  _checked_ptr_1<double> _ptr__324(_324 ? _324->raw() : nullptr, _324 ? _324->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _331 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _329,(int)2 ))));
  _checked_ptr_1<long long> _ptr__331(_331 ? _331->raw() : nullptr,_331 ? _331->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _332 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _330,(int)2 ))));
  _checked_ptr_1<long long> _ptr__332(_332 ? _332->raw() : nullptr,_332 ? _332->size(0) : 0);
  {
    long long _333 = (long long)0;
    for(;(_333 < _328);++ _333)
    {
      {
        _ptr__332[safe_add( _ptr__323[_333],(int)2 )] = safe_add( _ptr__332[safe_add( _ptr__323[_333],(int)2 )],(int)1 );
        _ptr__331[safe_add( _ptr__322[_333],(int)2 )] = safe_add( _ptr__331[safe_add( _ptr__322[_333],(int)2 )],(int)1 );
      }
    }
  }
  {
    int _334 = (int)1;
    for(;(_334 < _329);++ _334)
    {
      {
        _ptr__331[safe_add( _334,(int)1 )] = safe_add( _ptr__331[safe_add( _334,(int)1 )],_ptr__331[_334] );
      }
    }
  }
  {
    int _335 = (int)1;
    for(;(_335 < _330);++ _335)
    {
      {
        _ptr__332[safe_add( _335,(int)1 )] = safe_add( _ptr__332[safe_add( _335,(int)1 )],_ptr__332[_335] );
      }
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _336 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_328)));
  _checked_ptr_1<long long> _ptr__336(_336 ? _336->raw() : nullptr,_336 ? _336->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _337 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_328)));
  _checked_ptr_1<long long> _ptr__337(_337 ? _337->raw() : nullptr,_337 ? _337->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _338 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_328)));
  _checked_ptr_1<double> _ptr__338(_338 ? _338->raw() : nullptr,_338 ? _338->size(0) : 0);
  int _6733 = (int)0;
  int _6734 = _329;
  for (int _339 = _6733; _339 < _6734; ++_339)
  {
    {
      {
        long long _340 = _ptr__331[_339];
        for(;(_340 < _ptr__331[safe_add( _339,(int)1 )]);++ _340)
        {
          {
            int _341 = _ptr__323[_340];
            long long _342 = _ptr__332[_341];
            _ptr__336[_342] = _339;
            _ptr__337[_342] = _341;
            _ptr__338[_342] = _ptr__324[_340];
            _ptr__332[_341] = safe_add( _342,(int)1 );
          }
        }
      }
    }
  }
  ((*_325)((int)0)) = _337;
  ((*_326)((int)0)) = _336;
  ((*_327)((int)0)) = _338;
}
void mosek::fusion::CommonTools::transposeTriplets  ( std::shared_ptr< monty::ndarray< int,1 > > _343,    std::shared_ptr< monty::ndarray< int,1 > > _344,    std::shared_ptr< monty::ndarray< double,1 > > _345,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _346,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _347,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _348,    long long _349,    int _350,    int _351) { mosek::fusion::p_CommonTools::transposeTriplets(_343,_344,_345,_346,_347,_348,_349,_350,_351); }void mosek::fusion::p_CommonTools::transposeTriplets(std::shared_ptr< monty::ndarray< int,1 > > _343,std::shared_ptr< monty::ndarray< int,1 > > _344,std::shared_ptr< monty::ndarray< double,1 > > _345,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _346,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _347,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _348,long long _349,int _350,int _351){
  _checked_ptr_1<int> _ptr__343(_343 ? _343->raw() : nullptr, _343 ? _343->size(0) : 0);
  _checked_ptr_1<int> _ptr__344(_344 ? _344->raw() : nullptr, _344 ? _344->size(0) : 0);
  _checked_ptr_1<double> _ptr__345(_345 ? _345->raw() : nullptr, _345 ? _345->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _352 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _350,(int)2 ))));
  _checked_ptr_1<long long> _ptr__352(_352 ? _352->raw() : nullptr,_352 ? _352->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _353 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _351,(int)2 ))));
  _checked_ptr_1<long long> _ptr__353(_353 ? _353->raw() : nullptr,_353 ? _353->size(0) : 0);
  {
    long long _354 = (long long)0;
    for(;(_354 < _349);++ _354)
    {
      {
        _ptr__353[safe_add( _ptr__344[_354],(int)2 )] = safe_add( _ptr__353[safe_add( _ptr__344[_354],(int)2 )],(int)1 );
        _ptr__352[safe_add( _ptr__343[_354],(int)2 )] = safe_add( _ptr__352[safe_add( _ptr__343[_354],(int)2 )],(int)1 );
      }
    }
  }
  {
    int _355 = (int)1;
    for(;(_355 < _350);++ _355)
    {
      {
        _ptr__352[safe_add( _355,(int)1 )] = safe_add( _ptr__352[safe_add( _355,(int)1 )],_ptr__352[_355] );
      }
    }
  }
  {
    int _356 = (int)1;
    for(;(_356 < _351);++ _356)
    {
      {
        _ptr__353[safe_add( _356,(int)1 )] = safe_add( _ptr__353[safe_add( _356,(int)1 )],_ptr__353[_356] );
      }
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _357 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_349)));
  _checked_ptr_1<int> _ptr__357(_357 ? _357->raw() : nullptr,_357 ? _357->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _358 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_349)));
  _checked_ptr_1<int> _ptr__358(_358 ? _358->raw() : nullptr,_358 ? _358->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _359 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_349)));
  _checked_ptr_1<double> _ptr__359(_359 ? _359->raw() : nullptr,_359 ? _359->size(0) : 0);
  {
    int _360 = (int)0;
    for(;(_360 < _350);++ _360)
    {
      {
        long long _6735 = _ptr__352[_360];
        long long _6736 = _ptr__352[safe_add( _360,(int)1 )];
        for (long long _361 = _6735; _361 < _6736; ++_361)
        {
          {
            int _362 = _ptr__344[_361];
            long long _363 = _ptr__353[_362];
            _ptr__357[_363] = _360;
            _ptr__358[_363] = _362;
            _ptr__359[_363] = _ptr__345[_361];
            _ptr__353[_362] = safe_add( _363,(int)1 );
          }
        }
      }
    }
  }
  ((*_346)((int)0)) = _358;
  ((*_347)((int)0)) = _357;
  ((*_348)((int)0)) = _359;
}
void mosek::fusion::CommonTools::tripletSort  ( std::shared_ptr< monty::ndarray< int,1 > > _364,    std::shared_ptr< monty::ndarray< int,1 > > _365,    std::shared_ptr< monty::ndarray< double,1 > > _366,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _367,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _368,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _369,    long long _370,    int _371,    int _372) { mosek::fusion::p_CommonTools::tripletSort(_364,_365,_366,_367,_368,_369,_370,_371,_372); }void mosek::fusion::p_CommonTools::tripletSort(std::shared_ptr< monty::ndarray< int,1 > > _364,std::shared_ptr< monty::ndarray< int,1 > > _365,std::shared_ptr< monty::ndarray< double,1 > > _366,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _367,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _368,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _369,long long _370,int _371,int _372){
  _checked_ptr_1<int> _ptr__364(_364 ? _364->raw() : nullptr, _364 ? _364->size(0) : 0);
  _checked_ptr_1<int> _ptr__365(_365 ? _365->raw() : nullptr, _365 ? _365->size(0) : 0);
  _checked_ptr_1<double> _ptr__366(_366 ? _366->raw() : nullptr, _366 ? _366->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _373 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_370)));
  _checked_ptr_1<int> _ptr__373(_373 ? _373->raw() : nullptr,_373 ? _373->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _374 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _372,(int)2 ))));
  _checked_ptr_1<long long> _ptr__374(_374 ? _374->raw() : nullptr,_374 ? _374->size(0) : 0);
  long long _6737 = (long long)0;
  long long _6738 = _370;
  for (long long _375 = _6737; _375 < _6738; ++_375)
  {
    {
      _ptr__374[safe_add( _ptr__365[_375],(int)2 )] = safe_add( _ptr__374[safe_add( _ptr__365[_375],(int)2 )],(int)1 );
    }
  }
  int _6739 = (int)1;
  int _6740 = _372;
  for (int _376 = _6739; _376 < _6740; ++_376)
  {
    {
      _ptr__374[safe_add( _376,(int)1 )] = safe_add( _ptr__374[safe_add( _376,(int)1 )],_ptr__374[_376] );
    }
  }
  int _6741 = (int)0;
  int _6742 = (int)_370;
  for (int _377 = _6741; _377 < _6742; ++_377)
  {
    {
      int _378 = _ptr__365[_377];
      _ptr__373[_ptr__374[safe_add( _378,(int)1 )]] = _377;
      _ptr__374[safe_add( _378,(int)1 )] = safe_add( _ptr__374[safe_add( _378,(int)1 )],(int)1 );
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _379 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _371,(int)2 ))));
  _checked_ptr_1<long long> _ptr__379(_379 ? _379->raw() : nullptr,_379 ? _379->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _380 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_370)));
  _checked_ptr_1<int> _ptr__380(_380 ? _380->raw() : nullptr,_380 ? _380->size(0) : 0);
  {
    int _381 = (int)0;
    for(;(_381 < _370);++ _381)
    {
      {
        _ptr__379[safe_add( _ptr__364[_381],(int)2 )] = safe_add( _ptr__379[safe_add( _ptr__364[_381],(int)2 )],(int)1 );
      }
    }
  }
  {
    int _382 = (int)1;
    for(;(_382 < _371);++ _382)
    {
      {
        _ptr__379[safe_add( _382,(int)1 )] = safe_add( _ptr__379[safe_add( _382,(int)1 )],_ptr__379[_382] );
      }
    }
  }
  {
    int _383 = (int)0;
    for(;(_383 < _372);++ _383)
    {
      {
        {
          long long _384 = _ptr__374[_383];
          for(;(_384 < _ptr__374[safe_add( _383,(int)1 )]);++ _384)
          {
            {
              int _385 = _ptr__364[_ptr__373[_384]];
              _ptr__380[_ptr__379[safe_add( _385,(int)1 )]] = _ptr__373[_384];
              _ptr__379[safe_add( _385,(int)1 )] = safe_add( _ptr__379[safe_add( _385,(int)1 )],(int)1 );
            }
          }
        }
      }
    }
  }
  int _386 = (int)1;
  {
    int _387 = _ptr__364[_ptr__380[(int)0]];
    int _388 = _ptr__365[_ptr__380[(int)0]];
    {
      int _389 = (int)1;
      for(;(_389 < _370);++ _389)
      {
        {
          int _390 = _ptr__380[_389];
          if (((_387 != _ptr__364[_390]) || (_388 != _ptr__365[_390])))
          {
            {
              _387 = _ptr__364[_390];
              _388 = _ptr__365[_390];
              ++ _386;
            }
          }
          {}
        }
      }
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _391 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_386)));
  _checked_ptr_1<int> _ptr__391(_391 ? _391->raw() : nullptr,_391 ? _391->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _392 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_386)));
  _checked_ptr_1<int> _ptr__392(_392 ? _392->raw() : nullptr,_392 ? _392->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _393 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_386)));
  _checked_ptr_1<double> _ptr__393(_393 ? _393->raw() : nullptr,_393 ? _393->size(0) : 0);
  {
    int _394 = _ptr__380[(int)0];
    _ptr__391[(int)0] = _ptr__364[_394];
    _ptr__392[(int)0] = _ptr__365[_394];
    _ptr__393[(int)0] = _ptr__366[_394];
  }
  int _395 = (int)1;
  int _6743 = (int)1;
  long long _6744 = _370;
  for (long long _396 = _6743; _396 < _6744; ++_396)
  {
    {
      int _397 = _ptr__380[_396];
      if (((_ptr__391[(_395 - (int)1)] == _ptr__364[_397]) && (_ptr__392[(_395 - (int)1)] == _ptr__365[_397])))
      {
        {
          _ptr__393[(_395 - (int)1)] = (_ptr__393[(_395 - (int)1)] + _ptr__366[_397]);
        }
      }
      else
      {
        {
          _ptr__391[_395] = _ptr__364[_397];
          _ptr__392[_395] = _ptr__365[_397];
          _ptr__393[_395] = _ptr__366[_397];
          ++ _395;
        }
      }
    }
  }
  ((*_367)((int)0)) = _391;
  ((*_368)((int)0)) = _392;
  ((*_369)((int)0)) = _393;
}
void mosek::fusion::CommonTools::argMSort  ( std::shared_ptr< monty::ndarray< int,1 > > _398,    std::shared_ptr< monty::ndarray< int,1 > > _399) { mosek::fusion::p_CommonTools::argMSort(_398,_399); }void mosek::fusion::p_CommonTools::argMSort(std::shared_ptr< monty::ndarray< int,1 > > _398,std::shared_ptr< monty::ndarray< int,1 > > _399){
  _checked_ptr_1<int> _ptr__398(_398 ? _398->raw() : nullptr, _398 ? _398->size(0) : 0);
  _checked_ptr_1<int> _ptr__399(_399 ? _399->raw() : nullptr, _399 ? _399->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _400 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_398)->size(0)))));
  _checked_ptr_1<int> _ptr__400(_400 ? _400->raw() : nullptr,_400 ? _400->size(0) : 0);
  bool _401 = false;
  {
    int _402 = (int)1;
    for(;(_402 < (int)((_398)->size(0)));_402 *= (int)2)
    {
      {
        _401 = (!_401);
        int _6745 = (int)0;
        int _6746 = (int)((_398)->size(0));
        int _6747 = safe_mul( _402,(int)2 );
        for (int _403 = _6745; _403 < _6746; _403 += _6747)
        {
          {
            if (_401)
            {
              {
                ::mosek::fusion::p_CommonTools::mergeInto(_398,_400,_399,_403,safe_add( _403,_402 ),safe_add( _403,safe_mul( (int)2,_402 ) ));
              }
            }
            else
            {
              {
                ::mosek::fusion::p_CommonTools::mergeInto(_400,_398,_399,_403,safe_add( _403,_402 ),safe_add( _403,safe_mul( (int)2,_402 ) ));
              }
            }
          }
        }
      }
    }
  }
  if (_401)
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(_400,(int)0,_398,(int)0,(int)((_398)->size(0)));
    }
  }
  {}
}
void mosek::fusion::p_CommonTools::mergeInto(std::shared_ptr< monty::ndarray< int,1 > > _404,std::shared_ptr< monty::ndarray< int,1 > > _405,std::shared_ptr< monty::ndarray< int,1 > > _406,int _407,int _408,int _409){
  _checked_ptr_1<int> _ptr__404(_404 ? _404->raw() : nullptr, _404 ? _404->size(0) : 0);
  _checked_ptr_1<int> _ptr__405(_405 ? _405->raw() : nullptr, _405 ? _405->size(0) : 0);
  _checked_ptr_1<int> _ptr__406(_406 ? _406->raw() : nullptr, _406 ? _406->size(0) : 0);
  int _6748;
  bool _6749 = (_409 > (int)((_404)->size(0)));
  if (_6749)
  {
    _6748 = (int)((_404)->size(0));
  }
  else
  {
    _6748 = _409;
  }
  int _410 = _6748;
  int _6750;
  bool _6751 = (_408 > _410);
  if (_6751)
  {
    _6750 = _410;
  }
  else
  {
    _6750 = _408;
  }
  int _411 = _6750;
  if ((_411 == _410))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(_404,_407,_405,_407,(_411 - _407));
    }
  }
  else
  {
    {
      int _412 = _407;
      int _413 = _411;
      int _414;
      {
        _414 = _407;
        for(;((_412 < _411) && (_413 < _410));++ _414)
        {
          {
            if ((_ptr__406[_ptr__404[_412]] < _ptr__406[_ptr__404[_413]]))
            {
              {
                _ptr__405[_414] = _ptr__404[_412];
                ++ _412;
              }
            }
            else
            {
              {
                _ptr__405[_414] = _ptr__404[_413];
                ++ _413;
              }
            }
          }
        }
      }
      while ( (_412 < _411) )
      {
        {
          _ptr__405[_414] = _ptr__404[_412];
          ++ _412;
          ++ _414;
        }
      }
      while ( (_413 < _410) )
      {
        {
          _ptr__405[_414] = _ptr__404[_413];
          ++ _413;
          ++ _414;
        }
      }
    }
  }
}
void mosek::fusion::CommonTools::argQsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _415,    std::shared_ptr< monty::ndarray< long long,1 > > _416,    std::shared_ptr< monty::ndarray< long long,1 > > _417,    long long _418,    long long _419) { mosek::fusion::p_CommonTools::argQsort(_415,_416,_417,_418,_419); }void mosek::fusion::p_CommonTools::argQsort(std::shared_ptr< monty::ndarray< long long,1 > > _415,std::shared_ptr< monty::ndarray< long long,1 > > _416,std::shared_ptr< monty::ndarray< long long,1 > > _417,long long _418,long long _419){
  _checked_ptr_1<long long> _ptr__415(_415 ? _415->raw() : nullptr, _415 ? _415->size(0) : 0);
  _checked_ptr_1<long long> _ptr__416(_416 ? _416->raw() : nullptr, _416 ? _416->size(0) : 0);
  _checked_ptr_1<long long> _ptr__417(_417 ? _417->raw() : nullptr, _417 ? _417->size(0) : 0);
  if ((NULL == _417.get()))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_415,_416,_418,_419);
    }
  }
  else
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_415,_416,_417,_418,_419);
    }
  }
}
void mosek::fusion::CommonTools::argQsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _420,    std::shared_ptr< monty::ndarray< int,1 > > _421,    std::shared_ptr< monty::ndarray< int,1 > > _422,    long long _423,    long long _424) { mosek::fusion::p_CommonTools::argQsort(_420,_421,_422,_423,_424); }void mosek::fusion::p_CommonTools::argQsort(std::shared_ptr< monty::ndarray< long long,1 > > _420,std::shared_ptr< monty::ndarray< int,1 > > _421,std::shared_ptr< monty::ndarray< int,1 > > _422,long long _423,long long _424){
  _checked_ptr_1<long long> _ptr__420(_420 ? _420->raw() : nullptr, _420 ? _420->size(0) : 0);
  _checked_ptr_1<int> _ptr__421(_421 ? _421->raw() : nullptr, _421 ? _421->size(0) : 0);
  _checked_ptr_1<int> _ptr__422(_422 ? _422->raw() : nullptr, _422 ? _422->size(0) : 0);
  if ((NULL == _422.get()))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_420,_421,_423,_424);
    }
  }
  else
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_420,_421,_422,_423,_424);
    }
  }
}
void mosek::fusion::p_CommonTools::destroy(){}void mosek::fusion::CommonTools::destroy() { mosek::fusion::p_CommonTools::_get_impl(this)->destroy(); }mosek::fusion::SolutionStruct::SolutionStruct(mosek::fusion::p_SolutionStruct *_impl) : _impl(_impl) { /*std::cout << "SolutionStruct() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::SolutionStruct::~SolutionStruct() { delete _impl; _impl = nullptr; }mosek::fusion::p_SolutionStruct::p_SolutionStruct  (::mosek::fusion::SolutionStruct * _pubthis) :     _pubthis(_pubthis){}std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_yx() { return _impl->yx; }
void mosek::fusion::SolutionStruct::set_yx(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->yx = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_snx() { return _impl->snx; }
void mosek::fusion::SolutionStruct::set_snx(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->snx = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_sux() { return _impl->sux; }
void mosek::fusion::SolutionStruct::set_sux(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->sux = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_slx() { return _impl->slx; }
void mosek::fusion::SolutionStruct::set_slx(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->slx = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_bars() { return _impl->bars; }
void mosek::fusion::SolutionStruct::set_bars(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->bars = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_barx() { return _impl->barx; }
void mosek::fusion::SolutionStruct::set_barx(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->barx = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_y() { return _impl->y; }
void mosek::fusion::SolutionStruct::set_y(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->y = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_suc() { return _impl->suc; }
void mosek::fusion::SolutionStruct::set_suc(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->suc = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_slc() { return _impl->slc; }
void mosek::fusion::SolutionStruct::set_slc(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->slc = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_xx() { return _impl->xx; }
void mosek::fusion::SolutionStruct::set_xx(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->xx = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_xc() { return _impl->xc; }
void mosek::fusion::SolutionStruct::set_xc(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->xc = _val; }
double mosek::fusion::SolutionStruct::get_dobj() { return _impl->dobj; }
void mosek::fusion::SolutionStruct::set_dobj(double _val) { _impl->dobj = _val; }
double mosek::fusion::SolutionStruct::get_pobj() { return _impl->pobj; }
void mosek::fusion::SolutionStruct::set_pobj(double _val) { _impl->pobj = _val; }
mosek::fusion::ProblemStatus mosek::fusion::SolutionStruct::get_probstatus() { return _impl->probstatus; }
void mosek::fusion::SolutionStruct::set_probstatus(mosek::fusion::ProblemStatus _val) { _impl->probstatus = _val; }
mosek::fusion::SolutionStatus mosek::fusion::SolutionStruct::get_dstatus() { return _impl->dstatus; }
void mosek::fusion::SolutionStruct::set_dstatus(mosek::fusion::SolutionStatus _val) { _impl->dstatus = _val; }
mosek::fusion::SolutionStatus mosek::fusion::SolutionStruct::get_pstatus() { return _impl->pstatus; }
void mosek::fusion::SolutionStruct::set_pstatus(mosek::fusion::SolutionStatus _val) { _impl->pstatus = _val; }
int mosek::fusion::SolutionStruct::get_sol_numbarvar() { return _impl->sol_numbarvar; }
void mosek::fusion::SolutionStruct::set_sol_numbarvar(int _val) { _impl->sol_numbarvar = _val; }
int mosek::fusion::SolutionStruct::get_sol_numcone() { return _impl->sol_numcone; }
void mosek::fusion::SolutionStruct::set_sol_numcone(int _val) { _impl->sol_numcone = _val; }
int mosek::fusion::SolutionStruct::get_sol_numvar() { return _impl->sol_numvar; }
void mosek::fusion::SolutionStruct::set_sol_numvar(int _val) { _impl->sol_numvar = _val; }
int mosek::fusion::SolutionStruct::get_sol_numcon() { return _impl->sol_numcon; }
void mosek::fusion::SolutionStruct::set_sol_numcon(int _val) { _impl->sol_numcon = _val; }
mosek::fusion::SolutionStruct::t mosek::fusion::p_SolutionStruct::_new_SolutionStruct  (int _425,    int _426,    int _427,    int _428){ return new mosek::fusion::SolutionStruct(_425,_426,_427,_428); }mosek::fusion::SolutionStruct::SolutionStruct  (int _425,    int _426,    int _427,    int _428) :    SolutionStruct(new mosek::fusion::p_SolutionStruct(this)){ mosek::fusion::p_SolutionStruct::_get_impl(this)->_initialize(_425,_426,_427,_428); }void mosek::fusion::p_SolutionStruct::_initialize  (int _425,    int _426,    int _427,    int _428){monty::rc_reserve __reserve_this(_pubthis);   {
    pobj = 0.0;
    dobj = 0.0;
    pstatus = ::mosek::fusion::SolutionStatus::Unknown;
    dstatus = ::mosek::fusion::SolutionStatus::Unknown;
    probstatus = ::mosek::fusion::ProblemStatus::Unknown;
    sol_numvar = _425;
    sol_numcon = _426;
    sol_numcone = _427;
    sol_numbarvar = _428;
    slx = nullptr;
    sux = nullptr;
    xx = nullptr;
    yx = nullptr;
    slc = nullptr;
    suc = nullptr;
    y = nullptr;
    xc = nullptr;
    snx = nullptr;
    barx = nullptr;
    bars = nullptr;
    if ((_425 > (int)0))
    {
      {
        slx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_425)));
        sux = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_425)));
        xx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_425)));
        yx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_425)));
      }
    }
    {}
    if ((_428 > (int)0))
    {
      {
        barx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_428)));
        bars = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_428)));
      }
    }
    {}
    if ((_426 > (int)0))
    {
      {
        slc = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_426)));
        suc = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_426)));
        y = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_426)));
        xc = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_426)));
      }
    }
    {}
    if ((_427 > (int)0))
    {
      {
        snx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_425)));
      }
    }
    {}
  }
}mosek::fusion::SolutionStruct::t mosek::fusion::p_SolutionStruct::_new_SolutionStruct  (monty::rc_ptr< ::mosek::fusion::SolutionStruct > _429){ return new mosek::fusion::SolutionStruct(_429); }mosek::fusion::SolutionStruct::SolutionStruct  (monty::rc_ptr< ::mosek::fusion::SolutionStruct > _429) :    SolutionStruct(new mosek::fusion::p_SolutionStruct(this)){ mosek::fusion::p_SolutionStruct::_get_impl(this)->_initialize(_429); }void mosek::fusion::p_SolutionStruct::_initialize  (monty::rc_ptr< ::mosek::fusion::SolutionStruct > _429){monty::rc_reserve __reserve_this(_pubthis);   {
    sol_numcon = mosek::fusion::p_SolutionStruct::_get_impl(_429)->sol_numcon;
    sol_numvar = mosek::fusion::p_SolutionStruct::_get_impl(_429)->sol_numvar;
    sol_numcone = mosek::fusion::p_SolutionStruct::_get_impl(_429)->sol_numcone;
    sol_numbarvar = mosek::fusion::p_SolutionStruct::_get_impl(_429)->sol_numbarvar;
    pstatus = mosek::fusion::p_SolutionStruct::_get_impl(_429)->pstatus;
    dstatus = mosek::fusion::p_SolutionStruct::_get_impl(_429)->dstatus;
    probstatus = mosek::fusion::p_SolutionStruct::_get_impl(_429)->probstatus;
    pobj = mosek::fusion::p_SolutionStruct::_get_impl(_429)->pobj;
    dobj = mosek::fusion::p_SolutionStruct::_get_impl(_429)->dobj;
    std::shared_ptr< monty::ndarray< double,1 > > _6752;
    bool _6753 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_429)->xc.get());
    if (_6753)
    {
      _6752 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_429)->xc);
    }
    else
    {
      _6752 = nullptr;
    }
    xc = _6752;
    std::shared_ptr< monty::ndarray< double,1 > > _6754;
    bool _6755 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_429)->xx.get());
    if (_6755)
    {
      _6754 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_429)->xx);
    }
    else
    {
      _6754 = nullptr;
    }
    xx = _6754;
    std::shared_ptr< monty::ndarray< double,1 > > _6756;
    bool _6757 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_429)->yx.get());
    if (_6757)
    {
      _6756 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_429)->yx);
    }
    else
    {
      _6756 = nullptr;
    }
    yx = _6756;
    std::shared_ptr< monty::ndarray< double,1 > > _6758;
    bool _6759 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_429)->slc.get());
    if (_6759)
    {
      _6758 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_429)->slx);
    }
    else
    {
      _6758 = nullptr;
    }
    slc = _6758;
    std::shared_ptr< monty::ndarray< double,1 > > _6760;
    bool _6761 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_429)->suc.get());
    if (_6761)
    {
      _6760 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_429)->sux);
    }
    else
    {
      _6760 = nullptr;
    }
    suc = _6760;
    std::shared_ptr< monty::ndarray< double,1 > > _6762;
    bool _6763 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_429)->y.get());
    if (_6763)
    {
      _6762 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_429)->y);
    }
    else
    {
      _6762 = nullptr;
    }
    y = _6762;
    barx = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_429)->barx);
    bars = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_429)->bars);
    std::shared_ptr< monty::ndarray< double,1 > > _6764;
    bool _6765 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_429)->slx.get());
    if (_6765)
    {
      _6764 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_429)->slx);
    }
    else
    {
      _6764 = nullptr;
    }
    slx = _6764;
    std::shared_ptr< monty::ndarray< double,1 > > _6766;
    bool _6767 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_429)->sux.get());
    if (_6767)
    {
      _6766 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_429)->sux);
    }
    else
    {
      _6766 = nullptr;
    }
    sux = _6766;
    std::shared_ptr< monty::ndarray< double,1 > > _6768;
    bool _6769 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_429)->snx.get());
    if (_6769)
    {
      _6768 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_429)->snx);
    }
    else
    {
      _6768 = nullptr;
    }
    snx = _6768;
  }
}monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::SolutionStruct :: __mosek_2fusion_2SolutionStruct__clone() { return mosek::fusion::p_SolutionStruct::_get_impl(this)->__mosek_2fusion_2SolutionStruct__clone(); }monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::SolutionStruct::clone() { return __mosek_2fusion_2SolutionStruct__clone(); }
monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::p_SolutionStruct::__mosek_2fusion_2SolutionStruct__clone(){
  return ::mosek::fusion::p_SolutionStruct::_new_SolutionStruct(::mosek::fusion::SolutionStruct::t(_pubthis));
}
void mosek::fusion::SolutionStruct :: resize(int _430,int _431,int _432,int _433) { mosek::fusion::p_SolutionStruct::_get_impl(this)->resize(_430,_431,_432,_433); }void mosek::fusion::p_SolutionStruct::resize(int _430,int _431,int _432,int _433){
  if ((_433 < (int)0))
  {
    {
    }
  }
  else if((_433 <= sol_numbarvar))
  {
    {
      sol_numbarvar = _433;
    }
  }
  else if((_433 <= (int)((barx)->size(0))))
  {
    {
    }
  }
  else
  {
    {
      int _434;
      if ((safe_mul( sol_numbarvar,(int)2 ) > safe_add( _433,(int)100 )))
      {
        {
          _434 = safe_mul( sol_numbarvar,(int)2 );
        }
      }
      else
      {
        {
          _434 = safe_add( _433,(int)100 );
        }
      }
      barx = ::mosek::fusion::p_CommonTools::resize(barx,_434);
      bars = ::mosek::fusion::p_CommonTools::resize(bars,_434);
      sol_numbarvar = _434;
    }
  }
  if ((_430 < (int)0))
  {
    {
    }
  }
  else if((_430 <= sol_numvar))
  {
    {
      sol_numvar = _430;
    }
  }
  else if((_430 <= (int)((xx)->size(0))))
  {
    {
      int _6770 = sol_numvar;
      int _6771 = _430;
      for (int _435 = _6770; _435 < _6771; ++_435)
      {
        {
          ((*slx)(_435)) = 0.0;
          ((*sux)(_435)) = 0.0;
          ((*xx)(_435)) = 0.0;
          ((*yx)(_435)) = 0.0;
        }
      }
      sol_numvar = _430;
    }
  }
  else
  {
    {
      int _436;
      if ((safe_mul( sol_numvar,(int)2 ) > safe_add( _430,(int)100 )))
      {
        {
          _436 = safe_mul( sol_numvar,(int)2 );
        }
      }
      else
      {
        {
          _436 = safe_add( _430,(int)100 );
        }
      }
      std::shared_ptr< monty::ndarray< double,1 > > _437 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_436)));
      _checked_ptr_1<double> _ptr__437(_437 ? _437->raw() : nullptr,_437 ? _437->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(slx,(int)0,_437,(int)0,(int)((slx)->size(0)));
      slx = _437;
      std::shared_ptr< monty::ndarray< double,1 > > _438 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_436)));
      _checked_ptr_1<double> _ptr__438(_438 ? _438->raw() : nullptr,_438 ? _438->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(sux,(int)0,_438,(int)0,(int)((sux)->size(0)));
      sux = _438;
      std::shared_ptr< monty::ndarray< double,1 > > _439 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_436)));
      _checked_ptr_1<double> _ptr__439(_439 ? _439->raw() : nullptr,_439 ? _439->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(xx,(int)0,_439,(int)0,(int)((xx)->size(0)));
      xx = _439;
      std::shared_ptr< monty::ndarray< double,1 > > _440 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_436)));
      _checked_ptr_1<double> _ptr__440(_440 ? _440->raw() : nullptr,_440 ? _440->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(yx,(int)0,_440,(int)0,(int)((yx)->size(0)));
      yx = _440;
      {
        int _441 = sol_numvar;
        for(;(_441 < _430);++ _441)
        {
          {
            ((*slx)(_441)) = 0.0;
            ((*sux)(_441)) = 0.0;
            ((*xx)(_441)) = 0.0;
          }
        }
      }
      sol_numvar = _430;
    }
  }
  if ((_431 < (int)0))
  {
    {
    }
  }
  else if((_431 <= sol_numcon))
  {
    {
      sol_numcon = _431;
    }
  }
  else if((_431 <= (int)((xx)->size(0))))
  {
    {
      int _6772 = sol_numcon;
      int _6773 = _431;
      for (int _442 = _6772; _442 < _6773; ++_442)
      {
        {
          ((*slc)(_442)) = 0.0;
          ((*suc)(_442)) = 0.0;
          ((*xc)(_442)) = 0.0;
          ((*y)(_442)) = 0.0;
        }
      }
      sol_numcon = _431;
    }
  }
  else
  {
    {
      int _443;
      if ((safe_mul( sol_numcon,(int)2 ) > safe_add( _431,(int)100 )))
      {
        {
          _443 = safe_mul( sol_numcon,(int)2 );
        }
      }
      else
      {
        {
          _443 = safe_add( _431,(int)100 );
        }
      }
      std::shared_ptr< monty::ndarray< double,1 > > _444 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_443)));
      _checked_ptr_1<double> _ptr__444(_444 ? _444->raw() : nullptr,_444 ? _444->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(slc,(int)0,_444,(int)0,(int)((slc)->size(0)));
      slc = _444;
      std::shared_ptr< monty::ndarray< double,1 > > _445 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_443)));
      _checked_ptr_1<double> _ptr__445(_445 ? _445->raw() : nullptr,_445 ? _445->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(suc,(int)0,_445,(int)0,(int)((suc)->size(0)));
      suc = _445;
      std::shared_ptr< monty::ndarray< double,1 > > _446 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_443)));
      _checked_ptr_1<double> _ptr__446(_446 ? _446->raw() : nullptr,_446 ? _446->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(xc,(int)0,_446,(int)0,(int)((xc)->size(0)));
      xc = _446;
      std::shared_ptr< monty::ndarray< double,1 > > _447 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_443)));
      _checked_ptr_1<double> _ptr__447(_447 ? _447->raw() : nullptr,_447 ? _447->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(y,(int)0,_447,(int)0,(int)((y)->size(0)));
      y = _447;
      int _6774 = sol_numcon;
      int _6775 = _431;
      for (int _448 = _6774; _448 < _6775; ++_448)
      {
        {
          ((*slc)(_448)) = 0.0;
          ((*suc)(_448)) = 0.0;
          ((*xc)(_448)) = 0.0;
          ((*y)(_448)) = 0.0;
        }
      }
      sol_numcon = _431;
    }
  }
  if ((_432 < (int)0))
  {
    {
    }
  }
  else if((_432 <= sol_numcone))
  {
    {
      sol_numcone = _432;
    }
  }
  else if((_432 <= (int)((xx)->size(0))))
  {
    {
      int _6776 = sol_numcone;
      int _6777 = _432;
      for (int _449 = _6776; _449 < _6777; ++_449)
      {
        {
          ((*snx)(_449)) = 0.0;
        }
      }
      sol_numcone = _432;
    }
  }
  else
  {
    {
      int _450;
      if ((safe_mul( sol_numcone,(int)2 ) > safe_add( _432,(int)100 )))
      {
        {
          _450 = safe_mul( sol_numcone,(int)2 );
        }
      }
      else
      {
        {
          _450 = safe_add( _432,(int)100 );
        }
      }
      std::shared_ptr< monty::ndarray< double,1 > > _451 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_450)));
      _checked_ptr_1<double> _ptr__451(_451 ? _451->raw() : nullptr,_451 ? _451->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(snx,(int)0,_451,(int)0,(int)((snx)->size(0)));
      snx = _451;
      {
        int _452 = sol_numcone;
        for(;(_452 < _432);++ _452)
        {
          {
            ((*snx)(_452)) = 0.0;
          }
        }
      }
      sol_numcone = _432;
    }
  }
}
bool mosek::fusion::SolutionStruct :: isDualAcceptable(mosek::fusion::AccSolutionStatus _453) { return mosek::fusion::p_SolutionStruct::_get_impl(this)->isDualAcceptable(_453); }bool mosek::fusion::p_SolutionStruct::isDualAcceptable(mosek::fusion::AccSolutionStatus _453){
  return isAcceptable(dstatus,_453);
}
bool mosek::fusion::SolutionStruct :: isPrimalAcceptable(mosek::fusion::AccSolutionStatus _454) { return mosek::fusion::p_SolutionStruct::_get_impl(this)->isPrimalAcceptable(_454); }bool mosek::fusion::p_SolutionStruct::isPrimalAcceptable(mosek::fusion::AccSolutionStatus _454){
  return isAcceptable(pstatus,_454);
}
bool mosek::fusion::p_SolutionStruct::isAcceptable(mosek::fusion::SolutionStatus _455,mosek::fusion::AccSolutionStatus _456){
  if ((_456 == ::mosek::fusion::AccSolutionStatus::Anything))
  {
    {
      return true;
    }
  }
  else if((_456 == ::mosek::fusion::AccSolutionStatus::Optimal))
  {
    {
      return (_455 == ::mosek::fusion::SolutionStatus::Optimal);
    }
  }
  else if((_456 == ::mosek::fusion::AccSolutionStatus::Feasible))
  {
    {
      return ((_455 == ::mosek::fusion::SolutionStatus::Optimal) || (_455 == ::mosek::fusion::SolutionStatus::Feasible));
    }
  }
  else if((_456 == ::mosek::fusion::AccSolutionStatus::Certificate))
  {
    {
      return (_455 == ::mosek::fusion::SolutionStatus::Certificate);
    }
  }
  {}
  return false;
}
void mosek::fusion::p_SolutionStruct::destroy(){yx.reset();snx.reset();sux.reset();slx.reset();bars.reset();barx.reset();y.reset();suc.reset();slc.reset();xx.reset();xc.reset();}void mosek::fusion::SolutionStruct::destroy() { mosek::fusion::p_SolutionStruct::_get_impl(this)->destroy(); }mosek::fusion::ConNZStruct::ConNZStruct(mosek::fusion::p_ConNZStruct *_impl) : _impl(_impl) { /*std::cout << "ConNZStruct() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::ConNZStruct::~ConNZStruct() { delete _impl; _impl = nullptr; }mosek::fusion::p_ConNZStruct::p_ConNZStruct  (::mosek::fusion::ConNZStruct * _pubthis) :     _pubthis(_pubthis){}std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConNZStruct::get_barmidx() { return _impl->barmidx; }
void mosek::fusion::ConNZStruct::set_barmidx(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->barmidx = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConNZStruct::get_barsubj() { return _impl->barsubj; }
void mosek::fusion::ConNZStruct::set_barsubj(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->barsubj = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConNZStruct::get_barsubi() { return _impl->barsubi; }
void mosek::fusion::ConNZStruct::set_barsubi(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->barsubi = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::ConNZStruct::get_bfix() { return _impl->bfix; }
void mosek::fusion::ConNZStruct::set_bfix(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->bfix = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::ConNZStruct::get_cof() { return _impl->cof; }
void mosek::fusion::ConNZStruct::set_cof(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->cof = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConNZStruct::get_subj() { return _impl->subj; }
void mosek::fusion::ConNZStruct::set_subj(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->subj = _val; }
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::ConNZStruct::get_ptrb() { return _impl->ptrb; }
void mosek::fusion::ConNZStruct::set_ptrb(std::shared_ptr< monty::ndarray< long long,1 > > _val) { _impl->ptrb = _val; }
mosek::fusion::ConNZStruct::t mosek::fusion::p_ConNZStruct::_new_ConNZStruct  (std::shared_ptr< monty::ndarray< long long,1 > > _457,    std::shared_ptr< monty::ndarray< int,1 > > _458,    std::shared_ptr< monty::ndarray< double,1 > > _459,    std::shared_ptr< monty::ndarray< double,1 > > _460,    std::shared_ptr< monty::ndarray< int,1 > > _461,    std::shared_ptr< monty::ndarray< int,1 > > _462,    std::shared_ptr< monty::ndarray< int,1 > > _463){ return new mosek::fusion::ConNZStruct(_457,_458,_459,_460,_461,_462,_463); }mosek::fusion::ConNZStruct::ConNZStruct  (std::shared_ptr< monty::ndarray< long long,1 > > _457,    std::shared_ptr< monty::ndarray< int,1 > > _458,    std::shared_ptr< monty::ndarray< double,1 > > _459,    std::shared_ptr< monty::ndarray< double,1 > > _460,    std::shared_ptr< monty::ndarray< int,1 > > _461,    std::shared_ptr< monty::ndarray< int,1 > > _462,    std::shared_ptr< monty::ndarray< int,1 > > _463) :    ConNZStruct(new mosek::fusion::p_ConNZStruct(this)){ mosek::fusion::p_ConNZStruct::_get_impl(this)->_initialize(_457,_458,_459,_460,_461,_462,_463); }void mosek::fusion::p_ConNZStruct::_initialize  (std::shared_ptr< monty::ndarray< long long,1 > > _457,    std::shared_ptr< monty::ndarray< int,1 > > _458,    std::shared_ptr< monty::ndarray< double,1 > > _459,    std::shared_ptr< monty::ndarray< double,1 > > _460,    std::shared_ptr< monty::ndarray< int,1 > > _461,    std::shared_ptr< monty::ndarray< int,1 > > _462,    std::shared_ptr< monty::ndarray< int,1 > > _463){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__457(_457 ? _457->raw() : nullptr, _457 ? _457->size(0) : 0);
    _checked_ptr_1<int> _ptr__458(_458 ? _458->raw() : nullptr, _458 ? _458->size(0) : 0);
    _checked_ptr_1<double> _ptr__459(_459 ? _459->raw() : nullptr, _459 ? _459->size(0) : 0);
    _checked_ptr_1<double> _ptr__460(_460 ? _460->raw() : nullptr, _460 ? _460->size(0) : 0);
    _checked_ptr_1<int> _ptr__461(_461 ? _461->raw() : nullptr, _461 ? _461->size(0) : 0);
    _checked_ptr_1<int> _ptr__462(_462 ? _462->raw() : nullptr, _462 ? _462->size(0) : 0);
    _checked_ptr_1<int> _ptr__463(_463 ? _463->raw() : nullptr, _463 ? _463->size(0) : 0);
    ptrb = _457;
    subj = _458;
    cof = _459;
    bfix = _460;
    barsubi = _461;
    barsubj = _462;
    barmidx = _463;
  }
}void mosek::fusion::p_ConNZStruct::destroy(){barmidx.reset();barsubj.reset();barsubi.reset();bfix.reset();cof.reset();subj.reset();ptrb.reset();}void mosek::fusion::ConNZStruct::destroy() { mosek::fusion::p_ConNZStruct::_get_impl(this)->destroy(); }mosek::fusion::Model::Model(mosek::fusion::p_Model *_impl) : mosek::fusion::BaseModel(_impl) { /*std::cout << "Model()" << this << std::endl; */ }mosek::fusion::Model::~Model() {  /* std::cout << "~Model()" << this << std::endl << std::flush; */ }mosek::fusion::p_Model::p_Model  (::mosek::fusion::Model * _pubthis) :     mosek::fusion::p_BaseModel(_pubthis),    _pubthis(_pubthis){}mosek::fusion::Model::t mosek::fusion::p_Model::_new_Model  (monty::rc_ptr< ::mosek::fusion::Model > _464){ return new mosek::fusion::Model(_464); }mosek::fusion::Model::Model  (monty::rc_ptr< ::mosek::fusion::Model > _464) :    Model(new mosek::fusion::p_Model(this)){ mosek::fusion::p_Model::_get_impl(this)->_initialize(_464); }void mosek::fusion::p_Model::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _464){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseModel::_initialize(_464);
    monty::rc_ptr< ::mosek::fusion::Model > _465 = ::mosek::fusion::Model::t(_pubthis);
    model_name = mosek::fusion::p_Model::_get_impl(_464)->model_name;
    acceptable_sol = mosek::fusion::p_Model::_get_impl(_464)->acceptable_sol;
    solutionptr = mosek::fusion::p_Model::_get_impl(_464)->solutionptr;
    natvarmap_blockid = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_464)->natvarmap_blockid);
    natvarmap_idx = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_464)->natvarmap_idx);
    natvarmap_type = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_464)->natvarmap_type);
    natvarmap = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks(mosek::fusion::p_Model::_get_impl(_464)->natvarmap);
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelVariable >> _6778;
    for (int _466 = (int)0, _6779 = (int)((mosek::fusion::p_Model::_get_impl(_464)->vars)->size(0)); _466 < _6779 ; ++_466)
    {
      monty::rc_ptr< ::mosek::fusion::ModelVariable > _6780;
      bool _6781 = (NULL != ((*mosek::fusion::p_Model::_get_impl(_464)->vars)(_466)).get());
      if (_6781)
      {
        _6780 = mosek::fusion::p_ModelVariable::_get_impl(((*mosek::fusion::p_Model::_get_impl(_464)->vars)(_466)).get())->__mosek_2fusion_2ModelVariable__clone(_465);
      }
      else
      {
        _6780 = nullptr;
      }
      _6778.push_back(_6780);
    }
    auto _6782 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_6778.size()),_6778.begin(),_6778.end()));
    vars = _6782;
    natconemap = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks(mosek::fusion::p_Model::_get_impl(_464)->natconemap);
    natconemap_dim = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_464)->natconemap_dim);
    natbarvar_numbarvarelm = mosek::fusion::p_Model::_get_impl(_464)->natbarvar_numbarvarelm;
    natbarvar_ptr = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_464)->natbarvar_ptr);
    natbarvar_i = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_464)->natbarvar_i);
    natbarvar_j = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_464)->natbarvar_j);
    natbarvar_idx = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_464)->natbarvar_idx);
    natbarvarmap_nblock = mosek::fusion::p_Model::_get_impl(_464)->natbarvarmap_nblock;
    natbarvar_dim = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_464)->natbarvar_dim);
    natbarvarmap_num = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_464)->natbarvarmap_num);
    natbarvarmap_ptr = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_464)->natbarvarmap_ptr);
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelVariable >> _6783;
    for (int _467 = (int)0, _6784 = (int)((mosek::fusion::p_Model::_get_impl(_464)->barvars)->size(0)); _467 < _6784 ; ++_467)
    {
      monty::rc_ptr< ::mosek::fusion::ModelVariable > _6785;
      bool _6786 = (NULL != ((*mosek::fusion::p_Model::_get_impl(_464)->barvars)(_467)).get());
      if (_6786)
      {
        _6785 = mosek::fusion::p_ModelVariable::_get_impl(((*mosek::fusion::p_Model::_get_impl(_464)->barvars)(_467)).get())->__mosek_2fusion_2ModelVariable__clone(_465);
      }
      else
      {
        _6785 = nullptr;
      }
      _6783.push_back(_6785);
    }
    auto _6787 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_6783.size()),_6783.begin(),_6783.end()));
    barvars = _6787;
    var_map = mosek::fusion::p_Model::_get_impl(_464)->var_map->__mosek_2fusion_2Utils_2StringIntMap__clone();
    natconmap_blockid = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_464)->natconmap_blockid);
    natconmap_slackidx = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_464)->natconmap_slackidx);
    natconmap_idx = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_464)->natconmap_idx);
    natconmap_type = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_464)->natconmap_type);
    natconmap_efix = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_464)->natconmap_efix);
    natconmap_lb = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_464)->natconmap_lb);
    natconmap_ub = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_464)->natconmap_ub);
    natconmap = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks(mosek::fusion::p_Model::_get_impl(_464)->natconmap);
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelConstraint >> _6788;
    for (int _468 = (int)0, _6789 = (int)((mosek::fusion::p_Model::_get_impl(_464)->cons)->size(0)); _468 < _6789 ; ++_468)
    {
      monty::rc_ptr< ::mosek::fusion::ModelConstraint > _6790;
      bool _6791 = (NULL != ((*mosek::fusion::p_Model::_get_impl(_464)->cons)(_468)).get());
      if (_6791)
      {
        _6790 = mosek::fusion::p_ModelConstraint::_get_impl(((*mosek::fusion::p_Model::_get_impl(_464)->cons)(_468)).get())->__mosek_2fusion_2ModelConstraint__clone(_465);
      }
      else
      {
        _6790 = nullptr;
      }
      _6788.push_back(_6790);
    }
    auto _6792 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 >(monty::shape(_6788.size()),_6788.begin(),_6788.end()));
    cons = _6792;
    con_map = mosek::fusion::p_Model::_get_impl(_464)->con_map->__mosek_2fusion_2Utils_2StringIntMap__clone();
    initsol_xx = nullptr;
    initsol_xx_flag = nullptr;
    bfixidx = mosek::fusion::p_Model::_get_impl(_464)->bfixidx;
    rs = ::mosek::fusion::p_WorkStack::_new_WorkStack();
    ws = ::mosek::fusion::p_WorkStack::_new_WorkStack();
    xs = ::mosek::fusion::p_WorkStack::_new_WorkStack();
  }
}mosek::fusion::Model::t mosek::fusion::p_Model::_new_Model  (const std::string &  _469){ return new mosek::fusion::Model(_469); }mosek::fusion::Model::Model  (const std::string &  _469) :    Model(new mosek::fusion::p_Model(this)){ mosek::fusion::p_Model::_get_impl(this)->_initialize(_469); }void mosek::fusion::p_Model::_initialize  (const std::string &  _469){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseModel::_initialize(_469,std::string (""));
    model_name = _469;
    acceptable_sol = ::mosek::fusion::AccSolutionStatus::Optimal;
    solutionptr = ::mosek::fusion::SolutionType::Default;
    natvarmap = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks();
    natvarmap_blockid = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    natvarmap_idx = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    natvarmap_type = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelVariable >> _6793;
    for (int _470 = (int)0, _6794 = (int)1024; _470 < _6794 ; ++_470)
    {
      _6793.push_back(nullptr);
    }
    auto _6795 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_6793.size()),_6793.begin(),_6793.end()));
    vars = _6795;
    natconemap = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks();
    natconemap_dim = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
    barvars = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape((int)0)));
    natbarvar_ptr = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0)));
    natbarvar_numbarvarelm = (int)0;
    natbarvar_i = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
    natbarvar_j = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
    natbarvar_idx = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
    natbarvarmap_nblock = (int)0;
    natbarvar_dim = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
    natbarvarmap_num = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
    natbarvarmap_ptr = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0)});
    barvars = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape((int)0)));
    var_map = ::mosek::fusion::Utils::p_StringIntMap::_new_StringIntMap();
    initsol_xx = nullptr;
    initsol_xx_flag = nullptr;
    natconmap = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks();
    natconmap_blockid = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    natconmap_slackidx = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)1024)));
    natconmap_idx = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    natconmap_type = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    natconmap_efix = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)1024)));
    natconmap_lb = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)1024)));
    natconmap_ub = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)1024)));
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelConstraint >> _6796;
    for (int _471 = (int)0, _6797 = (int)1024; _471 < _6797 ; ++_471)
    {
      _6796.push_back(nullptr);
    }
    auto _6798 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 >(monty::shape(_6796.size()),_6796.begin(),_6796.end()));
    cons = _6798;
    con_map = ::mosek::fusion::Utils::p_StringIntMap::_new_StringIntMap();
    bfixidx = natvarmap_alloc((int)1);
    task_var_putboundlist_fx(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(bfixidx)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(1.0)}));
    task_var_name(bfixidx,std::string ("1.0"));
    rs = ::mosek::fusion::p_WorkStack::_new_WorkStack();
    ws = ::mosek::fusion::p_WorkStack::_new_WorkStack();
    xs = ::mosek::fusion::p_WorkStack::_new_WorkStack();
  }
}mosek::fusion::Model::t mosek::fusion::p_Model::_new_Model  (){ return new mosek::fusion::Model(); }mosek::fusion::Model::Model  () :    Model(new mosek::fusion::p_Model(this)){ mosek::fusion::p_Model::_get_impl(this)->_initialize(); }void mosek::fusion::p_Model::_initialize  (){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_Model::_initialize(std::string (""));
  }
}monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_Model::__mosek_2fusion_2Model__formstConstr(monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _472,std::shared_ptr< monty::ndarray< int,1 > > _473,std::shared_ptr< monty::ndarray< int,1 > > _474){
  _checked_ptr_1<int> _ptr__473(_473 ? _473->raw() : nullptr, _473 ? _473->size(0) : 0);
  _checked_ptr_1<int> _ptr__474(_474 ? _474->raw() : nullptr, _474 ? _474->size(0) : 0);
  return _472;
}
void mosek::fusion::p_Model::connames(std::shared_ptr< monty::ndarray< int,1 > > _475,const std::string & _476,std::shared_ptr< monty::ndarray< int,1 > > _477,std::shared_ptr< monty::ndarray< long long,1 > > _478){
  _checked_ptr_1<int> _ptr__475(_475 ? _475->raw() : nullptr, _475 ? _475->size(0) : 0);
  _checked_ptr_1<int> _ptr__477(_477 ? _477->raw() : nullptr, _477 ? _477->size(0) : 0);
  _checked_ptr_1<long long> _ptr__478(_478 ? _478->raw() : nullptr, _478 ? _478->size(0) : 0);
  task_format_con_names(_475,_476,_477,_478);
}
void mosek::fusion::p_Model::varnames(std::shared_ptr< monty::ndarray< int,1 > > _479,const std::string & _480,std::shared_ptr< monty::ndarray< int,1 > > _481,std::shared_ptr< monty::ndarray< long long,1 > > _482){
  _checked_ptr_1<int> _ptr__479(_479 ? _479->raw() : nullptr, _479 ? _479->size(0) : 0);
  _checked_ptr_1<int> _ptr__481(_481 ? _481->raw() : nullptr, _481 ? _481->size(0) : 0);
  _checked_ptr_1<long long> _ptr__482(_482 ? _482->raw() : nullptr, _482 ? _482->size(0) : 0);
  task_format_var_names(_479,_480,_481,_482);
}
void mosek::fusion::p_Model::varname(int _483,const std::string & _484){
  task_var_name(_483,_484);
}
void mosek::fusion::p_Model::natbarvarmap_get(int _485,std::shared_ptr< monty::ndarray< int,1 > > _486){
  _checked_ptr_1<int> _ptr__486(_486 ? _486->raw() : nullptr, _486 ? _486->size(0) : 0);
  int _487 = ((*natbarvarmap_ptr)(_485));
  int _488 = ((*natbarvarmap_num)(_485));
  int _6799 = (int)0;
  int _6800 = _488;
  for (int _489 = _6799; _489 < _6800; ++_489)
  {
    {
      _ptr__486[_489] = safe_add( _487,_489 );
    }
  }
}
void mosek::fusion::p_Model::natbarvar_get(int _490,std::shared_ptr< monty::ndarray< long long,1 > > _491){
  _checked_ptr_1<long long> _ptr__491(_491 ? _491->raw() : nullptr, _491 ? _491->size(0) : 0);
  int _492 = ((*natbarvarmap_ptr)(_490));
  int _493 = ((*natbarvarmap_num)(_490));
  int _494 = ((*natbarvar_dim)(((*natbarvarmap_ptr)(_490))));
  int _495 = (safe_mul( safe_mul( _493,_494 ),safe_add( _494,(int)1 ) ) / (int)2);
  long long _496 = ((*natbarvar_ptr)(_492));
  int _6801 = (int)0;
  int _6802 = _495;
  for (int _497 = _6801; _497 < _6802; ++_497)
  {
    {
      _ptr__491[_497] = safe_add( _496,_497 );
    }
  }
}
int mosek::fusion::p_Model::natbarvarmap_alloc(int _498,int _499){
  int _500 = (int)((natbarvar_idx)->size(0));
  int _501 = task_numbarvar();
  int _502 = (safe_mul( _499,safe_add( _499,(int)1 ) ) / (int)2);
  int _503 = safe_mul( _498,_502 );
  if ((safe_add( natbarvar_numbarvarelm,_503 ) >= _500))
  {
    {
      if ((_503 < _500))
      {
        {
          _503 = _500;
        }
      }
      {}
      natbarvar_idx = ::mosek::fusion::p_CommonTools::resize(natbarvar_idx,safe_add( _500,_503 ));
      natbarvar_i = ::mosek::fusion::p_CommonTools::resize(natbarvar_i,safe_add( _500,_503 ));
      natbarvar_j = ::mosek::fusion::p_CommonTools::resize(natbarvar_j,safe_add( _500,_503 ));
    }
  }
  {}
  if ((safe_add( natbarvarmap_nblock,(int)1 ) >= (int)((natbarvarmap_num)->size(0))))
  {
    {
      int _6803;
      bool _6804 = ((int)((natbarvarmap_num)->size(0)) > (int)0);
      if (_6804)
      {
        _6803 = safe_mul( (int)((natbarvarmap_num)->size(0)),(int)2 );
      }
      else
      {
        _6803 = (int)32;
      }
      int _504 = _6803;
      natbarvarmap_num = ::mosek::fusion::p_CommonTools::resize(natbarvarmap_num,_504);
      natbarvarmap_ptr = ::mosek::fusion::p_CommonTools::resize(natbarvarmap_ptr,safe_add( _504,(int)1 ));
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > > _505 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_504)));
      int _6805 = (int)0;
      int _6806 = (int)((barvars)->size(0));
      for (int _506 = _6805; _506 < _6806; ++_506)
      {
        {
          ((*_505)(_506)) = ((*barvars)(_506));
        }
      }
      barvars = _505;
    }
  }
  {}
  if ((safe_add( _501,_498 ) > (int)((natbarvar_dim)->size(0))))
  {
    {
      int _6807;
      bool _6808 = (safe_add( _501,_498 ) < safe_mul( (int)((natbarvar_dim)->size(0)),(int)2 ));
      if (_6808)
      {
        _6807 = safe_mul( (int)((natbarvar_dim)->size(0)),(int)2 );
      }
      else
      {
        _6807 = safe_add( _501,_498 );
      }
      int _507 = _6807;
      natbarvar_dim = ::mosek::fusion::p_CommonTools::resize(natbarvar_dim,_507);
    }
  }
  {}
  if ((safe_add( _501,_498 ) >= (int)((natbarvar_ptr)->size(0))))
  {
    {
      int _6809;
      bool _6810 = (_498 > (int)((natbarvar_ptr)->size(0)));
      if (_6810)
      {
        _6809 = _498;
      }
      else
      {
        _6809 = (int)((natbarvar_ptr)->size(0));
      }
      int _508 = _6809;
      natbarvar_ptr = ::mosek::fusion::p_CommonTools::resize(natbarvar_ptr,safe_add( safe_add( (int)((natbarvar_ptr)->size(0)),_508 ),(int)1 ));
    }
  }
  {}
  int _6811 = (int)0;
  int _6812 = _498;
  for (int _509 = _6811; _509 < _6812; ++_509)
  {
    {
      ((*natbarvar_dim)(safe_add( _501,_509 ))) = _499;
    }
  }
  ((*natbarvarmap_num)(natbarvarmap_nblock)) = _498;
  ((*natbarvarmap_ptr)(safe_add( natbarvarmap_nblock,(int)1 ))) = safe_add( ((*natbarvarmap_ptr)(natbarvarmap_nblock)),_498 );
  int _510 = task_append_barvar(_499,_498);
  int _511 = ((*natbarvarmap_ptr)(natbarvarmap_nblock));
  {
    long long _512 = ((*natbarvar_ptr)(_501));
    int _6813 = (int)0;
    int _6814 = _499;
    for (int _513 = _6813; _513 < _6814; ++_513)
    {
      {
        int _6815 = _513;
        int _6816 = _499;
        for (int _514 = _6815; _514 < _6816; ++_514)
        {
          {
            int _6817 = (int)0;
            int _6818 = _498;
            for (int _515 = _6817; _515 < _6818; ++_515)
            {
              {
                ((*natbarvar_idx)(safe_add( _512,safe_mul( _515,_502 ) ))) = safe_add( _511,_515 );
                ((*natbarvar_i)(safe_add( _512,safe_mul( _515,_502 ) ))) = _514;
                ((*natbarvar_j)(safe_add( _512,safe_mul( _515,_502 ) ))) = _513;
              }
            }
            ++ _512;
          }
        }
      }
    }
    int _6819 = (int)0;
    int _6820 = _498;
    for (int _516 = _6819; _516 < _6820; ++_516)
    {
      {
        ((*natbarvar_ptr)(safe_add( safe_add( _511,_516 ),(int)1 ))) = safe_add( ((*natbarvar_ptr)(safe_add( _511,_516 ))),_502 );
      }
    }
  }
  natbarvarmap_nblock += (int)1;
  natbarvar_numbarvarelm += safe_mul( _498,_502 );
  return (natbarvarmap_nblock - (int)1);
}
int mosek::fusion::p_Model::natvarmap_alloc(int _517){
  int _518 = natvarmap->alloc(_517);
  int _519 = safe_add( natvarmap->maxidx(_518),(int)1 );
  int _520 = natvarmap->capacity();
  int _521 = natvarmap->numblocks();
  if (((int)((natvarmap_idx)->size(0)) < _520))
  {
    {
      int _522 = (int)((natvarmap_idx)->size(0));
      natvarmap_idx = ::mosek::fusion::p_CommonTools::resize(natvarmap_idx,_520);
      int _6821 = _522;
      int _6822 = _520;
      for (int _523 = _6821; _523 < _6822; ++_523)
      {
        {
          ((*natvarmap_idx)(_523)) = (-(int)1);
        }
      }
      natvarmap_blockid = ::mosek::fusion::p_CommonTools::resize(natvarmap_blockid,_520);
    }
  }
  {}
  if (((int)((vars)->size(0)) < _521))
  {
    {
      natvarmap_type = ::mosek::fusion::p_CommonTools::resize(natvarmap_type,_521);
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > > _524 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_521)));
      int _6823 = (int)0;
      int _6824 = (int)((vars)->size(0));
      for (int _525 = _6823; _525 < _6824; ++_525)
      {
        {
          ((*_524)(_525)) = ((*vars)(_525));
        }
      }
      int _6825 = (int)((vars)->size(0));
      int _6826 = (int)((_524)->size(0));
      for (int _526 = _6825; _526 < _6826; ++_526)
      {
        {
          ((*_524)(_526)) = nullptr;
        }
      }
      vars = _524;
    }
  }
  {}
  if ((task_numvar() < _519))
  {
    {
      task_append_var((_519 - task_numvar()));
    }
  }
  {}
  return _518;
}
int mosek::fusion::p_Model::natconmap_alloc(int _527){
  int _528 = natconmap->alloc(_527);
  int _529 = safe_add( natconmap->maxidx(_528),(int)1 );
  int _530 = natconmap->capacity();
  int _531 = natconmap->numblocks();
  if (((int)((natconmap_idx)->size(0)) < _530))
  {
    {
      int _532 = (int)((natconmap_idx)->size(0));
      natconmap_idx = ::mosek::fusion::p_CommonTools::resize(natconmap_idx,_530);
      int _6827 = _532;
      int _6828 = _530;
      for (int _533 = _6827; _533 < _6828; ++_533)
      {
        {
          ((*natconmap_idx)(_533)) = (-(int)1);
        }
      }
      natconmap_efix = ::mosek::fusion::p_CommonTools::resize(natconmap_efix,_530);
      natconmap_lb = ::mosek::fusion::p_CommonTools::resize(natconmap_lb,_530);
      natconmap_ub = ::mosek::fusion::p_CommonTools::resize(natconmap_ub,_530);
      natconmap_blockid = ::mosek::fusion::p_CommonTools::resize(natconmap_blockid,_530);
      natconmap_slackidx = ::mosek::fusion::p_CommonTools::resize(natconmap_slackidx,_530);
    }
  }
  {}
  if (((int)((cons)->size(0)) < _531))
  {
    {
      natconmap_type = ::mosek::fusion::p_CommonTools::resize(natconmap_type,_531);
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > > _534 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 >(monty::shape(_531)));
      int _6829 = (int)0;
      int _6830 = (int)((cons)->size(0));
      for (int _535 = _6829; _535 < _6830; ++_535)
      {
        {
          ((*_534)(_535)) = ((*cons)(_535));
        }
      }
      int _6831 = (int)((cons)->size(0));
      int _6832 = _531;
      for (int _536 = _6831; _536 < _6832; ++_536)
      {
        {
          ((*_534)(_536)) = nullptr;
        }
      }
      cons = _534;
    }
  }
  {}
  if ((_529 > task_numcon()))
  {
    {
      task_append_con((_529 - task_numcon()));
    }
  }
  {}
  return _528;
}
int mosek::fusion::p_Model::natconemap_alloc(int _537){
  int _538 = natconemap->alloc(_537);
  int _539 = safe_add( natconemap->maxidx(_538),(int)1 );
  if ((_539 > task_numcone()))
  {
    {
      task_append_zerocones((_539 - task_numcone()));
    }
  }
  {}
  natconemap_dim = ::mosek::fusion::p_CommonTools::resize(natconemap_dim,natconemap->numblocks());
  return _538;
}
void mosek::fusion::p_Model::make_continuous(std::shared_ptr< monty::ndarray< long long,1 > > _540){
  _checked_ptr_1<long long> _ptr__540(_540 ? _540->raw() : nullptr, _540 ? _540->size(0) : 0);
  int _541 = (int)0;
  int _6833 = (int)0;
  int _6834 = (int)((_540)->size(0));
  for (int _542 = _6833; _542 < _6834; ++_542)
  {
    {
      if ((_ptr__540[_542] > (int)0))
      {
        {
          ++ _541;
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _543 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_541)));
  _checked_ptr_1<int> _ptr__543(_543 ? _543->raw() : nullptr,_543 ? _543->size(0) : 0);
  int _544 = (int)0;
  int _6835 = (int)0;
  int _6836 = (int)((_540)->size(0));
  for (int _545 = _6835; _545 < _6836; ++_545)
  {
    {
      if ((_ptr__540[_545] > (int)0))
      {
        {
          _ptr__543[_544] = (int)(_ptr__540[_545] - (int)1);
          ++ _544;
        }
      }
      {}
    }
  }
  task_var_putcontlist(_543);
}
void mosek::fusion::p_Model::make_integer(std::shared_ptr< monty::ndarray< long long,1 > > _546){
  _checked_ptr_1<long long> _ptr__546(_546 ? _546->raw() : nullptr, _546 ? _546->size(0) : 0);
  int _547 = (int)0;
  int _6837 = (int)0;
  int _6838 = (int)((_546)->size(0));
  for (int _548 = _6837; _548 < _6838; ++_548)
  {
    {
      if ((_ptr__546[_548] > (int)0))
      {
        {
          ++ _547;
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _549 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_547)));
  _checked_ptr_1<int> _ptr__549(_549 ? _549->raw() : nullptr,_549 ? _549->size(0) : 0);
  int _550 = (int)0;
  int _6839 = (int)0;
  int _6840 = (int)((_546)->size(0));
  for (int _551 = _6839; _551 < _6840; ++_551)
  {
    {
      if ((_ptr__546[_551] > (int)0))
      {
        {
          _ptr__549[_550] = (int)(_ptr__546[_551] - (int)1);
          ++ _550;
        }
      }
      {}
    }
  }
  task_var_putintlist(_549);
}
void mosek::fusion::Model::putlicensewait  ( bool _552) { mosek::fusion::p_Model::putlicensewait(_552); }void mosek::fusion::p_Model::putlicensewait(bool _552){
  ::mosek::fusion::p_BaseModel::env_putlicensewait(_552);
}
void mosek::fusion::Model::putlicensepath  ( const std::string & _553) { mosek::fusion::p_Model::putlicensepath(_553); }void mosek::fusion::p_Model::putlicensepath(const std::string & _553){
  ::mosek::fusion::p_BaseModel::env_putlicensepath(_553);
}
void mosek::fusion::Model::putlicensecode  ( std::shared_ptr< monty::ndarray< int,1 > > _554) { mosek::fusion::p_Model::putlicensecode(_554); }void mosek::fusion::p_Model::putlicensecode(std::shared_ptr< monty::ndarray< int,1 > > _554){
  _checked_ptr_1<int> _ptr__554(_554 ? _554->raw() : nullptr, _554 ? _554->size(0) : 0);
  ::mosek::fusion::p_BaseModel::env_putlicensecode(_554);
}
void mosek::fusion::Model :: dispose() { mosek::fusion::p_Model::_get_impl(this)->dispose(); }void mosek::fusion::p_Model::dispose(){
  int _6841 = (int)0;
  int _6842 = (int)((vars)->size(0));
  for (int _555 = _6841; _555 < _6842; ++_555)
  {
    {
      ((*vars)(_555)) = nullptr;
    }
  }
  int _6843 = (int)0;
  int _6844 = (int)((cons)->size(0));
  for (int _556 = _6843; _556 < _6844; ++_556)
  {
    {
      ((*cons)(_556)) = nullptr;
    }
  }
  ::mosek::fusion::p_BaseModel::dispose();
}
void mosek::fusion::p_Model::nativeVarToStr(int _557,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _558){
  if (((_557 < (int)0) || ((_557 >= (int)((natvarmap_idx)->size(0))) || (((*natvarmap_idx)(_557)) < (int)0))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Native variable index is invalid"));
    }
  }
  {}
  ((*vars)(((*natvarmap_blockid)(_557))))->elementName((long long)(((*natvarmap_idx)(_557))),_558);
}
MSKtask_t mosek::fusion::Model :: __mosek_2fusion_2Model__getTask() { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getTask(); }MSKtask_t mosek::fusion::Model::getTask() { return __mosek_2fusion_2Model__getTask(); }
MSKtask_t mosek::fusion::p_Model::__mosek_2fusion_2Model__getTask(){
  return __mosek_2fusion_2BaseModel__task_get();
}
void mosek::fusion::Model :: getConstraintValues(bool _559,std::shared_ptr< monty::ndarray< int,1 > > _560,std::shared_ptr< monty::ndarray< double,1 > > _561,int _562) { mosek::fusion::p_Model::_get_impl(this)->getConstraintValues(_559,_560,_561,_562); }void mosek::fusion::p_Model::getConstraintValues(bool _559,std::shared_ptr< monty::ndarray< int,1 > > _560,std::shared_ptr< monty::ndarray< double,1 > > _561,int _562){
  _checked_ptr_1<int> _ptr__560(_560 ? _560->raw() : nullptr, _560 ? _560->size(0) : 0);
  _checked_ptr_1<double> _ptr__561(_561 ? _561->raw() : nullptr, _561 ? _561->size(0) : 0);
  int _563 = (int)((_560)->size(0));
  std::shared_ptr< monty::ndarray< double,1 > > _6845;
  bool _6846 = _559;
  if (_6846)
  {
    _6845 = getSolution_xx(::mosek::fusion::SolutionType::Default);
  }
  else
  {
    _6845 = getSolution_yx(::mosek::fusion::SolutionType::Default);
  }
  std::shared_ptr< monty::ndarray< double,1 > > _564 = _6845;
  _checked_ptr_1<double> _ptr__564(_564 ? _564->raw() : nullptr,_564 ? _564->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6847;
  bool _6848 = _559;
  if (_6848)
  {
    _6847 = getSolution_barx(::mosek::fusion::SolutionType::Default);
  }
  else
  {
    _6847 = getSolution_bars(::mosek::fusion::SolutionType::Default);
  }
  std::shared_ptr< monty::ndarray< double,1 > > _565 = _6847;
  _checked_ptr_1<double> _ptr__565(_565 ? _565->raw() : nullptr,_565 ? _565->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6849;
  bool _6850 = _559;
  if (_6850)
  {
    _6849 = getSolution_xc(::mosek::fusion::SolutionType::Default);
  }
  else
  {
    _6849 = getSolution_y(::mosek::fusion::SolutionType::Default);
  }
  std::shared_ptr< monty::ndarray< double,1 > > _566 = _6849;
  _checked_ptr_1<double> _ptr__566(_566 ? _566->raw() : nullptr,_566 ? _566->size(0) : 0);
  int _6851 = (int)0;
  int _6852 = _563;
  for (int _567 = _6851; _567 < _6852; ++_567)
  {
    {
      long long _568 = ((*natconmap_slackidx)(_ptr__560[_567]));
      if ((_568 < (int)0))
      {
        {
          long long _569 = (-safe_add( _568,(int)1 ));
          _ptr__561[safe_add( _562,_567 )] = _ptr__565[_569];
        }
      }
      else if((_568 > (int)0))
      {
        {
          _ptr__561[safe_add( _562,_567 )] = _ptr__564[(_568 - (int)1)];
        }
      }
      else
      {
        {
          _ptr__561[safe_add( _562,_567 )] = _ptr__566[_ptr__560[_567]];
        }
      }
    }
  }
}
void mosek::fusion::Model :: getVariableDuals(bool _570,std::shared_ptr< monty::ndarray< long long,1 > > _571,std::shared_ptr< monty::ndarray< double,1 > > _572,int _573) { mosek::fusion::p_Model::_get_impl(this)->getVariableDuals(_570,_571,_572,_573); }void mosek::fusion::p_Model::getVariableDuals(bool _570,std::shared_ptr< monty::ndarray< long long,1 > > _571,std::shared_ptr< monty::ndarray< double,1 > > _572,int _573){
  _checked_ptr_1<long long> _ptr__571(_571 ? _571->raw() : nullptr, _571 ? _571->size(0) : 0);
  _checked_ptr_1<double> _ptr__572(_572 ? _572->raw() : nullptr, _572 ? _572->size(0) : 0);
  int _574 = (int)((_571)->size(0));
  if (_570)
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _575 = getSolution_slx(::mosek::fusion::SolutionType::Default);
      _checked_ptr_1<double> _ptr__575(_575 ? _575->raw() : nullptr,_575 ? _575->size(0) : 0);
      int _6853 = (int)0;
      int _6854 = _574;
      for (int _576 = _6853; _576 < _6854; ++_576)
      {
        {
          if ((_ptr__571[_576] > (int)0))
          {
            {
              _ptr__572[safe_add( _573,_576 )] = _ptr__575[(_ptr__571[_576] - (int)1)];
            }
          }
          else
          {
            {
              _ptr__572[safe_add( _573,_576 )] = (int)0;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _577 = getSolution_sux(::mosek::fusion::SolutionType::Default);
      _checked_ptr_1<double> _ptr__577(_577 ? _577->raw() : nullptr,_577 ? _577->size(0) : 0);
      int _6855 = (int)0;
      int _6856 = _574;
      for (int _578 = _6855; _578 < _6856; ++_578)
      {
        {
          if ((_ptr__571[_578] > (int)0))
          {
            {
              _ptr__572[safe_add( _573,_578 )] = (-_ptr__577[(_ptr__571[_578] - (int)1)]);
            }
          }
          else
          {
            {
              _ptr__572[safe_add( _573,_578 )] = (int)0;
            }
          }
        }
      }
    }
  }
}
void mosek::fusion::Model :: getVariableValues(bool _579,std::shared_ptr< monty::ndarray< long long,1 > > _580,std::shared_ptr< monty::ndarray< double,1 > > _581,int _582) { mosek::fusion::p_Model::_get_impl(this)->getVariableValues(_579,_580,_581,_582); }void mosek::fusion::p_Model::getVariableValues(bool _579,std::shared_ptr< monty::ndarray< long long,1 > > _580,std::shared_ptr< monty::ndarray< double,1 > > _581,int _582){
  _checked_ptr_1<long long> _ptr__580(_580 ? _580->raw() : nullptr, _580 ? _580->size(0) : 0);
  _checked_ptr_1<double> _ptr__581(_581 ? _581->raw() : nullptr, _581 ? _581->size(0) : 0);
  int _583 = (int)((_580)->size(0));
  std::shared_ptr< monty::ndarray< double,1 > > _6857;
  bool _6858 = _579;
  if (_6858)
  {
    _6857 = getSolution_xx(::mosek::fusion::SolutionType::Default);
  }
  else
  {
    _6857 = getSolution_yx(::mosek::fusion::SolutionType::Default);
  }
  std::shared_ptr< monty::ndarray< double,1 > > _584 = _6857;
  _checked_ptr_1<double> _ptr__584(_584 ? _584->raw() : nullptr,_584 ? _584->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6859;
  bool _6860 = (natbarvar_numbarvarelm > (int)0);
  if (_6860)
  {
    std::shared_ptr< monty::ndarray< double,1 > > _6861;
    bool _6862 = _579;
    if (_6862)
    {
      _6861 = getSolution_barx(::mosek::fusion::SolutionType::Default);
    }
    else
    {
      _6861 = getSolution_bars(::mosek::fusion::SolutionType::Default);
    }
    _6859 = _6861;
  }
  else
  {
    _6859 = nullptr;
  }
  std::shared_ptr< monty::ndarray< double,1 > > _585 = _6859;
  _checked_ptr_1<double> _ptr__585(_585 ? _585->raw() : nullptr,_585 ? _585->size(0) : 0);
  int _6863 = (int)0;
  int _6864 = _583;
  for (int _586 = _6863; _586 < _6864; ++_586)
  {
    {
      if ((_ptr__580[_586] > (int)0))
      {
        {
          _ptr__581[safe_add( _582,_586 )] = _ptr__584[(_ptr__580[_586] - (int)1)];
        }
      }
      else if((_ptr__580[_586] < (int)0))
      {
        {
          long long _587 = (-safe_add( _ptr__580[_586],(int)1 ));
          _ptr__581[safe_add( _582,_586 )] = _ptr__585[_587];
        }
      }
      else
      {
        {
          _ptr__581[safe_add( _582,_586 )] = (int)0;
        }
      }
    }
  }
}
void mosek::fusion::Model :: setVariableValues(bool _588,std::shared_ptr< monty::ndarray< long long,1 > > _589,std::shared_ptr< monty::ndarray< double,1 > > _590) { mosek::fusion::p_Model::_get_impl(this)->setVariableValues(_588,_589,_590); }void mosek::fusion::p_Model::setVariableValues(bool _588,std::shared_ptr< monty::ndarray< long long,1 > > _589,std::shared_ptr< monty::ndarray< double,1 > > _590){
  _checked_ptr_1<long long> _ptr__589(_589 ? _589->raw() : nullptr, _589 ? _589->size(0) : 0);
  _checked_ptr_1<double> _ptr__590(_590 ? _590->raw() : nullptr, _590 ? _590->size(0) : 0);
  if (_588)
  {
    {
      int _591 = (int)0;
      int _6865 = (int)0;
      int _6866 = (int)((_589)->size(0));
      for (int _592 = _6865; _592 < _6866; ++_592)
      {
        {
          if ((_ptr__589[_592] >= (int)0))
          {
            {
              ++ _591;
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _593 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_591)));
      _checked_ptr_1<int> _ptr__593(_593 ? _593->raw() : nullptr,_593 ? _593->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6867;
      bool _6868 = (_591 == (int)((_589)->size(0)));
      if (_6868)
      {
        _6867 = _590;
      }
      else
      {
        _6867 = _590;
      }
      std::shared_ptr< monty::ndarray< double,1 > > _594 = _6867;
      _checked_ptr_1<double> _ptr__594(_594 ? _594->raw() : nullptr,_594 ? _594->size(0) : 0);
      int _595 = (int)0;
      int _6869 = (int)0;
      int _6870 = (int)((_589)->size(0));
      for (int _596 = _6869; _596 < _6870; ++_596)
      {
        {
          if ((_ptr__589[_596] > (int)0))
          {
            {
              _ptr__593[_595] = (int)(_ptr__589[_596] - (int)1);
              ++ _595;
            }
          }
          {}
        }
      }
      setSolution_xx(_593,_594);
    }
  }
  else
  {
    {
    }
  }
}
void mosek::fusion::Model :: flushNames() { mosek::fusion::p_Model::_get_impl(this)->flushNames(); }void mosek::fusion::p_Model::flushNames(){
  int _6871 = (int)0;
  int _6872 = (int)((vars)->size(0));
  for (int _597 = _6871; _597 < _6872; ++_597)
  {
    {
      if ((NULL != ((*vars)(_597)).get()))
      {
        {
          mosek::fusion::p_ModelVariable::_get_impl(((*vars)(_597)).get())->flushNames();
        }
      }
      {}
    }
  }
  int _6873 = (int)0;
  int _6874 = (int)((barvars)->size(0));
  for (int _598 = _6873; _598 < _6874; ++_598)
  {
    {
      if ((NULL != ((*barvars)(_598)).get()))
      {
        {
          mosek::fusion::p_ModelVariable::_get_impl(((*barvars)(_598)).get())->flushNames();
        }
      }
      {}
    }
  }
  int _6875 = (int)0;
  int _6876 = (int)((cons)->size(0));
  for (int _599 = _6875; _599 < _6876; ++_599)
  {
    {
      if ((NULL != ((*cons)(_599)).get()))
      {
        {
          mosek::fusion::p_ModelConstraint::_get_impl(((*cons)(_599)).get())->flushNames();
        }
      }
      {}
    }
  }
}
void mosek::fusion::Model :: writeTask(const std::string & _600) { mosek::fusion::p_Model::_get_impl(this)->writeTask(_600); }void mosek::fusion::p_Model::writeTask(const std::string & _600){
  _pubthis->flushNames();
  task_write(_600);
}
long long mosek::fusion::Model :: getSolverLIntInfo(const std::string & _601) { return mosek::fusion::p_Model::_get_impl(this)->getSolverLIntInfo(_601); }long long mosek::fusion::p_Model::getSolverLIntInfo(const std::string & _601){
  return task_get_liinf(_601);
}
int mosek::fusion::Model :: getSolverIntInfo(const std::string & _602) { return mosek::fusion::p_Model::_get_impl(this)->getSolverIntInfo(_602); }int mosek::fusion::p_Model::getSolverIntInfo(const std::string & _602){
  return task_get_iinf(_602);
}
double mosek::fusion::Model :: getSolverDoubleInfo(const std::string & _603) { return mosek::fusion::p_Model::_get_impl(this)->getSolverDoubleInfo(_603); }double mosek::fusion::p_Model::getSolverDoubleInfo(const std::string & _603){
  return task_get_dinf(_603);
}
void mosek::fusion::Model :: setCallbackHandler(mosek::cbhandler_t _604) { mosek::fusion::p_Model::_get_impl(this)->setCallbackHandler(_604); }void mosek::fusion::p_Model::setCallbackHandler(mosek::cbhandler_t _604){
  task_setCallbackHandler(_604);
}
void mosek::fusion::Model :: setDataCallbackHandler(mosek::datacbhandler_t _605) { mosek::fusion::p_Model::_get_impl(this)->setDataCallbackHandler(_605); }void mosek::fusion::p_Model::setDataCallbackHandler(mosek::datacbhandler_t _605){
  task_setDataCallbackHandler(_605);
}
void mosek::fusion::Model :: setLogHandler(mosek::msghandler_t _606) { mosek::fusion::p_Model::_get_impl(this)->setLogHandler(_606); }void mosek::fusion::p_Model::setLogHandler(mosek::msghandler_t _606){
  task_setLogHandler(_606);
}
void mosek::fusion::Model :: setSolverParam(const std::string & _607,double _608) { mosek::fusion::p_Model::_get_impl(this)->setSolverParam(_607,_608); }void mosek::fusion::p_Model::setSolverParam(const std::string & _607,double _608){
  ::mosek::fusion::p_Parameters::setParameter(::mosek::fusion::Model::t(_pubthis),_607,_608);
}
void mosek::fusion::Model :: setSolverParam(const std::string & _609,int _610) { mosek::fusion::p_Model::_get_impl(this)->setSolverParam(_609,_610); }void mosek::fusion::p_Model::setSolverParam(const std::string & _609,int _610){
  ::mosek::fusion::p_Parameters::setParameter(::mosek::fusion::Model::t(_pubthis),_609,_610);
}
void mosek::fusion::Model :: setSolverParam(const std::string & _611,const std::string & _612) { mosek::fusion::p_Model::_get_impl(this)->setSolverParam(_611,_612); }void mosek::fusion::p_Model::setSolverParam(const std::string & _611,const std::string & _612){
  ::mosek::fusion::p_Parameters::setParameter(::mosek::fusion::Model::t(_pubthis),_611,_612);
}
void mosek::fusion::Model :: breakSolver() { mosek::fusion::p_Model::_get_impl(this)->breakSolver(); }void mosek::fusion::p_Model::breakSolver(){
  task_break_solve();
}
void mosek::fusion::Model :: solve() { mosek::fusion::p_Model::_get_impl(this)->solve(); }void mosek::fusion::p_Model::solve(){
  flush_initsol(::mosek::fusion::SolutionType::Interior);
  flush_initsol(::mosek::fusion::SolutionType::Integer);
  flush_initsol(::mosek::fusion::SolutionType::Basic);
  task_solve();
}
void mosek::fusion::Model :: flushSolutions() { mosek::fusion::p_Model::_get_impl(this)->flushSolutions(); }void mosek::fusion::p_Model::flushSolutions(){
  flush_initsol(::mosek::fusion::SolutionType::Interior);
  flush_initsol(::mosek::fusion::SolutionType::Integer);
  flush_initsol(::mosek::fusion::SolutionType::Basic);
}
void mosek::fusion::p_Model::flush_initsol(mosek::fusion::SolutionType _613){
  if ((NULL != initsol_xx.get()))
  {
    {
      int _614 = task_numvar();
      std::shared_ptr< monty::ndarray< double,1 > > _615 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_614)));
      _checked_ptr_1<double> _ptr__615(_615 ? _615->raw() : nullptr,_615 ? _615->size(0) : 0);
      try
      {
        {
          monty::rc_ptr< ::mosek::fusion::SolutionStruct > _617 = __mosek_2fusion_2Model__get_sol_cache(_613,true);
          if ((NULL != mosek::fusion::p_SolutionStruct::_get_impl(_617)->xx.get()))
          {
            {
              int _6877;
              bool _6878 = ((int)((mosek::fusion::p_SolutionStruct::_get_impl(_617)->xx)->size(0)) <= _614);
              if (_6878)
              {
                _6877 = (int)((mosek::fusion::p_SolutionStruct::_get_impl(_617)->xx)->size(0));
              }
              else
              {
                _6877 = _614;
              }
              ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_617)->xx,(int)0,_615,(int)0,_6877);
            }
          }
          {}
        }
      }
      catch (mosek::fusion::SolutionError _616)
      {
        {
        }
      }
      int _6879;
      bool _6880 = ((int)((initsol_xx)->size(0)) <= _614);
      if (_6880)
      {
        _6879 = (int)((initsol_xx)->size(0));
      }
      else
      {
        _6879 = _614;
      }
      int _618 = _6879;
      int _6881 = (int)0;
      int _6882 = _618;
      for (int _619 = _6881; _619 < _6882; ++_619)
      {
        {
          if (((*initsol_xx_flag)(_619)))
          {
            {
              _ptr__615[_619] = ((*initsol_xx)(_619));
            }
          }
          {}
        }
      }
      task_putxx_slice(_613,(int)0,_614,_615);
    }
  }
  {}
}
mosek::fusion::SolutionStatus mosek::fusion::Model :: getDualSolutionStatus() { return mosek::fusion::p_Model::_get_impl(this)->getDualSolutionStatus(); }mosek::fusion::SolutionStatus mosek::fusion::p_Model::getDualSolutionStatus(){
  return _pubthis->getDualSolutionStatus(solutionptr);
}
mosek::fusion::ProblemStatus mosek::fusion::Model :: getProblemStatus() { return mosek::fusion::p_Model::_get_impl(this)->getProblemStatus(); }mosek::fusion::ProblemStatus mosek::fusion::p_Model::getProblemStatus(){
  return _pubthis->getProblemStatus(solutionptr);
}
mosek::fusion::SolutionStatus mosek::fusion::Model :: getPrimalSolutionStatus() { return mosek::fusion::p_Model::_get_impl(this)->getPrimalSolutionStatus(); }mosek::fusion::SolutionStatus mosek::fusion::p_Model::getPrimalSolutionStatus(){
  return _pubthis->getPrimalSolutionStatus(solutionptr);
}
double mosek::fusion::Model :: dualObjValue() { return mosek::fusion::p_Model::_get_impl(this)->dualObjValue(); }double mosek::fusion::p_Model::dualObjValue(){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(::mosek::fusion::SolutionType::Default,false))->dobj;
}
double mosek::fusion::Model :: primalObjValue() { return mosek::fusion::p_Model::_get_impl(this)->primalObjValue(); }double mosek::fusion::p_Model::primalObjValue(){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(::mosek::fusion::SolutionType::Default,true))->pobj;
}
monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::p_Model::__mosek_2fusion_2Model__get_sol_cache(mosek::fusion::SolutionType _620,bool _621,bool _622){
  monty::rc_ptr< ::mosek::fusion::SolutionStruct > _623 = nullptr;
  mosek::fusion::SolutionType _624 = _620;
  if ((_624 == ::mosek::fusion::SolutionType::Default))
  {
    {
      _624 = solutionptr;
    }
  }
  {}
  if ((_624 == ::mosek::fusion::SolutionType::Default))
  {
    {
      if ((NULL != sol_itg.get()))
      {
        {
          _623 = sol_itg;
        }
      }
      else if((NULL != sol_bas.get()))
      {
        {
          _623 = sol_bas;
        }
      }
      else
      {
        {
          _623 = sol_itr;
        }
      }
    }
  }
  else if((_624 == ::mosek::fusion::SolutionType::Interior))
  {
    {
      _623 = sol_itr;
    }
  }
  else if((_624 == ::mosek::fusion::SolutionType::Basic))
  {
    {
      _623 = sol_bas;
    }
  }
  else if((_624 == ::mosek::fusion::SolutionType::Integer))
  {
    {
      _623 = sol_itg;
    }
  }
  {}
  if ((NULL == _623.get()))
  {
    {
      throw ::mosek::fusion::SolutionError(std::string ("Solution not available"));
    }
  }
  else
  {
    {
      if ((_622 || ((_621 && _623->isPrimalAcceptable(acceptable_sol)) || ((!_621) && _623->isDualAcceptable(acceptable_sol)))))
      {
        {
          return _623;
        }
      }
      else
      {
        {
          monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _625 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
          mosek::fusion::SolutionStatus _626 = mosek::fusion::p_SolutionStruct::_get_impl(_623)->pstatus;
          mosek::fusion::ProblemStatus _627 = mosek::fusion::p_SolutionStruct::_get_impl(_623)->probstatus;
          if ((!_621))
          {
            {
              _626 = mosek::fusion::p_SolutionStruct::_get_impl(_623)->dstatus;
            }
          }
          {}
          _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Solution status is "));
          if ((_626 == ::mosek::fusion::SolutionStatus::Undefined))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Undefined"));
            }
          }
          else if((_626 == ::mosek::fusion::SolutionStatus::Unknown))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Unknown"));
            }
          }
          else if((_626 == ::mosek::fusion::SolutionStatus::Optimal))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Optimal"));
            }
          }
          else if((_626 == ::mosek::fusion::SolutionStatus::Feasible))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Feasible"));
            }
          }
          else if((_626 == ::mosek::fusion::SolutionStatus::Certificate))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Certificate"));
            }
          }
          else if((_626 == ::mosek::fusion::SolutionStatus::IllposedCert))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("IllposedCert"));
            }
          }
          {}
          _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" but at least "));
          if ((acceptable_sol == ::mosek::fusion::AccSolutionStatus::Anything))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Anything"));
            }
          }
          else if((acceptable_sol == ::mosek::fusion::AccSolutionStatus::Optimal))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Optimal"));
            }
          }
          else if((acceptable_sol == ::mosek::fusion::AccSolutionStatus::Feasible))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Feasible"));
            }
          }
          else if((acceptable_sol == ::mosek::fusion::AccSolutionStatus::Certificate))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Certificate"));
            }
          }
          {}
          _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" is expected. Reason: Accessing "));
          if ((_623 == sol_itr))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("interior-point solution"));
            }
          }
          else if((_623 == sol_bas))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("basic solution"));
            }
          }
          else if((_623 == sol_itg))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("integer solution"));
            }
          }
          {}
          _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" whose problem status is "));
          if ((_627 == ::mosek::fusion::ProblemStatus::Unknown))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Unknown"));
            }
          }
          else if((_627 == ::mosek::fusion::ProblemStatus::PrimalAndDualFeasible))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PrimalAndDualFeasible"));
            }
          }
          else if((_627 == ::mosek::fusion::ProblemStatus::PrimalFeasible))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PrimalFeasible"));
            }
          }
          else if((_627 == ::mosek::fusion::ProblemStatus::DualFeasible))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("DualFeasible"));
            }
          }
          else if((_627 == ::mosek::fusion::ProblemStatus::PrimalInfeasible))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PrimalInfeasible"));
            }
          }
          else if((_627 == ::mosek::fusion::ProblemStatus::DualInfeasible))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("DualInfeasible"));
            }
          }
          else if((_627 == ::mosek::fusion::ProblemStatus::PrimalAndDualInfeasible))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PrimalAndDualInfeasible"));
            }
          }
          else if((_627 == ::mosek::fusion::ProblemStatus::IllPosed))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("IllPosed"));
            }
          }
          else if((_627 == ::mosek::fusion::ProblemStatus::PrimalInfeasibleOrUnbounded))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PrimalInfeasibleOrUnbounded"));
            }
          }
          {}
          _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("."));
          throw ::mosek::fusion::SolutionError(_625->toString());
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::p_Model::__mosek_2fusion_2Model__get_sol_cache(mosek::fusion::SolutionType _628,bool _629){
  return __mosek_2fusion_2Model__get_sol_cache(_628,_629,false);
}
void mosek::fusion::p_Model::setSolution_xx(std::shared_ptr< monty::ndarray< int,1 > > _630,std::shared_ptr< monty::ndarray< double,1 > > _631){
  _checked_ptr_1<int> _ptr__630(_630 ? _630->raw() : nullptr, _630 ? _630->size(0) : 0);
  _checked_ptr_1<double> _ptr__631(_631 ? _631->raw() : nullptr, _631 ? _631->size(0) : 0);
  ensure_initsol_xx();
  int _6883 = (int)0;
  int _6884 = (int)((_630)->size(0));
  for (int _632 = _6883; _632 < _6884; ++_632)
  {
    {
      ((*initsol_xx)(_ptr__630[_632])) = _ptr__631[_632];
      ((*initsol_xx_flag)(_ptr__630[_632])) = true;
    }
  }
}
void mosek::fusion::p_Model::ensure_initsol_xx(){
  int _633 = (int)((natvarmap_idx)->size(0));
  if ((NULL == initsol_xx.get()))
  {
    {
      initsol_xx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_633)));
      std::vector<bool> _6885;
      for (int _634 = (int)0, _6886 = _633; _634 < _6886 ; ++_634)
      {
        _6885.push_back(false);
      }
      auto _6887 = std::shared_ptr< monty::ndarray< bool,1 > >(new monty::ndarray< bool,1 >(monty::shape(_6885.size()),_6885.begin(),_6885.end()));
      initsol_xx_flag = _6887;
    }
  }
  else if(((int)((initsol_xx)->size(0)) < _633))
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _635 = initsol_xx;
      _checked_ptr_1<double> _ptr__635(_635 ? _635->raw() : nullptr,_635 ? _635->size(0) : 0);
      std::shared_ptr< monty::ndarray< bool,1 > > _636 = initsol_xx_flag;
      initsol_xx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_633)));
      initsol_xx_flag = std::shared_ptr< monty::ndarray< bool,1 > >(new monty::ndarray< bool,1 >(monty::shape(_633)));
      ::mosek::fusion::Utils::Tools::arraycopy(_635,(int)0,initsol_xx,(int)0,_633);
      int _6888 = (int)0;
      int _6889 = _633;
      for (int _637 = _6888; _637 < _6889; ++_637)
      {
        {
          ((*initsol_xx_flag)(_637)) = ((*_636)(_637));
        }
      }
    }
  }
  {}
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_bars(mosek::fusion::SolutionType _638){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_638,false))->bars;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_barx(mosek::fusion::SolutionType _639){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_639,false))->barx;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_y(mosek::fusion::SolutionType _640){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_640,false))->y;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_xc(mosek::fusion::SolutionType _641){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_641,true))->xc;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_snx(mosek::fusion::SolutionType _642){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_642,false))->snx;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_suc(mosek::fusion::SolutionType _643){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_643,false))->suc;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_slc(mosek::fusion::SolutionType _644){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_644,false))->slc;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_sux(mosek::fusion::SolutionType _645){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_645,false))->sux;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_slx(mosek::fusion::SolutionType _646){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_646,false))->slx;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_yx(mosek::fusion::SolutionType _647){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_647,true))->yx;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_xx(mosek::fusion::SolutionType _648){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_648,true))->xx;
}
void mosek::fusion::Model :: selectedSolution(mosek::fusion::SolutionType _649) { mosek::fusion::p_Model::_get_impl(this)->selectedSolution(_649); }void mosek::fusion::p_Model::selectedSolution(mosek::fusion::SolutionType _649){
  solutionptr = _649;
}
mosek::fusion::AccSolutionStatus mosek::fusion::Model :: getAcceptedSolutionStatus() { return mosek::fusion::p_Model::_get_impl(this)->getAcceptedSolutionStatus(); }mosek::fusion::AccSolutionStatus mosek::fusion::p_Model::getAcceptedSolutionStatus(){
  return acceptable_sol;
}
void mosek::fusion::Model :: acceptedSolutionStatus(mosek::fusion::AccSolutionStatus _650) { mosek::fusion::p_Model::_get_impl(this)->acceptedSolutionStatus(_650); }void mosek::fusion::p_Model::acceptedSolutionStatus(mosek::fusion::AccSolutionStatus _650){
  acceptable_sol = _650;
}
mosek::fusion::ProblemStatus mosek::fusion::Model :: getProblemStatus(mosek::fusion::SolutionType _651) { return mosek::fusion::p_Model::_get_impl(this)->getProblemStatus(_651); }mosek::fusion::ProblemStatus mosek::fusion::p_Model::getProblemStatus(mosek::fusion::SolutionType _651){
  monty::rc_ptr< ::mosek::fusion::SolutionStruct > _652 = nullptr;
  if ((_651 == ::mosek::fusion::SolutionType::Default))
  {
    {
      if ((NULL != sol_itg.get()))
      {
        {
          _652 = sol_itg;
        }
      }
      else if((NULL != sol_bas.get()))
      {
        {
          _652 = sol_bas;
        }
      }
      else
      {
        {
          _652 = sol_itr;
        }
      }
    }
  }
  else if((_651 == ::mosek::fusion::SolutionType::Interior))
  {
    {
      _652 = sol_itr;
    }
  }
  else if((_651 == ::mosek::fusion::SolutionType::Basic))
  {
    {
      _652 = sol_bas;
    }
  }
  else if((_651 == ::mosek::fusion::SolutionType::Integer))
  {
    {
      _652 = sol_itg;
    }
  }
  {}
  if ((NULL == _652.get()))
  {
    {
      return ::mosek::fusion::ProblemStatus::Unknown;
    }
  }
  else
  {
    {
      return mosek::fusion::p_SolutionStruct::_get_impl(_652)->probstatus;
    }
  }
}
mosek::fusion::SolutionStatus mosek::fusion::Model :: getDualSolutionStatus(mosek::fusion::SolutionType _653) { return mosek::fusion::p_Model::_get_impl(this)->getDualSolutionStatus(_653); }mosek::fusion::SolutionStatus mosek::fusion::p_Model::getDualSolutionStatus(mosek::fusion::SolutionType _653){
  return getSolutionStatus(_653,false);
}
mosek::fusion::SolutionStatus mosek::fusion::Model :: getPrimalSolutionStatus(mosek::fusion::SolutionType _654) { return mosek::fusion::p_Model::_get_impl(this)->getPrimalSolutionStatus(_654); }mosek::fusion::SolutionStatus mosek::fusion::p_Model::getPrimalSolutionStatus(mosek::fusion::SolutionType _654){
  return getSolutionStatus(_654,true);
}
mosek::fusion::SolutionStatus mosek::fusion::p_Model::getSolutionStatus(mosek::fusion::SolutionType _655,bool _656){
  try
  {
    {
      monty::rc_ptr< ::mosek::fusion::SolutionStruct > _658 = __mosek_2fusion_2Model__get_sol_cache(_655,_656,true);
      if (_656)
      {
        {
          return mosek::fusion::p_SolutionStruct::_get_impl(_658)->pstatus;
        }
      }
      else
      {
        {
          return mosek::fusion::p_SolutionStruct::_get_impl(_658)->dstatus;
        }
      }
    }
  }
  catch (mosek::fusion::SolutionError _657)
  {
    {
      return ::mosek::fusion::SolutionStatus::Undefined;
    }
  }
}
void mosek::fusion::p_Model::update(std::shared_ptr< monty::ndarray< int,1 > > _659,monty::rc_ptr< ::mosek::fusion::Expression > _660){
  _checked_ptr_1<int> _ptr__659(_659 ? _659->raw() : nullptr, _659 ? _659->size(0) : 0);
  ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_660)).as<::mosek::fusion::Expression>())->eval(ws,rs,xs);
  int _661 = ws->popi32();
  int _662 = ws->popi32(_661);
  int _663 = ws->popi32();
  int _664 = ws->popi32();
  bool _665 = ((int)0 != ws->popi32());
  int _666 = ws->popi32(safe_add( _663,(int)1 ));
  int _6890;
  bool _6891 = _665;
  if (_6891)
  {
    _6890 = ws->popi64(_663);
  }
  else
  {
    _6890 = (int)0;
  }
  int _667 = _6890;
  int _668 = ws->popi64(_664);
  int _669 = ws->popf64(_663);
  int _670 = ws->popf64(_664);
  std::shared_ptr< monty::ndarray< int,1 > > _671 = mosek::fusion::p_WorkStack::_get_impl(ws)->i32;
  _checked_ptr_1<int> _ptr__671(_671 ? _671->raw() : nullptr,_671 ? _671->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _672 = mosek::fusion::p_WorkStack::_get_impl(ws)->i64;
  _checked_ptr_1<long long> _ptr__672(_672 ? _672->raw() : nullptr,_672 ? _672->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _673 = mosek::fusion::p_WorkStack::_get_impl(ws)->f64;
  _checked_ptr_1<double> _ptr__673(_673 ? _673->raw() : nullptr,_673 ? _673->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _674 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _663,(int)1 ))));
  _checked_ptr_1<long long> _ptr__674(_674 ? _674->raw() : nullptr,_674 ? _674->size(0) : 0);
  int _6892 = (int)0;
  int _6893 = _663;
  for (int _675 = _6892; _675 < _6893; ++_675)
  {
    {
      int _6894 = _ptr__671[safe_add( _666,_675 )];
      int _6895 = _ptr__671[safe_add( safe_add( _666,_675 ),(int)1 )];
      for (int _676 = _6894; _676 < _6895; ++_676)
      {
        {
          if ((_ptr__672[safe_add( _668,_676 )] > (int)0))
          {
            {
              ++ _ptr__674[safe_add( _675,(int)1 )];
            }
          }
          {}
        }
      }
    }
  }
  int _6896 = (int)0;
  int _6897 = _663;
  for (int _677 = _6896; _677 < _6897; ++_677)
  {
    {
      _ptr__674[safe_add( _677,(int)1 )] += _ptr__674[_677];
    }
  }
  long long _678 = _ptr__674[_663];
  std::shared_ptr< monty::ndarray< int,1 > > _679 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_678)));
  _checked_ptr_1<int> _ptr__679(_679 ? _679->raw() : nullptr,_679 ? _679->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _680 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_678)));
  _checked_ptr_1<double> _ptr__680(_680 ? _680->raw() : nullptr,_680 ? _680->size(0) : 0);
  int _681 = (int)0;
  int _6898 = (int)0;
  int _6899 = _663;
  for (int _682 = _6898; _682 < _6899; ++_682)
  {
    {
      int _6900 = _ptr__671[safe_add( _666,_682 )];
      int _6901 = _ptr__671[safe_add( safe_add( _666,_682 ),(int)1 )];
      for (int _683 = _6900; _683 < _6901; ++_683)
      {
        {
          if ((_ptr__672[safe_add( _668,_683 )] > (int)0))
          {
            {
              _ptr__679[_681] = (int)(_ptr__672[safe_add( _668,_683 )] - (int)1);
              _ptr__680[_681] = _ptr__673[safe_add( _670,_683 )];
              ++ _681;
            }
          }
          {}
        }
      }
    }
  }
  task_putarowlist(_659,_674,_679,_680);
  std::vector<int> _6902;
  for (int _684 = (int)0, _6903 = _663; _684 < _6903 ; ++_684)
  {
    _6902.push_back(bfixidx);
  }
  auto _6904 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6902.size()),_6902.begin(),_6902.end()));
  std::vector<double> _6905;
  for (int _685 = (int)0, _6906 = _663; _685 < _6906 ; ++_685)
  {
    _6905.push_back(_ptr__673[safe_add( _669,_685 )]);
  }
  auto _6907 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6905.size()),_6905.begin(),_6905.end()));
  task_putaijlist(_659,_6904,_6907,(long long)(_663));
  int _686 = (int)0;
  int _6908 = (int)0;
  int _6909 = _663;
  for (int _687 = _6908; _687 < _6909; ++_687)
  {
    {
      if ((((*natconmap_slackidx)(_ptr__659[_687])) > (int)0))
      {
        {
          ++ _686;
        }
      }
      {}
    }
  }
  if ((_686 > (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _688 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_686)));
      _checked_ptr_1<int> _ptr__688(_688 ? _688->raw() : nullptr,_688 ? _688->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _689 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_686)));
      _checked_ptr_1<int> _ptr__689(_689 ? _689->raw() : nullptr,_689 ? _689->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _690 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_686)));
      _checked_ptr_1<double> _ptr__690(_690 ? _690->raw() : nullptr,_690 ? _690->size(0) : 0);
      int _691 = (int)0;
      int _6910 = (int)0;
      int _6911 = _663;
      for (int _692 = _6910; _692 < _6911; ++_692)
      {
        {
          if ((((*natconmap_slackidx)(_ptr__659[_692])) > (int)0))
          {
            {
              _ptr__688[_691] = _ptr__659[_692];
              _ptr__689[_691] = (int)(((*natconmap_slackidx)(_ptr__659[_692])) - (int)1);
              _ptr__690[_691] = (-1.0);
              ++ _691;
            }
          }
          {}
        }
      }
      task_putaijlist(_688,_689,_690,(long long)(_686));
    }
  }
  {}
}
void mosek::fusion::p_Model::update(std::shared_ptr< monty::ndarray< int,1 > > _693,monty::rc_ptr< ::mosek::fusion::Expression > _694,std::shared_ptr< monty::ndarray< int,1 > > _695,bool _696){
  _checked_ptr_1<int> _ptr__693(_693 ? _693->raw() : nullptr, _693 ? _693->size(0) : 0);
  _checked_ptr_1<int> _ptr__695(_695 ? _695->raw() : nullptr, _695 ? _695->size(0) : 0);
  int _697 = safe_mul( (int)((_693)->size(0)),(int)((_695)->size(0)) );
  std::shared_ptr< monty::ndarray< double,1 > > _698 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_697)));
  _checked_ptr_1<double> _ptr__698(_698 ? _698->raw() : nullptr,_698 ? _698->size(0) : 0);
  std::vector<int> _6912;
  for (int _700 = (int)0, _6913 = (int)((_693)->size(0)); _700 < _6913 ; ++_700)
  {
    for (int _701 = (int)0, _6914 = (int)((_695)->size(0)); _701 < _6914 ; ++_701)
    {
      _6912.push_back(_ptr__693[_700]);
    }
  }
  auto _6915 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6912.size()),_6912.begin(),_6912.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _699 = _6915;
  _checked_ptr_1<int> _ptr__699(_699 ? _699->raw() : nullptr,_699 ? _699->size(0) : 0);
  std::vector<int> _6916;
  for (int _703 = (int)0, _6917 = (int)((_693)->size(0)); _703 < _6917 ; ++_703)
  {
    for (int _704 = (int)0, _6918 = (int)((_695)->size(0)); _704 < _6918 ; ++_704)
    {
      _6916.push_back(_ptr__695[_704]);
    }
  }
  auto _6919 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6916.size()),_6916.begin(),_6916.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _702 = _6919;
  _checked_ptr_1<int> _ptr__702(_702 ? _702->raw() : nullptr,_702 ? _702->size(0) : 0);
  ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_694)).as<::mosek::fusion::Expression>())->eval(ws,rs,xs);
  int _705 = ws->popi32();
  int _706 = ws->popi32(_705);
  int _707 = ws->popi32();
  int _708 = ws->popi32();
  bool _709 = ((int)0 != ws->popi32());
  int _710 = ws->popi32(safe_add( _707,(int)1 ));
  int _6920;
  bool _6921 = _709;
  if (_6921)
  {
    _6920 = ws->popi64(_707);
  }
  else
  {
    _6920 = (int)0;
  }
  int _711 = _6920;
  int _712 = ws->popi64(_708);
  int _713 = ws->popf64(_707);
  int _714 = ws->popf64(_708);
  std::shared_ptr< monty::ndarray< int,1 > > _715 = mosek::fusion::p_WorkStack::_get_impl(ws)->i32;
  _checked_ptr_1<int> _ptr__715(_715 ? _715->raw() : nullptr,_715 ? _715->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _716 = mosek::fusion::p_WorkStack::_get_impl(ws)->i64;
  _checked_ptr_1<long long> _ptr__716(_716 ? _716->raw() : nullptr,_716 ? _716->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _717 = mosek::fusion::p_WorkStack::_get_impl(ws)->f64;
  _checked_ptr_1<double> _ptr__717(_717 ? _717->raw() : nullptr,_717 ? _717->size(0) : 0);
  int _718 = (int)0;
  int _6922 = (int)0;
  int _6923 = _707;
  for (int _719 = _6922; _719 < _6923; ++_719)
  {
    {
      int _720 = _ptr__715[safe_add( _710,_719 )];
      int _721 = _ptr__715[safe_add( safe_add( _710,_719 ),(int)1 )];
      int _722 = _720;
      int _723 = (int)0;
      while ( ((_723 < (int)((_695)->size(0))) && (_722 < _721)) )
      {
        {
          if ((_ptr__695[_723] < (_ptr__716[safe_add( _712,_722 )] - (int)1)))
          {
            {
              ++ _723;
            }
          }
          else if((_ptr__695[_723] > (_ptr__716[safe_add( _712,_722 )] - (int)1)))
          {
            {
              ++ _722;
            }
          }
          else
          {
            {
              _ptr__698[safe_add( _718,_723 )] = _ptr__717[safe_add( _714,_722 )];
              ++ _723;
              ++ _722;
            }
          }
        }
      }
      _718 += (int)((_695)->size(0));
    }
  }
  task_putaijlist(_699,_702,_698,(long long)(_697));
  if (_696)
  {
    {
      std::vector<int> _6924;
      for (int _724 = (int)0, _6925 = _707; _724 < _6925 ; ++_724)
      {
        _6924.push_back(bfixidx);
      }
      auto _6926 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6924.size()),_6924.begin(),_6924.end()));
      std::vector<double> _6927;
      for (int _725 = (int)0, _6928 = _707; _725 < _6928 ; ++_725)
      {
        _6927.push_back(_ptr__717[safe_add( _713,_725 )]);
      }
      auto _6929 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6927.size()),_6927.begin(),_6927.end()));
      task_putaijlist(_693,_6926,_6929,(long long)(_707));
    }
  }
  {}
}
void mosek::fusion::Model :: updateObjective(monty::rc_ptr< ::mosek::fusion::Expression > _726,monty::rc_ptr< ::mosek::fusion::Variable > _727) { mosek::fusion::p_Model::_get_impl(this)->updateObjective(_726,_727); }void mosek::fusion::p_Model::updateObjective(monty::rc_ptr< ::mosek::fusion::Expression > _726,monty::rc_ptr< ::mosek::fusion::Variable > _727){
  if ((_726->getSize() != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid expression size for objective"));
    }
  }
  {}
  int _728 = _727->numInst();
  std::shared_ptr< monty::ndarray< long long,1 > > _729 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_728)));
  _checked_ptr_1<long long> _ptr__729(_729 ? _729->raw() : nullptr,_729 ? _729->size(0) : 0);
  if ((_728 < _727->getSize()))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _730 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_728)));
      _checked_ptr_1<long long> _ptr__730(_730 ? _730->raw() : nullptr,_730 ? _730->size(0) : 0);
      _727->inst((int)0,_730,(int)0,_729);
    }
  }
  else
  {
    {
      _727->inst((int)0,_729);
    }
  }
  int _6930 = (int)0;
  int _6931 = _728;
  for (int _731 = _6930; _731 < _6931; ++_731)
  {
    {
      if ((_ptr__729[_731] < (int)0))
      {
        {
          throw ::mosek::fusion::UnimplementedError(std::string ("Updating semidefinite terms is currently not possible"));
        }
      }
      {}
    }
  }
  bool _732 = true;
  int _6932 = (int)0;
  int _6933 = (_728 - (int)1);
  for (int _733 = _6932; _733 < _6933; ++_733)
  {
    {
      _732 = (_732 && (_ptr__729[_733] < _ptr__729[(_733 - (int)1)]));
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _734 = nullptr;
  _checked_ptr_1<int> _ptr__734(_734 ? _734->raw() : nullptr,_734 ? _734->size(0) : 0);
  if (_732)
  {
    {
      std::vector<int> _6934;
      for (int _735 = (int)0, _6935 = _728; _735 < _6935 ; ++_735)
      {
        _6934.push_back((int)(_ptr__729[_735] - (int)1));
      }
      auto _6936 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6934.size()),_6934.begin(),_6934.end()));
      _734 = _6936;
      _ptr__734.update(_734 ? _734->raw() : nullptr, _734 ? _734->size(0) : 0);
    }
  }
  else
  {
    {
      std::vector<long long> _6937;
      for (int _737 = (-(int)1), _6938 = _728; _737 < _6938 ; ++_737)
      {
        _6937.push_back(_737);
      }
      auto _6939 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6937.size()),_6937.begin(),_6937.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _736 = _6939;
      _checked_ptr_1<long long> _ptr__736(_736 ? _736->raw() : nullptr,_736 ? _736->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_736,_729,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_728));
      std::vector<int> _6940;
      for (int _738 = (int)0, _6941 = _728; _738 < _6941 ; ++_738)
      {
        _6940.push_back((int)(_ptr__729[_ptr__736[_738]] - (int)1));
      }
      auto _6942 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6940.size()),_6940.begin(),_6940.end()));
      _734 = _6942;
      _ptr__734.update(_734 ? _734->raw() : nullptr, _734 ? _734->size(0) : 0);
    }
  }
  int _739 = (int)((_734)->size(0));
  std::shared_ptr< monty::ndarray< double,1 > > _740 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_739)));
  _checked_ptr_1<double> _ptr__740(_740 ? _740->raw() : nullptr,_740 ? _740->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _741 = _734;
  _checked_ptr_1<int> _ptr__741(_741 ? _741->raw() : nullptr,_741 ? _741->size(0) : 0);
  ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_726)).as<::mosek::fusion::Expression>())->eval(ws,rs,xs);
  int _742 = ws->popi32();
  int _743 = ws->popi32(_742);
  int _744 = ws->popi32();
  int _745 = ws->popi32();
  bool _746 = ((int)0 != ws->popi32());
  int _747 = ws->popi32(safe_add( _744,(int)1 ));
  int _6943;
  bool _6944 = _746;
  if (_6944)
  {
    _6943 = ws->popi64(_744);
  }
  else
  {
    _6943 = (int)0;
  }
  int _748 = _6943;
  int _749 = ws->popi64(_745);
  int _750 = ws->popf64(_744);
  int _751 = ws->popf64(_745);
  std::shared_ptr< monty::ndarray< int,1 > > _752 = mosek::fusion::p_WorkStack::_get_impl(ws)->i32;
  _checked_ptr_1<int> _ptr__752(_752 ? _752->raw() : nullptr,_752 ? _752->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _753 = mosek::fusion::p_WorkStack::_get_impl(ws)->i64;
  _checked_ptr_1<long long> _ptr__753(_753 ? _753->raw() : nullptr,_753 ? _753->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _754 = mosek::fusion::p_WorkStack::_get_impl(ws)->f64;
  _checked_ptr_1<double> _ptr__754(_754 ? _754->raw() : nullptr,_754 ? _754->size(0) : 0);
  int _755 = (int)0;
  int _6945 = (int)0;
  int _6946 = _744;
  for (int _756 = _6945; _756 < _6946; ++_756)
  {
    {
      int _757 = _ptr__752[safe_add( _747,_756 )];
      int _758 = _ptr__752[safe_add( safe_add( _747,_756 ),(int)1 )];
      int _759 = _757;
      int _760 = (int)0;
      while ( ((_760 < (int)((_734)->size(0))) && (_759 < _758)) )
      {
        {
          if ((_ptr__734[_760] < (_ptr__753[safe_add( _749,_759 )] - (int)1)))
          {
            {
              ++ _760;
            }
          }
          else if((_ptr__734[_760] > (_ptr__753[safe_add( _749,_759 )] - (int)1)))
          {
            {
              ++ _759;
            }
          }
          else
          {
            {
              _ptr__740[safe_add( _755,_760 )] = _ptr__754[safe_add( _751,_759 )];
              ++ _760;
              ++ _759;
            }
          }
        }
      }
      _755 += (int)((_734)->size(0));
    }
  }
  task_putclist(_741,_740);
}
void mosek::fusion::p_Model::objective_(const std::string & _761,mosek::fusion::ObjectiveSense _762,monty::rc_ptr< ::mosek::fusion::Expression > _763){
  task_putobjectivename(_761);
  monty::rc_ptr< ::mosek::fusion::WorkStack > _764 = ::mosek::fusion::p_WorkStack::_new_WorkStack();
  monty::rc_ptr< ::mosek::fusion::WorkStack > _765 = ::mosek::fusion::p_WorkStack::_new_WorkStack();
  ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_763)).as<::mosek::fusion::Expression>())->eval(_764,_765,xs);
  std::shared_ptr< monty::ndarray< int,1 > > _766 = mosek::fusion::p_WorkStack::_get_impl(_764)->i32;
  _checked_ptr_1<int> _ptr__766(_766 ? _766->raw() : nullptr,_766 ? _766->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _767 = mosek::fusion::p_WorkStack::_get_impl(_764)->i64;
  _checked_ptr_1<long long> _ptr__767(_767 ? _767->raw() : nullptr,_767 ? _767->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _768 = mosek::fusion::p_WorkStack::_get_impl(_764)->f64;
  _checked_ptr_1<double> _ptr__768(_768 ? _768->raw() : nullptr,_768 ? _768->size(0) : 0);
  int _769 = _764->popi32();
  int _770 = (int)1;
  int _6947 = (int)0;
  int _6948 = _769;
  for (int _771 = _6947; _771 < _6948; ++_771)
  {
    {
      _769 *= _764->popi32();
    }
  }
  if ((_770 != (int)1))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid expression size for objective"));
    }
  }
  {}
  int _772 = _764->popi32();
  if ((_772 != (int)1))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid expression for objective"));
    }
  }
  {}
  int _773 = _764->popi32();
  bool _774 = (_764->popi32() != (int)0);
  int _775 = _764->popi32(safe_add( _772,(int)1 ));
  int _776 = _764->popi64(_773);
  int _777 = _764->popf64(_772);
  int _778 = _764->popf64(_773);
  int _779 = (int)0;
  int _780 = (int)0;
  int _6949 = (int)0;
  int _6950 = _773;
  for (int _781 = _6949; _781 < _6950; ++_781)
  {
    {
      if ((_ptr__767[safe_add( _776,_781 )] < (int)0))
      {
        {
          ++ _780;
        }
      }
      else if((_ptr__767[safe_add( _776,_781 )] > (int)0))
      {
        {
          ++ _779;
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _782 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_779)));
  _checked_ptr_1<int> _ptr__782(_782 ? _782->raw() : nullptr,_782 ? _782->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _783 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_779)));
  _checked_ptr_1<double> _ptr__783(_783 ? _783->raw() : nullptr,_783 ? _783->size(0) : 0);
  {
    int _784 = (int)0;
    int _6951 = (int)0;
    int _6952 = _773;
    for (int _785 = _6951; _785 < _6952; ++_785)
    {
      {
        if ((_ptr__767[safe_add( _776,_785 )] > (int)0))
        {
          {
            _ptr__782[_784] = (int)(_ptr__767[safe_add( _776,_785 )] - (int)1);
            _ptr__783[_784] = _ptr__768[safe_add( _778,_785 )];
            ++ _784;
          }
        }
        {}
      }
    }
  }
  task_putobjective((_762 == ::mosek::fusion::ObjectiveSense::Maximize),_782,_783,_ptr__768[_777]);
  if ((_780 > (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _786 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_780)));
      _checked_ptr_1<int> _ptr__786(_786 ? _786->raw() : nullptr,_786 ? _786->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _787 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_780)));
      _checked_ptr_1<int> _ptr__787(_787 ? _787->raw() : nullptr,_787 ? _787->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _788 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_780)));
      _checked_ptr_1<int> _ptr__788(_788 ? _788->raw() : nullptr,_788 ? _788->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _789 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_780)));
      _checked_ptr_1<double> _ptr__789(_789 ? _789->raw() : nullptr,_789 ? _789->size(0) : 0);
      int _6953 = (int)0;
      int _6954 = _780;
      for (int _790 = _6953; _790 < _6954; ++_790)
      {
        {
          long long _791 = (-safe_add( _ptr__767[safe_add( _776,_790 )],(int)1 ));
          _ptr__786[_790] = ((*natbarvar_idx)(_791));
          _ptr__787[_790] = ((*natbarvar_i)(_791));
          _ptr__788[_790] = ((*natbarvar_j)(_791));
          double _6955;
          bool _6956 = (_ptr__787[_790] == _ptr__788[_790]);
          if (_6956)
          {
            _6955 = _ptr__768[safe_add( _778,_790 )];
          }
          else
          {
            _6955 = (0.5 * _ptr__768[safe_add( _778,_790 )]);
          }
          _ptr__789[_790] = _6955;
        }
      }
      task_putbarc(_786,_787,_788,_789);
    }
  }
  {}
}
void mosek::fusion::Model :: objective(double _792) { mosek::fusion::p_Model::_get_impl(this)->objective(_792); }void mosek::fusion::p_Model::objective(double _792){
  objective_(std::string (""),::mosek::fusion::ObjectiveSense::Minimize,::mosek::fusion::p_Expr::constTerm(_792));
}
void mosek::fusion::Model :: objective(mosek::fusion::ObjectiveSense _793,double _794) { mosek::fusion::p_Model::_get_impl(this)->objective(_793,_794); }void mosek::fusion::p_Model::objective(mosek::fusion::ObjectiveSense _793,double _794){
  objective_(std::string (""),_793,::mosek::fusion::p_Expr::constTerm(_794));
}
void mosek::fusion::Model :: objective(mosek::fusion::ObjectiveSense _795,monty::rc_ptr< ::mosek::fusion::Expression > _796) { mosek::fusion::p_Model::_get_impl(this)->objective(_795,_796); }void mosek::fusion::p_Model::objective(mosek::fusion::ObjectiveSense _795,monty::rc_ptr< ::mosek::fusion::Expression > _796){
  objective_(std::string (""),_795,_796);
}
void mosek::fusion::Model :: objective(const std::string & _797,double _798) { mosek::fusion::p_Model::_get_impl(this)->objective(_797,_798); }void mosek::fusion::p_Model::objective(const std::string & _797,double _798){
  objective_(_797,::mosek::fusion::ObjectiveSense::Minimize,::mosek::fusion::p_Expr::constTerm(_798));
}
void mosek::fusion::Model :: objective(const std::string & _799,mosek::fusion::ObjectiveSense _800,double _801) { mosek::fusion::p_Model::_get_impl(this)->objective(_799,_800,_801); }void mosek::fusion::p_Model::objective(const std::string & _799,mosek::fusion::ObjectiveSense _800,double _801){
  objective_(_799,_800,::mosek::fusion::p_Expr::constTerm(_801));
}
void mosek::fusion::Model :: objective(const std::string & _802,mosek::fusion::ObjectiveSense _803,monty::rc_ptr< ::mosek::fusion::Expression > _804) { mosek::fusion::p_Model::_get_impl(this)->objective(_802,_803,_804); }void mosek::fusion::p_Model::objective(const std::string & _802,mosek::fusion::ObjectiveSense _803,monty::rc_ptr< ::mosek::fusion::Expression > _804){
  objective_(_802,_803,_804);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _805,monty::rc_ptr< ::mosek::fusion::ConeDomain > _806) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_805,_806); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(monty::rc_ptr< ::mosek::fusion::Expression > _805,monty::rc_ptr< ::mosek::fusion::ConeDomain > _806) { return __mosek_2fusion_2Model__constraint(_805,_806); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _805,monty::rc_ptr< ::mosek::fusion::ConeDomain > _806){
  return __mosek_2fusion_2Model__constraint_(std::string (""),_805,_806);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(const std::string & _807,monty::rc_ptr< ::mosek::fusion::Expression > _808,monty::rc_ptr< ::mosek::fusion::ConeDomain > _809) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_807,_808,_809); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(const std::string &  _807,monty::rc_ptr< ::mosek::fusion::Expression > _808,monty::rc_ptr< ::mosek::fusion::ConeDomain > _809) { return __mosek_2fusion_2Model__constraint(_807,_808,_809); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(const std::string & _807,monty::rc_ptr< ::mosek::fusion::Expression > _808,monty::rc_ptr< ::mosek::fusion::ConeDomain > _809){
  return __mosek_2fusion_2Model__constraint_(_807,_808,_809);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _810,monty::rc_ptr< ::mosek::fusion::RangeDomain > _811) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_810,_811); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(monty::rc_ptr< ::mosek::fusion::Expression > _810,monty::rc_ptr< ::mosek::fusion::RangeDomain > _811) { return __mosek_2fusion_2Model__constraint(_810,_811); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _810,monty::rc_ptr< ::mosek::fusion::RangeDomain > _811){
  return __mosek_2fusion_2Model__constraint_(std::string (""),_810,_811);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(const std::string & _812,monty::rc_ptr< ::mosek::fusion::Expression > _813,monty::rc_ptr< ::mosek::fusion::RangeDomain > _814) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_812,_813,_814); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(const std::string &  _812,monty::rc_ptr< ::mosek::fusion::Expression > _813,monty::rc_ptr< ::mosek::fusion::RangeDomain > _814) { return __mosek_2fusion_2Model__constraint(_812,_813,_814); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(const std::string & _812,monty::rc_ptr< ::mosek::fusion::Expression > _813,monty::rc_ptr< ::mosek::fusion::RangeDomain > _814){
  return __mosek_2fusion_2Model__constraint_(_812,_813,_814);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _815,monty::rc_ptr< ::mosek::fusion::LinearDomain > _816) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_815,_816); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(monty::rc_ptr< ::mosek::fusion::Expression > _815,monty::rc_ptr< ::mosek::fusion::LinearDomain > _816) { return __mosek_2fusion_2Model__constraint(_815,_816); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _815,monty::rc_ptr< ::mosek::fusion::LinearDomain > _816){
  return __mosek_2fusion_2Model__constraint_(std::string (""),_815,_816);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(const std::string & _817,monty::rc_ptr< ::mosek::fusion::Expression > _818,monty::rc_ptr< ::mosek::fusion::LinearDomain > _819) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_817,_818,_819); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(const std::string &  _817,monty::rc_ptr< ::mosek::fusion::Expression > _818,monty::rc_ptr< ::mosek::fusion::LinearDomain > _819) { return __mosek_2fusion_2Model__constraint(_817,_818,_819); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(const std::string & _817,monty::rc_ptr< ::mosek::fusion::Expression > _818,monty::rc_ptr< ::mosek::fusion::LinearDomain > _819){
  return __mosek_2fusion_2Model__constraint_(_817,_818,_819);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _820,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _821) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_820,_821); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(monty::rc_ptr< ::mosek::fusion::Expression > _820,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _821) { return __mosek_2fusion_2Model__constraint(_820,_821); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _820,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _821){
  return __mosek_2fusion_2Model__constraint_(std::string (""),_820,_821);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(const std::string & _822,monty::rc_ptr< ::mosek::fusion::Expression > _823,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _824) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_822,_823,_824); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(const std::string &  _822,monty::rc_ptr< ::mosek::fusion::Expression > _823,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _824) { return __mosek_2fusion_2Model__constraint(_822,_823,_824); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(const std::string & _822,monty::rc_ptr< ::mosek::fusion::Expression > _823,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _824){
  return __mosek_2fusion_2Model__constraint_(_822,_823,_824);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _825,monty::rc_ptr< ::mosek::fusion::PSDDomain > _826) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_825,_826); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(monty::rc_ptr< ::mosek::fusion::Expression > _825,monty::rc_ptr< ::mosek::fusion::PSDDomain > _826) { return __mosek_2fusion_2Model__constraint(_825,_826); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _825,monty::rc_ptr< ::mosek::fusion::PSDDomain > _826){
  return __mosek_2fusion_2Model__constraint_(std::string (""),_825,_826);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(const std::string & _827,monty::rc_ptr< ::mosek::fusion::Expression > _828,monty::rc_ptr< ::mosek::fusion::PSDDomain > _829) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_827,_828,_829); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(const std::string &  _827,monty::rc_ptr< ::mosek::fusion::Expression > _828,monty::rc_ptr< ::mosek::fusion::PSDDomain > _829) { return __mosek_2fusion_2Model__constraint(_827,_828,_829); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(const std::string & _827,monty::rc_ptr< ::mosek::fusion::Expression > _828,monty::rc_ptr< ::mosek::fusion::PSDDomain > _829){
  return __mosek_2fusion_2Model__constraint_(_827,_828,_829);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _830) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_830); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _830) { return __mosek_2fusion_2Model__variable(_830); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _830){
  return __mosek_2fusion_2Model__variable_(std::string (""),mosek::fusion::p_LinPSDDomain::_get_impl(_830)->shape,_830);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _831,int _832,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _833) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_831,_832,_833); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _831,int _832,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _833) { return __mosek_2fusion_2Model__variable(_831,_832,_833); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _831,int _832,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _833){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_831),(int)(_831),(int)(_832)}),_833);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _834,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _835) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_834,_835); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _834,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _835) { return __mosek_2fusion_2Model__variable(_834,_835); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _834,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _835){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_834),(int)(_834)}),_835);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _836,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _837) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_836,_837); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _836,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _837) { return __mosek_2fusion_2Model__variable(_836,_837); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _836,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _837){
  return __mosek_2fusion_2Model__variable_(_836,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_837);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _838,int _839,int _840,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _841) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_838,_839,_840,_841); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _838,int _839,int _840,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _841) { return __mosek_2fusion_2Model__variable(_838,_839,_840,_841); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _838,int _839,int _840,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _841){
  return __mosek_2fusion_2Model__variable_(_838,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_839),(int)(_839),(int)(_840)}),_841);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _842,int _843,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _844) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_842,_843,_844); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _842,int _843,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _844) { return __mosek_2fusion_2Model__variable(_842,_843,_844); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _842,int _843,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _844){
  return __mosek_2fusion_2Model__variable_(_842,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_843),(int)(_843)}),_844);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _845,std::shared_ptr< monty::ndarray< int,1 > > _846,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _847) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_845,_846,_847); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _845,std::shared_ptr< monty::ndarray< int,1 > > _846,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _847) { return __mosek_2fusion_2Model__variable(_845,_846,_847); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _845,std::shared_ptr< monty::ndarray< int,1 > > _846,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _847){
  _checked_ptr_1<int> _ptr__846(_846 ? _846->raw() : nullptr, _846 ? _846->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(_845,_846,_847);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::PSDDomain > _848) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_848); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(monty::rc_ptr< ::mosek::fusion::PSDDomain > _848) { return __mosek_2fusion_2Model__variable(_848); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::PSDDomain > _848){
  return (__mosek_2fusion_2Model__variable_(std::string (""),mosek::fusion::p_PSDDomain::_get_impl(_848)->shape,_848)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _849,int _850,monty::rc_ptr< ::mosek::fusion::PSDDomain > _851) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_849,_850,_851); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _849,int _850,monty::rc_ptr< ::mosek::fusion::PSDDomain > _851) { return __mosek_2fusion_2Model__variable(_849,_850,_851); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _849,int _850,monty::rc_ptr< ::mosek::fusion::PSDDomain > _851){
  return (__mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_849),(int)(_849),(int)(_850)}),_851)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _852,monty::rc_ptr< ::mosek::fusion::PSDDomain > _853) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_852,_853); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _852,monty::rc_ptr< ::mosek::fusion::PSDDomain > _853) { return __mosek_2fusion_2Model__variable(_852,_853); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _852,monty::rc_ptr< ::mosek::fusion::PSDDomain > _853){
  return (__mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_852),(int)(_852)}),_853)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _854,monty::rc_ptr< ::mosek::fusion::PSDDomain > _855) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_854,_855); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _854,monty::rc_ptr< ::mosek::fusion::PSDDomain > _855) { return __mosek_2fusion_2Model__variable(_854,_855); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _854,monty::rc_ptr< ::mosek::fusion::PSDDomain > _855){
  return (__mosek_2fusion_2Model__variable_(_854,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_855)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _856,int _857,int _858,monty::rc_ptr< ::mosek::fusion::PSDDomain > _859) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_856,_857,_858,_859); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _856,int _857,int _858,monty::rc_ptr< ::mosek::fusion::PSDDomain > _859) { return __mosek_2fusion_2Model__variable(_856,_857,_858,_859); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _856,int _857,int _858,monty::rc_ptr< ::mosek::fusion::PSDDomain > _859){
  return (__mosek_2fusion_2Model__variable_(_856,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_857),(int)(_857),(int)(_858)}),_859)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _860,int _861,monty::rc_ptr< ::mosek::fusion::PSDDomain > _862) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_860,_861,_862); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _860,int _861,monty::rc_ptr< ::mosek::fusion::PSDDomain > _862) { return __mosek_2fusion_2Model__variable(_860,_861,_862); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _860,int _861,monty::rc_ptr< ::mosek::fusion::PSDDomain > _862){
  return (__mosek_2fusion_2Model__variable_(_860,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_861),(int)(_861)}),_862)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _863,std::shared_ptr< monty::ndarray< int,1 > > _864,monty::rc_ptr< ::mosek::fusion::PSDDomain > _865) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_863,_864,_865); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _863,std::shared_ptr< monty::ndarray< int,1 > > _864,monty::rc_ptr< ::mosek::fusion::PSDDomain > _865) { return __mosek_2fusion_2Model__variable(_863,_864,_865); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _863,std::shared_ptr< monty::ndarray< int,1 > > _864,monty::rc_ptr< ::mosek::fusion::PSDDomain > _865){
  _checked_ptr_1<int> _ptr__864(_864 ? _864->raw() : nullptr, _864 ? _864->size(0) : 0);
  return (__mosek_2fusion_2Model__variable_(_863,_864,_865)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::ConeDomain > _866) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_866); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(monty::rc_ptr< ::mosek::fusion::ConeDomain > _866) { return __mosek_2fusion_2Model__variable(_866); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::ConeDomain > _866){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_866);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::RangeDomain > _867) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_867); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(monty::rc_ptr< ::mosek::fusion::RangeDomain > _867) { return __mosek_2fusion_2Model__variable(_867); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::RangeDomain > _867){
  return __mosek_2fusion_2Model__ranged_variable(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_867);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::LinearDomain > _868) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_868); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(monty::rc_ptr< ::mosek::fusion::LinearDomain > _868) { return __mosek_2fusion_2Model__variable(_868); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::LinearDomain > _868){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_868);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _869,monty::rc_ptr< ::mosek::fusion::ConeDomain > _870) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_869,_870); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(std::shared_ptr< monty::ndarray< int,1 > > _869,monty::rc_ptr< ::mosek::fusion::ConeDomain > _870) { return __mosek_2fusion_2Model__variable(_869,_870); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _869,monty::rc_ptr< ::mosek::fusion::ConeDomain > _870){
  _checked_ptr_1<int> _ptr__869(_869 ? _869->raw() : nullptr, _869 ? _869->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(std::string (""),_869,_870);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _871,monty::rc_ptr< ::mosek::fusion::RangeDomain > _872) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_871,_872); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(std::shared_ptr< monty::ndarray< int,1 > > _871,monty::rc_ptr< ::mosek::fusion::RangeDomain > _872) { return __mosek_2fusion_2Model__variable(_871,_872); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _871,monty::rc_ptr< ::mosek::fusion::RangeDomain > _872){
  _checked_ptr_1<int> _ptr__871(_871 ? _871->raw() : nullptr, _871 ? _871->size(0) : 0);
  return __mosek_2fusion_2Model__ranged_variable(std::string (""),_871,_872);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _873,monty::rc_ptr< ::mosek::fusion::LinearDomain > _874) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_873,_874); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(std::shared_ptr< monty::ndarray< int,1 > > _873,monty::rc_ptr< ::mosek::fusion::LinearDomain > _874) { return __mosek_2fusion_2Model__variable(_873,_874); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _873,monty::rc_ptr< ::mosek::fusion::LinearDomain > _874){
  _checked_ptr_1<int> _ptr__873(_873 ? _873->raw() : nullptr, _873 ? _873->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(std::string (""),_873,_874);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _875) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_875); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(std::shared_ptr< monty::ndarray< int,1 > > _875) { return __mosek_2fusion_2Model__variable(_875); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _875){
  _checked_ptr_1<int> _ptr__875(_875 ? _875->raw() : nullptr, _875 ? _875->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(std::string (""),_875,::mosek::fusion::p_Domain::unbounded());
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _876,monty::rc_ptr< ::mosek::fusion::ConeDomain > _877) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_876,_877); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _876,monty::rc_ptr< ::mosek::fusion::ConeDomain > _877) { return __mosek_2fusion_2Model__variable(_876,_877); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _876,monty::rc_ptr< ::mosek::fusion::ConeDomain > _877){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_876)}),_877);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _878,monty::rc_ptr< ::mosek::fusion::RangeDomain > _879) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_878,_879); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _878,monty::rc_ptr< ::mosek::fusion::RangeDomain > _879) { return __mosek_2fusion_2Model__variable(_878,_879); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _878,monty::rc_ptr< ::mosek::fusion::RangeDomain > _879){
  return __mosek_2fusion_2Model__ranged_variable(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_878)}),_879);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _880,monty::rc_ptr< ::mosek::fusion::LinearDomain > _881) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_880,_881); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _880,monty::rc_ptr< ::mosek::fusion::LinearDomain > _881) { return __mosek_2fusion_2Model__variable(_880,_881); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _880,monty::rc_ptr< ::mosek::fusion::LinearDomain > _881){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_880)}),_881);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _882) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_882); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _882) { return __mosek_2fusion_2Model__variable(_882); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _882){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_882)}),::mosek::fusion::p_Domain::unbounded());
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable() { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable() { return __mosek_2fusion_2Model__variable(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),::mosek::fusion::p_Domain::unbounded());
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _883,monty::rc_ptr< ::mosek::fusion::ConeDomain > _884) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_883,_884); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _883,monty::rc_ptr< ::mosek::fusion::ConeDomain > _884) { return __mosek_2fusion_2Model__variable(_883,_884); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _883,monty::rc_ptr< ::mosek::fusion::ConeDomain > _884){
  return __mosek_2fusion_2Model__variable_(_883,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_884);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _885,monty::rc_ptr< ::mosek::fusion::RangeDomain > _886) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_885,_886); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _885,monty::rc_ptr< ::mosek::fusion::RangeDomain > _886) { return __mosek_2fusion_2Model__variable(_885,_886); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _885,monty::rc_ptr< ::mosek::fusion::RangeDomain > _886){
  return __mosek_2fusion_2Model__ranged_variable(_885,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_886);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _887,monty::rc_ptr< ::mosek::fusion::LinearDomain > _888) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_887,_888); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _887,monty::rc_ptr< ::mosek::fusion::LinearDomain > _888) { return __mosek_2fusion_2Model__variable(_887,_888); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _887,monty::rc_ptr< ::mosek::fusion::LinearDomain > _888){
  return __mosek_2fusion_2Model__variable_(_887,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_888);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _889,std::shared_ptr< monty::ndarray< int,1 > > _890,monty::rc_ptr< ::mosek::fusion::ConeDomain > _891) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_889,_890,_891); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _889,std::shared_ptr< monty::ndarray< int,1 > > _890,monty::rc_ptr< ::mosek::fusion::ConeDomain > _891) { return __mosek_2fusion_2Model__variable(_889,_890,_891); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _889,std::shared_ptr< monty::ndarray< int,1 > > _890,monty::rc_ptr< ::mosek::fusion::ConeDomain > _891){
  _checked_ptr_1<int> _ptr__890(_890 ? _890->raw() : nullptr, _890 ? _890->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(_889,_890,_891);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _892,std::shared_ptr< monty::ndarray< int,1 > > _893,monty::rc_ptr< ::mosek::fusion::RangeDomain > _894) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_892,_893,_894); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _892,std::shared_ptr< monty::ndarray< int,1 > > _893,monty::rc_ptr< ::mosek::fusion::RangeDomain > _894) { return __mosek_2fusion_2Model__variable(_892,_893,_894); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _892,std::shared_ptr< monty::ndarray< int,1 > > _893,monty::rc_ptr< ::mosek::fusion::RangeDomain > _894){
  _checked_ptr_1<int> _ptr__893(_893 ? _893->raw() : nullptr, _893 ? _893->size(0) : 0);
  return __mosek_2fusion_2Model__ranged_variable(_892,_893,_894);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _895,std::shared_ptr< monty::ndarray< int,1 > > _896,monty::rc_ptr< ::mosek::fusion::LinearDomain > _897) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_895,_896,_897); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _895,std::shared_ptr< monty::ndarray< int,1 > > _896,monty::rc_ptr< ::mosek::fusion::LinearDomain > _897) { return __mosek_2fusion_2Model__variable(_895,_896,_897); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _895,std::shared_ptr< monty::ndarray< int,1 > > _896,monty::rc_ptr< ::mosek::fusion::LinearDomain > _897){
  _checked_ptr_1<int> _ptr__896(_896 ? _896->raw() : nullptr, _896 ? _896->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(_895,_896,_897);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _898,std::shared_ptr< monty::ndarray< int,1 > > _899) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_898,_899); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _898,std::shared_ptr< monty::ndarray< int,1 > > _899) { return __mosek_2fusion_2Model__variable(_898,_899); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _898,std::shared_ptr< monty::ndarray< int,1 > > _899){
  _checked_ptr_1<int> _ptr__899(_899 ? _899->raw() : nullptr, _899 ? _899->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(_898,_899,::mosek::fusion::p_Domain::unbounded());
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _900,int _901,monty::rc_ptr< ::mosek::fusion::ConeDomain > _902) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_900,_901,_902); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _900,int _901,monty::rc_ptr< ::mosek::fusion::ConeDomain > _902) { return __mosek_2fusion_2Model__variable(_900,_901,_902); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _900,int _901,monty::rc_ptr< ::mosek::fusion::ConeDomain > _902){
  return __mosek_2fusion_2Model__variable_(_900,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_901)}),_902);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _903,int _904,monty::rc_ptr< ::mosek::fusion::RangeDomain > _905) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_903,_904,_905); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _903,int _904,monty::rc_ptr< ::mosek::fusion::RangeDomain > _905) { return __mosek_2fusion_2Model__variable(_903,_904,_905); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _903,int _904,monty::rc_ptr< ::mosek::fusion::RangeDomain > _905){
  return __mosek_2fusion_2Model__ranged_variable(_903,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_904)}),_905);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _906,int _907,monty::rc_ptr< ::mosek::fusion::LinearDomain > _908) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_906,_907,_908); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _906,int _907,monty::rc_ptr< ::mosek::fusion::LinearDomain > _908) { return __mosek_2fusion_2Model__variable(_906,_907,_908); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _906,int _907,monty::rc_ptr< ::mosek::fusion::LinearDomain > _908){
  return __mosek_2fusion_2Model__variable_(_906,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_907)}),_908);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _909,int _910) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_909,_910); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _909,int _910) { return __mosek_2fusion_2Model__variable(_909,_910); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _909,int _910){
  return __mosek_2fusion_2Model__variable_(_909,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_910)}),::mosek::fusion::p_Domain::unbounded());
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _911) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_911); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _911) { return __mosek_2fusion_2Model__variable(_911); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _911){
  return __mosek_2fusion_2Model__variable_(_911,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),::mosek::fusion::p_Domain::unbounded());
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__ranged_variable(const std::string & _912,std::shared_ptr< monty::ndarray< int,1 > > _913,monty::rc_ptr< ::mosek::fusion::RangeDomain > _914){
  _checked_ptr_1<int> _ptr__913(_913 ? _913->raw() : nullptr, _913 ? _913->size(0) : 0);
  if ((((int)((_912).size()) > (int)0) && hasVariable(_912)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate variable name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_912)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _6957;
  bool _6958 = (NULL != _913.get());
  if (_6958)
  {
    _6957 = _913;
  }
  else
  {
    _6957 = mosek::fusion::p_RangeDomain::_get_impl(_914)->shape;
  }
  std::shared_ptr< monty::ndarray< int,1 > > _915 = _6957;
  _checked_ptr_1<int> _ptr__915(_915 ? _915->raw() : nullptr,_915 ? _915->size(0) : 0);
  if (((NULL != mosek::fusion::p_RangeDomain::_get_impl(_914)->shape.get()) && (!::mosek::fusion::p_Set::match(mosek::fusion::p_RangeDomain::_get_impl(_914)->shape,_915))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));
    }
  }
  {}
  if ((NULL == _915.get()))
  {
    {
      _915 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
      _ptr__915.update(_915 ? _915->raw() : nullptr, _915 ? _915->size(0) : 0);
    }
  }
  {}
  int _916 = (int)((_915)->size(0));
  std::shared_ptr< monty::ndarray< int,1 > > _917 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_916)));
  _checked_ptr_1<int> _ptr__917(_917 ? _917->raw() : nullptr,_917 ? _917->size(0) : 0);
  if ((_916 > (int)0))
  {
    {
      _ptr__917[(_916 - (int)1)] = (int)1;
      int _6959 = (int)1;
      int _6960 = _916;
      for (int _918 = _6959; _918 < _6960; ++_918)
      {
        {
          _ptr__917[((_916 - _918) - (int)1)] = safe_mul( _ptr__917[(_916 - _918)],_ptr__915[(_916 - _918)] );
        }
      }
    }
  }
  {}
  int _919 = (int)1;
  int _6961 = (int)0;
  int _6962 = (int)((_915)->size(0));
  for (int _920 = _6961; _920 < _6962; ++_920)
  {
    {
      _919 *= _ptr__915[_920];
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _921 = nullptr;
  _checked_ptr_1<long long> _ptr__921(_921 ? _921->raw() : nullptr,_921 ? _921->size(0) : 0);
  if ((NULL != _921.get()))
  {
    {
      if (((int)((mosek::fusion::p_RangeDomain::_get_impl(_914)->sparsity)->size(1)) != _916))
      {
        {
          throw ::mosek::fusion::SparseFormatError(std::string ("Sparsity pattern is not correct"));
        }
      }
      {}
      _921 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((mosek::fusion::p_RangeDomain::_get_impl(_914)->sparsity)->size(0)))));
      _ptr__921.update(_921 ? _921->raw() : nullptr, _921 ? _921->size(0) : 0);
      int _6963 = (int)0;
      int _6964 = (int)((mosek::fusion::p_RangeDomain::_get_impl(_914)->sparsity)->size(0));
      for (int _922 = _6963; _922 < _6964; ++_922)
      {
        {
          int _6965 = (int)0;
          int _6966 = (int)((mosek::fusion::p_RangeDomain::_get_impl(_914)->sparsity)->size(1));
          for (int _923 = _6965; _923 < _6966; ++_923)
          {
            {
              if (((((*mosek::fusion::p_RangeDomain::_get_impl(_914)->sparsity)(_922,_923)) < (int)0) || (((*mosek::fusion::p_RangeDomain::_get_impl(_914)->sparsity)(_922,_923)) >= _ptr__915[_923])))
              {
                {
                  throw ::mosek::fusion::SparseFormatError(std::string ("Sparsity pattern is not correct"));
                }
              }
              {}
            }
          }
          long long _924 = (int)0;
          int _6967 = (int)0;
          int _6968 = (int)((mosek::fusion::p_RangeDomain::_get_impl(_914)->sparsity)->size(1));
          for (int _925 = _6967; _925 < _6968; ++_925)
          {
            {
              _924 += safe_mul( _ptr__917[_925],((*mosek::fusion::p_RangeDomain::_get_impl(_914)->sparsity)(_922,_925)) );
            }
          }
          _ptr__921[_922] = _924;
        }
      }
    }
  }
  {}
  int _6969;
  bool _6970 = (NULL != _921.get());
  if (_6970)
  {
    _6969 = (int)((_921)->size(0));
  }
  else
  {
    _6969 = _919;
  }
  int _926 = _6969;
  std::shared_ptr< monty::ndarray< double,1 > > _927;
  _checked_ptr_1<double> _ptr__927(_927 ? _927->raw() : nullptr,_927 ? _927->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _928;
  _checked_ptr_1<double> _ptr__928(_928 ? _928->raw() : nullptr,_928 ? _928->size(0) : 0);
  if (mosek::fusion::p_RangeDomain::_get_impl(_914)->scalable)
  {
    {
      std::vector<double> _6971;
      for (int _929 = (int)0, _6972 = _926; _929 < _6972 ; ++_929)
      {
        _6971.push_back(((*mosek::fusion::p_RangeDomain::_get_impl(_914)->lb)((int)0)));
      }
      auto _6973 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6971.size()),_6971.begin(),_6971.end()));
      _927 = _6973;
      _ptr__927.update(_927 ? _927->raw() : nullptr, _927 ? _927->size(0) : 0);
      std::vector<double> _6974;
      for (int _930 = (int)0, _6975 = _926; _930 < _6975 ; ++_930)
      {
        _6974.push_back(((*mosek::fusion::p_RangeDomain::_get_impl(_914)->ub)((int)0)));
      }
      auto _6976 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6974.size()),_6974.begin(),_6974.end()));
      _928 = _6976;
      _ptr__928.update(_928 ? _928->raw() : nullptr, _928 ? _928->size(0) : 0);
    }
  }
  else
  {
    {
      _927 = mosek::fusion::p_RangeDomain::_get_impl(_914)->lb;
      _ptr__927.update(_927 ? _927->raw() : nullptr, _927 ? _927->size(0) : 0);
      _928 = mosek::fusion::p_RangeDomain::_get_impl(_914)->ub;
      _ptr__928.update(_928 ? _928->raw() : nullptr, _928 ? _928->size(0) : 0);
    }
  }
  int _931 = natvarmap_alloc(_926);
  std::shared_ptr< monty::ndarray< int,1 > > _932 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(natvarmap->blocksize(_931))));
  _checked_ptr_1<int> _ptr__932(_932 ? _932->raw() : nullptr,_932 ? _932->size(0) : 0);
  natvarmap->get(_931,_932,(int)0);
  int _6977 = (int)0;
  int _6978 = _926;
  for (int _933 = _6977; _933 < _6978; ++_933)
  {
    {
      ((*natvarmap_idx)(_ptr__932[_933])) = _931;
    }
  }
  task_var_putboundlist_ra(_932,_927,_928);
  monty::rc_ptr< ::mosek::fusion::RangedVariable > _934 = ::mosek::fusion::p_RangedVariable::_new_RangedVariable(::mosek::fusion::Model::t(_pubthis),_912,(long long)(_931),_915,_921,_932);
  if (mosek::fusion::p_RangeDomain::_get_impl(_914)->cardinal_flag)
  {
    {
      task_var_putintlist(_932);
    }
  }
  {}
  ((*vars)(_931)) = (_934).as<::mosek::fusion::ModelVariable>();
  if (((int)((_912).size()) > (int)0))
  {
    {
      var_map->setItem(_912,_931);
    }
  }
  {}
  return (_934).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable_(const std::string & _935,std::shared_ptr< monty::ndarray< int,1 > > _936,monty::rc_ptr< ::mosek::fusion::ConeDomain > _937){
  _checked_ptr_1<int> _ptr__936(_936 ? _936->raw() : nullptr, _936 ? _936->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _6979;
  bool _6980 = (NULL != _936.get());
  if (_6980)
  {
    _6979 = _936;
  }
  else
  {
    _6979 = mosek::fusion::p_ConeDomain::_get_impl(_937)->shape;
  }
  std::shared_ptr< monty::ndarray< int,1 > > _938 = _6979;
  _checked_ptr_1<int> _ptr__938(_938 ? _938->raw() : nullptr,_938 ? _938->size(0) : 0);
  if ((((int)((_935).size()) > (int)0) && hasVariable(_935)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate variable name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_935)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if ((NULL == _938.get()))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Missing shape"));
    }
  }
  else if(((NULL != mosek::fusion::p_ConeDomain::_get_impl(_937)->shape.get()) && (!::mosek::fusion::p_Set::match(_938,mosek::fusion::p_ConeDomain::_get_impl(_937)->shape))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));
    }
  }
  else if((_937->getAxis() >= (int)((_938)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid cone dimension"));
    }
  }
  {}
  int _6981;
  bool _6982 = (NULL != mosek::fusion::p_ConeDomain::_get_impl(_937)->shape.get());
  if (_6982)
  {
    _6981 = _937->getAxis();
  }
  else
  {
    _6981 = ((int)((_938)->size(0)) - (int)1);
  }
  int _939 = _6981;
  int _940 = _ptr__938[_939];
  int _941 = (int)((_938)->size(0));
  std::shared_ptr< monty::ndarray< int,1 > > _942 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_941)));
  _checked_ptr_1<int> _ptr__942(_942 ? _942->raw() : nullptr,_942 ? _942->size(0) : 0);
  _ptr__942[(_941 - (int)1)] = (int)1;
  int _6983 = (int)1;
  int _6984 = _941;
  for (int _943 = _6983; _943 < _6984; ++_943)
  {
    {
      _ptr__942[((_941 - _943) - (int)1)] = safe_mul( _ptr__942[(_941 - _943)],_ptr__938[(_941 - _943)] );
    }
  }
  int _944 = _ptr__938[(int)0];
  int _6985 = (int)1;
  int _6986 = (int)((_938)->size(0));
  for (int _945 = _6985; _945 < _6986; ++_945)
  {
    {
      _944 *= _ptr__938[_945];
    }
  }
  int _946 = (int)1;
  int _6987 = (int)0;
  int _6988 = _939;
  for (int _947 = _6987; _947 < _6988; ++_947)
  {
    {
      _946 *= _ptr__938[_947];
    }
  }
  int _948 = (int)1;
  int _6989 = safe_add( _939,(int)1 );
  int _6990 = _941;
  for (int _949 = _6989; _949 < _6990; ++_949)
  {
    {
      _948 *= _ptr__938[_949];
    }
  }
  int _950 = safe_mul( _946,_948 );
  if ((((mosek::fusion::p_ConeDomain::_get_impl(_937)->key == ::mosek::fusion::QConeKey::InQCone) && (_940 < (int)2)) || (((mosek::fusion::p_ConeDomain::_get_impl(_937)->key == ::mosek::fusion::QConeKey::InRotatedQCone) && (_940 < (int)3)) || (((mosek::fusion::p_ConeDomain::_get_impl(_937)->key == ::mosek::fusion::QConeKey::InPExpCone) && (_940 != (int)3)) || (((mosek::fusion::p_ConeDomain::_get_impl(_937)->key == ::mosek::fusion::QConeKey::InPPowCone) && (_940 < (int)2)) || (((mosek::fusion::p_ConeDomain::_get_impl(_937)->key == ::mosek::fusion::QConeKey::InDExpCone) && (_940 != (int)3)) || ((mosek::fusion::p_ConeDomain::_get_impl(_937)->key == ::mosek::fusion::QConeKey::InDPowCone) && (_940 < (int)2))))))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid size for cone"));
    }
  }
  {}
  int _951 = natvarmap_alloc(_944);
  int _952 = natconemap_alloc(_950);
  ((*natvarmap_type)(_951)) = safe_add( _952,(int)6 );
  std::shared_ptr< monty::ndarray< int,1 > > _953 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(natvarmap->blocksize(_951))));
  _checked_ptr_1<int> _ptr__953(_953 ? _953->raw() : nullptr,_953 ? _953->size(0) : 0);
  natvarmap->get(_951,_953,(int)0);
  int _6991 = (int)0;
  int _6992 = _944;
  for (int _954 = _6991; _954 < _6992; ++_954)
  {
    {
      ((*natvarmap_idx)(_ptr__953[_954])) = _951;
    }
  }
  task_var_putboundlist_fr(_953);
  if (mosek::fusion::p_ConeDomain::_get_impl(_937)->int_flag)
  {
    {
      task_var_putintlist(_953);
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _955 = _953;
  _checked_ptr_1<int> _ptr__955(_955 ? _955->raw() : nullptr,_955 ? _955->size(0) : 0);
  if ((_939 < ((int)((_938)->size(0)) - (int)1)))
  {
    {
      _955 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_953)->size(0)))));
      _ptr__955.update(_955 ? _955->raw() : nullptr, _955 ? _955->size(0) : 0);
      int _956 = (int)0;
      int _6993 = (int)0;
      int _6994 = _946;
      for (int _957 = _6993; _957 < _6994; ++_957)
      {
        {
          int _6995 = (int)0;
          int _6996 = _948;
          for (int _958 = _6995; _958 < _6996; ++_958)
          {
            {
              int _6997 = (int)0;
              int _6998 = _940;
              for (int _959 = _6997; _959 < _6998; ++_959)
              {
                {
                  _ptr__955[_956] = _ptr__953[safe_add( safe_mul( safe_add( safe_mul( _957,_940 ),_959 ),_948 ),_958 )];
                  ++ _956;
                }
              }
            }
          }
        }
      }
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _960 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_950)));
  _checked_ptr_1<int> _ptr__960(_960 ? _960->raw() : nullptr,_960 ? _960->size(0) : 0);
  natconemap->get(_952,_960,(int)0);
  ((*natconemap_dim)(_952)) = _940;
  if ((mosek::fusion::p_ConeDomain::_get_impl(_937)->key == ::mosek::fusion::QConeKey::InQCone))
  {
    {
      task_put_quadcones(_960,_940,_950,_955);
    }
  }
  else
  {
    {
      if ((mosek::fusion::p_ConeDomain::_get_impl(_937)->key == ::mosek::fusion::QConeKey::InRotatedQCone))
      {
        {
          task_put_rquadcones(_960,_940,_950,_955);
        }
      }
      else
      {
        {
          if ((mosek::fusion::p_ConeDomain::_get_impl(_937)->key == ::mosek::fusion::QConeKey::InPExpCone))
          {
            {
              task_put_pexpcones(_960,_940,_950,_955);
            }
          }
          else
          {
            {
              if ((mosek::fusion::p_ConeDomain::_get_impl(_937)->key == ::mosek::fusion::QConeKey::InPPowCone))
              {
                {
                  std::vector<double> _6999;
                  for (int _961 = (int)0, _7000 = _950; _961 < _7000 ; ++_961)
                  {
                    _6999.push_back(mosek::fusion::p_ConeDomain::_get_impl(_937)->alpha);
                  }
                  auto _7001 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6999.size()),_6999.begin(),_6999.end()));
                  task_put_ppowcones(_960,_940,_950,_955,_7001);
                }
              }
              else
              {
                {
                  if ((mosek::fusion::p_ConeDomain::_get_impl(_937)->key == ::mosek::fusion::QConeKey::InDExpCone))
                  {
                    {
                      task_put_dexpcones(_960,_940,_950,_955);
                    }
                  }
                  else
                  {
                    {
                      if ((mosek::fusion::p_ConeDomain::_get_impl(_937)->key == ::mosek::fusion::QConeKey::InDPowCone))
                      {
                        {
                          std::vector<double> _7002;
                          for (int _962 = (int)0, _7003 = _950; _962 < _7003 ; ++_962)
                          {
                            _7002.push_back(mosek::fusion::p_ConeDomain::_get_impl(_937)->alpha);
                          }
                          auto _7004 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7002.size()),_7002.begin(),_7002.end()));
                          task_put_dpowcones(_960,_940,_950,_955,_7004);
                        }
                      }
                      {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  int _7005 = (int)0;
  int _7006 = (int)((_960)->size(0));
  for (int _963 = _7005; _963 < _7006; ++_963)
  {
    {
      task_cone_name(_ptr__960[_963],::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__960[_963])->toString());
    }
  }
  monty::rc_ptr< ::mosek::fusion::ConicVariable > _964 = ::mosek::fusion::p_ConicVariable::_new_ConicVariable(::mosek::fusion::Model::t(_pubthis),_935,_951,_938,_953);
  ((*vars)(_951)) = (_964).as<::mosek::fusion::ModelVariable>();
  if (((int)((_935).size()) > (int)0))
  {
    {
      var_map->setItem(_935,_951);
    }
  }
  {}
  return (_964).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable_(const std::string & _965,std::shared_ptr< monty::ndarray< int,1 > > _966,monty::rc_ptr< ::mosek::fusion::LinearDomain > _967){
  _checked_ptr_1<int> _ptr__966(_966 ? _966->raw() : nullptr, _966 ? _966->size(0) : 0);
  if ((((int)((_965).size()) > (int)0) && hasVariable(_965)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate variable name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_965)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _7007;
  bool _7008 = (NULL != _966.get());
  if (_7008)
  {
    _7007 = _966;
  }
  else
  {
    _7007 = mosek::fusion::p_LinearDomain::_get_impl(_967)->shape;
  }
  std::shared_ptr< monty::ndarray< int,1 > > _968 = _7007;
  _checked_ptr_1<int> _ptr__968(_968 ? _968->raw() : nullptr,_968 ? _968->size(0) : 0);
  if (((NULL != mosek::fusion::p_LinearDomain::_get_impl(_967)->shape.get()) && (!::mosek::fusion::p_Set::match(mosek::fusion::p_LinearDomain::_get_impl(_967)->shape,_968))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));
    }
  }
  {}
  if ((NULL == _968.get()))
  {
    {
      _968 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
      _ptr__968.update(_968 ? _968->raw() : nullptr, _968 ? _968->size(0) : 0);
    }
  }
  {}
  int _969 = (int)((_968)->size(0));
  std::shared_ptr< monty::ndarray< int,1 > > _970 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_969)));
  _checked_ptr_1<int> _ptr__970(_970 ? _970->raw() : nullptr,_970 ? _970->size(0) : 0);
  if ((_969 > (int)0))
  {
    {
      _ptr__970[(_969 - (int)1)] = (int)1;
      int _7009 = (int)1;
      int _7010 = _969;
      for (int _971 = _7009; _971 < _7010; ++_971)
      {
        {
          _ptr__970[((_969 - _971) - (int)1)] = safe_mul( _ptr__970[(_969 - _971)],_ptr__968[(_969 - _971)] );
        }
      }
    }
  }
  {}
  int _972 = (int)1;
  int _7011 = (int)0;
  int _7012 = (int)((_968)->size(0));
  for (int _973 = _7011; _973 < _7012; ++_973)
  {
    {
      _972 *= _ptr__968[_973];
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _974 = nullptr;
  _checked_ptr_1<long long> _ptr__974(_974 ? _974->raw() : nullptr,_974 ? _974->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _975 = nullptr;
  _checked_ptr_1<int> _ptr__975(_975 ? _975->raw() : nullptr,_975 ? _975->size(0) : 0);
  if (mosek::fusion::p_LinearDomain::_get_impl(_967)->empty)
  {
    {
      _974 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0)));
      _ptr__974.update(_974 ? _974->raw() : nullptr, _974 ? _974->size(0) : 0);
    }
  }
  else if((NULL != mosek::fusion::p_LinearDomain::_get_impl(_967)->sparsity.get()))
  {
    {
      if (((int)((mosek::fusion::p_LinearDomain::_get_impl(_967)->sparsity)->size(1)) != _969))
      {
        {
          throw ::mosek::fusion::SparseFormatError(std::string ("Sparsity pattern is not correct"));
        }
      }
      {}
      int _976 = (int)((mosek::fusion::p_LinearDomain::_get_impl(_967)->sparsity)->size(0));
      _974 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_976)));
      _ptr__974.update(_974 ? _974->raw() : nullptr, _974 ? _974->size(0) : 0);
      {
        bool _977 = false;
        std::shared_ptr< monty::ndarray< int,2 > > _978 = mosek::fusion::p_LinearDomain::_get_impl(_967)->sparsity;
        int _7013 = (int)0;
        int _7014 = _976;
        for (int _979 = _7013; _979 < _7014; ++_979)
        {
          {
            int _7015 = (int)0;
            int _7016 = (int)((_978)->size(1));
            for (int _980 = _7015; _980 < _7016; ++_980)
            {
              {
                _977 = (_977 || ((((*_978)(_979,_980)) < (int)0) || (((*_978)(_979,_980)) >= _ptr__968[_980])));
              }
            }
            if ((!_977))
            {
              {
                long long _981 = (int)0;
                int _7017 = (int)0;
                int _7018 = (int)((_978)->size(1));
                for (int _982 = _7017; _982 < _7018; ++_982)
                {
                  {
                    _981 += safe_mul( _ptr__970[_982],((*_978)(_979,_982)) );
                  }
                }
                _ptr__974[_979] = _981;
              }
            }
            {}
          }
        }
        if (_977)
        {
          {
            throw ::mosek::fusion::SparseFormatError(std::string ("Sparsity pattern is out of bounds"));
          }
        }
        {}
      }
      std::shared_ptr< monty::ndarray< int,2 > > _983 = mosek::fusion::p_LinearDomain::_get_impl(_967)->sparsity;
      int _984 = (int)0;
      int _7019 = (int)0;
      int _7020 = _969;
      for (int _985 = _7019; _985 < _7020; ++_985)
      {
        {
          if ((_984 < _ptr__968[_985]))
          {
            {
              _984 = _ptr__968[_985];
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _986 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_976)));
      _checked_ptr_1<int> _ptr__986(_986 ? _986->raw() : nullptr,_986 ? _986->size(0) : 0);
      int _7021 = (int)0;
      int _7022 = _976;
      for (int _987 = _7021; _987 < _7022; ++_987)
      {
        {
          _ptr__986[_987] = _987;
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _988 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_976)));
      _checked_ptr_1<int> _ptr__988(_988 ? _988->raw() : nullptr,_988 ? _988->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _989 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _984,(int)1 ))));
      _checked_ptr_1<int> _ptr__989(_989 ? _989->raw() : nullptr,_989 ? _989->size(0) : 0);
      int _7023 = (int)0;
      int _7024 = _969;
      for (int _990 = _7023; _990 < _7024; ++_990)
      {
        {
          {
            int _991 = ((_969 - _990) - (int)1);
            int _7025 = (int)0;
            int _7026 = safe_add( _ptr__968[_991],(int)1 );
            for (int _992 = _7025; _992 < _7026; ++_992)
            {
              {
                _ptr__989[_992] = (int)0;
              }
            }
            int _7027 = (int)0;
            int _7028 = _976;
            for (int _993 = _7027; _993 < _7028; ++_993)
            {
              {
                ++ _ptr__989[safe_add( ((*_983)(_993,_991)),(int)1 )];
              }
            }
            int _7029 = (int)0;
            int _7030 = _ptr__968[_991];
            for (int _994 = _7029; _994 < _7030; ++_994)
            {
              {
                _ptr__989[safe_add( _994,(int)1 )] += _ptr__989[_994];
              }
            }
            int _7031 = (int)0;
            int _7032 = _976;
            for (int _995 = _7031; _995 < _7032; ++_995)
            {
              {
                int _996 = _ptr__986[_995];
                _ptr__988[_ptr__989[((*_983)(_996,_991))]] = _996;
                ++ _ptr__989[((*_983)(_996,_991))];
              }
            }
          }
          std::shared_ptr< monty::ndarray< int,1 > > _997 = _986;
          _checked_ptr_1<int> _ptr__997(_997 ? _997->raw() : nullptr,_997 ? _997->size(0) : 0);
          _986 = _988;
          _ptr__986.update(_986 ? _986->raw() : nullptr, _986 ? _986->size(0) : 0);
          _988 = _997;
          _ptr__988.update(_988 ? _988->raw() : nullptr, _988 ? _988->size(0) : 0);
        }
      }
      int _7033 = (int)0;
      int _7034 = _976;
      for (int _998 = _7033; _998 < _7034; ++_998)
      {
        {
          int _999 = _ptr__986[_998];
          long long _1000 = (int)0;
          int _7035 = (int)0;
          int _7036 = _969;
          for (int _1001 = _7035; _1001 < _7036; ++_1001)
          {
            {
              _1000 += safe_mul( _ptr__970[_1001],((*_983)(_999,_1001)) );
            }
          }
          _ptr__974[_998] = _1000;
        }
      }
    }
  }
  {}
  int _7037;
  bool _7038 = (NULL != _974.get());
  if (_7038)
  {
    _7037 = (int)((_974)->size(0));
  }
  else
  {
    _7037 = _972;
  }
  int _1002 = _7037;
  std::shared_ptr< monty::ndarray< double,1 > > _1003 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1002)));
  _checked_ptr_1<double> _ptr__1003(_1003 ? _1003->raw() : nullptr,_1003 ? _1003->size(0) : 0);
  if ((NULL != mosek::fusion::p_LinearDomain::_get_impl(_967)->bnd.get()))
  {
    {
      if (((int)((mosek::fusion::p_LinearDomain::_get_impl(_967)->bnd)->size(0)) == (int)1))
      {
        {
          int _7039 = (int)0;
          int _7040 = _1002;
          for (int _1004 = _7039; _1004 < _7040; ++_1004)
          {
            {
              _ptr__1003[_1004] = ((*mosek::fusion::p_LinearDomain::_get_impl(_967)->bnd)((int)0));
            }
          }
        }
      }
      else if(((int)((mosek::fusion::p_LinearDomain::_get_impl(_967)->bnd)->size(0)) == _1002))
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinearDomain::_get_impl(_967)->bnd,(int)0,_1003,(int)0,_1002);
        }
      }
      else
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid right hand side shape in domain"));
        }
      }
    }
  }
  {}
  int _1005 = natvarmap_alloc(_1002);
  std::shared_ptr< monty::ndarray< int,1 > > _1006 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(natvarmap->blocksize(_1005))));
  _checked_ptr_1<int> _ptr__1006(_1006 ? _1006->raw() : nullptr,_1006 ? _1006->size(0) : 0);
  natvarmap->get(_1005,_1006,(int)0);
  int _7041 = (int)0;
  int _7042 = _1002;
  for (int _1007 = _7041; _1007 < _7042; ++_1007)
  {
    {
      ((*natvarmap_idx)(_ptr__1006[_1007])) = _1005;
    }
  }
  if ((mosek::fusion::p_LinearDomain::_get_impl(_967)->key == ::mosek::fusion::RelationKey::IsFree))
  {
    {
      task_var_putboundlist_fr(_1006);
      ((*natvarmap_type)(_1005)) = (int)1;
    }
  }
  {}
  if ((mosek::fusion::p_LinearDomain::_get_impl(_967)->key == ::mosek::fusion::RelationKey::LessThan))
  {
    {
      task_var_putboundlist_up(_1006,_1003);
      ((*natvarmap_type)(_1005)) = (int)3;
    }
  }
  else if((mosek::fusion::p_LinearDomain::_get_impl(_967)->key == ::mosek::fusion::RelationKey::GreaterThan))
  {
    {
      task_var_putboundlist_lo(_1006,_1003);
      ((*natvarmap_type)(_1005)) = (int)2;
    }
  }
  else if((mosek::fusion::p_LinearDomain::_get_impl(_967)->key == ::mosek::fusion::RelationKey::EqualsTo))
  {
    {
      task_var_putboundlist_fx(_1006,_1003);
      ((*natvarmap_type)(_1005)) = (int)5;
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::LinearVariable > _1008 = ::mosek::fusion::p_LinearVariable::_new_LinearVariable(::mosek::fusion::Model::t(_pubthis),_965,(long long)(_1005),_968,_974,_1006);
  if (mosek::fusion::p_LinearDomain::_get_impl(_967)->cardinal_flag)
  {
    {
      task_var_putintlist(_1006);
    }
  }
  {}
  ((*vars)(_1005)) = (_1008).as<::mosek::fusion::ModelVariable>();
  if (((int)((_965).size()) > (int)0))
  {
    {
      var_map->setItem(_965,_1005);
    }
  }
  {}
  return (_1008).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable_(const std::string & _1009,std::shared_ptr< monty::ndarray< int,1 > > _1010,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1011){
  _checked_ptr_1<int> _ptr__1010(_1010 ? _1010->raw() : nullptr, _1010 ? _1010->size(0) : 0);
  if ((((int)((_1009).size()) > (int)0) && hasVariable(_1009)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate variable name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1009)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _7043;
  bool _7044 = (NULL != _1010.get());
  if (_7044)
  {
    _7043 = _1010;
  }
  else
  {
    _7043 = mosek::fusion::p_LinPSDDomain::_get_impl(_1011)->shape;
  }
  std::shared_ptr< monty::ndarray< int,1 > > _1012 = _7043;
  _checked_ptr_1<int> _ptr__1012(_1012 ? _1012->raw() : nullptr,_1012 ? _1012->size(0) : 0);
  if ((NULL == _1012.get()))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Missing shape for variable"));
    }
  }
  else if((!::mosek::fusion::p_Set::match(mosek::fusion::p_LinPSDDomain::_get_impl(_1011)->shape,_1012)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));
    }
  }
  {}
  int _1013 = (int)((_1012)->size(0));
  int _1014 = mosek::fusion::p_LinPSDDomain::_get_impl(_1011)->conedim;
  if (((_1014 < (int)0) || (_1014 >= _1013)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid cone direction dimension"));
    }
  }
  {}
  int _1015 = _ptr__1012[_1014];
  int _1016 = (int)((::mosek::fusion::Utils::Tools::sqrt((double)(safe_add( (int)1,safe_mul( (int)8,_1015 ) ))) - (int)1) / (int)2);
  if (((safe_mul( _1016,safe_add( _1016,(int)1 ) ) / (int)2) != _1015))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid size for semidefinite variable"));
    }
  }
  {}
  int _1017 = (int)1;
  int _1018 = _ptr__1012[_1014];
  int _1019 = (int)1;
  int _7045 = (int)0;
  int _7046 = _1014;
  for (int _1020 = _7045; _1020 < _7046; ++_1020)
  {
    {
      _1019 *= _ptr__1012[_1020];
    }
  }
  int _7047 = safe_add( _1014,(int)1 );
  int _7048 = _1013;
  for (int _1021 = _7047; _1021 < _7048; ++_1021)
  {
    {
      _1017 *= _ptr__1012[_1021];
    }
  }
  int _1022 = safe_mul( _1019,_1017 );
  int _1023 = safe_mul( _1022,_1015 );
  int _1024 = natbarvarmap_alloc(_1022,_1016);
  std::shared_ptr< monty::ndarray< int,1 > > _1025 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1023)));
  _checked_ptr_1<int> _ptr__1025(_1025 ? _1025->raw() : nullptr,_1025 ? _1025->size(0) : 0);
  natbarvarmap_get(_1024,_1025);
  std::shared_ptr< monty::ndarray< long long,1 > > _1026 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_mul( _1022,_1018 ))));
  _checked_ptr_1<long long> _ptr__1026(_1026 ? _1026->raw() : nullptr,_1026 ? _1026->size(0) : 0);
  {
    int _1027 = (int)0;
    int _7049 = (int)0;
    int _7050 = _1019;
    for (int _1028 = _7049; _1028 < _7050; ++_1028)
    {
      {
        int _7051 = (int)0;
        int _7052 = _1018;
        for (int _1029 = _7051; _1029 < _7052; ++_1029)
        {
          {
            int _7053 = (int)0;
            int _7054 = safe_add( _1029,(int)1 );
            for (int _1030 = _7053; _1030 < _7054; ++_1030)
            {
              {
                int _7055 = (int)0;
                int _7056 = _1017;
                for (int _1031 = _7055; _1031 < _7056; ++_1031)
                {
                  {
                    _ptr__1026[_1027] = safe_add( ((*natbarvar_ptr)(safe_add( safe_mul( _1028,_1017 ),_1031 ))),safe_add( (safe_mul( _1029,((safe_mul( (int)2,_1016 ) - _1029) - (int)1) ) / (int)2),_1030 ) );
                    ++ _1027;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  monty::rc_ptr< ::mosek::fusion::LinearPSDVariable > _1032 = ::mosek::fusion::p_LinearPSDVariable::_new_LinearPSDVariable(::mosek::fusion::Model::t(_pubthis),_1009,_1024,_1012,_1014,_1026);
  ((*barvars)(_1024)) = (_1032).as<::mosek::fusion::ModelVariable>();
  if (((int)((_1009).size()) > (int)0))
  {
    {
      var_map->setItem(_1009,(-safe_add( _1024,(int)1 )));
    }
  }
  {}
  return (_1032).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::SymmetricVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable_(const std::string & _1033,std::shared_ptr< monty::ndarray< int,1 > > _1034,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1035){
  _checked_ptr_1<int> _ptr__1034(_1034 ? _1034->raw() : nullptr, _1034 ? _1034->size(0) : 0);
  if ((((int)((_1033).size()) > (int)0) && hasVariable(_1033)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate variable name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1033)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _1036 = _1034;
  _checked_ptr_1<int> _ptr__1036(_1036 ? _1036->raw() : nullptr,_1036 ? _1036->size(0) : 0);
  if ((NULL == _1036.get()))
  {
    {
      _1036 = mosek::fusion::p_PSDDomain::_get_impl(_1035)->shape;
      _ptr__1036.update(_1036 ? _1036->raw() : nullptr, _1036 ? _1036->size(0) : 0);
    }
  }
  {}
  if ((NULL == _1036.get()))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Missing shape for variable"));
    }
  }
  {}
  int _1037 = mosek::fusion::p_PSDDomain::_get_impl(_1035)->conedim1;
  int _1038 = mosek::fusion::p_PSDDomain::_get_impl(_1035)->conedim2;
  int _1039 = (int)((_1036)->size(0));
  int _1040 = _ptr__1036[_1037];
  if ((_1037 > _1038))
  {
    {
      int _1041 = _1037;
      _1037 = _1038;
      _1038 = _1041;
    }
  }
  {}
  if (((_1037 == _1038) || ((_1037 < (int)0) || (_1038 >= _1039))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid cone order dimensions for semidefinite variables"));
    }
  }
  {}
  if ((_ptr__1036[_1037] != _ptr__1036[_1038]))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape in cone order dimensions"));
    }
  }
  {}
  int _1042 = (int)1;
  int _7057 = (int)0;
  int _7058 = _1037;
  for (int _1043 = _7057; _1043 < _7058; ++_1043)
  {
    {
      _1042 *= _ptr__1036[_1043];
    }
  }
  int _7059 = safe_add( _1037,(int)1 );
  int _7060 = _1038;
  for (int _1044 = _7059; _1044 < _7060; ++_1044)
  {
    {
      _1042 *= _ptr__1036[_1044];
    }
  }
  int _7061 = safe_add( _1038,(int)1 );
  int _7062 = _1039;
  for (int _1045 = _7061; _1045 < _7062; ++_1045)
  {
    {
      _1042 *= _ptr__1036[_1045];
    }
  }
  int _1046 = (safe_mul( safe_mul( _1042,_1040 ),safe_add( _1040,(int)1 ) ) / (int)2);
  int _1047 = natbarvarmap_alloc(_1042,_1040);
  std::shared_ptr< monty::ndarray< long long,1 > > _1048 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1046)));
  _checked_ptr_1<long long> _ptr__1048(_1048 ? _1048->raw() : nullptr,_1048 ? _1048->size(0) : 0);
  natbarvar_get(_1047,_1048);
  monty::rc_ptr< ::mosek::fusion::PSDVariable > _1049 = ::mosek::fusion::p_PSDVariable::_new_PSDVariable(::mosek::fusion::Model::t(_pubthis),_1033,_1047,_1036,mosek::fusion::p_PSDDomain::_get_impl(_1035)->conedim1,mosek::fusion::p_PSDDomain::_get_impl(_1035)->conedim2,_1048);
  ((*barvars)(_1047)) = (_1049).as<::mosek::fusion::ModelVariable>();
  if (((int)((_1033).size()) > (int)0))
  {
    {
      var_map->setItem(_1033,(-safe_add( _1047,(int)1 )));
    }
  }
  {}
  return (_1049).as<::mosek::fusion::SymmetricVariable>();
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint_(const std::string & _1050,monty::rc_ptr< ::mosek::fusion::Expression > _1051,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1052){
  if ((((int)((_1050).size()) > (int)0) && hasConstraint(_1050)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1050)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if (mosek::fusion::p_RangeDomain::_get_impl(_1052)->cardinal_flag)
  {
    {
      throw ::mosek::fusion::DomainError(std::string ("Integer domain not allowed in a constraint"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::ExprDense > _1053 = ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_1051)).as<::mosek::fusion::Expression>());
  _1053->eval(rs,ws,xs);
  rs->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _1054 = mosek::fusion::p_WorkStack::_get_impl(rs)->i32;
  _checked_ptr_1<int> _ptr__1054(_1054 ? _1054->raw() : nullptr,_1054 ? _1054->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1055 = mosek::fusion::p_WorkStack::_get_impl(rs)->i64;
  _checked_ptr_1<long long> _ptr__1055(_1055 ? _1055->raw() : nullptr,_1055 ? _1055->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1056 = mosek::fusion::p_WorkStack::_get_impl(rs)->f64;
  _checked_ptr_1<double> _ptr__1056(_1056 ? _1056->raw() : nullptr,_1056 ? _1056->size(0) : 0);
  int _1057 = mosek::fusion::p_WorkStack::_get_impl(rs)->nd;
  int _1058 = mosek::fusion::p_WorkStack::_get_impl(rs)->shape_base;
  int _1059 = mosek::fusion::p_WorkStack::_get_impl(rs)->nelem;
  int _1060 = mosek::fusion::p_WorkStack::_get_impl(rs)->nnz;
  bool _1061 = mosek::fusion::p_WorkStack::_get_impl(rs)->hassp;
  int _1062 = mosek::fusion::p_WorkStack::_get_impl(rs)->ptr_base;
  int _1063 = mosek::fusion::p_WorkStack::_get_impl(rs)->nidxs_base;
  int _1064 = mosek::fusion::p_WorkStack::_get_impl(rs)->bfix_base;
  int _1065 = mosek::fusion::p_WorkStack::_get_impl(rs)->cof_base;
  if ((NULL != mosek::fusion::p_RangeDomain::_get_impl(_1052)->shape.get()))
  {
    {
      if (((int)((mosek::fusion::p_RangeDomain::_get_impl(_1052)->shape)->size(0)) != _1057))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
        }
      }
      else
      {
        {
          int _7063 = (int)0;
          int _7064 = _1057;
          for (int _1066 = _7063; _1066 < _7064; ++_1066)
          {
            {
              if ((((*mosek::fusion::p_RangeDomain::_get_impl(_1052)->shape)(_1066)) != _ptr__1054[safe_add( _1058,_1066 )]))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
                }
              }
              {}
            }
          }
        }
      }
    }
  }
  {}
  int _1067 = (int)1;
  int _7065 = (int)0;
  int _7066 = _1057;
  for (int _1068 = _7065; _1068 < _7066; ++_1068)
  {
    {
      _1067 *= _ptr__1054[safe_add( _1058,_1068 )];
    }
  }
  int _1069 = natconmap_alloc(_1067);
  std::shared_ptr< monty::ndarray< int,1 > > _1070 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1067)));
  _checked_ptr_1<int> _ptr__1070(_1070 ? _1070->raw() : nullptr,_1070 ? _1070->size(0) : 0);
  natconmap->get(_1069,_1070,(int)0);
  int _7067 = (int)0;
  int _7068 = _1067;
  for (int _1071 = _7067; _1071 < _7068; ++_1071)
  {
    {
      ((*natconmap_idx)(_ptr__1070[_1071])) = _1069;
      ((*natconmap_slackidx)(_ptr__1070[_1071])) = (int)0;
    }
  }
  ((*natconmap_type)(_1069)) = (int)4;
  putarows(_1070,rs,_1059,_1060,_1062,_1063,_1065,_1064,std::shared_ptr< monty::ndarray< int,1 > >(nullptr));
  xs->clear();
  std::shared_ptr< monty::ndarray< double,1 > > _1072 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1067)));
  _checked_ptr_1<double> _ptr__1072(_1072 ? _1072->raw() : nullptr,_1072 ? _1072->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1073 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1067)));
  _checked_ptr_1<double> _ptr__1073(_1073 ? _1073->raw() : nullptr,_1073 ? _1073->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1074 = natconmap_efix;
  _checked_ptr_1<double> _ptr__1074(_1074 ? _1074->raw() : nullptr,_1074 ? _1074->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1075 = mosek::fusion::p_RangeDomain::_get_impl(_1052)->lb;
  _checked_ptr_1<double> _ptr__1075(_1075 ? _1075->raw() : nullptr,_1075 ? _1075->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1076 = mosek::fusion::p_RangeDomain::_get_impl(_1052)->ub;
  _checked_ptr_1<double> _ptr__1076(_1076 ? _1076->raw() : nullptr,_1076 ? _1076->size(0) : 0);
  bool _1077 = mosek::fusion::p_RangeDomain::_get_impl(_1052)->empty;
  bool _1078 = mosek::fusion::p_RangeDomain::_get_impl(_1052)->scalable;
  std::shared_ptr< monty::ndarray< int,2 > > _1079 = mosek::fusion::p_RangeDomain::_get_impl(_1052)->sparsity;
  {
    int _7069 = (int)0;
    int _7070 = _1059;
    for (int _1080 = _7069; _1080 < _7070; ++_1080)
    {
      {
        _ptr__1074[_ptr__1070[_1080]] = _ptr__1056[safe_add( _1064,_1080 )];
      }
    }
    if (_1078)
    {
      {
        int _7071 = (int)0;
        int _7072 = _1067;
        for (int _1081 = _7071; _1081 < _7072; ++_1081)
        {
          {
            _ptr__1072[_1081] = _ptr__1075[(int)0];
            _ptr__1073[_1081] = _ptr__1076[(int)0];
          }
        }
      }
    }
    else if(_1077)
    {
      {
      }
    }
    else if((NULL != _1079.get()))
    {
      {
        std::shared_ptr< monty::ndarray< int,1 > > _1082 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1057)));
        _checked_ptr_1<int> _ptr__1082(_1082 ? _1082->raw() : nullptr,_1082 ? _1082->size(0) : 0);
        _ptr__1082[(_1057 - (int)1)] = (int)1;
        int _7073 = (int)1;
        int _7074 = _1057;
        for (int _1083 = _7073; _1083 < _7074; ++_1083)
        {
          {
            _ptr__1082[((_1057 - _1083) - (int)1)] = safe_mul( _ptr__1082[(_1057 - _1083)],_ptr__1054[(safe_add( _1058,_1057 ) - _1083)] );
          }
        }
        int _7075 = (int)0;
        int _7076 = (int)((_1075)->size(0));
        for (int _1084 = _7075; _1084 < _7076; ++_1084)
        {
          {
            int _1085 = (int)0;
            int _7077 = (int)0;
            int _7078 = _1057;
            for (int _1086 = _7077; _1086 < _7078; ++_1086)
            {
              {
                _1085 += safe_mul( _ptr__1082[_1086],((*_1079)(_1084,_1086)) );
              }
            }
            _ptr__1072[_1085] = _ptr__1075[_1084];
            _ptr__1073[_1085] = _ptr__1076[_1084];
          }
        }
      }
    }
    else
    {
      {
        int _7079 = (int)0;
        int _7080 = _1067;
        for (int _1087 = _7079; _1087 < _7080; ++_1087)
        {
          {
            _ptr__1072[_1087] = _ptr__1075[_1087];
            _ptr__1073[_1087] = _ptr__1076[_1087];
          }
        }
      }
    }
  }
  task_con_putboundlist_ra(_1070,_1072,_1073);
  std::vector<int> _7081;
  for (int _1089 = (int)0, _7082 = _1057; _1089 < _7082 ; ++_1089)
  {
    _7081.push_back(_ptr__1054[safe_add( _1058,_1089 )]);
  }
  auto _7083 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7081.size()),_7081.begin(),_7081.end()));
  monty::rc_ptr< ::mosek::fusion::RangedConstraint > _1088 = ::mosek::fusion::p_RangedConstraint::_new_RangedConstraint(::mosek::fusion::Model::t(_pubthis),_1050,_7083,_1070);
  ((*cons)(_1069)) = (_1088).as<::mosek::fusion::ModelConstraint>();
  if (((int)((_1050).size()) > (int)0))
  {
    {
      con_map->setItem(_1050,_1069);
    }
  }
  {}
  return (_1088).as<::mosek::fusion::Constraint>();
}
void mosek::fusion::p_Model::update_bfix(std::shared_ptr< monty::ndarray< int,1 > > _1090,std::shared_ptr< monty::ndarray< double,1 > > _1091){
  _checked_ptr_1<int> _ptr__1090(_1090 ? _1090->raw() : nullptr, _1090 ? _1090->size(0) : 0);
  _checked_ptr_1<double> _ptr__1091(_1091 ? _1091->raw() : nullptr, _1091 ? _1091->size(0) : 0);
  std::vector<int> _7084;
  for (int _1092 = (int)0, _7085 = (int)((_1090)->size(0)); _1092 < _7085 ; ++_1092)
  {
    _7084.push_back((int)0);
  }
  auto _7086 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7084.size()),_7084.begin(),_7084.end()));
  task_putaijlist(_1090,_7086,_1091,(long long)((int)((_1090)->size(0))));
}
void mosek::fusion::p_Model::putarows(std::shared_ptr< monty::ndarray< int,1 > > _1093,monty::rc_ptr< ::mosek::fusion::WorkStack > _1094,int _1095,int _1096,int _1097,int _1098,int _1099,int _1100,std::shared_ptr< monty::ndarray< int,1 > > _1101){
  _checked_ptr_1<int> _ptr__1093(_1093 ? _1093->raw() : nullptr, _1093 ? _1093->size(0) : 0);
  _checked_ptr_1<int> _ptr__1101(_1101 ? _1101->raw() : nullptr, _1101 ? _1101->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1102 = mosek::fusion::p_WorkStack::_get_impl(_1094)->i32;
  _checked_ptr_1<int> _ptr__1102(_1102 ? _1102->raw() : nullptr,_1102 ? _1102->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1103 = mosek::fusion::p_WorkStack::_get_impl(_1094)->i64;
  _checked_ptr_1<long long> _ptr__1103(_1103 ? _1103->raw() : nullptr,_1103 ? _1103->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1104 = mosek::fusion::p_WorkStack::_get_impl(_1094)->f64;
  _checked_ptr_1<double> _ptr__1104(_1104 ? _1104->raw() : nullptr,_1104 ? _1104->size(0) : 0);
  int _1105 = (int)0;
  int _1106 = (int)0;
  int _1107 = (int)0;
  int _7087 = (int)0;
  int _7088 = _1095;
  for (int _1108 = _7087; _1108 < _7088; ++_1108)
  {
    {
      int _1109 = _ptr__1102[safe_add( _1097,_1108 )];
      int _1110 = _ptr__1102[safe_add( safe_add( _1097,_1108 ),(int)1 )];
      int _1111 = _1109;
      while ( ((_1111 < _1110) && (_ptr__1103[safe_add( _1098,_1111 )] < (int)0)) )
      {
        {
          int _1112 = ((*natbarvar_idx)((-safe_add( _ptr__1103[safe_add( _1098,_1111 )],(int)1 ))));
          int _1113 = _1111;
          ++ _1111;
          while ( ((_1111 < _1110) && ((_ptr__1103[safe_add( _1098,_1111 )] < (int)0) && (_1112 == ((*natbarvar_idx)((-safe_add( _ptr__1103[safe_add( _1098,_1111 )],(int)1 ))))))) )
          {
            {
              ++ _1111;
            }
          }
          ++ _1106;
        }
      }
      _1107 += (_1111 - _1109);
      _1105 += (_1110 - _1111);
    }
  }
  _1105 += _1095;
  if ((NULL != _1101.get()))
  {
    {
      _1105 += _1095;
    }
  }
  {}
  int _1114 = (int)((_1093)->size(0));
  std::shared_ptr< monty::ndarray< long long,1 > > _1115 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _1114,(int)1 ))));
  _checked_ptr_1<long long> _ptr__1115(_1115 ? _1115->raw() : nullptr,_1115 ? _1115->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1116 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1105)));
  _checked_ptr_1<int> _ptr__1116(_1116 ? _1116->raw() : nullptr,_1116 ? _1116->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1117 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1105)));
  _checked_ptr_1<double> _ptr__1117(_1117 ? _1117->raw() : nullptr,_1117 ? _1117->size(0) : 0);
  if ((NULL != _1101.get()))
  {
    {
      int _1118 = (int)0;
      int _7089 = (int)0;
      int _7090 = _1095;
      for (int _1119 = _7089; _1119 < _7090; ++_1119)
      {
        {
          int _1120 = (int)0;
          _ptr__1116[safe_add( _1118,_1120 )] = bfixidx;
          _ptr__1117[safe_add( _1118,_1120 )] = _ptr__1104[safe_add( _1100,_1119 )];
          ++ _1120;
          int _7091 = _ptr__1102[safe_add( _1097,_1119 )];
          int _7092 = _ptr__1102[safe_add( safe_add( _1097,_1119 ),(int)1 )];
          for (int _1121 = _7091; _1121 < _7092; ++_1121)
          {
            {
              if ((_ptr__1103[safe_add( _1098,_1121 )] > (int)0))
              {
                {
                  _ptr__1116[safe_add( _1118,_1120 )] = (int)(_ptr__1103[safe_add( _1098,_1121 )] - (int)1);
                  _ptr__1117[safe_add( _1118,_1120 )] = _ptr__1104[safe_add( _1099,_1121 )];
                  ++ _1120;
                }
              }
              {}
            }
          }
          _ptr__1116[safe_add( _1118,_1120 )] = _ptr__1101[_1119];
          _ptr__1117[safe_add( _1118,_1120 )] = (-1.0);
          ++ _1120;
          _ptr__1115[safe_add( _1119,(int)1 )] = safe_add( _ptr__1115[_1119],_1120 );
          _1118 += _1120;
        }
      }
    }
  }
  else
  {
    {
      int _1122 = (int)0;
      int _7093 = (int)0;
      int _7094 = _1095;
      for (int _1123 = _7093; _1123 < _7094; ++_1123)
      {
        {
          int _1124 = (int)0;
          _ptr__1116[safe_add( _1122,_1124 )] = bfixidx;
          _ptr__1117[safe_add( _1122,_1124 )] = _ptr__1104[safe_add( _1100,_1123 )];
          ++ _1124;
          int _7095 = _ptr__1102[safe_add( _1097,_1123 )];
          int _7096 = _ptr__1102[safe_add( safe_add( _1097,_1123 ),(int)1 )];
          for (int _1125 = _7095; _1125 < _7096; ++_1125)
          {
            {
              if ((_ptr__1103[safe_add( _1098,_1125 )] > (int)0))
              {
                {
                  _ptr__1116[safe_add( _1122,_1124 )] = (int)(_ptr__1103[safe_add( _1098,_1125 )] - (int)1);
                  _ptr__1117[safe_add( _1122,_1124 )] = _ptr__1104[safe_add( _1099,_1125 )];
                  ++ _1124;
                }
              }
              {}
            }
          }
          _ptr__1115[safe_add( _1123,(int)1 )] = safe_add( _ptr__1115[_1123],_1124 );
          _1122 += _1124;
        }
      }
    }
  }
  task_putarowlist(_1093,_1115,_1116,_1117);
  if ((_1106 > (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _1126 = _1093;
      _checked_ptr_1<int> _ptr__1126(_1126 ? _1126->raw() : nullptr,_1126 ? _1126->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _1127 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _1114,(int)1 ))));
      _checked_ptr_1<long long> _ptr__1127(_1127 ? _1127->raw() : nullptr,_1127 ? _1127->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _1128 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1106)));
      _checked_ptr_1<int> _ptr__1128(_1128 ? _1128->raw() : nullptr,_1128 ? _1128->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _1129 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1106)));
      _checked_ptr_1<int> _ptr__1129(_1129 ? _1129->raw() : nullptr,_1129 ? _1129->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _1130 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1106)));
      _checked_ptr_1<long long> _ptr__1130(_1130 ? _1130->raw() : nullptr,_1130 ? _1130->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _1131 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1107)));
      _checked_ptr_1<int> _ptr__1131(_1131 ? _1131->raw() : nullptr,_1131 ? _1131->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _1132 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1107)));
      _checked_ptr_1<int> _ptr__1132(_1132 ? _1132->raw() : nullptr,_1132 ? _1132->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _1133 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1107)));
      _checked_ptr_1<double> _ptr__1133(_1133 ? _1133->raw() : nullptr,_1133 ? _1133->size(0) : 0);
      int _1134 = (int)0;
      int _1135 = (int)0;
      int _7097 = (int)0;
      int _7098 = _1114;
      for (int _1136 = _7097; _1136 < _7098; ++_1136)
      {
        {
          int _1137 = _ptr__1102[safe_add( _1097,_1136 )];
          int _1138 = _ptr__1102[safe_add( safe_add( _1097,_1136 ),(int)1 )];
          while ( ((_1137 < _1138) && (_ptr__1103[safe_add( _1098,_1137 )] < (int)0)) )
          {
            {
              int _1139 = _1137;
              int _1140 = ((*natbarvar_idx)((-safe_add( _ptr__1103[safe_add( _1098,_1137 )],(int)1 ))));
              while ( ((_1137 < _1138) && ((_ptr__1103[safe_add( _1098,_1137 )] < (int)0) && (((*natbarvar_idx)((-safe_add( _ptr__1103[safe_add( _1098,_1137 )],(int)1 )))) == _1140))) )
              {
                {
                  _ptr__1131[_1135] = ((*natbarvar_i)((-safe_add( _ptr__1103[safe_add( _1098,_1137 )],(int)1 ))));
                  _ptr__1132[_1135] = ((*natbarvar_j)((-safe_add( _ptr__1103[safe_add( _1098,_1137 )],(int)1 ))));
                  if ((_ptr__1131[_1135] == _ptr__1132[_1135]))
                  {
                    {
                      _ptr__1133[_1135] = _ptr__1104[safe_add( _1099,_1137 )];
                    }
                  }
                  else
                  {
                    {
                      _ptr__1133[_1135] = (0.5 * _ptr__1104[safe_add( _1099,_1137 )]);
                    }
                  }
                  ++ _1135;
                  ++ _1137;
                }
              }
              _ptr__1128[_1134] = _1140;
              _ptr__1129[_1134] = ((*natbarvar_dim)(_1140));
              _ptr__1130[_1134] = (_1137 - _1139);
              ++ _1134;
            }
          }
          _1137 = _1138;
          _ptr__1127[safe_add( _1136,(int)1 )] = _1134;
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1141 = task_appendsymmatlist(_1129,_1130,_1131,_1132,_1133);
      _checked_ptr_1<long long> _ptr__1141(_1141 ? _1141->raw() : nullptr,_1141 ? _1141->size(0) : 0);
      task_putbararowlist(_1126,_1127,_1128,_1141);
    }
  }
  {}
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint_(const std::string & _1142,monty::rc_ptr< ::mosek::fusion::Expression > _1143,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1144){
  std::shared_ptr< monty::ndarray< int,1 > > _1145 = _1143->getShape();
  _checked_ptr_1<int> _ptr__1145(_1145 ? _1145->raw() : nullptr,_1145 ? _1145->size(0) : 0);
  if (((NULL != mosek::fusion::p_PSDDomain::_get_impl(_1144)->shape.get()) && (!::mosek::fusion::p_Set::match(_1145,mosek::fusion::p_PSDDomain::_get_impl(_1144)->shape))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
    }
  }
  {}
  bool _1146;
  int _1147;
  int _1148;
  if (mosek::fusion::p_PSDDomain::_get_impl(_1144)->axisIsSet)
  {
    {
      _1146 = (mosek::fusion::p_PSDDomain::_get_impl(_1144)->conedim1 < mosek::fusion::p_PSDDomain::_get_impl(_1144)->conedim2);
      int _7099;
      bool _7100 = _1146;
      if (_7100)
      {
        _7099 = mosek::fusion::p_PSDDomain::_get_impl(_1144)->conedim1;
      }
      else
      {
        _7099 = mosek::fusion::p_PSDDomain::_get_impl(_1144)->conedim2;
      }
      _1148 = _7099;
      int _7101;
      bool _7102 = _1146;
      if (_7102)
      {
        _7101 = mosek::fusion::p_PSDDomain::_get_impl(_1144)->conedim2;
      }
      else
      {
        _7101 = mosek::fusion::p_PSDDomain::_get_impl(_1144)->conedim1;
      }
      _1147 = _7101;
    }
  }
  else
  {
    {
      _1146 = true;
      _1148 = ((int)((_1145)->size(0)) - (int)2);
      _1147 = ((int)((_1145)->size(0)) - (int)1);
    }
  }
  if (((_1147 >= (int)((_1145)->size(0))) || (_ptr__1145[_1148] != _ptr__1145[_1147])))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::Expression > _7103;
  bool _7104 = (mosek::fusion::p_PSDDomain::_get_impl(_1144)->key == ::mosek::fusion::PSDKey::IsSymPSD);
  if (_7104)
  {
    _7103 = ::mosek::fusion::p_ExprSymmetrize::_new_ExprSymmetrize(_1148,_1147,_1143).as<::mosek::fusion::Expression>();
  }
  else
  {
    _7103 = _1143;
  }
  monty::rc_ptr< ::mosek::fusion::ExprCompress > _1149 = ::mosek::fusion::p_ExprCompress::_new_ExprCompress((::mosek::fusion::p_ExprDenseTril::_new_ExprDenseTril(_1148,_1147,_7103)).as<::mosek::fusion::Expression>());
  _1149->eval(rs,ws,xs);
  std::shared_ptr< monty::ndarray< int,1 > > _1150 = mosek::fusion::p_WorkStack::_get_impl(rs)->i32;
  _checked_ptr_1<int> _ptr__1150(_1150 ? _1150->raw() : nullptr,_1150 ? _1150->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1151 = mosek::fusion::p_WorkStack::_get_impl(rs)->i64;
  _checked_ptr_1<long long> _ptr__1151(_1151 ? _1151->raw() : nullptr,_1151 ? _1151->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1152 = mosek::fusion::p_WorkStack::_get_impl(rs)->f64;
  _checked_ptr_1<double> _ptr__1152(_1152 ? _1152->raw() : nullptr,_1152 ? _1152->size(0) : 0);
  int _1153 = rs->popi32();
  std::shared_ptr< monty::ndarray< int,1 > > _1154 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1153)));
  _checked_ptr_1<int> _ptr__1154(_1154 ? _1154->raw() : nullptr,_1154 ? _1154->size(0) : 0);
  rs->popi32(_1153,_1154,(int)0);
  int _1155 = rs->popi32();
  int _1156 = rs->popi32();
  bool _1157 = (rs->popi32() != (int)0);
  int _1158 = rs->popi32(safe_add( _1155,(int)1 ));
  int _7105;
  bool _7106 = _1157;
  if (_7106)
  {
    _7105 = rs->popi64(_1155);
  }
  else
  {
    _7105 = (-(int)99999);
  }
  int _1159 = _7105;
  int _1160 = rs->popi64(_1156);
  int _1161 = rs->popf64(_1155);
  int _1162 = rs->popf64(_1156);
  int _1163 = _ptr__1154[_1147];
  int _1164 = (safe_mul( _1163,safe_add( _1163,(int)1 ) ) / (int)2);
  int _7107 = (int)0;
  int _7108 = _1153;
  for (int _1165 = _7107; _1165 < _7108; ++_1165)
  {
    {
      if (((_1165 != _1148) && (_1165 != _1147)))
      {
        {
          _1164 *= _ptr__1154[_1165];
        }
      }
      {}
    }
  }
  int _1166 = natconmap_alloc(_1164);
  std::shared_ptr< monty::ndarray< int,1 > > _1167 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1164)));
  _checked_ptr_1<int> _ptr__1167(_1167 ? _1167->raw() : nullptr,_1167 ? _1167->size(0) : 0);
  natconmap->get(_1166,_1167,(int)0);
  putarows(_1167,rs,_1155,_1156,_1158,_1160,_1162,_1161,std::shared_ptr< monty::ndarray< int,1 > >(nullptr));
  xs->clear();
  std::shared_ptr< monty::ndarray< int,1 > > _1168 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((int)1),(int)((int)1),(int)((int)1),(int)((int)1)});
  _checked_ptr_1<int> _ptr__1168(_1168 ? _1168->raw() : nullptr,_1168 ? _1168->size(0) : 0);
  int _7109 = (int)0;
  int _7110 = _1148;
  for (int _1169 = _7109; _1169 < _7110; ++_1169)
  {
    {
      _ptr__1168[(int)0] *= _ptr__1154[_1169];
    }
  }
  _ptr__1168[(int)1] = _ptr__1154[_1148];
  int _7111 = safe_add( _1148,(int)1 );
  int _7112 = _1147;
  for (int _1170 = _7111; _1170 < _7112; ++_1170)
  {
    {
      _ptr__1168[(int)2] *= _ptr__1154[_1170];
    }
  }
  _ptr__1168[(int)3] = _ptr__1154[_1147];
  int _7113 = safe_add( _1147,(int)1 );
  int _7114 = _1153;
  for (int _1171 = _7113; _1171 < _7114; ++_1171)
  {
    {
      _ptr__1168[(int)4] *= _ptr__1154[_1171];
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _1172 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)5)));
  _checked_ptr_1<int> _ptr__1172(_1172 ? _1172->raw() : nullptr,_1172 ? _1172->size(0) : 0);
  _ptr__1172[(int)4] = (int)1;
  int _7115 = (int)1;
  int _7116 = (int)5;
  for (int _1173 = _7115; _1173 < _7116; ++_1173)
  {
    {
      _ptr__1172[(((int)5 - _1173) - (int)1)] = safe_mul( _ptr__1172[((int)5 - _1173)],_ptr__1168[((int)5 - _1173)] );
    }
  }
  std::shared_ptr< monty::ndarray< double,1 > > _1174 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1164)));
  _checked_ptr_1<double> _ptr__1174(_1174 ? _1174->raw() : nullptr,_1174 ? _1174->size(0) : 0);
  if ((_1159 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Unexpected case!"));
    }
  }
  else
  {
    {
      int _7117 = (int)0;
      int _7118 = _1155;
      for (int _1175 = _7117; _1175 < _7118; ++_1175)
      {
        {
          ((*natconmap_efix)(_ptr__1167[_1175])) = _ptr__1152[safe_add( _1161,_1175 )];
          ((*natconmap_lb)(_ptr__1167[_1175])) = (int)0;
          ((*natconmap_ub)(_ptr__1167[_1175])) = (int)0;
          _ptr__1174[_1175] = 0.0;
        }
      }
    }
  }
  task_con_putboundlist_fx(_1167,_1174);
  int _1176 = safe_mul( safe_mul( _ptr__1168[(int)0],_ptr__1168[(int)2] ),_ptr__1168[(int)4] );
  int _1177 = _ptr__1168[(int)1];
  int _1178 = natbarvarmap_alloc(_1176,_1177);
  std::shared_ptr< monty::ndarray< int,1 > > _1179 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1176)));
  _checked_ptr_1<int> _ptr__1179(_1179 ? _1179->raw() : nullptr,_1179 ? _1179->size(0) : 0);
  natbarvarmap_get(_1178,_1179);
  std::vector<int> _7119;
  for (int _1181 = (int)0, _7120 = (safe_mul( _1177,safe_add( _1177,(int)1 ) ) / (int)2); _1181 < _7120 ; ++_1181)
  {
    _7119.push_back(_1177);
  }
  auto _7121 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7119.size()),_7119.begin(),_7119.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _1180 = _7121;
  _checked_ptr_1<int> _ptr__1180(_1180 ? _1180->raw() : nullptr,_1180 ? _1180->size(0) : 0);
  std::vector<long long> _7122;
  for (int _1183 = (int)0, _7123 = (safe_mul( _1177,safe_add( _1177,(int)1 ) ) / (int)2); _1183 < _7123 ; ++_1183)
  {
    _7122.push_back((int)1);
  }
  auto _7124 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7122.size()),_7122.begin(),_7122.end()));
  std::shared_ptr< monty::ndarray< long long,1 > > _1182 = _7124;
  _checked_ptr_1<long long> _ptr__1182(_1182 ? _1182->raw() : nullptr,_1182 ? _1182->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1184 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((safe_mul( _1177,safe_add( _1177,(int)1 ) ) / (int)2))));
  _checked_ptr_1<int> _ptr__1184(_1184 ? _1184->raw() : nullptr,_1184 ? _1184->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1185 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((safe_mul( _1177,safe_add( _1177,(int)1 ) ) / (int)2))));
  _checked_ptr_1<int> _ptr__1185(_1185 ? _1185->raw() : nullptr,_1185 ? _1185->size(0) : 0);
  std::vector<double> _7125;
  for (int _1187 = (int)0, _7126 = (safe_mul( _1177,safe_add( _1177,(int)1 ) ) / (int)2); _1187 < _7126 ; ++_1187)
  {
    _7125.push_back((-0.5));
  }
  auto _7127 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7125.size()),_7125.begin(),_7125.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _1186 = _7127;
  _checked_ptr_1<double> _ptr__1186(_1186 ? _1186->raw() : nullptr,_1186 ? _1186->size(0) : 0);
  int _7128 = (int)1;
  int _7129 = safe_add( _1177,(int)1 );
  for (int _1188 = _7128; _1188 < _7129; ++_1188)
  {
    {
      _ptr__1186[((safe_mul( _1188,safe_add( _1188,(int)1 ) ) / (int)2) - (int)1)] = (-1.0);
    }
  }
  {
    int _1189 = (int)0;
    int _7130 = (int)0;
    int _7131 = _1177;
    for (int _1190 = _7130; _1190 < _7131; ++_1190)
    {
      {
        int _7132 = (int)0;
        int _7133 = safe_add( _1190,(int)1 );
        for (int _1191 = _7132; _1191 < _7133; ++_1191)
        {
          {
            _ptr__1184[_1189] = _1190;
            _ptr__1185[_1189] = _1191;
            ++ _1189;
          }
        }
      }
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _1192 = task_appendsymmatlist(_1180,_1182,_1184,_1185,_1186);
  _checked_ptr_1<long long> _ptr__1192(_1192 ? _1192->raw() : nullptr,_1192 ? _1192->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1193 = _1167;
  _checked_ptr_1<int> _ptr__1193(_1193 ? _1193->raw() : nullptr,_1193 ? _1193->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1194 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1164)));
  _checked_ptr_1<int> _ptr__1194(_1194 ? _1194->raw() : nullptr,_1194 ? _1194->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1195 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1164)));
  _checked_ptr_1<long long> _ptr__1195(_1195 ? _1195->raw() : nullptr,_1195 ? _1195->size(0) : 0);
  {
    int _1196 = (int)0;
    if (_1146)
    {
      {
        int _7134 = (int)0;
        int _7135 = _ptr__1168[(int)0];
        for (int _1197 = _7134; _1197 < _7135; ++_1197)
        {
          {
            int _7136 = (int)0;
            int _7137 = _ptr__1168[(int)1];
            for (int _1198 = _7136; _1198 < _7137; ++_1198)
            {
              {
                int _7138 = (int)0;
                int _7139 = _ptr__1168[(int)2];
                for (int _1199 = _7138; _1199 < _7139; ++_1199)
                {
                  {
                    int _7140 = (int)0;
                    int _7141 = safe_add( _1198,(int)1 );
                    for (int _1200 = _7140; _1200 < _7141; ++_1200)
                    {
                      {
                        int _7142 = (int)0;
                        int _7143 = _ptr__1168[(int)4];
                        for (int _1201 = _7142; _1201 < _7143; ++_1201)
                        {
                          {
                            _ptr__1195[_1196] = _ptr__1192[safe_add( (safe_mul( _1198,safe_add( _1198,(int)1 ) ) / (int)2),_1200 )];
                            _ptr__1194[_1196] = _ptr__1179[safe_add( safe_mul( safe_add( safe_mul( _1197,_ptr__1168[(int)2] ),_1199 ),_ptr__1168[(int)4] ),_1201 )];
                            ((*natconmap_slackidx)(_ptr__1167[_1196])) = ((-safe_add( safe_add( ((*natbarvar_ptr)(_ptr__1194[_1196])),(safe_mul( _1198,safe_add( _1198,(int)1 ) ) / (int)2) ),_1200 )) - (int)1);
                            ++ _1196;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      {
        int _7144 = (int)0;
        int _7145 = _ptr__1168[(int)0];
        for (int _1202 = _7144; _1202 < _7145; ++_1202)
        {
          {
            int _7146 = (int)0;
            int _7147 = _ptr__1168[(int)1];
            for (int _1203 = _7146; _1203 < _7147; ++_1203)
            {
              {
                int _7148 = (int)0;
                int _7149 = _ptr__1168[(int)2];
                for (int _1204 = _7148; _1204 < _7149; ++_1204)
                {
                  {
                    int _7150 = _1203;
                    int _7151 = _ptr__1168[(int)1];
                    for (int _1205 = _7150; _1205 < _7151; ++_1205)
                    {
                      {
                        int _7152 = (int)0;
                        int _7153 = _ptr__1168[(int)4];
                        for (int _1206 = _7152; _1206 < _7153; ++_1206)
                        {
                          {
                            _ptr__1195[_1196] = _ptr__1192[safe_add( (safe_mul( _1205,safe_add( _1205,(int)1 ) ) / (int)2),_1203 )];
                            _ptr__1194[_1196] = _ptr__1179[safe_add( safe_mul( safe_add( safe_mul( _1202,_ptr__1168[(int)2] ),_1204 ),_ptr__1168[(int)4] ),_1206 )];
                            ((*natconmap_slackidx)(_ptr__1167[_1196])) = ((-safe_add( safe_add( ((*natbarvar_ptr)(_ptr__1194[_1196])),(safe_mul( _1205,safe_add( _1205,(int)1 ) ) / (int)2) ),_1203 )) - (int)1);
                            ++ _1196;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  task_putbaraijlist(_1193,_1194,_1195);
  ((*natconmap_type)(_1166)) = (-safe_add( _1178,(int)1 ));
  std::vector<long long> _7154;
  for (int _1208 = (int)0, _7155 = _1164; _1208 < _7155 ; ++_1208)
  {
    _7154.push_back(((*natconmap_slackidx)(_ptr__1167[_1208])));
  }
  auto _7156 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7154.size()),_7154.begin(),_7154.end()));
  monty::rc_ptr< ::mosek::fusion::PSDConstraint > _1207 = ::mosek::fusion::p_PSDConstraint::_new_PSDConstraint(::mosek::fusion::Model::t(_pubthis),_1142,_1166,_1154,_1148,_1147,_7156,_1167);
  ((*cons)(_1166)) = (_1207).as<::mosek::fusion::ModelConstraint>();
  if (((int)((_1142).size()) > (int)0))
  {
    {
      con_map->setItem(_1142,_1166);
    }
  }
  {}
  return (_1207).as<::mosek::fusion::Constraint>();
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint_(const std::string & _1209,monty::rc_ptr< ::mosek::fusion::Expression > _1210,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1211){
  if ((((int)((_1209).size()) > (int)0) && hasConstraint(_1209)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1209)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if ((((int)((_1209).size()) > (int)0) && hasConstraint(_1209)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1209)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::ExprDense > _1212 = ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_1210)).as<::mosek::fusion::Expression>());
  _1212->eval(rs,ws,xs);
  std::shared_ptr< monty::ndarray< int,1 > > _1213 = mosek::fusion::p_WorkStack::_get_impl(rs)->i32;
  _checked_ptr_1<int> _ptr__1213(_1213 ? _1213->raw() : nullptr,_1213 ? _1213->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1214 = mosek::fusion::p_WorkStack::_get_impl(rs)->i64;
  _checked_ptr_1<long long> _ptr__1214(_1214 ? _1214->raw() : nullptr,_1214 ? _1214->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1215 = mosek::fusion::p_WorkStack::_get_impl(rs)->f64;
  _checked_ptr_1<double> _ptr__1215(_1215 ? _1215->raw() : nullptr,_1215 ? _1215->size(0) : 0);
  int _1216 = rs->popi32();
  std::shared_ptr< monty::ndarray< int,1 > > _1217 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1216)));
  _checked_ptr_1<int> _ptr__1217(_1217 ? _1217->raw() : nullptr,_1217 ? _1217->size(0) : 0);
  rs->popi32(_1216,_1217,(int)0);
  int _1218 = rs->popi32();
  int _1219 = rs->popi32();
  bool _1220 = (rs->popi32() != (int)0);
  int _1221 = rs->popi32(safe_add( _1218,(int)1 ));
  int _1222 = rs->popi64(_1219);
  int _1223 = rs->popf64(_1218);
  int _1224 = rs->popf64(_1219);
  if (((NULL != mosek::fusion::p_LinPSDDomain::_get_impl(_1211)->shape.get()) && (!::mosek::fusion::p_Set::match(_1217,mosek::fusion::p_LinPSDDomain::_get_impl(_1211)->shape))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
    }
  }
  {}
  int _1225 = (int)1;
  int _7157 = (int)0;
  int _7158 = _1216;
  for (int _1226 = _7157; _1226 < _7158; ++_1226)
  {
    {
      _1225 *= _ptr__1217[_1226];
    }
  }
  int _1227 = mosek::fusion::p_LinPSDDomain::_get_impl(_1211)->conedim;
  int _1228 = _ptr__1217[_1227];
  int _1229 = (int)((::mosek::fusion::Utils::Tools::sqrt((double)(safe_add( (int)1,safe_mul( (int)8,_1228 ) ))) - (int)1) / (int)2);
  if (((safe_mul( _1229,safe_add( _1229,(int)1 ) ) / (int)2) != _1228))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid size for semidefinite variable"));
    }
  }
  {}
  int _1230 = (int)1;
  int _7159 = (int)0;
  int _7160 = _1227;
  for (int _1231 = _7159; _1231 < _7160; ++_1231)
  {
    {
      _1230 *= _ptr__1217[_1231];
    }
  }
  int _1232 = (int)1;
  int _7161 = safe_add( _1227,(int)1 );
  int _7162 = _1216;
  for (int _1233 = _7161; _1233 < _7162; ++_1233)
  {
    {
      _1232 *= _ptr__1217[_1233];
    }
  }
  int _1234 = safe_mul( _1230,_1232 );
  int _1235 = natconmap_alloc(_1225);
  std::shared_ptr< monty::ndarray< int,1 > > _1236 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1225)));
  _checked_ptr_1<int> _ptr__1236(_1236 ? _1236->raw() : nullptr,_1236 ? _1236->size(0) : 0);
  natconmap->get(_1235,_1236,(int)0);
  putarows(_1236,rs,_1218,_1219,_1221,_1222,_1224,_1223,std::shared_ptr< monty::ndarray< int,1 > >(nullptr));
  int _1237 = natbarvarmap_alloc(_1234,_1229);
  std::shared_ptr< monty::ndarray< int,1 > > _1238 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1234)));
  _checked_ptr_1<int> _ptr__1238(_1238 ? _1238->raw() : nullptr,_1238 ? _1238->size(0) : 0);
  natbarvarmap_get(_1237,_1238);
  ((*barvars)(_1237)) = nullptr;
  int _1239 = safe_mul( safe_mul( _1228,_1230 ),_1232 );
  std::vector<int> _7163;
  for (int _1241 = (int)0, _7164 = _1228; _1241 < _7164 ; ++_1241)
  {
    _7163.push_back(_1241);
  }
  auto _7165 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7163.size()),_7163.begin(),_7163.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _1240 = _7165;
  _checked_ptr_1<int> _ptr__1240(_1240 ? _1240->raw() : nullptr,_1240 ? _1240->size(0) : 0);
  std::vector<long long> _7166;
  for (int _1243 = (int)0, _7167 = _1228; _1243 < _7167 ; ++_1243)
  {
    _7166.push_back((int)1);
  }
  auto _7168 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7166.size()),_7166.begin(),_7166.end()));
  std::shared_ptr< monty::ndarray< long long,1 > > _1242 = _7168;
  _checked_ptr_1<long long> _ptr__1242(_1242 ? _1242->raw() : nullptr,_1242 ? _1242->size(0) : 0);
  std::vector<double> _7169;
  for (int _1245 = (int)0, _7170 = _1228; _1245 < _7170 ; ++_1245)
  {
    _7169.push_back((-0.5));
  }
  auto _7171 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7169.size()),_7169.begin(),_7169.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _1244 = _7171;
  _checked_ptr_1<double> _ptr__1244(_1244 ? _1244->raw() : nullptr,_1244 ? _1244->size(0) : 0);
  int _7172 = (int)1;
  int _7173 = safe_add( _1228,(int)1 );
  for (int _1246 = _7172; _1246 < _7173; ++_1246)
  {
    {
      _ptr__1244[((safe_mul( _1246,safe_add( _1246,(int)1 ) ) / (int)2) - (int)1)] = (-1.0);
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _1247 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1228)));
  _checked_ptr_1<int> _ptr__1247(_1247 ? _1247->raw() : nullptr,_1247 ? _1247->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1248 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1228)));
  _checked_ptr_1<int> _ptr__1248(_1248 ? _1248->raw() : nullptr,_1248 ? _1248->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1249 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1239)));
  _checked_ptr_1<int> _ptr__1249(_1249 ? _1249->raw() : nullptr,_1249 ? _1249->size(0) : 0);
  {
    int _1250 = (int)0;
    int _7174 = (int)0;
    int _7175 = _1230;
    for (int _1251 = _7174; _1251 < _7175; ++_1251)
    {
      {
        int _7176 = (int)0;
        int _7177 = _1229;
        for (int _1252 = _7176; _1252 < _7177; ++_1252)
        {
          {
            int _7178 = (int)0;
            int _7179 = safe_add( _1252,(int)1 );
            for (int _1253 = _7178; _1253 < _7179; ++_1253)
            {
              {
                int _7180 = (int)0;
                int _7181 = _1232;
                for (int _1254 = _7180; _1254 < _7181; ++_1254)
                {
                  {
                    _ptr__1249[_1250] = safe_add( safe_mul( _1251,_1232 ),_1254 );
                    _ptr__1247[_1250] = _1252;
                    _ptr__1248[_1250] = _1253;
                    ++ _1250;
                  }
                }
              }
            }
          }
        }
      }
    }
    ((*natconmap_type)(_1235)) = (-safe_add( _1237,(int)1 ));
    int _7182 = (int)0;
    int _7183 = _1225;
    for (int _1255 = _7182; _1255 < _7183; ++_1255)
    {
      {
        ((*natconmap_blockid)(_ptr__1236[_1255])) = _1235;
        ((*natconmap_idx)(_ptr__1236[_1255])) = _1255;
        ((*natconmap_efix)(_ptr__1236[_1255])) = _ptr__1215[safe_add( _1223,_1255 )];
        ((*natconmap_lb)(_ptr__1236[_1255])) = (int)0;
        ((*natconmap_ub)(_ptr__1236[_1255])) = (int)0;
      }
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _1256 = task_appendsymmatlist(_1240,_1242,_1247,_1248,_1244);
  _checked_ptr_1<long long> _ptr__1256(_1256 ? _1256->raw() : nullptr,_1256 ? _1256->size(0) : 0);
  task_putbaraijlist(_1236,_1249,_1256);
  std::vector<double> _7184;
  for (int _1258 = (int)0, _7185 = _1225; _1258 < _7185 ; ++_1258)
  {
    _7184.push_back(0.0);
  }
  auto _7186 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7184.size()),_7184.begin(),_7184.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _1257 = _7186;
  _checked_ptr_1<double> _ptr__1257(_1257 ? _1257->raw() : nullptr,_1257 ? _1257->size(0) : 0);
  task_con_putboundlist_fx(_1236,_1257);
  std::vector<long long> _7187;
  for (int _1260 = (int)0, _7188 = _1225; _1260 < _7188 ; ++_1260)
  {
    _7187.push_back(((*natconmap_slackidx)(_ptr__1236[_1260])));
  }
  auto _7189 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7187.size()),_7187.begin(),_7187.end()));
  monty::rc_ptr< ::mosek::fusion::LinearPSDConstraint > _1259 = ::mosek::fusion::p_LinearPSDConstraint::_new_LinearPSDConstraint(::mosek::fusion::Model::t(_pubthis),_1209,_1235,_1217,_1227,_1236,_7189);
  ((*cons)(_1235)) = (_1259).as<::mosek::fusion::ModelConstraint>();
  if (((int)((_1209).size()) > (int)0))
  {
    {
      con_map->setItem(_1209,_1235);
    }
  }
  {}
  return (_1259).as<::mosek::fusion::Constraint>();
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint_(const std::string & _1261,monty::rc_ptr< ::mosek::fusion::Expression > _1262,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1263){
  if ((((int)((_1261).size()) > (int)0) && hasConstraint(_1261)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1261)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if ((((int)((_1261).size()) > (int)0) && hasConstraint(_1261)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1261)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if (mosek::fusion::p_ConeDomain::_get_impl(_1263)->int_flag)
  {
    {
      throw ::mosek::fusion::DomainError(std::string ("Integer domain not allowed in a constraint"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::ExprDense > _1264 = ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_1262)).as<::mosek::fusion::Expression>());
  _1264->eval(rs,ws,xs);
  rs->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _1265 = mosek::fusion::p_WorkStack::_get_impl(rs)->i32;
  _checked_ptr_1<int> _ptr__1265(_1265 ? _1265->raw() : nullptr,_1265 ? _1265->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1266 = mosek::fusion::p_WorkStack::_get_impl(rs)->i64;
  _checked_ptr_1<long long> _ptr__1266(_1266 ? _1266->raw() : nullptr,_1266 ? _1266->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1267 = mosek::fusion::p_WorkStack::_get_impl(rs)->f64;
  _checked_ptr_1<double> _ptr__1267(_1267 ? _1267->raw() : nullptr,_1267 ? _1267->size(0) : 0);
  int _1268 = mosek::fusion::p_WorkStack::_get_impl(rs)->nd;
  int _1269 = mosek::fusion::p_WorkStack::_get_impl(rs)->shape_base;
  int _1270 = mosek::fusion::p_WorkStack::_get_impl(rs)->nelem;
  int _1271 = mosek::fusion::p_WorkStack::_get_impl(rs)->nnz;
  bool _1272 = mosek::fusion::p_WorkStack::_get_impl(rs)->hassp;
  int _1273 = mosek::fusion::p_WorkStack::_get_impl(rs)->ptr_base;
  int _1274 = mosek::fusion::p_WorkStack::_get_impl(rs)->nidxs_base;
  int _1275 = mosek::fusion::p_WorkStack::_get_impl(rs)->bfix_base;
  int _1276 = mosek::fusion::p_WorkStack::_get_impl(rs)->cof_base;
  std::vector<int> _7190;
  for (int _1278 = (int)0, _7191 = _1268; _1278 < _7191 ; ++_1278)
  {
    _7190.push_back(_ptr__1265[safe_add( _1269,_1278 )]);
  }
  auto _7192 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7190.size()),_7190.begin(),_7190.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _1277 = _7192;
  _checked_ptr_1<int> _ptr__1277(_1277 ? _1277->raw() : nullptr,_1277 ? _1277->size(0) : 0);
  if (((NULL != mosek::fusion::p_ConeDomain::_get_impl(_1263)->shape.get()) && (!::mosek::fusion::p_Set::match(_1277,mosek::fusion::p_ConeDomain::_get_impl(_1263)->shape))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
    }
  }
  {}
  int _7193;
  bool _7194 = _1263->axisIsSet();
  if (_7194)
  {
    _7193 = _1263->getAxis();
  }
  else
  {
    _7193 = (_1268 - (int)1);
  }
  int _1279 = _7193;
  int _1280 = _ptr__1277[_1279];
  int _1281 = (int)1;
  int _1282 = (int)1;
  int _1283 = (int)1;
  {
    int _7195 = (int)0;
    int _7196 = _1268;
    for (int _1284 = _7195; _1284 < _7196; ++_1284)
    {
      {
        _1283 *= _ptr__1277[_1284];
      }
    }
    int _7197 = (int)0;
    int _7198 = _1279;
    for (int _1285 = _7197; _1285 < _7198; ++_1285)
    {
      {
        _1282 *= _ptr__1277[_1285];
      }
    }
    int _7199 = safe_add( _1279,(int)1 );
    int _7200 = _1268;
    for (int _1286 = _7199; _1286 < _7200; ++_1286)
    {
      {
        _1281 *= _ptr__1277[_1286];
      }
    }
  }
  int _1287 = safe_mul( _1282,_1281 );
  if (((mosek::fusion::p_ConeDomain::_get_impl(_1263)->key == ::mosek::fusion::QConeKey::InQCone) && (_1280 < (int)2)))
  {
    {
      throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1280)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for quadratic cone"))->toString());
    }
  }
  else if(((mosek::fusion::p_ConeDomain::_get_impl(_1263)->key == ::mosek::fusion::QConeKey::InRotatedQCone) && (_1280 < (int)3)))
  {
    {
      throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1280)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for rotated quadratic cone"))->toString());
    }
  }
  else if(((mosek::fusion::p_ConeDomain::_get_impl(_1263)->key == ::mosek::fusion::QConeKey::InPExpCone) && (_1280 != (int)3)))
  {
    {
      throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1280)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for exponential cone"))->toString());
    }
  }
  else if(((mosek::fusion::p_ConeDomain::_get_impl(_1263)->key == ::mosek::fusion::QConeKey::InPPowCone) && (_1280 < (int)2)))
  {
    {
      throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1280)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for power cone"))->toString());
    }
  }
  else if(((mosek::fusion::p_ConeDomain::_get_impl(_1263)->key == ::mosek::fusion::QConeKey::InDExpCone) && (_1280 != (int)3)))
  {
    {
      throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1280)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for dual exponential cone"))->toString());
    }
  }
  else if(((mosek::fusion::p_ConeDomain::_get_impl(_1263)->key == ::mosek::fusion::QConeKey::InDPowCone) && (_1280 < (int)2)))
  {
    {
      throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1280)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for dual power cone"))->toString());
    }
  }
  {}
  int _1288 = natvarmap_alloc(_1283);
  std::shared_ptr< monty::ndarray< int,1 > > _1289 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1283)));
  _checked_ptr_1<int> _ptr__1289(_1289 ? _1289->raw() : nullptr,_1289 ? _1289->size(0) : 0);
  natvarmap->get(_1288,_1289,(int)0);
  int _1290 = natconemap_alloc(_1287);
  int _7201 = (int)0;
  int _7202 = _1283;
  for (int _1291 = _7201; _1291 < _7202; ++_1291)
  {
    {
      ((*natvarmap_idx)(_ptr__1289[_1291])) = _1288;
    }
  }
  task_var_putboundlist_fr(_1289);
  std::shared_ptr< monty::ndarray< int,1 > > _7203;
  bool _7204 = (_1279 < ((int)((_1277)->size(0)) - (int)1));
  if (_7204)
  {
    _7203 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_1289)->size(0)))));
  }
  else
  {
    _7203 = _1289;
  }
  std::shared_ptr< monty::ndarray< int,1 > > _1292 = _7203;
  _checked_ptr_1<int> _ptr__1292(_1292 ? _1292->raw() : nullptr,_1292 ? _1292->size(0) : 0);
  if ((_1279 < ((int)((_1277)->size(0)) - (int)1)))
  {
    {
      int _1293 = (int)0;
      int _7205 = (int)0;
      int _7206 = _1282;
      for (int _1294 = _7205; _1294 < _7206; ++_1294)
      {
        {
          int _7207 = (int)0;
          int _7208 = _1281;
          for (int _1295 = _7207; _1295 < _7208; ++_1295)
          {
            {
              int _7209 = (int)0;
              int _7210 = _1280;
              for (int _1296 = _7209; _1296 < _7210; ++_1296)
              {
                {
                  _ptr__1292[_1293] = _ptr__1289[safe_add( safe_mul( safe_add( safe_mul( _1294,_1280 ),_1296 ),_1281 ),_1295 )];
                  ++ _1293;
                }
              }
            }
          }
        }
      }
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _1297 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1287)));
  _checked_ptr_1<int> _ptr__1297(_1297 ? _1297->raw() : nullptr,_1297 ? _1297->size(0) : 0);
  natconemap->get(_1290,_1297,(int)0);
  ((*natconemap_dim)(_1290)) = _1280;
  if ((mosek::fusion::p_ConeDomain::_get_impl(_1263)->key == ::mosek::fusion::QConeKey::InQCone))
  {
    {
      task_put_quadcones(_1297,_1280,_1287,_1292);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1263)->key == ::mosek::fusion::QConeKey::InRotatedQCone))
  {
    {
      task_put_rquadcones(_1297,_1280,_1287,_1292);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1263)->key == ::mosek::fusion::QConeKey::InPExpCone))
  {
    {
      task_put_pexpcones(_1297,_1280,_1287,_1292);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1263)->key == ::mosek::fusion::QConeKey::InPPowCone))
  {
    {
      std::vector<double> _7211;
      for (int _1298 = (int)0, _7212 = _1287; _1298 < _7212 ; ++_1298)
      {
        _7211.push_back(mosek::fusion::p_ConeDomain::_get_impl(_1263)->alpha);
      }
      auto _7213 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7211.size()),_7211.begin(),_7211.end()));
      task_put_ppowcones(_1297,_1280,_1287,_1292,_7213);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1263)->key == ::mosek::fusion::QConeKey::InDExpCone))
  {
    {
      task_put_dexpcones(_1297,_1280,_1287,_1292);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1263)->key == ::mosek::fusion::QConeKey::InDPowCone))
  {
    {
      std::vector<double> _7214;
      for (int _1299 = (int)0, _7215 = _1287; _1299 < _7215 ; ++_1299)
      {
        _7214.push_back(mosek::fusion::p_ConeDomain::_get_impl(_1263)->alpha);
      }
      auto _7216 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7214.size()),_7214.begin(),_7214.end()));
      task_put_dpowcones(_1297,_1280,_1287,_1292,_7216);
    }
  }
  else
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal error: Invalid cone type"));
    }
  }
  ((*vars)(_1288)) = nullptr;
  std::shared_ptr< monty::ndarray< double,1 > > _1300 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1283)));
  _checked_ptr_1<double> _ptr__1300(_1300 ? _1300->raw() : nullptr,_1300 ? _1300->size(0) : 0);
  int _1301 = natconmap_alloc(_1283);
  std::shared_ptr< monty::ndarray< int,1 > > _1302 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1283)));
  _checked_ptr_1<int> _ptr__1302(_1302 ? _1302->raw() : nullptr,_1302 ? _1302->size(0) : 0);
  natconmap->get(_1301,_1302,(int)0);
  ((*natconmap_type)(_1301)) = safe_add( _1288,(int)6 );
  {
    int _7217 = (int)0;
    int _7218 = _1283;
    for (int _1303 = _7217; _1303 < _7218; ++_1303)
    {
      {
        ((*natconmap_efix)(_ptr__1302[_1303])) = _ptr__1267[safe_add( _1275,_1303 )];
      }
    }
    int _7219 = (int)0;
    int _7220 = _1283;
    for (int _1304 = _7219; _1304 < _7220; ++_1304)
    {
      {
        ((*natconmap_lb)(_ptr__1302[_1304])) = (int)0;
      }
    }
    int _7221 = (int)0;
    int _7222 = _1283;
    for (int _1305 = _7221; _1305 < _7222; ++_1305)
    {
      {
        ((*natconmap_ub)(_ptr__1302[_1305])) = (int)0;
      }
    }
    int _7223 = (int)0;
    int _7224 = _1283;
    for (int _1306 = _7223; _1306 < _7224; ++_1306)
    {
      {
        ((*natconmap_slackidx)(_ptr__1302[_1306])) = safe_add( _ptr__1289[_1306],(int)1 );
      }
    }
    int _7225 = (int)0;
    int _7226 = _1283;
    for (int _1307 = _7225; _1307 < _7226; ++_1307)
    {
      {
        ((*natconmap_blockid)(_ptr__1302[_1307])) = _1301;
      }
    }
    int _7227 = (int)0;
    int _7228 = _1283;
    for (int _1308 = _7227; _1308 < _7228; ++_1308)
    {
      {
        ((*natconmap_idx)(_ptr__1302[_1308])) = _1308;
      }
    }
  }
  task_con_putboundlist_fx(_1302,_1300);
  putarows(_1302,rs,_1270,_1271,_1273,_1274,_1276,_1275,_1289);
  monty::rc_ptr< ::mosek::fusion::ConicConstraint > _1309 = ::mosek::fusion::p_ConicConstraint::_new_ConicConstraint(::mosek::fusion::Model::t(_pubthis),_1261,_1263,_1277,_1301,_1302,_1289);
  ((*cons)(_1301)) = (_1309).as<::mosek::fusion::ModelConstraint>();
  if (((int)((_1261).size()) > (int)0))
  {
    {
      con_map->setItem(_1261,_1301);
    }
  }
  {}
  return (_1309).as<::mosek::fusion::Constraint>();
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint_(const std::string & _1310,monty::rc_ptr< ::mosek::fusion::Expression > _1311,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1312){
  if ((((int)((_1310).size()) > (int)0) && hasConstraint(_1310)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1310)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if (mosek::fusion::p_LinearDomain::_get_impl(_1312)->cardinal_flag)
  {
    {
      throw ::mosek::fusion::DomainError(std::string ("Integer domain not allowed in a constraint"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::ExprDense > _1313 = ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_1311)).as<::mosek::fusion::Expression>());
  _1313->eval(rs,ws,xs);
  rs->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _1314 = mosek::fusion::p_WorkStack::_get_impl(rs)->i32;
  _checked_ptr_1<int> _ptr__1314(_1314 ? _1314->raw() : nullptr,_1314 ? _1314->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1315 = mosek::fusion::p_WorkStack::_get_impl(rs)->i64;
  _checked_ptr_1<long long> _ptr__1315(_1315 ? _1315->raw() : nullptr,_1315 ? _1315->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1316 = mosek::fusion::p_WorkStack::_get_impl(rs)->f64;
  _checked_ptr_1<double> _ptr__1316(_1316 ? _1316->raw() : nullptr,_1316 ? _1316->size(0) : 0);
  int _1317 = mosek::fusion::p_WorkStack::_get_impl(rs)->nd;
  int _1318 = mosek::fusion::p_WorkStack::_get_impl(rs)->shape_base;
  int _1319 = mosek::fusion::p_WorkStack::_get_impl(rs)->nelem;
  int _1320 = mosek::fusion::p_WorkStack::_get_impl(rs)->nnz;
  bool _1321 = mosek::fusion::p_WorkStack::_get_impl(rs)->hassp;
  int _1322 = mosek::fusion::p_WorkStack::_get_impl(rs)->ptr_base;
  int _1323 = mosek::fusion::p_WorkStack::_get_impl(rs)->nidxs_base;
  int _1324 = mosek::fusion::p_WorkStack::_get_impl(rs)->bfix_base;
  int _1325 = mosek::fusion::p_WorkStack::_get_impl(rs)->cof_base;
  std::vector<int> _7229;
  for (int _1327 = (int)0, _7230 = _1317; _1327 < _7230 ; ++_1327)
  {
    _7229.push_back(_ptr__1314[safe_add( _1318,_1327 )]);
  }
  auto _7231 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7229.size()),_7229.begin(),_7229.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _1326 = _7231;
  _checked_ptr_1<int> _ptr__1326(_1326 ? _1326->raw() : nullptr,_1326 ? _1326->size(0) : 0);
  if (((NULL != mosek::fusion::p_LinearDomain::_get_impl(_1312)->shape.get()) && (!::mosek::fusion::p_Set::match(_1326,mosek::fusion::p_LinearDomain::_get_impl(_1312)->shape))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
    }
  }
  {}
  int _1328 = (int)1;
  int _7232 = (int)0;
  int _7233 = _1317;
  for (int _1329 = _7232; _1329 < _7233; ++_1329)
  {
    {
      _1328 *= _ptr__1326[_1329];
    }
  }
  std::shared_ptr< monty::ndarray< double,1 > > _1330;
  _checked_ptr_1<double> _ptr__1330(_1330 ? _1330->raw() : nullptr,_1330 ? _1330->size(0) : 0);
  int _1331 = natconmap_alloc(_1328);
  std::shared_ptr< monty::ndarray< int,1 > > _1332 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1328)));
  _checked_ptr_1<int> _ptr__1332(_1332 ? _1332->raw() : nullptr,_1332 ? _1332->size(0) : 0);
  natconmap->get(_1331,_1332,(int)0);
  putarows(_1332,rs,_1319,_1320,_1322,_1323,_1325,_1324,std::shared_ptr< monty::ndarray< int,1 > >(nullptr));
  {
    std::shared_ptr< monty::ndarray< int,2 > > _1333 = mosek::fusion::p_LinearDomain::_get_impl(_1312)->sparsity;
    bool _1334 = mosek::fusion::p_LinearDomain::_get_impl(_1312)->empty;
    std::shared_ptr< monty::ndarray< double,1 > > _1335 = mosek::fusion::p_LinearDomain::_get_impl(_1312)->bnd;
    _checked_ptr_1<double> _ptr__1335(_1335 ? _1335->raw() : nullptr,_1335 ? _1335->size(0) : 0);
    bool _1336 = mosek::fusion::p_LinearDomain::_get_impl(_1312)->scalable;
    std::shared_ptr< monty::ndarray< double,1 > > _1337 = natconmap_efix;
    _checked_ptr_1<double> _ptr__1337(_1337 ? _1337->raw() : nullptr,_1337 ? _1337->size(0) : 0);
    std::shared_ptr< monty::ndarray< double,1 > > _1338 = natconmap_lb;
    _checked_ptr_1<double> _ptr__1338(_1338 ? _1338->raw() : nullptr,_1338 ? _1338->size(0) : 0);
    std::shared_ptr< monty::ndarray< double,1 > > _1339 = natconmap_ub;
    _checked_ptr_1<double> _ptr__1339(_1339 ? _1339->raw() : nullptr,_1339 ? _1339->size(0) : 0);
    {
      int _7234 = (int)0;
      int _7235 = _1319;
      for (int _1340 = _7234; _1340 < _7235; ++_1340)
      {
        {
          _ptr__1337[_ptr__1332[_1340]] = _ptr__1316[safe_add( _1324,_1340 )];
        }
      }
      if ((NULL == _1335.get()))
      {
        {
          int _7236 = (int)0;
          int _7237 = _1319;
          for (int _1341 = _7236; _1341 < _7237; ++_1341)
          {
            {
              _ptr__1338[_ptr__1332[_1341]] = (int)0;
              _ptr__1339[_ptr__1332[_1341]] = (int)0;
            }
          }
        }
      }
      else if(_1336)
      {
        {
          int _7238 = (int)0;
          int _7239 = _1319;
          for (int _1342 = _7238; _1342 < _7239; ++_1342)
          {
            {
              _ptr__1338[_ptr__1332[_1342]] = _ptr__1335[(int)0];
              _ptr__1339[_ptr__1332[_1342]] = _ptr__1335[(int)0];
            }
          }
        }
      }
      else if((NULL != _1333.get()))
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _1343 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1317)));
          _checked_ptr_1<int> _ptr__1343(_1343 ? _1343->raw() : nullptr,_1343 ? _1343->size(0) : 0);
          _ptr__1343[(_1317 - (int)1)] = (int)1;
          int _7240 = (int)1;
          int _7241 = _1317;
          for (int _1344 = _7240; _1344 < _7241; ++_1344)
          {
            {
              _ptr__1343[((_1317 - _1344) - (int)1)] = safe_mul( _ptr__1343[(_1317 - _1344)],_ptr__1326[(_1317 - _1344)] );
            }
          }
          int _7242 = (int)0;
          int _7243 = (int)((_1333)->size(0));
          for (int _1345 = _7242; _1345 < _7243; ++_1345)
          {
            {
              int _1346 = (int)0;
              int _7244 = (int)0;
              int _7245 = _1317;
              for (int _1347 = _7244; _1347 < _7245; ++_1347)
              {
                {
                  _1346 += safe_mul( _ptr__1343[_1347],((*_1333)(_1345,_1347)) );
                }
              }
              _ptr__1338[_ptr__1332[_1346]] = _ptr__1335[_1345];
              _ptr__1339[_ptr__1332[_1346]] = _ptr__1335[_1345];
            }
          }
        }
      }
      else if(_1334)
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _1348 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1317)));
          _checked_ptr_1<int> _ptr__1348(_1348 ? _1348->raw() : nullptr,_1348 ? _1348->size(0) : 0);
          _ptr__1348[(_1317 - (int)1)] = (int)1;
          int _7246 = (int)1;
          int _7247 = _1317;
          for (int _1349 = _7246; _1349 < _7247; ++_1349)
          {
            {
              _ptr__1348[((_1317 - _1349) - (int)1)] = safe_mul( _ptr__1348[(_1317 - _1349)],_ptr__1326[(_1317 - _1349)] );
            }
          }
          int _7248 = (int)0;
          int _7249 = (int)((_1333)->size(0));
          for (int _1350 = _7248; _1350 < _7249; ++_1350)
          {
            {
              int _1351 = (int)0;
              int _7250 = (int)0;
              int _7251 = _1317;
              for (int _1352 = _7250; _1352 < _7251; ++_1352)
              {
                {
                  _1351 += safe_mul( _ptr__1348[_1352],((*_1333)(_1350,_1352)) );
                }
              }
              _ptr__1338[_ptr__1332[_1351]] = (int)0;
              _ptr__1339[_ptr__1332[_1351]] = (int)0;
            }
          }
        }
      }
      else
      {
        {
          int _7252 = (int)0;
          int _7253 = _1319;
          for (int _1353 = _7252; _1353 < _7253; ++_1353)
          {
            {
              _ptr__1338[_ptr__1332[_1353]] = _ptr__1335[_1353];
              _ptr__1339[_ptr__1332[_1353]] = _ptr__1335[_1353];
            }
          }
        }
      }
    }
    std::vector<double> _7254;
    for (int _1354 = (int)0, _7255 = (int)((_1332)->size(0)); _1354 < _7255 ; ++_1354)
    {
      _7254.push_back(_ptr__1338[_ptr__1332[_1354]]);
    }
    auto _7256 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7254.size()),_7254.begin(),_7254.end()));
    _1330 = _7256;
    _ptr__1330.update(_1330 ? _1330->raw() : nullptr, _1330 ? _1330->size(0) : 0);
  }
  int _7257 = (int)0;
  int _7258 = _1328;
  for (int _1355 = _7257; _1355 < _7258; ++_1355)
  {
    {
      ((*natconmap_idx)(_ptr__1332[_1355])) = _1331;
      ((*natconmap_slackidx)(_ptr__1332[_1355])) = (int)0;
    }
  }
  if ((mosek::fusion::p_LinearDomain::_get_impl(_1312)->key == ::mosek::fusion::RelationKey::IsFree))
  {
    {
      ((*natconmap_type)(_1331)) = (int)1;
      task_con_putboundlist_fr(_1332);
    }
  }
  {}
  if ((mosek::fusion::p_LinearDomain::_get_impl(_1312)->key == ::mosek::fusion::RelationKey::LessThan))
  {
    {
      ((*natconmap_type)(_1331)) = (int)3;
      task_con_putboundlist_up(_1332,_1330);
    }
  }
  else if((mosek::fusion::p_LinearDomain::_get_impl(_1312)->key == ::mosek::fusion::RelationKey::GreaterThan))
  {
    {
      ((*natconmap_type)(_1331)) = (int)2;
      task_con_putboundlist_lo(_1332,_1330);
    }
  }
  else if((mosek::fusion::p_LinearDomain::_get_impl(_1312)->key == ::mosek::fusion::RelationKey::EqualsTo))
  {
    {
      ((*natconmap_type)(_1331)) = (int)5;
      task_con_putboundlist_fx(_1332,_1330);
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::LinearConstraint > _1356 = ::mosek::fusion::p_LinearConstraint::_new_LinearConstraint(::mosek::fusion::Model::t(_pubthis),_1310,_1331,_1326,_1332);
  ((*cons)(_1331)) = (_1356).as<::mosek::fusion::ModelConstraint>();
  if (((int)((_1310).size()) > (int)0))
  {
    {
      con_map->setItem(_1310,_1331);
    }
  }
  {}
  return (_1356).as<::mosek::fusion::Constraint>();
}
std::string mosek::fusion::Model::getVersion  ( ) { return mosek::fusion::p_Model::getVersion(); }std::string mosek::fusion::p_Model::getVersion(){
  return ::mosek::fusion::p_BaseModel::env_getversion();
}
bool mosek::fusion::Model :: hasConstraint(const std::string & _1357) { return mosek::fusion::p_Model::_get_impl(this)->hasConstraint(_1357); }bool mosek::fusion::p_Model::hasConstraint(const std::string & _1357){
  return con_map->hasItem(_1357);
}
bool mosek::fusion::Model :: hasVariable(const std::string & _1358) { return mosek::fusion::p_Model::_get_impl(this)->hasVariable(_1358); }bool mosek::fusion::p_Model::hasVariable(const std::string & _1358){
  return var_map->hasItem(_1358);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__getConstraint(int _1359) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getConstraint(_1359); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::getConstraint(int _1359) { return __mosek_2fusion_2Model__getConstraint(_1359); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__getConstraint(int _1359){
  return (((*cons)(_1359))).as<::mosek::fusion::Constraint>();
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__getConstraint(const std::string & _1360) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getConstraint(_1360); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::getConstraint(const std::string &  _1360) { return __mosek_2fusion_2Model__getConstraint(_1360); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__getConstraint(const std::string & _1360){
  monty::rc_ptr< ::mosek::fusion::ModelConstraint > _7259;
  bool _7260 = con_map->hasItem(_1360);
  if (_7260)
  {
    _7259 = ((*cons)(con_map->getItem(_1360)));
  }
  else
  {
    _7259 = nullptr;
  }
  return (_7259).as<::mosek::fusion::Constraint>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__getVariable(int _1361) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getVariable(_1361); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::getVariable(int _1361) { return __mosek_2fusion_2Model__getVariable(_1361); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__getVariable(int _1361){
  return (((*vars)(_1361))).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__getVariable(const std::string & _1362) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getVariable(_1362); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::getVariable(const std::string &  _1362) { return __mosek_2fusion_2Model__getVariable(_1362); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__getVariable(const std::string & _1362){
  if (var_map->hasItem(_1362))
  {
    {
      int _1363 = var_map->getItem(_1362);
      if ((_1363 < (int)0))
      {
        {
          return (((*barvars)((-safe_add( _1363,(int)1 ))))).as<::mosek::fusion::Variable>();
        }
      }
      else
      {
        {
          return (((*vars)(_1363))).as<::mosek::fusion::Variable>();
        }
      }
    }
  }
  else
  {
    {
      return nullptr;
    }
  }
}
std::string mosek::fusion::Model :: getName() { return mosek::fusion::p_Model::_get_impl(this)->getName(); }std::string mosek::fusion::p_Model::getName(){
  return model_name;
}
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Model :: __mosek_2fusion_2Model__clone() { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__clone(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Model::clone() { return __mosek_2fusion_2Model__clone(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_Model::__mosek_2fusion_2Model__clone(){
  return ::mosek::fusion::p_Model::_new_Model(::mosek::fusion::Model::t(_pubthis));
}
void mosek::fusion::p_Model::destroy(){xs.reset();ws.reset();rs.reset();con_map.reset();cons.reset();natconmap_type.reset();natconmap_ub.reset();natconmap_lb.reset();natconmap_efix.reset();natconmap_idx.reset();natconmap_slackidx.reset();natconmap_blockid.reset();natconmap.reset();initsol_xx_flag.reset();initsol_xx.reset();var_map.reset();barvars.reset();natbarvarmap_ptr.reset();natbarvarmap_num.reset();natbarvar_dim.reset();natbarvar_ptr.reset();natbarvar_j.reset();natbarvar_i.reset();natbarvar_idx.reset();natvarmap_type.reset();natconemap_dim.reset();natconemap.reset();vars.reset();natvarmap_idx.reset();natvarmap_blockid.reset();natvarmap.reset();}void mosek::fusion::Model::destroy() { mosek::fusion::p_Model::_get_impl(this)->destroy(); }mosek::fusion::SliceVariable::SliceVariable(mosek::fusion::p_SliceVariable *_impl) : mosek::fusion::BaseVariable(_impl) { /*std::cout << "SliceVariable()" << this << std::endl; */ }mosek::fusion::SliceVariable::~SliceVariable() {  /* std::cout << "~SliceVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_SliceVariable::p_SliceVariable  (::mosek::fusion::SliceVariable * _pubthis) :     mosek::fusion::p_BaseVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SliceVariable::t mosek::fusion::p_SliceVariable::_new_SliceVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1364,    std::shared_ptr< monty::ndarray< int,1 > > _1365,    std::shared_ptr< monty::ndarray< long long,1 > > _1366,    std::shared_ptr< monty::ndarray< long long,1 > > _1367){ return new mosek::fusion::SliceVariable(_1364,_1365,_1366,_1367); }mosek::fusion::SliceVariable::SliceVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1364,    std::shared_ptr< monty::ndarray< int,1 > > _1365,    std::shared_ptr< monty::ndarray< long long,1 > > _1366,    std::shared_ptr< monty::ndarray< long long,1 > > _1367) :    SliceVariable(new mosek::fusion::p_SliceVariable(this)){ mosek::fusion::p_SliceVariable::_get_impl(this)->_initialize(_1364,_1365,_1366,_1367); }void mosek::fusion::p_SliceVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1364,    std::shared_ptr< monty::ndarray< int,1 > > _1365,    std::shared_ptr< monty::ndarray< long long,1 > > _1366,    std::shared_ptr< monty::ndarray< long long,1 > > _1367){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1365(_1365 ? _1365->raw() : nullptr, _1365 ? _1365->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1366(_1366 ? _1366->raw() : nullptr, _1366 ? _1366->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1367(_1367 ? _1367->raw() : nullptr, _1367 ? _1367->size(0) : 0);
    mosek::fusion::p_BaseVariable::_initialize(_1364,_1365,_1366,_1367);
    mosek::fusion::p_SliceVariable::_get_impl(::mosek::fusion::SliceVariable::t(_pubthis))->nativeidxs = _1367;
    mosek::fusion::p_SliceVariable::_get_impl(::mosek::fusion::SliceVariable::t(_pubthis))->sparsity = _1366;
    mosek::fusion::p_SliceVariable::_get_impl(::mosek::fusion::SliceVariable::t(_pubthis))->shape = _1365;
  }
}void mosek::fusion::p_SliceVariable::destroy(){shape.reset();sparsity.reset();nativeidxs.reset();}void mosek::fusion::SliceVariable::destroy() { mosek::fusion::p_SliceVariable::_get_impl(this)->destroy(); }mosek::fusion::SymRangedVariable::SymRangedVariable(mosek::fusion::p_SymRangedVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "SymRangedVariable()" << this << std::endl; */ }mosek::fusion::SymRangedVariable::~SymRangedVariable() {  /* std::cout << "~SymRangedVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_SymRangedVariable::p_SymRangedVariable  (::mosek::fusion::SymRangedVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SymRangedVariable::t mosek::fusion::p_SymRangedVariable::_new_SymRangedVariable  (monty::rc_ptr< ::mosek::fusion::SymRangedVariable > _1368,    monty::rc_ptr< ::mosek::fusion::Model > _1369){ return new mosek::fusion::SymRangedVariable(_1368,_1369); }mosek::fusion::SymRangedVariable::SymRangedVariable  (monty::rc_ptr< ::mosek::fusion::SymRangedVariable > _1368,    monty::rc_ptr< ::mosek::fusion::Model > _1369) :    SymRangedVariable(new mosek::fusion::p_SymRangedVariable(this)){ mosek::fusion::p_SymRangedVariable::_get_impl(this)->_initialize(_1368,_1369); }void mosek::fusion::p_SymRangedVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::SymRangedVariable > _1368,    monty::rc_ptr< ::mosek::fusion::Model > _1369){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelVariable::_initialize(_1368,_1369);
    names_flushed = mosek::fusion::p_SymRangedVariable::_get_impl(_1368)->names_flushed;
    name = mosek::fusion::p_SymRangedVariable::_get_impl(_1368)->name;
    sparsity = mosek::fusion::p_SymRangedVariable::_get_impl(_1368)->sparsity;
    nativeidxs = mosek::fusion::p_SymRangedVariable::_get_impl(_1368)->nativeidxs;
    dim = mosek::fusion::p_SymRangedVariable::_get_impl(_1368)->dim;
  }
}mosek::fusion::SymRangedVariable::t mosek::fusion::p_SymRangedVariable::_new_SymRangedVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1370,    const std::string &  _1371,    long long _1372,    int _1373,    std::shared_ptr< monty::ndarray< long long,1 > > _1374,    std::shared_ptr< monty::ndarray< int,1 > > _1375){ return new mosek::fusion::SymRangedVariable(_1370,_1371,_1372,_1373,_1374,_1375); }mosek::fusion::SymRangedVariable::SymRangedVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1370,    const std::string &  _1371,    long long _1372,    int _1373,    std::shared_ptr< monty::ndarray< long long,1 > > _1374,    std::shared_ptr< monty::ndarray< int,1 > > _1375) :    SymRangedVariable(new mosek::fusion::p_SymRangedVariable(this)){ mosek::fusion::p_SymRangedVariable::_get_impl(this)->_initialize(_1370,_1371,_1372,_1373,_1374,_1375); }void mosek::fusion::p_SymRangedVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1370,    const std::string &  _1371,    long long _1372,    int _1373,    std::shared_ptr< monty::ndarray< long long,1 > > _1374,    std::shared_ptr< monty::ndarray< int,1 > > _1375){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__1374(_1374 ? _1374->raw() : nullptr, _1374 ? _1374->size(0) : 0);
    _checked_ptr_1<int> _ptr__1375(_1375 ? _1375->raw() : nullptr, _1375 ? _1375->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_1370,_1371,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1373),(int)(_1373)}),_1372,::mosek::fusion::p_SymRangedVariable::mirror_sp(_1373,_1374),::mosek::fusion::p_SymRangedVariable::mirror_idxs(_1373,_1374,_1375));
    names_flushed = false;
    mosek::fusion::p_SymRangedVariable::_get_impl(::mosek::fusion::SymRangedVariable::t(_pubthis))->name = _1371;
    mosek::fusion::p_SymRangedVariable::_get_impl(::mosek::fusion::SymRangedVariable::t(_pubthis))->nativeidxs = _1375;
    mosek::fusion::p_SymRangedVariable::_get_impl(::mosek::fusion::SymRangedVariable::t(_pubthis))->sparsity = _1374;
    mosek::fusion::p_SymRangedVariable::_get_impl(::mosek::fusion::SymRangedVariable::t(_pubthis))->dim = _1373;
  }
}void mosek::fusion::p_SymRangedVariable::dual_u(int _1376,std::shared_ptr< monty::ndarray< double,1 > > _1377){
  _checked_ptr_1<double> _ptr__1377(_1377 ? _1377->raw() : nullptr, _1377 ? _1377->size(0) : 0);
  dual_lu(_1376,_1377,false);
}
void mosek::fusion::p_SymRangedVariable::dual_l(int _1378,std::shared_ptr< monty::ndarray< double,1 > > _1379){
  _checked_ptr_1<double> _ptr__1379(_1379 ? _1379->raw() : nullptr, _1379 ? _1379->size(0) : 0);
  dual_lu(_1378,_1379,true);
}
void mosek::fusion::p_SymRangedVariable::flushNames(){
  monty::rc_ptr< ::mosek::fusion::Model > _1380 = _pubthis->__mosek_2fusion_2BaseVariable__getModel();
  if (((!names_flushed) && ((int)((name).size()) > (int)0)))
  {
    {
      if ((NULL == sparsity.get()))
      {
        {
          int _7261 = (int)0;
          int _7262 = (int)((nativeidxs)->size(0));
          for (int _1381 = _7261; _1381 < _7262; ++_1381)
          {
            {
              std::string _7263;
              bool _7264 = ((int)((name).size()) == (int)0);
              if (_7264)
              {
                _7263 = std::string ("");
              }
              else
              {
                _7263 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["))->__mosek_2fusion_2Utils_2StringBuffer__a((_1381 / dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a((_1381 % dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"))->toString();
              }
              mosek::fusion::p_Model::_get_impl(_1380.get())->varname(((*nativeidxs)(_1381)),_7263);
            }
          }
        }
      }
      else
      {
        {
          int _7265 = (int)0;
          int _7266 = (int)((sparsity)->size(0));
          for (int _1382 = _7265; _1382 < _7266; ++_1382)
          {
            {
              mosek::fusion::p_Model::_get_impl(_1380.get())->varname(((*nativeidxs)(_1382)),::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["))->__mosek_2fusion_2Utils_2StringBuffer__a((((*sparsity)(_1382)) / dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a((((*sparsity)(_1382)) % dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"))->toString());
            }
          }
        }
      }
      names_flushed = true;
    }
  }
  {}
}
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_SymRangedVariable::__mosek_2fusion_2SymRangedVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _1383){
  return (::mosek::fusion::p_SymRangedVariable::_new_SymRangedVariable(::mosek::fusion::SymRangedVariable::t(_pubthis),_1383)).as<::mosek::fusion::ModelVariable>();
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_SymRangedVariable::mirror_idxs(int _1384,std::shared_ptr< monty::ndarray< long long,1 > > _1385,std::shared_ptr< monty::ndarray< int,1 > > _1386){
  _checked_ptr_1<long long> _ptr__1385(_1385 ? _1385->raw() : nullptr, _1385 ? _1385->size(0) : 0);
  _checked_ptr_1<int> _ptr__1386(_1386 ? _1386->raw() : nullptr, _1386 ? _1386->size(0) : 0);
  if ((NULL == _1385.get()))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _1387 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_mul( _1384,_1384 ))));
      _checked_ptr_1<long long> _ptr__1387(_1387 ? _1387->raw() : nullptr,_1387 ? _1387->size(0) : 0);
      int _1388 = (int)0;
      {
        int _7267 = (int)0;
        int _7268 = _1384;
        for (int _1389 = _7267; _1389 < _7268; ++_1389)
        {
          {
            _ptr__1387[safe_add( safe_mul( _1389,_1384 ),_1389 )] = safe_add( _ptr__1386[_1388],(int)1 );
            ++ _1388;
            int _7269 = safe_add( _1389,(int)1 );
            int _7270 = _1384;
            for (int _1390 = _7269; _1390 < _7270; ++_1390)
            {
              {
                _ptr__1387[safe_add( safe_mul( _1389,_1384 ),_1390 )] = safe_add( _ptr__1386[_1388],(int)1 );
                _ptr__1387[safe_add( safe_mul( _1390,_1384 ),_1389 )] = safe_add( _ptr__1386[_1388],(int)1 );
                ++ _1388;
              }
            }
          }
        }
      }
      return _1387;
    }
  }
  else
  {
    {
      int _1391 = (int)0;
      {
        int _7271 = (int)0;
        int _7272 = (int)((_1385)->size(0));
        for (int _1392 = _7271; _1392 < _7272; ++_1392)
        {
          {
            int _7273;
            bool _7274 = ((_ptr__1385[_1392] % safe_add( _1384,(int)1 )) == (int)0);
            if (_7274)
            {
              _7273 = (int)1;
            }
            else
            {
              _7273 = (int)2;
            }
            _1391 += _7273;
          }
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1393 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1391)));
      _checked_ptr_1<long long> _ptr__1393(_1393 ? _1393->raw() : nullptr,_1393 ? _1393->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _1394 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1391)));
      _checked_ptr_1<long long> _ptr__1394(_1394 ? _1394->raw() : nullptr,_1394 ? _1394->size(0) : 0);
      {
        int _1395 = (int)0;
        int _7275 = (int)0;
        int _7276 = (int)((_1385)->size(0));
        for (int _1396 = _7275; _1396 < _7276; ++_1396)
        {
          {
            long long _1397 = (_ptr__1385[_1396] / _1384);
            long long _1398 = (_ptr__1385[_1396] % _1384);
            _ptr__1393[_1395] = _ptr__1385[_1396];
            _ptr__1394[_1395] = safe_add( _ptr__1386[_1396],(int)1 );
            ++ _1395;
            if ((_1397 != _1398))
            {
              {
                _ptr__1393[_1395] = safe_add( safe_mul( _1398,_1384 ),_1397 );
                _ptr__1394[_1395] = safe_add( _ptr__1386[_1396],(int)1 );
                ++ _1395;
              }
            }
            {}
          }
        }
      }
      std::vector<long long> _7277;
      for (int _1400 = (int)0, _7278 = _1391; _1400 < _7278 ; ++_1400)
      {
        _7277.push_back(_1400);
      }
      auto _7279 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7277.size()),_7277.begin(),_7277.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _1399 = _7279;
      _checked_ptr_1<long long> _ptr__1399(_1399 ? _1399->raw() : nullptr,_1399 ? _1399->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_1399,_1393,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_1391));
      std::vector<long long> _7280;
      for (int _1401 = (int)0, _7281 = _1391; _1401 < _7281 ; ++_1401)
      {
        _7280.push_back(_ptr__1394[_ptr__1399[_1401]]);
      }
      auto _7282 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7280.size()),_7280.begin(),_7280.end()));
      return _7282;
    }
  }
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_SymRangedVariable::mirror_sp(int _1402,std::shared_ptr< monty::ndarray< long long,1 > > _1403){
  _checked_ptr_1<long long> _ptr__1403(_1403 ? _1403->raw() : nullptr, _1403 ? _1403->size(0) : 0);
  if ((NULL == _1403.get()))
  {
    {
      return nullptr;
    }
  }
  else
  {
    {
      int _1404 = (int)0;
      {
        int _7283 = (int)0;
        int _7284 = (int)((_1403)->size(0));
        for (int _1405 = _7283; _1405 < _7284; ++_1405)
        {
          {
            int _7285;
            bool _7286 = ((_ptr__1403[_1405] % safe_add( _1402,(int)1 )) == (int)0);
            if (_7286)
            {
              _7285 = (int)1;
            }
            else
            {
              _7285 = (int)2;
            }
            _1404 += _7285;
          }
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1406 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1404)));
      _checked_ptr_1<long long> _ptr__1406(_1406 ? _1406->raw() : nullptr,_1406 ? _1406->size(0) : 0);
      {
        int _1407 = (int)0;
        int _7287 = (int)0;
        int _7288 = (int)((_1403)->size(0));
        for (int _1408 = _7287; _1408 < _7288; ++_1408)
        {
          {
            long long _1409 = (_ptr__1403[_1408] / _1402);
            long long _1410 = (_ptr__1403[_1408] % _1402);
            _ptr__1406[_1407] = _ptr__1403[_1408];
            ++ _1407;
            if ((_1409 != _1410))
            {
              {
                _ptr__1406[_1407] = safe_add( safe_mul( _1410,_1402 ),_1409 );
                ++ _1407;
              }
            }
            {}
          }
        }
      }
      std::vector<long long> _7289;
      for (int _1412 = (int)0, _7290 = _1404; _1412 < _7290 ; ++_1412)
      {
        _7289.push_back(_1412);
      }
      auto _7291 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7289.size()),_7289.begin(),_7289.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _1411 = _7291;
      _checked_ptr_1<long long> _ptr__1411(_1411 ? _1411->raw() : nullptr,_1411 ? _1411->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_1411,_1406,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_1404));
      std::vector<long long> _7292;
      for (int _1413 = (int)0, _7293 = _1404; _1413 < _7293 ; ++_1413)
      {
        _7292.push_back(_ptr__1406[_ptr__1411[_1413]]);
      }
      auto _7294 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7292.size()),_7292.begin(),_7292.end()));
      return _7294;
    }
  }
}
void mosek::fusion::p_SymRangedVariable::destroy(){sparsity.reset();nativeidxs.reset();}void mosek::fusion::SymRangedVariable::destroy() { mosek::fusion::p_SymRangedVariable::_get_impl(this)->destroy(); }mosek::fusion::RangedVariable::RangedVariable(mosek::fusion::p_RangedVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "RangedVariable()" << this << std::endl; */ }mosek::fusion::RangedVariable::~RangedVariable() {  /* std::cout << "~RangedVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_RangedVariable::p_RangedVariable  (::mosek::fusion::RangedVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::RangedVariable::t mosek::fusion::p_RangedVariable::_new_RangedVariable  (monty::rc_ptr< ::mosek::fusion::RangedVariable > _1414,    monty::rc_ptr< ::mosek::fusion::Model > _1415){ return new mosek::fusion::RangedVariable(_1414,_1415); }mosek::fusion::RangedVariable::RangedVariable  (monty::rc_ptr< ::mosek::fusion::RangedVariable > _1414,    monty::rc_ptr< ::mosek::fusion::Model > _1415) :    RangedVariable(new mosek::fusion::p_RangedVariable(this)){ mosek::fusion::p_RangedVariable::_get_impl(this)->_initialize(_1414,_1415); }void mosek::fusion::p_RangedVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::RangedVariable > _1414,    monty::rc_ptr< ::mosek::fusion::Model > _1415){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelVariable::_initialize(_1414,_1415);
    name = mosek::fusion::p_RangedVariable::_get_impl(_1414)->name;
    nativeidxs = mosek::fusion::p_RangedVariable::_get_impl(_1414)->nativeidxs;
    sparsity = mosek::fusion::p_RangedVariable::_get_impl(_1414)->sparsity;
    names_flushed = mosek::fusion::p_RangedVariable::_get_impl(_1414)->names_flushed;
    shape = mosek::fusion::p_RangedVariable::_get_impl(_1414)->shape;
  }
}mosek::fusion::RangedVariable::t mosek::fusion::p_RangedVariable::_new_RangedVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1416,    const std::string &  _1417,    long long _1418,    std::shared_ptr< monty::ndarray< int,1 > > _1419,    std::shared_ptr< monty::ndarray< long long,1 > > _1420,    std::shared_ptr< monty::ndarray< int,1 > > _1421){ return new mosek::fusion::RangedVariable(_1416,_1417,_1418,_1419,_1420,_1421); }mosek::fusion::RangedVariable::RangedVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1416,    const std::string &  _1417,    long long _1418,    std::shared_ptr< monty::ndarray< int,1 > > _1419,    std::shared_ptr< monty::ndarray< long long,1 > > _1420,    std::shared_ptr< monty::ndarray< int,1 > > _1421) :    RangedVariable(new mosek::fusion::p_RangedVariable(this)){ mosek::fusion::p_RangedVariable::_get_impl(this)->_initialize(_1416,_1417,_1418,_1419,_1420,_1421); }void mosek::fusion::p_RangedVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1416,    const std::string &  _1417,    long long _1418,    std::shared_ptr< monty::ndarray< int,1 > > _1419,    std::shared_ptr< monty::ndarray< long long,1 > > _1420,    std::shared_ptr< monty::ndarray< int,1 > > _1421){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1419(_1419 ? _1419->raw() : nullptr, _1419 ? _1419->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1420(_1420 ? _1420->raw() : nullptr, _1420 ? _1420->size(0) : 0);
    _checked_ptr_1<int> _ptr__1421(_1421 ? _1421->raw() : nullptr, _1421 ? _1421->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_1416,_1417,_1419,_1418,_1420,::mosek::fusion::p_RangedVariable::globalNativeIndexes(_1421));
    mosek::fusion::p_RangedVariable::_get_impl(::mosek::fusion::RangedVariable::t(_pubthis))->nativeidxs = _1421;
    mosek::fusion::p_RangedVariable::_get_impl(::mosek::fusion::RangedVariable::t(_pubthis))->sparsity = _1420;
    mosek::fusion::p_RangedVariable::_get_impl(::mosek::fusion::RangedVariable::t(_pubthis))->name = _1417;
    mosek::fusion::p_RangedVariable::_get_impl(::mosek::fusion::RangedVariable::t(_pubthis))->shape = _1419;
    names_flushed = false;
  }
}monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::RangedVariable :: __mosek_2fusion_2RangedVariable__elementDesc(long long _1422,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1423) { return mosek::fusion::p_RangedVariable::_get_impl(this)->__mosek_2fusion_2RangedVariable__elementDesc(_1422,_1423); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::RangedVariable::elementDesc(long long _1422,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1423) { return __mosek_2fusion_2RangedVariable__elementDesc(_1422,_1423); }
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_RangedVariable::__mosek_2fusion_2RangedVariable__elementDesc(long long _1422,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1423){
  _pubthis->elementName(_1422,_1423);
  _1423->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" : in range"));
  return _1423;
}
void mosek::fusion::p_RangedVariable::flushNames(){
  monty::rc_ptr< ::mosek::fusion::Model > _1424 = _pubthis->__mosek_2fusion_2BaseVariable__getModel();
  if (((!names_flushed) && ((int)((name).size()) > (int)0)))
  {
    {
      monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1425 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
      _1425->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
      if ((_pubthis->getND() > (int)0))
      {
        {
          _1425->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
          int _7295 = (int)1;
          int _7296 = _pubthis->getND();
          for (int _1426 = _7295; _1426 < _7296; ++_1426)
          {
            {
              _1425->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1426);
            }
          }
        }
      }
      {}
      _1425->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
      mosek::fusion::p_Model::_get_impl(_1424.get())->varnames(nativeidxs,_1425->toString(),_pubthis->getShape(),sparsity);
      names_flushed = true;
    }
  }
  {}
}
void mosek::fusion::p_RangedVariable::dual_u(int _1427,std::shared_ptr< monty::ndarray< double,1 > > _1428){
  _checked_ptr_1<double> _ptr__1428(_1428 ? _1428->raw() : nullptr, _1428 ? _1428->size(0) : 0);
  dual_lu(_1427,_1428,false);
}
void mosek::fusion::p_RangedVariable::dual_l(int _1429,std::shared_ptr< monty::ndarray< double,1 > > _1430){
  _checked_ptr_1<double> _ptr__1430(_1430 ? _1430->raw() : nullptr, _1430 ? _1430->size(0) : 0);
  dual_lu(_1429,_1430,true);
}
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_RangedVariable::__mosek_2fusion_2RangedVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _1431){
  return (::mosek::fusion::p_RangedVariable::_new_RangedVariable(::mosek::fusion::RangedVariable::t(_pubthis),_1431)).as<::mosek::fusion::ModelVariable>();
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_RangedVariable::globalNativeIndexes(std::shared_ptr< monty::ndarray< int,1 > > _1432){
  _checked_ptr_1<int> _ptr__1432(_1432 ? _1432->raw() : nullptr, _1432 ? _1432->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1433 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1432)->size(0)))));
  _checked_ptr_1<long long> _ptr__1433(_1433 ? _1433->raw() : nullptr,_1433 ? _1433->size(0) : 0);
  int _7297 = (int)0;
  int _7298 = (int)((_1432)->size(0));
  for (int _1434 = _7297; _1434 < _7298; ++_1434)
  {
    {
      _ptr__1433[_1434] = safe_add( _ptr__1432[_1434],(int)1 );
    }
  }
  return _1433;
}
void mosek::fusion::p_RangedVariable::destroy(){shape.reset();nativeidxs.reset();sparsity.reset();}void mosek::fusion::RangedVariable::destroy() { mosek::fusion::p_RangedVariable::_get_impl(this)->destroy(); }mosek::fusion::LinearPSDVariable::LinearPSDVariable(mosek::fusion::p_LinearPSDVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "LinearPSDVariable()" << this << std::endl; */ }mosek::fusion::LinearPSDVariable::~LinearPSDVariable() {  /* std::cout << "~LinearPSDVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_LinearPSDVariable::p_LinearPSDVariable  (::mosek::fusion::LinearPSDVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::LinearPSDVariable::t mosek::fusion::p_LinearPSDVariable::_new_LinearPSDVariable  (monty::rc_ptr< ::mosek::fusion::LinearPSDVariable > _1435,    monty::rc_ptr< ::mosek::fusion::Model > _1436){ return new mosek::fusion::LinearPSDVariable(_1435,_1436); }mosek::fusion::LinearPSDVariable::LinearPSDVariable  (monty::rc_ptr< ::mosek::fusion::LinearPSDVariable > _1435,    monty::rc_ptr< ::mosek::fusion::Model > _1436) :    LinearPSDVariable(new mosek::fusion::p_LinearPSDVariable(this)){ mosek::fusion::p_LinearPSDVariable::_get_impl(this)->_initialize(_1435,_1436); }void mosek::fusion::p_LinearPSDVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearPSDVariable > _1435,    monty::rc_ptr< ::mosek::fusion::Model > _1436){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelVariable::_initialize(_1435,_1436);
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->conedim = mosek::fusion::p_LinearPSDVariable::_get_impl(_1435)->conedim;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->varid = mosek::fusion::p_LinearPSDVariable::_get_impl(_1435)->varid;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->name = mosek::fusion::p_LinearPSDVariable::_get_impl(_1435)->name;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->shape = mosek::fusion::p_LinearPSDVariable::_get_impl(_1435)->shape;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->nativeidxs = mosek::fusion::p_LinearPSDVariable::_get_impl(_1435)->nativeidxs;
  }
}mosek::fusion::LinearPSDVariable::t mosek::fusion::p_LinearPSDVariable::_new_LinearPSDVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1437,    const std::string &  _1438,    int _1439,    std::shared_ptr< monty::ndarray< int,1 > > _1440,    int _1441,    std::shared_ptr< monty::ndarray< long long,1 > > _1442){ return new mosek::fusion::LinearPSDVariable(_1437,_1438,_1439,_1440,_1441,_1442); }mosek::fusion::LinearPSDVariable::LinearPSDVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1437,    const std::string &  _1438,    int _1439,    std::shared_ptr< monty::ndarray< int,1 > > _1440,    int _1441,    std::shared_ptr< monty::ndarray< long long,1 > > _1442) :    LinearPSDVariable(new mosek::fusion::p_LinearPSDVariable(this)){ mosek::fusion::p_LinearPSDVariable::_get_impl(this)->_initialize(_1437,_1438,_1439,_1440,_1441,_1442); }void mosek::fusion::p_LinearPSDVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1437,    const std::string &  _1438,    int _1439,    std::shared_ptr< monty::ndarray< int,1 > > _1440,    int _1441,    std::shared_ptr< monty::ndarray< long long,1 > > _1442){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1440(_1440 ? _1440->raw() : nullptr, _1440 ? _1440->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1442(_1442 ? _1442->raw() : nullptr, _1442 ? _1442->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_1437,_1438,_1440,_1439,nullptr,::mosek::fusion::p_LinearPSDVariable::globalNativeIndexes(_1442));
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->name = _1438;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->conedim = _1441;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->varid = _1439;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->shape = _1440;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->nativeidxs = _1442;
  }
}void mosek::fusion::p_LinearPSDVariable::flushNames(){
}
std::string mosek::fusion::LinearPSDVariable :: toString() { return mosek::fusion::p_LinearPSDVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_LinearPSDVariable::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1443 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _1443->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PSDVariable("));
  if (((int)((name).size()) > (int)0))
  {
    {
      _1443->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("',"));
    }
  }
  {}
  _1443->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
  int _7299 = (int)1;
  int _7300 = (int)((shape)->size(0));
  for (int _1444 = _7299; _1444 < _7300; ++_1444)
  {
    {
      _1443->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_1444)));
    }
  }
  _1443->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _1443->toString();
}
void mosek::fusion::LinearPSDVariable :: make_continuous(std::shared_ptr< monty::ndarray< long long,1 > > _1445) { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->make_continuous(_1445); }void mosek::fusion::p_LinearPSDVariable::make_continuous(std::shared_ptr< monty::ndarray< long long,1 > > _1445){
  _checked_ptr_1<long long> _ptr__1445(_1445 ? _1445->raw() : nullptr, _1445 ? _1445->size(0) : 0);
}
void mosek::fusion::LinearPSDVariable :: make_integer(std::shared_ptr< monty::ndarray< long long,1 > > _1446) { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->make_integer(_1446); }void mosek::fusion::p_LinearPSDVariable::make_integer(std::shared_ptr< monty::ndarray< long long,1 > > _1446){
  _checked_ptr_1<long long> _ptr__1446(_1446 ? _1446->raw() : nullptr, _1446 ? _1446->size(0) : 0);
  throw ::mosek::fusion::UnimplementedError(std::string ("Cannot make PSDVariable elements integer"));
}
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_LinearPSDVariable::__mosek_2fusion_2LinearPSDVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _1447){
  return (::mosek::fusion::p_LinearPSDVariable::_new_LinearPSDVariable(::mosek::fusion::LinearPSDVariable::t(_pubthis),_1447)).as<::mosek::fusion::ModelVariable>();
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_LinearPSDVariable::globalNativeIndexes(std::shared_ptr< monty::ndarray< long long,1 > > _1448){
  _checked_ptr_1<long long> _ptr__1448(_1448 ? _1448->raw() : nullptr, _1448 ? _1448->size(0) : 0);
  std::vector<long long> _7301;
  for (int _1449 = (int)0, _7302 = (int)((_1448)->size(0)); _1449 < _7302 ; ++_1449)
  {
    _7301.push_back((-safe_add( _ptr__1448[_1449],(int)1 )));
  }
  auto _7303 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7301.size()),_7301.begin(),_7301.end()));
  return _7303;
}
void mosek::fusion::p_LinearPSDVariable::destroy(){shape.reset();nativeidxs.reset();}void mosek::fusion::LinearPSDVariable::destroy() { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->destroy(); }mosek::fusion::PSDVariable::PSDVariable(mosek::fusion::p_PSDVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "PSDVariable()" << this << std::endl; */ }mosek::fusion::PSDVariable::~PSDVariable() {  /* std::cout << "~PSDVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_PSDVariable::p_PSDVariable  (::mosek::fusion::PSDVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::PSDVariable::t mosek::fusion::p_PSDVariable::_new_PSDVariable  (monty::rc_ptr< ::mosek::fusion::PSDVariable > _1450,    monty::rc_ptr< ::mosek::fusion::Model > _1451){ return new mosek::fusion::PSDVariable(_1450,_1451); }mosek::fusion::PSDVariable::PSDVariable  (monty::rc_ptr< ::mosek::fusion::PSDVariable > _1450,    monty::rc_ptr< ::mosek::fusion::Model > _1451) :    PSDVariable(new mosek::fusion::p_PSDVariable(this)){ mosek::fusion::p_PSDVariable::_get_impl(this)->_initialize(_1450,_1451); }void mosek::fusion::p_PSDVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::PSDVariable > _1450,    monty::rc_ptr< ::mosek::fusion::Model > _1451){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelVariable::_initialize(_1450,_1451);
    varid = mosek::fusion::p_PSDVariable::_get_impl(_1450)->varid;
    nativeidxs = mosek::fusion::p_PSDVariable::_get_impl(_1450)->nativeidxs;
    name = mosek::fusion::p_PSDVariable::_get_impl(_1450)->name;
    shape = mosek::fusion::p_PSDVariable::_get_impl(_1450)->shape;
    conedim1 = mosek::fusion::p_PSDVariable::_get_impl(_1450)->conedim1;
    conedim2 = mosek::fusion::p_PSDVariable::_get_impl(_1450)->conedim2;
  }
}mosek::fusion::PSDVariable::t mosek::fusion::p_PSDVariable::_new_PSDVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1452,    const std::string &  _1453,    int _1454,    std::shared_ptr< monty::ndarray< int,1 > > _1455,    int _1456,    int _1457,    std::shared_ptr< monty::ndarray< long long,1 > > _1458){ return new mosek::fusion::PSDVariable(_1452,_1453,_1454,_1455,_1456,_1457,_1458); }mosek::fusion::PSDVariable::PSDVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1452,    const std::string &  _1453,    int _1454,    std::shared_ptr< monty::ndarray< int,1 > > _1455,    int _1456,    int _1457,    std::shared_ptr< monty::ndarray< long long,1 > > _1458) :    PSDVariable(new mosek::fusion::p_PSDVariable(this)){ mosek::fusion::p_PSDVariable::_get_impl(this)->_initialize(_1452,_1453,_1454,_1455,_1456,_1457,_1458); }void mosek::fusion::p_PSDVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1452,    const std::string &  _1453,    int _1454,    std::shared_ptr< monty::ndarray< int,1 > > _1455,    int _1456,    int _1457,    std::shared_ptr< monty::ndarray< long long,1 > > _1458){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1455(_1455 ? _1455->raw() : nullptr, _1455 ? _1455->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1458(_1458 ? _1458->raw() : nullptr, _1458 ? _1458->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_1452,_1453,_1455,_1454,nullptr,::mosek::fusion::p_PSDVariable::fullnativeidxs(_1455,_1456,_1457,_1458));
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->varid = _1454;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->nativeidxs = _1458;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->name = _1453;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->shape = _1455;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->conedim1 = _1456;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->conedim2 = _1457;
  }
}void mosek::fusion::p_PSDVariable::flushNames(){
}
std::string mosek::fusion::PSDVariable :: toString() { return mosek::fusion::p_PSDVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_PSDVariable::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1459 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _1459->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PSDVariable("));
  if (((int)((name).size()) > (int)0))
  {
    {
      _1459->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("',"));
    }
  }
  {}
  _1459->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
  int _7304 = (int)1;
  int _7305 = (int)((shape)->size(0));
  for (int _1460 = _7304; _1460 < _7305; ++_1460)
  {
    {
      _1459->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_1460)));
    }
  }
  _1459->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _1459->toString();
}
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::PSDVariable :: __mosek_2fusion_2PSDVariable__elementDesc(long long _1461,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1462) { return mosek::fusion::p_PSDVariable::_get_impl(this)->__mosek_2fusion_2PSDVariable__elementDesc(_1461,_1462); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::PSDVariable::elementDesc(long long _1461,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1462) { return __mosek_2fusion_2PSDVariable__elementDesc(_1461,_1462); }
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_PSDVariable::__mosek_2fusion_2PSDVariable__elementDesc(long long _1461,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1462){
  _pubthis->elementName(_1461,_1462);
  _1462->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" : element in positive semidefinite cone"));
  return _1462;
}
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_PSDVariable::__mosek_2fusion_2PSDVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _1463){
  return (::mosek::fusion::p_PSDVariable::_new_PSDVariable(::mosek::fusion::PSDVariable::t(_pubthis),_1463)).as<::mosek::fusion::ModelVariable>();
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_PSDVariable::fullnativeidxs(std::shared_ptr< monty::ndarray< int,1 > > _1464,int _1465,int _1466,std::shared_ptr< monty::ndarray< long long,1 > > _1467){
  _checked_ptr_1<int> _ptr__1464(_1464 ? _1464->raw() : nullptr, _1464 ? _1464->size(0) : 0);
  _checked_ptr_1<long long> _ptr__1467(_1467 ? _1467->raw() : nullptr, _1467 ? _1467->size(0) : 0);
  int _1468 = (int)((_1464)->size(0));
  bool _1469 = (_1465 < _1466);
  int _7306;
  bool _7307 = _1469;
  if (_7307)
  {
    _7306 = _1465;
  }
  else
  {
    _7306 = _1466;
  }
  int _1470 = _7306;
  int _7308;
  bool _7309 = (!_1469);
  if (_7309)
  {
    _7308 = _1465;
  }
  else
  {
    _7308 = _1466;
  }
  int _1471 = _7308;
  int _1472 = (int)1;
  int _7310 = (int)0;
  int _7311 = _1470;
  for (int _1473 = _7310; _1473 < _7311; ++_1473)
  {
    {
      _1472 *= _ptr__1464[_1473];
    }
  }
  int _1474 = _ptr__1464[_1470];
  int _1475 = (int)1;
  int _7312 = safe_add( _1470,(int)1 );
  int _7313 = _1471;
  for (int _1476 = _7312; _1476 < _7313; ++_1476)
  {
    {
      _1475 *= _ptr__1464[_1476];
    }
  }
  int _1477 = _ptr__1464[_1471];
  int _1478 = (int)1;
  int _7314 = safe_add( _1471,(int)1 );
  int _7315 = _1468;
  for (int _1479 = _7314; _1479 < _7315; ++_1479)
  {
    {
      _1478 *= _ptr__1464[_1479];
    }
  }
  int _1480 = safe_mul( safe_mul( safe_mul( safe_mul( _1472,_1474 ),_1475 ),_1477 ),_1478 );
  std::shared_ptr< monty::ndarray< long long,1 > > _1481 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1480)));
  _checked_ptr_1<long long> _ptr__1481(_1481 ? _1481->raw() : nullptr,_1481 ? _1481->size(0) : 0);
  int _1482 = _1478;
  int _1483 = safe_mul( _1482,_1477 );
  int _1484 = safe_mul( _1483,_1475 );
  int _1485 = safe_mul( _1484,_1484 );
  {
    int _1486 = (int)0;
    int _7316 = (int)0;
    int _7317 = _1472;
    for (int _1487 = _7316; _1487 < _7317; ++_1487)
    {
      {
        int _7318 = (int)0;
        int _7319 = _1477;
        for (int _1488 = _7318; _1488 < _7319; ++_1488)
        {
          {
            int _7320 = (int)0;
            int _7321 = _1475;
            for (int _1489 = _7320; _1489 < _7321; ++_1489)
            {
              {
                int _7322 = _1488;
                int _7323 = _1474;
                for (int _1490 = _7322; _1490 < _7323; ++_1490)
                {
                  {
                    int _7324 = (int)0;
                    int _7325 = _1478;
                    for (int _1491 = _7324; _1491 < _7325; ++_1491)
                    {
                      {
                        _ptr__1481[safe_add( safe_add( safe_add( safe_add( safe_mul( _1487,_1485 ),safe_mul( _1490,_1484 ) ),safe_mul( _1489,_1483 ) ),safe_mul( _1488,_1482 ) ),_1491 )] = (-safe_add( _ptr__1467[_1486],(int)1 ));
                        _ptr__1481[safe_add( safe_add( safe_add( safe_add( safe_mul( _1487,_1485 ),safe_mul( _1488,_1484 ) ),safe_mul( _1489,_1483 ) ),safe_mul( _1490,_1482 ) ),_1491 )] = (-safe_add( _ptr__1467[_1486],(int)1 ));
                        ++ _1486;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return _1481;
}
void mosek::fusion::p_PSDVariable::destroy(){shape.reset();nativeidxs.reset();}void mosek::fusion::PSDVariable::destroy() { mosek::fusion::p_PSDVariable::_get_impl(this)->destroy(); }mosek::fusion::SymLinearVariable::SymLinearVariable(mosek::fusion::p_SymLinearVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "SymLinearVariable()" << this << std::endl; */ }mosek::fusion::SymLinearVariable::~SymLinearVariable() {  /* std::cout << "~SymLinearVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_SymLinearVariable::p_SymLinearVariable  (::mosek::fusion::SymLinearVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SymLinearVariable::t mosek::fusion::p_SymLinearVariable::_new_SymLinearVariable  (monty::rc_ptr< ::mosek::fusion::SymLinearVariable > _1492,    monty::rc_ptr< ::mosek::fusion::Model > _1493){ return new mosek::fusion::SymLinearVariable(_1492,_1493); }mosek::fusion::SymLinearVariable::SymLinearVariable  (monty::rc_ptr< ::mosek::fusion::SymLinearVariable > _1492,    monty::rc_ptr< ::mosek::fusion::Model > _1493) :    SymLinearVariable(new mosek::fusion::p_SymLinearVariable(this)){ mosek::fusion::p_SymLinearVariable::_get_impl(this)->_initialize(_1492,_1493); }void mosek::fusion::p_SymLinearVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::SymLinearVariable > _1492,    monty::rc_ptr< ::mosek::fusion::Model > _1493){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelVariable::_initialize(_1492,_1493);
    names_flushed = mosek::fusion::p_SymLinearVariable::_get_impl(_1492)->names_flushed;
    name = mosek::fusion::p_SymLinearVariable::_get_impl(_1492)->name;
    sparsity = mosek::fusion::p_SymLinearVariable::_get_impl(_1492)->sparsity;
    nativeidxs = mosek::fusion::p_SymLinearVariable::_get_impl(_1492)->nativeidxs;
    dim = mosek::fusion::p_SymLinearVariable::_get_impl(_1492)->dim;
  }
}mosek::fusion::SymLinearVariable::t mosek::fusion::p_SymLinearVariable::_new_SymLinearVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1494,    const std::string &  _1495,    long long _1496,    int _1497,    std::shared_ptr< monty::ndarray< long long,1 > > _1498,    std::shared_ptr< monty::ndarray< int,1 > > _1499){ return new mosek::fusion::SymLinearVariable(_1494,_1495,_1496,_1497,_1498,_1499); }mosek::fusion::SymLinearVariable::SymLinearVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1494,    const std::string &  _1495,    long long _1496,    int _1497,    std::shared_ptr< monty::ndarray< long long,1 > > _1498,    std::shared_ptr< monty::ndarray< int,1 > > _1499) :    SymLinearVariable(new mosek::fusion::p_SymLinearVariable(this)){ mosek::fusion::p_SymLinearVariable::_get_impl(this)->_initialize(_1494,_1495,_1496,_1497,_1498,_1499); }void mosek::fusion::p_SymLinearVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1494,    const std::string &  _1495,    long long _1496,    int _1497,    std::shared_ptr< monty::ndarray< long long,1 > > _1498,    std::shared_ptr< monty::ndarray< int,1 > > _1499){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__1498(_1498 ? _1498->raw() : nullptr, _1498 ? _1498->size(0) : 0);
    _checked_ptr_1<int> _ptr__1499(_1499 ? _1499->raw() : nullptr, _1499 ? _1499->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_1494,_1495,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1497),(int)(_1497)}),_1496,::mosek::fusion::p_SymLinearVariable::mirror_sp(_1497,_1498),::mosek::fusion::p_SymLinearVariable::mirror_idxs(_1497,_1498,_1499));
    names_flushed = false;
    mosek::fusion::p_SymLinearVariable::_get_impl(::mosek::fusion::SymLinearVariable::t(_pubthis))->name = _1495;
    mosek::fusion::p_SymLinearVariable::_get_impl(::mosek::fusion::SymLinearVariable::t(_pubthis))->nativeidxs = _1499;
    mosek::fusion::p_SymLinearVariable::_get_impl(::mosek::fusion::SymLinearVariable::t(_pubthis))->sparsity = _1498;
    mosek::fusion::p_SymLinearVariable::_get_impl(::mosek::fusion::SymLinearVariable::t(_pubthis))->dim = _1497;
  }
}void mosek::fusion::p_SymLinearVariable::flushNames(){
  monty::rc_ptr< ::mosek::fusion::Model > _1500 = _pubthis->__mosek_2fusion_2BaseVariable__getModel();
  if (((!names_flushed) && ((int)((name).size()) > (int)0)))
  {
    {
      if ((NULL == sparsity.get()))
      {
        {
          int _7326 = (int)0;
          int _7327 = (int)((nativeidxs)->size(0));
          for (int _1501 = _7326; _1501 < _7327; ++_1501)
          {
            {
              std::string _7328;
              bool _7329 = ((int)((name).size()) == (int)0);
              if (_7329)
              {
                _7328 = std::string ("");
              }
              else
              {
                _7328 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["))->__mosek_2fusion_2Utils_2StringBuffer__a((_1501 / dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a((_1501 % dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"))->toString();
              }
              mosek::fusion::p_Model::_get_impl(_1500.get())->varname(((*nativeidxs)(_1501)),_7328);
            }
          }
        }
      }
      else
      {
        {
          int _7330 = (int)0;
          int _7331 = (int)((sparsity)->size(0));
          for (int _1502 = _7330; _1502 < _7331; ++_1502)
          {
            {
              mosek::fusion::p_Model::_get_impl(_1500.get())->varname(((*nativeidxs)(_1502)),::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["))->__mosek_2fusion_2Utils_2StringBuffer__a((((*sparsity)(_1502)) / dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a((((*sparsity)(_1502)) % dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"))->toString());
            }
          }
        }
      }
      names_flushed = true;
    }
  }
  {}
}
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_SymLinearVariable::__mosek_2fusion_2SymLinearVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _1503){
  return (::mosek::fusion::p_SymLinearVariable::_new_SymLinearVariable(::mosek::fusion::SymLinearVariable::t(_pubthis),_1503)).as<::mosek::fusion::ModelVariable>();
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_SymLinearVariable::mirror_idxs(int _1504,std::shared_ptr< monty::ndarray< long long,1 > > _1505,std::shared_ptr< monty::ndarray< int,1 > > _1506){
  _checked_ptr_1<long long> _ptr__1505(_1505 ? _1505->raw() : nullptr, _1505 ? _1505->size(0) : 0);
  _checked_ptr_1<int> _ptr__1506(_1506 ? _1506->raw() : nullptr, _1506 ? _1506->size(0) : 0);
  if ((NULL == _1505.get()))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _1507 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_mul( _1504,_1504 ))));
      _checked_ptr_1<long long> _ptr__1507(_1507 ? _1507->raw() : nullptr,_1507 ? _1507->size(0) : 0);
      int _1508 = (int)0;
      {
        int _7332 = (int)0;
        int _7333 = _1504;
        for (int _1509 = _7332; _1509 < _7333; ++_1509)
        {
          {
            _ptr__1507[safe_add( safe_mul( _1509,_1504 ),_1509 )] = safe_add( _ptr__1506[_1508],(int)1 );
            ++ _1508;
            int _7334 = safe_add( _1509,(int)1 );
            int _7335 = _1504;
            for (int _1510 = _7334; _1510 < _7335; ++_1510)
            {
              {
                _ptr__1507[safe_add( safe_mul( _1509,_1504 ),_1510 )] = safe_add( _ptr__1506[_1508],(int)1 );
                _ptr__1507[safe_add( safe_mul( _1510,_1504 ),_1509 )] = safe_add( _ptr__1506[_1508],(int)1 );
                ++ _1508;
              }
            }
          }
        }
      }
      return _1507;
    }
  }
  else
  {
    {
      int _1511 = (int)0;
      {
        int _7336 = (int)0;
        int _7337 = (int)((_1505)->size(0));
        for (int _1512 = _7336; _1512 < _7337; ++_1512)
        {
          {
            int _7338;
            bool _7339 = ((_ptr__1505[_1512] % safe_add( _1504,(int)1 )) == (int)0);
            if (_7339)
            {
              _7338 = (int)1;
            }
            else
            {
              _7338 = (int)2;
            }
            _1511 += _7338;
          }
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1513 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1511)));
      _checked_ptr_1<long long> _ptr__1513(_1513 ? _1513->raw() : nullptr,_1513 ? _1513->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _1514 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1511)));
      _checked_ptr_1<long long> _ptr__1514(_1514 ? _1514->raw() : nullptr,_1514 ? _1514->size(0) : 0);
      {
        int _1515 = (int)0;
        int _7340 = (int)0;
        int _7341 = (int)((_1505)->size(0));
        for (int _1516 = _7340; _1516 < _7341; ++_1516)
        {
          {
            long long _1517 = (_ptr__1505[_1516] / _1504);
            long long _1518 = (_ptr__1505[_1516] % _1504);
            _ptr__1513[_1515] = _ptr__1505[_1516];
            _ptr__1514[_1515] = safe_add( _ptr__1506[_1516],(int)1 );
            ++ _1515;
            if ((_1517 != _1518))
            {
              {
                _ptr__1513[_1515] = safe_add( safe_mul( _1518,_1504 ),_1517 );
                _ptr__1514[_1515] = safe_add( _ptr__1506[_1516],(int)1 );
                ++ _1515;
              }
            }
            {}
          }
        }
      }
      std::vector<long long> _7342;
      for (int _1520 = (int)0, _7343 = _1511; _1520 < _7343 ; ++_1520)
      {
        _7342.push_back(_1520);
      }
      auto _7344 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7342.size()),_7342.begin(),_7342.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _1519 = _7344;
      _checked_ptr_1<long long> _ptr__1519(_1519 ? _1519->raw() : nullptr,_1519 ? _1519->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_1519,_1513,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_1511));
      std::vector<long long> _7345;
      for (int _1521 = (int)0, _7346 = _1511; _1521 < _7346 ; ++_1521)
      {
        _7345.push_back(_ptr__1514[_ptr__1519[_1521]]);
      }
      auto _7347 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7345.size()),_7345.begin(),_7345.end()));
      return _7347;
    }
  }
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_SymLinearVariable::mirror_sp(int _1522,std::shared_ptr< monty::ndarray< long long,1 > > _1523){
  _checked_ptr_1<long long> _ptr__1523(_1523 ? _1523->raw() : nullptr, _1523 ? _1523->size(0) : 0);
  if ((NULL == _1523.get()))
  {
    {
      return nullptr;
    }
  }
  else
  {
    {
      int _1524 = (int)0;
      {
        int _7348 = (int)0;
        int _7349 = (int)((_1523)->size(0));
        for (int _1525 = _7348; _1525 < _7349; ++_1525)
        {
          {
            int _7350;
            bool _7351 = ((_ptr__1523[_1525] % safe_add( _1522,(int)1 )) == (int)0);
            if (_7351)
            {
              _7350 = (int)1;
            }
            else
            {
              _7350 = (int)2;
            }
            _1524 += _7350;
          }
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1526 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1524)));
      _checked_ptr_1<long long> _ptr__1526(_1526 ? _1526->raw() : nullptr,_1526 ? _1526->size(0) : 0);
      {
        int _1527 = (int)0;
        int _7352 = (int)0;
        int _7353 = (int)((_1523)->size(0));
        for (int _1528 = _7352; _1528 < _7353; ++_1528)
        {
          {
            long long _1529 = (_ptr__1523[_1528] / _1522);
            long long _1530 = (_ptr__1523[_1528] % _1522);
            _ptr__1526[_1527] = _ptr__1523[_1528];
            ++ _1527;
            if ((_1529 != _1530))
            {
              {
                _ptr__1526[_1527] = safe_add( safe_mul( _1530,_1522 ),_1529 );
                ++ _1527;
              }
            }
            {}
          }
        }
      }
      std::vector<long long> _7354;
      for (int _1532 = (int)0, _7355 = _1524; _1532 < _7355 ; ++_1532)
      {
        _7354.push_back(_1532);
      }
      auto _7356 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7354.size()),_7354.begin(),_7354.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _1531 = _7356;
      _checked_ptr_1<long long> _ptr__1531(_1531 ? _1531->raw() : nullptr,_1531 ? _1531->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_1531,_1526,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_1524));
      std::vector<long long> _7357;
      for (int _1533 = (int)0, _7358 = _1524; _1533 < _7358 ; ++_1533)
      {
        _7357.push_back(_ptr__1526[_ptr__1531[_1533]]);
      }
      auto _7359 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7357.size()),_7357.begin(),_7357.end()));
      return _7359;
    }
  }
}
void mosek::fusion::p_SymLinearVariable::destroy(){sparsity.reset();nativeidxs.reset();}void mosek::fusion::SymLinearVariable::destroy() { mosek::fusion::p_SymLinearVariable::_get_impl(this)->destroy(); }mosek::fusion::LinearVariable::LinearVariable(mosek::fusion::p_LinearVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "LinearVariable()" << this << std::endl; */ }mosek::fusion::LinearVariable::~LinearVariable() {  /* std::cout << "~LinearVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_LinearVariable::p_LinearVariable  (::mosek::fusion::LinearVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::LinearVariable::t mosek::fusion::p_LinearVariable::_new_LinearVariable  (monty::rc_ptr< ::mosek::fusion::LinearVariable > _1534,    monty::rc_ptr< ::mosek::fusion::Model > _1535){ return new mosek::fusion::LinearVariable(_1534,_1535); }mosek::fusion::LinearVariable::LinearVariable  (monty::rc_ptr< ::mosek::fusion::LinearVariable > _1534,    monty::rc_ptr< ::mosek::fusion::Model > _1535) :    LinearVariable(new mosek::fusion::p_LinearVariable(this)){ mosek::fusion::p_LinearVariable::_get_impl(this)->_initialize(_1534,_1535); }void mosek::fusion::p_LinearVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearVariable > _1534,    monty::rc_ptr< ::mosek::fusion::Model > _1535){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelVariable::_initialize(_1534,_1535);
    names_flushed = mosek::fusion::p_LinearVariable::_get_impl(_1534)->names_flushed;
    nativeidxs = mosek::fusion::p_LinearVariable::_get_impl(_1534)->nativeidxs;
    sparsity = mosek::fusion::p_LinearVariable::_get_impl(_1534)->sparsity;
    shape = mosek::fusion::p_LinearVariable::_get_impl(_1534)->shape;
    name = mosek::fusion::p_LinearVariable::_get_impl(_1534)->name;
  }
}mosek::fusion::LinearVariable::t mosek::fusion::p_LinearVariable::_new_LinearVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1536,    const std::string &  _1537,    long long _1538,    std::shared_ptr< monty::ndarray< int,1 > > _1539,    std::shared_ptr< monty::ndarray< long long,1 > > _1540,    std::shared_ptr< monty::ndarray< int,1 > > _1541){ return new mosek::fusion::LinearVariable(_1536,_1537,_1538,_1539,_1540,_1541); }mosek::fusion::LinearVariable::LinearVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1536,    const std::string &  _1537,    long long _1538,    std::shared_ptr< monty::ndarray< int,1 > > _1539,    std::shared_ptr< monty::ndarray< long long,1 > > _1540,    std::shared_ptr< monty::ndarray< int,1 > > _1541) :    LinearVariable(new mosek::fusion::p_LinearVariable(this)){ mosek::fusion::p_LinearVariable::_get_impl(this)->_initialize(_1536,_1537,_1538,_1539,_1540,_1541); }void mosek::fusion::p_LinearVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1536,    const std::string &  _1537,    long long _1538,    std::shared_ptr< monty::ndarray< int,1 > > _1539,    std::shared_ptr< monty::ndarray< long long,1 > > _1540,    std::shared_ptr< monty::ndarray< int,1 > > _1541){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1539(_1539 ? _1539->raw() : nullptr, _1539 ? _1539->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1540(_1540 ? _1540->raw() : nullptr, _1540 ? _1540->size(0) : 0);
    _checked_ptr_1<int> _ptr__1541(_1541 ? _1541->raw() : nullptr, _1541 ? _1541->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_1536,_1537,_1539,_1538,_1540,::mosek::fusion::p_LinearVariable::globalNativeIndexes(_1541));
    names_flushed = false;
    mosek::fusion::p_LinearVariable::_get_impl(::mosek::fusion::LinearVariable::t(_pubthis))->name = _1537;
    mosek::fusion::p_LinearVariable::_get_impl(::mosek::fusion::LinearVariable::t(_pubthis))->nativeidxs = _1541;
    mosek::fusion::p_LinearVariable::_get_impl(::mosek::fusion::LinearVariable::t(_pubthis))->sparsity = _1540;
    mosek::fusion::p_LinearVariable::_get_impl(::mosek::fusion::LinearVariable::t(_pubthis))->shape = _1539;
  }
}std::string mosek::fusion::LinearVariable :: toString() { return mosek::fusion::p_LinearVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_LinearVariable::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1542 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _1542->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("LinearVariable(("));
  if (((int)((shape)->size(0)) > (int)0))
  {
    {
      _1542->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
      int _7360 = (int)1;
      int _7361 = (int)((shape)->size(0));
      for (int _1543 = _7360; _1543 < _7361; ++_1543)
      {
        {
          _1542->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_1543)));
        }
      }
    }
  }
  {}
  _1542->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("))"));
  return _1542->toString();
}
void mosek::fusion::p_LinearVariable::flushNames(){
  monty::rc_ptr< ::mosek::fusion::Model > _1544 = _pubthis->__mosek_2fusion_2BaseVariable__getModel();
  if (((!names_flushed) && ((int)((name).size()) > (int)0)))
  {
    {
      monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1545 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
      _1545->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
      if ((_pubthis->getND() > (int)0))
      {
        {
          _1545->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
          int _7362 = (int)1;
          int _7363 = _pubthis->getND();
          for (int _1546 = _7362; _1546 < _7363; ++_1546)
          {
            {
              _1545->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1546);
            }
          }
        }
      }
      {}
      _1545->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
      std::shared_ptr< monty::ndarray< int,1 > > _7364;
      bool _7365 = (_pubthis->getND() > (int)0);
      if (_7365)
      {
        _7364 = _pubthis->getShape();
      }
      else
      {
        _7364 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1)});
      }
      mosek::fusion::p_Model::_get_impl(_1544.get())->varnames(nativeidxs,_1545->toString(),_7364,sparsity);
      names_flushed = true;
    }
  }
  {}
}
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_LinearVariable::__mosek_2fusion_2LinearVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _1547){
  return (::mosek::fusion::p_LinearVariable::_new_LinearVariable(::mosek::fusion::LinearVariable::t(_pubthis),_1547)).as<::mosek::fusion::ModelVariable>();
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_LinearVariable::globalNativeIndexes(std::shared_ptr< monty::ndarray< int,1 > > _1548){
  _checked_ptr_1<int> _ptr__1548(_1548 ? _1548->raw() : nullptr, _1548 ? _1548->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1549 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1548)->size(0)))));
  _checked_ptr_1<long long> _ptr__1549(_1549 ? _1549->raw() : nullptr,_1549 ? _1549->size(0) : 0);
  int _7366 = (int)0;
  int _7367 = (int)((_1548)->size(0));
  for (int _1550 = _7366; _1550 < _7367; ++_1550)
  {
    {
      _ptr__1549[_1550] = safe_add( _ptr__1548[_1550],(int)1 );
    }
  }
  return _1549;
}
void mosek::fusion::p_LinearVariable::destroy(){shape.reset();sparsity.reset();nativeidxs.reset();}void mosek::fusion::LinearVariable::destroy() { mosek::fusion::p_LinearVariable::_get_impl(this)->destroy(); }mosek::fusion::ConicVariable::ConicVariable(mosek::fusion::p_ConicVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "ConicVariable()" << this << std::endl; */ }mosek::fusion::ConicVariable::~ConicVariable() {  /* std::cout << "~ConicVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_ConicVariable::p_ConicVariable  (::mosek::fusion::ConicVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ConicVariable::t mosek::fusion::p_ConicVariable::_new_ConicVariable  (monty::rc_ptr< ::mosek::fusion::ConicVariable > _1551,    monty::rc_ptr< ::mosek::fusion::Model > _1552){ return new mosek::fusion::ConicVariable(_1551,_1552); }mosek::fusion::ConicVariable::ConicVariable  (monty::rc_ptr< ::mosek::fusion::ConicVariable > _1551,    monty::rc_ptr< ::mosek::fusion::Model > _1552) :    ConicVariable(new mosek::fusion::p_ConicVariable(this)){ mosek::fusion::p_ConicVariable::_get_impl(this)->_initialize(_1551,_1552); }void mosek::fusion::p_ConicVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::ConicVariable > _1551,    monty::rc_ptr< ::mosek::fusion::Model > _1552){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelVariable::_initialize(_1551,_1552);
    names_flushed = mosek::fusion::p_ConicVariable::_get_impl(_1551)->names_flushed;
    shape = mosek::fusion::p_ConicVariable::_get_impl(_1551)->shape;
    nativeidxs = mosek::fusion::p_ConicVariable::_get_impl(_1551)->nativeidxs;
    shape = mosek::fusion::p_ConicVariable::_get_impl(_1551)->shape;
    varid = mosek::fusion::p_ConicVariable::_get_impl(_1551)->varid;
    name = mosek::fusion::p_ConicVariable::_get_impl(_1551)->name;
  }
}mosek::fusion::ConicVariable::t mosek::fusion::p_ConicVariable::_new_ConicVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1553,    const std::string &  _1554,    int _1555,    std::shared_ptr< monty::ndarray< int,1 > > _1556,    std::shared_ptr< monty::ndarray< int,1 > > _1557){ return new mosek::fusion::ConicVariable(_1553,_1554,_1555,_1556,_1557); }mosek::fusion::ConicVariable::ConicVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1553,    const std::string &  _1554,    int _1555,    std::shared_ptr< monty::ndarray< int,1 > > _1556,    std::shared_ptr< monty::ndarray< int,1 > > _1557) :    ConicVariable(new mosek::fusion::p_ConicVariable(this)){ mosek::fusion::p_ConicVariable::_get_impl(this)->_initialize(_1553,_1554,_1555,_1556,_1557); }void mosek::fusion::p_ConicVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1553,    const std::string &  _1554,    int _1555,    std::shared_ptr< monty::ndarray< int,1 > > _1556,    std::shared_ptr< monty::ndarray< int,1 > > _1557){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1556(_1556 ? _1556->raw() : nullptr, _1556 ? _1556->size(0) : 0);
    _checked_ptr_1<int> _ptr__1557(_1557 ? _1557->raw() : nullptr, _1557 ? _1557->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_1553,_1554,_1556,_1555,nullptr,::mosek::fusion::p_ConicVariable::globalNativeIndexes(_1557));
    mosek::fusion::p_ConicVariable::_get_impl(::mosek::fusion::ConicVariable::t(_pubthis))->name = _1554;
    mosek::fusion::p_ConicVariable::_get_impl(::mosek::fusion::ConicVariable::t(_pubthis))->names_flushed = false;
    mosek::fusion::p_ConicVariable::_get_impl(::mosek::fusion::ConicVariable::t(_pubthis))->varid = _1555;
    mosek::fusion::p_ConicVariable::_get_impl(::mosek::fusion::ConicVariable::t(_pubthis))->shape = _1556;
    mosek::fusion::p_ConicVariable::_get_impl(::mosek::fusion::ConicVariable::t(_pubthis))->nativeidxs = _1557;
  }
}std::string mosek::fusion::ConicVariable :: toString() { return mosek::fusion::p_ConicVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_ConicVariable::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1558 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _1558->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ConicVariable( "));
  if (((int)((name).size()) > (int)0))
  {
    {
      _1558->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("',"));
    }
  }
  {}
  _1558->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("("));
  _1558->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
  int _7368 = (int)1;
  int _7369 = (int)((shape)->size(0));
  for (int _1559 = _7368; _1559 < _7369; ++_1559)
  {
    {
      _1558->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_1559)));
    }
  }
  _1558->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") )"));
  return _1558->toString();
}
void mosek::fusion::p_ConicVariable::flushNames(){
  monty::rc_ptr< ::mosek::fusion::Model > _1560 = _pubthis->__mosek_2fusion_2BaseVariable__getModel();
  if (((!names_flushed) && ((int)((name).size()) > (int)0)))
  {
    {
      monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1561 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
      _1561->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
      _1561->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
      int _7370 = (int)1;
      int _7371 = _pubthis->getND();
      for (int _1562 = _7370; _1562 < _7371; ++_1562)
      {
        {
          _1561->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1562);
        }
      }
      _1561->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
      std::shared_ptr< monty::ndarray< int,1 > > _7372;
      bool _7373 = (_pubthis->getND() > (int)0);
      if (_7373)
      {
        _7372 = _pubthis->getShape();
      }
      else
      {
        _7372 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0)});
      }
      mosek::fusion::p_Model::_get_impl(_1560.get())->varnames(nativeidxs,_1561->toString(),_7372,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr));
      names_flushed = true;
    }
  }
  {}
}
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_ConicVariable::__mosek_2fusion_2ConicVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _1563){
  return (::mosek::fusion::p_ConicVariable::_new_ConicVariable(::mosek::fusion::ConicVariable::t(_pubthis),_1563)).as<::mosek::fusion::ModelVariable>();
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_ConicVariable::globalNativeIndexes(std::shared_ptr< monty::ndarray< int,1 > > _1564){
  _checked_ptr_1<int> _ptr__1564(_1564 ? _1564->raw() : nullptr, _1564 ? _1564->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1565 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1564)->size(0)))));
  _checked_ptr_1<long long> _ptr__1565(_1565 ? _1565->raw() : nullptr,_1565 ? _1565->size(0) : 0);
  int _7374 = (int)0;
  int _7375 = (int)((_1564)->size(0));
  for (int _1566 = _7374; _1566 < _7375; ++_1566)
  {
    {
      _ptr__1565[_1566] = safe_add( _ptr__1564[_1566],(int)1 );
    }
  }
  return _1565;
}
void mosek::fusion::p_ConicVariable::destroy(){nativeidxs.reset();shape.reset();}void mosek::fusion::ConicVariable::destroy() { mosek::fusion::p_ConicVariable::_get_impl(this)->destroy(); }mosek::fusion::ModelVariable::ModelVariable(mosek::fusion::p_ModelVariable *_impl) : mosek::fusion::BaseVariable(_impl) { /*std::cout << "ModelVariable()" << this << std::endl; */ }mosek::fusion::ModelVariable::~ModelVariable() {  /* std::cout << "~ModelVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_ModelVariable::p_ModelVariable  (::mosek::fusion::ModelVariable * _pubthis) :     mosek::fusion::p_BaseVariable(_pubthis),    _pubthis(_pubthis){}void mosek::fusion::p_ModelVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::ModelVariable > _1567,    monty::rc_ptr< ::mosek::fusion::Model > _1568){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseVariable::_initialize(_1567,_1568);
    name = mosek::fusion::p_ModelVariable::_get_impl(_1567)->name;
    varid = mosek::fusion::p_ModelVariable::_get_impl(_1567)->varid;
    nativeidxs = mosek::fusion::p_ModelVariable::_get_impl(_1567)->nativeidxs;
    shape = mosek::fusion::p_ModelVariable::_get_impl(_1567)->shape;
    sparsity = mosek::fusion::p_ModelVariable::_get_impl(_1567)->sparsity;
  }
}void mosek::fusion::p_ModelVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1569,    const std::string &  _1570,    std::shared_ptr< monty::ndarray< int,1 > > _1571,    long long _1572,    std::shared_ptr< monty::ndarray< long long,1 > > _1573,    std::shared_ptr< monty::ndarray< long long,1 > > _1574){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1571(_1571 ? _1571->raw() : nullptr, _1571 ? _1571->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1573(_1573 ? _1573->raw() : nullptr, _1573 ? _1573->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1574(_1574 ? _1574->raw() : nullptr, _1574 ? _1574->size(0) : 0);
    mosek::fusion::p_BaseVariable::_initialize(_1569,_1571,_1573,_1574);
    mosek::fusion::p_ModelVariable::_get_impl(::mosek::fusion::ModelVariable::t(_pubthis))->name = _1570;
    mosek::fusion::p_ModelVariable::_get_impl(::mosek::fusion::ModelVariable::t(_pubthis))->varid = _1572;
    mosek::fusion::p_ModelVariable::_get_impl(::mosek::fusion::ModelVariable::t(_pubthis))->shape = _1571;
    mosek::fusion::p_ModelVariable::_get_impl(::mosek::fusion::ModelVariable::t(_pubthis))->sparsity = _1573;
    mosek::fusion::p_ModelVariable::_get_impl(::mosek::fusion::ModelVariable::t(_pubthis))->nativeidxs = _1574;
  }
}void mosek::fusion::ModelVariable :: elementName(long long _1575,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1576) { mosek::fusion::p_ModelVariable::_get_impl(this)->elementName(_1575,_1576); }void mosek::fusion::p_ModelVariable::elementName(long long _1575,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1576){
  std::string _7376;
  bool _7377 = ((int)((name).size()) == (int)0);
  if (_7377)
  {
    _7376 = std::string ("_");
  }
  else
  {
    _7376 = name;
  }
  _1576->__mosek_2fusion_2Utils_2StringBuffer__a(_7376)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["))->__mosek_2fusion_2Utils_2StringBuffer__a(::mosek::fusion::p_Set::indexToString(shape,_1575))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
}
void mosek::fusion::p_ModelVariable::destroy(){sparsity.reset();shape.reset();nativeidxs.reset();}void mosek::fusion::ModelVariable::destroy() { mosek::fusion::p_ModelVariable::_get_impl(this)->destroy(); }mosek::fusion::NilVariable::NilVariable(mosek::fusion::p_NilVariable *_impl) : mosek::fusion::BaseVariable(_impl) { /*std::cout << "NilVariable()" << this << std::endl; */ }mosek::fusion::NilVariable::~NilVariable() {  /* std::cout << "~NilVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_NilVariable::p_NilVariable  (::mosek::fusion::NilVariable * _pubthis) :     mosek::fusion::p_BaseVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::NilVariable::t mosek::fusion::p_NilVariable::_new_NilVariable  (std::shared_ptr< monty::ndarray< int,1 > > _1578){ return new mosek::fusion::NilVariable(_1578); }mosek::fusion::NilVariable::NilVariable  (std::shared_ptr< monty::ndarray< int,1 > > _1578) :    NilVariable(new mosek::fusion::p_NilVariable(this)){ mosek::fusion::p_NilVariable::_get_impl(this)->_initialize(_1578); }void mosek::fusion::p_NilVariable::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _1578){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1578(_1578 ? _1578->raw() : nullptr, _1578 ? _1578->size(0) : 0);
    mosek::fusion::p_BaseVariable::_initialize(nullptr,::mosek::fusion::Utils::Tools::arraycopy(_1578),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))));
    std::vector<int> _7378;
    for (int _1579 = (int)0, _7379 = (int)((_1578)->size(0)); _1579 < _7379 ; ++_1579)
    {
      _7378.push_back(_ptr__1578[_1579]);
    }
    auto _7380 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7378.size()),_7378.begin(),_7378.end()));
    mosek::fusion::p_NilVariable::_get_impl(::mosek::fusion::NilVariable::t(_pubthis))->shape = _7380;
  }
}mosek::fusion::NilVariable::t mosek::fusion::p_NilVariable::_new_NilVariable  (){ return new mosek::fusion::NilVariable(); }mosek::fusion::NilVariable::NilVariable  () :    NilVariable(new mosek::fusion::p_NilVariable(this)){ mosek::fusion::p_NilVariable::_get_impl(this)->_initialize(); }void mosek::fusion::p_NilVariable::_initialize  (){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_NilVariable::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1)}));
  }
}void mosek::fusion::p_NilVariable::flushNames(){
}
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::NilVariable :: __mosek_2fusion_2NilVariable__elementDesc(long long _1580,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1581) { return mosek::fusion::p_NilVariable::_get_impl(this)->__mosek_2fusion_2NilVariable__elementDesc(_1580,_1581); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::NilVariable::elementDesc(long long _1580,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1581) { return __mosek_2fusion_2NilVariable__elementDesc(_1580,_1581); }
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_NilVariable::__mosek_2fusion_2NilVariable__elementDesc(long long _1580,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1581){
  return _1581;
}
void mosek::fusion::NilVariable :: elementName(long long _1582,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1583) { mosek::fusion::p_NilVariable::_get_impl(this)->elementName(_1582,_1583); }void mosek::fusion::p_NilVariable::elementName(long long _1582,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1583){
}
int mosek::fusion::NilVariable :: numInst() { return mosek::fusion::p_NilVariable::_get_impl(this)->numInst(); }int mosek::fusion::p_NilVariable::numInst(){
  return (int)0;
}
int mosek::fusion::NilVariable :: inst(int _1584,std::shared_ptr< monty::ndarray< long long,1 > > _1585,std::shared_ptr< monty::ndarray< long long,1 > > _1586) { return mosek::fusion::p_NilVariable::_get_impl(this)->inst(_1584,_1585,_1586); }int mosek::fusion::p_NilVariable::inst(int _1584,std::shared_ptr< monty::ndarray< long long,1 > > _1585,std::shared_ptr< monty::ndarray< long long,1 > > _1586){
  _checked_ptr_1<long long> _ptr__1585(_1585 ? _1585->raw() : nullptr, _1585 ? _1585->size(0) : 0);
  _checked_ptr_1<long long> _ptr__1586(_1586 ? _1586->raw() : nullptr, _1586 ? _1586->size(0) : 0);
  return (int)0;
}
void mosek::fusion::NilVariable :: inst(int _1587,std::shared_ptr< monty::ndarray< long long,1 > > _1588) { mosek::fusion::p_NilVariable::_get_impl(this)->inst(_1587,_1588); }void mosek::fusion::p_NilVariable::inst(int _1587,std::shared_ptr< monty::ndarray< long long,1 > > _1588){
  _checked_ptr_1<long long> _ptr__1588(_1588 ? _1588->raw() : nullptr, _1588 ? _1588->size(0) : 0);
}
void mosek::fusion::NilVariable :: set_values(std::shared_ptr< monty::ndarray< double,1 > > _1589,bool _1590) { mosek::fusion::p_NilVariable::_get_impl(this)->set_values(_1589,_1590); }void mosek::fusion::p_NilVariable::set_values(std::shared_ptr< monty::ndarray< double,1 > > _1589,bool _1590){
  _checked_ptr_1<double> _ptr__1589(_1589 ? _1589->raw() : nullptr, _1589 ? _1589->size(0) : 0);
}
void mosek::fusion::NilVariable :: values(int _1591,std::shared_ptr< monty::ndarray< double,1 > > _1592,bool _1593) { mosek::fusion::p_NilVariable::_get_impl(this)->values(_1591,_1592,_1593); }void mosek::fusion::p_NilVariable::values(int _1591,std::shared_ptr< monty::ndarray< double,1 > > _1592,bool _1593){
  _checked_ptr_1<double> _ptr__1592(_1592 ? _1592->raw() : nullptr, _1592 ? _1592->size(0) : 0);
}
void mosek::fusion::NilVariable :: make_continuous() { mosek::fusion::p_NilVariable::_get_impl(this)->make_continuous(); }void mosek::fusion::p_NilVariable::make_continuous(){
}
void mosek::fusion::NilVariable :: make_integer() { mosek::fusion::p_NilVariable::_get_impl(this)->make_integer(); }void mosek::fusion::p_NilVariable::make_integer(){
}
std::string mosek::fusion::NilVariable :: toString() { return mosek::fusion::p_NilVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_NilVariable::toString(){
  return std::string ("NilVariable");
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable :: __mosek_2fusion_2NilVariable__index(std::shared_ptr< monty::ndarray< int,1 > > _1594) { return mosek::fusion::p_NilVariable::_get_impl(this)->__mosek_2fusion_2NilVariable__index(_1594); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::index(std::shared_ptr< monty::ndarray< int,1 > > _1594) { return __mosek_2fusion_2NilVariable__index(_1594); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2BaseVariable__index(std::shared_ptr< monty::ndarray< int,1 > > _1594) { return __mosek_2fusion_2NilVariable__index(_1594); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2Variable__index(std::shared_ptr< monty::ndarray< int,1 > > _1594) { return __mosek_2fusion_2NilVariable__index(_1594); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_NilVariable::__mosek_2fusion_2NilVariable__index(std::shared_ptr< monty::ndarray< int,1 > > _1594){
  _checked_ptr_1<int> _ptr__1594(_1594 ? _1594->raw() : nullptr, _1594 ? _1594->size(0) : 0);
  std::vector<int> _7381;
  for (int _1595 = (int)0, _7382 = (int)((shape)->size(0)); _1595 < _7382 ; ++_1595)
  {
    _7381.push_back((int)1);
  }
  auto _7383 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7381.size()),_7381.begin(),_7381.end()));
  return (::mosek::fusion::p_NilVariable::_new_NilVariable(_7383)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable :: __mosek_2fusion_2NilVariable__index(int _1596) { return mosek::fusion::p_NilVariable::_get_impl(this)->__mosek_2fusion_2NilVariable__index(_1596); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::index(int _1596) { return __mosek_2fusion_2NilVariable__index(_1596); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2BaseVariable__index(int _1596) { return __mosek_2fusion_2NilVariable__index(_1596); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2Variable__index(int _1596) { return __mosek_2fusion_2NilVariable__index(_1596); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_NilVariable::__mosek_2fusion_2NilVariable__index(int _1596){
  std::vector<int> _7384;
  for (int _1597 = (int)0, _7385 = (int)((shape)->size(0)); _1597 < _7385 ; ++_1597)
  {
    _7384.push_back((int)1);
  }
  auto _7386 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7384.size()),_7384.begin(),_7384.end()));
  return (::mosek::fusion::p_NilVariable::_new_NilVariable(_7386)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable :: __mosek_2fusion_2NilVariable__slice(std::shared_ptr< monty::ndarray< int,1 > > _1598,std::shared_ptr< monty::ndarray< int,1 > > _1599) { return mosek::fusion::p_NilVariable::_get_impl(this)->__mosek_2fusion_2NilVariable__slice(_1598,_1599); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::slice(std::shared_ptr< monty::ndarray< int,1 > > _1598,std::shared_ptr< monty::ndarray< int,1 > > _1599) { return __mosek_2fusion_2NilVariable__slice(_1598,_1599); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2BaseVariable__slice(std::shared_ptr< monty::ndarray< int,1 > > _1598,std::shared_ptr< monty::ndarray< int,1 > > _1599) { return __mosek_2fusion_2NilVariable__slice(_1598,_1599); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2Variable__slice(std::shared_ptr< monty::ndarray< int,1 > > _1598,std::shared_ptr< monty::ndarray< int,1 > > _1599) { return __mosek_2fusion_2NilVariable__slice(_1598,_1599); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_NilVariable::__mosek_2fusion_2NilVariable__slice(std::shared_ptr< monty::ndarray< int,1 > > _1598,std::shared_ptr< monty::ndarray< int,1 > > _1599){
  _checked_ptr_1<int> _ptr__1598(_1598 ? _1598->raw() : nullptr, _1598 ? _1598->size(0) : 0);
  _checked_ptr_1<int> _ptr__1599(_1599 ? _1599->raw() : nullptr, _1599 ? _1599->size(0) : 0);
  if ((((int)((shape)->size(0)) != (int)((_1598)->size(0))) || ((int)((shape)->size(0)) != (int)((_1599)->size(0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching slice shape"));
    }
  }
  {}
  int _7387 = (int)0;
  int _7388 = (int)((_1598)->size(0));
  for (int _1600 = _7387; _1600 < _7388; ++_1600)
  {
    {
      if (((_ptr__1599[_1600] > _ptr__1598[_1600]) || ((_ptr__1598[_1600] < (int)0) || (_ptr__1599[_1600] >= ((*shape)(_1600))))))
      {
        {
          throw ::mosek::fusion::SliceError(std::string ("Slice is out of bounds"));
        }
      }
      {}
    }
  }
  std::vector<int> _7389;
  for (int _1601 = (int)0, _7390 = (int)((shape)->size(0)); _1601 < _7390 ; ++_1601)
  {
    _7389.push_back((_ptr__1599[_1601] - _ptr__1598[_1601]));
  }
  auto _7391 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7389.size()),_7389.begin(),_7389.end()));
  return (::mosek::fusion::p_NilVariable::_new_NilVariable(_7391)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable :: __mosek_2fusion_2NilVariable__slice(int _1602,int _1603) { return mosek::fusion::p_NilVariable::_get_impl(this)->__mosek_2fusion_2NilVariable__slice(_1602,_1603); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::slice(int _1602,int _1603) { return __mosek_2fusion_2NilVariable__slice(_1602,_1603); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2BaseVariable__slice(int _1602,int _1603) { return __mosek_2fusion_2NilVariable__slice(_1602,_1603); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2Variable__slice(int _1602,int _1603) { return __mosek_2fusion_2NilVariable__slice(_1602,_1603); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_NilVariable::__mosek_2fusion_2NilVariable__slice(int _1602,int _1603){
  if (((_1603 > _1602) || ((_1602 < (int)0) || (_1603 > ((*shape)((int)0))))))
  {
    {
      throw ::mosek::fusion::SliceError(std::string ("Slice is out of bounds"));
    }
  }
  else if(((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching slice shape"));
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_NilVariable::_new_NilVariable(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((_1603 - _1602))}))).as<::mosek::fusion::Variable>();
    }
  }
}
void mosek::fusion::p_NilVariable::destroy(){shape.reset();}void mosek::fusion::NilVariable::destroy() { mosek::fusion::p_NilVariable::_get_impl(this)->destroy(); }mosek::fusion::BaseVariable::BaseVariable(mosek::fusion::p_BaseVariable *_impl) : _impl(_impl) { /*std::cout << "BaseVariable() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::BaseVariable::~BaseVariable() { delete _impl; _impl = nullptr; }mosek::fusion::p_BaseVariable::p_BaseVariable  (::mosek::fusion::BaseVariable * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::p_BaseVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::BaseVariable > _1604,    monty::rc_ptr< ::mosek::fusion::Model > _1605){monty::rc_reserve __reserve_this(_pubthis);   {
    model = _1605;
    shape = mosek::fusion::p_BaseVariable::_get_impl(_1604)->shape;
    sparsity = mosek::fusion::p_BaseVariable::_get_impl(_1604)->sparsity;
    nativeidxs = mosek::fusion::p_BaseVariable::_get_impl(_1604)->nativeidxs;
  }
}void mosek::fusion::p_BaseVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1606,    std::shared_ptr< monty::ndarray< int,1 > > _1607,    std::shared_ptr< monty::ndarray< long long,1 > > _1608,    std::shared_ptr< monty::ndarray< long long,1 > > _1609){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1607(_1607 ? _1607->raw() : nullptr, _1607 ? _1607->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1608(_1608 ? _1608->raw() : nullptr, _1608 ? _1608->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1609(_1609 ? _1609->raw() : nullptr, _1609 ? _1609->size(0) : 0);
    model = _1606;
    mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->shape = _1607;
    mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->sparsity = _1608;
    mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->nativeidxs = _1609;
  }
}std::string mosek::fusion::BaseVariable :: toString() { return mosek::fusion::p_BaseVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_BaseVariable::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1610 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _1610->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Variable(("));
  if (((int)((shape)->size(0)) > (int)0))
  {
    {
      _1610->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
      int _7392 = (int)1;
      int _7393 = (int)((shape)->size(0));
      for (int _1611 = _7392; _1611 < _7393; ++_1611)
      {
        {
          _1610->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_1611)));
        }
      }
    }
  }
  {}
  _1610->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("))"));
  return _1610->toString();
}
monty::rc_ptr< ::mosek::fusion::FlatExpr > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__eval() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__eval(); }monty::rc_ptr< ::mosek::fusion::FlatExpr > mosek::fusion::BaseVariable::eval() { return __mosek_2fusion_2BaseVariable__eval(); }
monty::rc_ptr< ::mosek::fusion::FlatExpr > mosek::fusion::BaseVariable::__mosek_2fusion_2Expression__eval() { return __mosek_2fusion_2BaseVariable__eval(); }monty::rc_ptr< ::mosek::fusion::FlatExpr > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__eval(){
  return _pubthis->__mosek_2fusion_2BaseVariable__asExpr()->__mosek_2fusion_2Expression__eval();
}
void mosek::fusion::BaseVariable :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _1612,monty::rc_ptr< ::mosek::fusion::WorkStack > _1613,monty::rc_ptr< ::mosek::fusion::WorkStack > _1614) { mosek::fusion::p_BaseVariable::_get_impl(this)->eval(_1612,_1613,_1614); }void mosek::fusion::p_BaseVariable::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _1612,monty::rc_ptr< ::mosek::fusion::WorkStack > _1613,monty::rc_ptr< ::mosek::fusion::WorkStack > _1614){
  int _1615 = (int)((nativeidxs)->size(0));
  int _1616 = _1615;
  int _1617 = (int)((shape)->size(0));
  bool _1618 = (NULL != sparsity.get());
  _1612->alloc_expr(_1617,_1616,_1615,_1618);
  int _1619 = mosek::fusion::p_WorkStack::_get_impl(_1612)->ptr_base;
  int _1620 = mosek::fusion::p_WorkStack::_get_impl(_1612)->nidxs_base;
  int _1621 = mosek::fusion::p_WorkStack::_get_impl(_1612)->sp_base;
  int _1622 = mosek::fusion::p_WorkStack::_get_impl(_1612)->cof_base;
  int _1623 = mosek::fusion::p_WorkStack::_get_impl(_1612)->bfix_base;
  int _1624 = mosek::fusion::p_WorkStack::_get_impl(_1612)->shape_base;
  std::shared_ptr< monty::ndarray< int,1 > > _1625 = mosek::fusion::p_WorkStack::_get_impl(_1612)->i32;
  _checked_ptr_1<int> _ptr__1625(_1625 ? _1625->raw() : nullptr,_1625 ? _1625->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1626 = mosek::fusion::p_WorkStack::_get_impl(_1612)->i64;
  _checked_ptr_1<long long> _ptr__1626(_1626 ? _1626->raw() : nullptr,_1626 ? _1626->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1627 = mosek::fusion::p_WorkStack::_get_impl(_1612)->f64;
  _checked_ptr_1<double> _ptr__1627(_1627 ? _1627->raw() : nullptr,_1627 ? _1627->size(0) : 0);
  int _7394 = (int)0;
  int _7395 = _1617;
  for (int _1628 = _7394; _1628 < _7395; ++_1628)
  {
    {
      _ptr__1625[safe_add( _1624,_1628 )] = ((*shape)(_1628));
    }
  }
  {
    int _7396 = (int)0;
    int _7397 = safe_add( _1615,(int)1 );
    for (int _1629 = _7396; _1629 < _7397; ++_1629)
    {
      {
        _ptr__1625[safe_add( _1619,_1629 )] = _1629;
      }
    }
    int _7398 = (int)0;
    int _7399 = _1615;
    for (int _1630 = _7398; _1630 < _7399; ++_1630)
    {
      {
        _ptr__1626[safe_add( _1620,_1630 )] = ((*nativeidxs)(_1630));
      }
    }
    if (_1618)
    {
      {
        int _7400 = (int)0;
        int _7401 = _1615;
        for (int _1631 = _7400; _1631 < _7401; ++_1631)
        {
          {
            _ptr__1626[safe_add( _1621,_1631 )] = ((*sparsity)(_1631));
          }
        }
      }
    }
    {}
    int _7402 = (int)0;
    int _7403 = _1615;
    for (int _1632 = _7402; _1632 < _7403; ++_1632)
    {
      {
        _ptr__1627[safe_add( _1622,_1632 )] = 1.0;
      }
    }
    int _7404 = (int)0;
    int _7405 = _1615;
    for (int _1633 = _7404; _1633 < _7405; ++_1633)
    {
      {
        _ptr__1627[safe_add( _1623,_1633 )] = 0.0;
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__reshape(int _1634,int _1635,int _1636) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__reshape(_1634,_1635,_1636); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::reshape(int _1634,int _1635,int _1636) { return __mosek_2fusion_2BaseVariable__reshape(_1634,_1635,_1636); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__reshape(int _1634,int _1635,int _1636) { return __mosek_2fusion_2BaseVariable__reshape(_1634,_1635,_1636); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__reshape(int _1634,int _1635,int _1636){
  return _pubthis->__mosek_2fusion_2BaseVariable__reshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1634),(int)(_1635),(int)(_1636)}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__reshape(int _1637,int _1638) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__reshape(_1637,_1638); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::reshape(int _1637,int _1638) { return __mosek_2fusion_2BaseVariable__reshape(_1637,_1638); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__reshape(int _1637,int _1638) { return __mosek_2fusion_2BaseVariable__reshape(_1637,_1638); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__reshape(int _1637,int _1638){
  return _pubthis->__mosek_2fusion_2BaseVariable__reshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1637),(int)(_1638)}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__reshape(int _1639) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__reshape(_1639); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::reshape(int _1639) { return __mosek_2fusion_2BaseVariable__reshape(_1639); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__reshape(int _1639) { return __mosek_2fusion_2BaseVariable__reshape(_1639); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__reshape(int _1639){
  return _pubthis->__mosek_2fusion_2BaseVariable__reshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1639)}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__reshape(std::shared_ptr< monty::ndarray< int,1 > > _1640) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__reshape(_1640); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::reshape(std::shared_ptr< monty::ndarray< int,1 > > _1640) { return __mosek_2fusion_2BaseVariable__reshape(_1640); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__reshape(std::shared_ptr< monty::ndarray< int,1 > > _1640) { return __mosek_2fusion_2BaseVariable__reshape(_1640); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__reshape(std::shared_ptr< monty::ndarray< int,1 > > _1640){
  _checked_ptr_1<int> _ptr__1640(_1640 ? _1640->raw() : nullptr, _1640 ? _1640->size(0) : 0);
  long long _1641 = (int)1;
  int _7406 = (int)0;
  int _7407 = (int)((_1640)->size(0));
  for (int _1642 = _7406; _1642 < _7407; ++_1642)
  {
    {
      if ((_ptr__1640[_1642] < (int)0))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid shape"));
        }
      }
      {}
      _1641 *= _ptr__1640[_1642];
    }
  }
  if ((_1641 != _pubthis->getSize()))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Shape size does not match variable size"));
    }
  }
  {}
  std::vector<int> _7408;
  for (int _1643 = (int)0, _7409 = (int)((_1640)->size(0)); _1643 < _7409 ; ++_1643)
  {
    _7408.push_back(_ptr__1640[_1643]);
  }
  auto _7410 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7408.size()),_7408.begin(),_7408.end()));
  return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_7410,sparsity,nativeidxs)).as<::mosek::fusion::Variable>();
}
void mosek::fusion::BaseVariable :: setLevel(std::shared_ptr< monty::ndarray< double,1 > > _1644) { mosek::fusion::p_BaseVariable::_get_impl(this)->setLevel(_1644); }void mosek::fusion::p_BaseVariable::setLevel(std::shared_ptr< monty::ndarray< double,1 > > _1644){
  _checked_ptr_1<double> _ptr__1644(_1644 ? _1644->raw() : nullptr, _1644 ? _1644->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      if (((int)((_1644)->size(0)) != (int)((nativeidxs)->size(0))))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Invalid length of solution values vector"));
        }
      }
      {}
      model->setVariableValues(true,nativeidxs,_1644);
    }
  }
  else
  {
    {
      if (((int)((_1644)->size(0)) != _pubthis->getSize()))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Invalid length of solution values vector"));
        }
      }
      {}
      std::vector<double> _7411;
      for (int _1646 = (int)0, _7412 = (int)((nativeidxs)->size(0)); _1646 < _7412 ; ++_1646)
      {
        _7411.push_back(_ptr__1644[((*sparsity)(_1646))]);
      }
      auto _7413 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7411.size()),_7411.begin(),_7411.end()));
      std::shared_ptr< monty::ndarray< double,1 > > _1645 = _7413;
      _checked_ptr_1<double> _ptr__1645(_1645 ? _1645->raw() : nullptr,_1645 ? _1645->size(0) : 0);
      model->setVariableValues(true,nativeidxs,_1645);
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__getModel() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__getModel(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::BaseVariable::getModel() { return __mosek_2fusion_2BaseVariable__getModel(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__getModel() { return __mosek_2fusion_2BaseVariable__getModel(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__getModel(){
  return model;
}
int mosek::fusion::BaseVariable :: getND() { return mosek::fusion::p_BaseVariable::_get_impl(this)->getND(); }int mosek::fusion::p_BaseVariable::getND(){
  return (int)((shape)->size(0));
}
int mosek::fusion::BaseVariable :: getDim(int _1647) { return mosek::fusion::p_BaseVariable::_get_impl(this)->getDim(_1647); }int mosek::fusion::p_BaseVariable::getDim(int _1647){
  return ((*shape)(_1647));
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::BaseVariable :: getShape() { return mosek::fusion::p_BaseVariable::_get_impl(this)->getShape(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_BaseVariable::getShape(){
  return ::mosek::fusion::Utils::Tools::arraycopy(shape);
}
long long mosek::fusion::BaseVariable :: getSize() { return mosek::fusion::p_BaseVariable::_get_impl(this)->getSize(); }long long mosek::fusion::p_BaseVariable::getSize(){
  long long _1648 = (long long)1;
  int _7414 = (int)0;
  int _7415 = (int)((shape)->size(0));
  for (int _1649 = _7414; _1649 < _7415; ++_1649)
  {
    {
      _1648 *= ((*shape)(_1649));
    }
  }
  return _1648;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::BaseVariable :: dual() { return mosek::fusion::p_BaseVariable::_get_impl(this)->dual(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_BaseVariable::dual(){
  std::shared_ptr< monty::ndarray< double,1 > > _1650 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((nativeidxs)->size(0)))));
  _checked_ptr_1<double> _ptr__1650(_1650 ? _1650->raw() : nullptr,_1650 ? _1650->size(0) : 0);
  model->getVariableValues(false,nativeidxs,_1650,(int)0);
  if ((NULL != sparsity.get()))
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _1651 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_pubthis->getSize())));
      _checked_ptr_1<double> _ptr__1651(_1651 ? _1651->raw() : nullptr,_1651 ? _1651->size(0) : 0);
      int _7416 = (int)0;
      int _7417 = (int)((nativeidxs)->size(0));
      for (int _1652 = _7416; _1652 < _7417; ++_1652)
      {
        {
          _ptr__1651[((*sparsity)(_1652))] = _ptr__1650[_1652];
        }
      }
      _1650 = _1651;
      _ptr__1650.update(_1650 ? _1650->raw() : nullptr, _1650 ? _1650->size(0) : 0);
    }
  }
  {}
  return _1650;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::BaseVariable :: level() { return mosek::fusion::p_BaseVariable::_get_impl(this)->level(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_BaseVariable::level(){
  std::shared_ptr< monty::ndarray< double,1 > > _1653 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((nativeidxs)->size(0)))));
  _checked_ptr_1<double> _ptr__1653(_1653 ? _1653->raw() : nullptr,_1653 ? _1653->size(0) : 0);
  model->getVariableValues(true,nativeidxs,_1653,(int)0);
  if ((NULL != sparsity.get()))
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _1654 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_pubthis->getSize())));
      _checked_ptr_1<double> _ptr__1654(_1654 ? _1654->raw() : nullptr,_1654 ? _1654->size(0) : 0);
      int _7418 = (int)0;
      int _7419 = (int)((nativeidxs)->size(0));
      for (int _1655 = _7418; _1655 < _7419; ++_1655)
      {
        {
          _ptr__1654[((*sparsity)(_1655))] = _ptr__1653[_1655];
        }
      }
      _1653 = _1654;
      _ptr__1653.update(_1653 ? _1653->raw() : nullptr, _1653 ? _1653->size(0) : 0);
    }
  }
  {}
  return _1653;
}
void mosek::fusion::BaseVariable :: makeContinuous() { mosek::fusion::p_BaseVariable::_get_impl(this)->makeContinuous(); }void mosek::fusion::p_BaseVariable::makeContinuous(){
  _pubthis->make_continuous();
}
void mosek::fusion::BaseVariable :: makeInteger() { mosek::fusion::p_BaseVariable::_get_impl(this)->makeInteger(); }void mosek::fusion::p_BaseVariable::makeInteger(){
  _pubthis->make_integer();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__transpose() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__transpose(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::transpose() { return __mosek_2fusion_2BaseVariable__transpose(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__transpose() { return __mosek_2fusion_2BaseVariable__transpose(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__transpose(){
  if (((int)((shape)->size(0)) == (int)1))
  {
    {
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(((*shape)((int)0)))}),sparsity,nativeidxs)).as<::mosek::fusion::Variable>();
    }
  }
  else if(((int)((shape)->size(0)) > (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid shape for operation"));
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _1656 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((nativeidxs)->size(0)))));
      _checked_ptr_1<long long> _ptr__1656(_1656 ? _1656->raw() : nullptr,_1656 ? _1656->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _7420;
      bool _7421 = (NULL == sparsity.get());
      if (_7421)
      {
        _7420 = nullptr;
      }
      else
      {
        _7420 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((nativeidxs)->size(0)))));
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1657 = _7420;
      _checked_ptr_1<long long> _ptr__1657(_1657 ? _1657->raw() : nullptr,_1657 ? _1657->size(0) : 0);
      if ((NULL == sparsity.get()))
      {
        {
          int _1658 = (int)0;
          int _7422 = (int)0;
          int _7423 = ((*shape)((int)1));
          for (int _1659 = _7422; _1659 < _7423; ++_1659)
          {
            {
              int _7424 = (int)0;
              int _7425 = ((*shape)((int)0));
              for (int _1660 = _7424; _1660 < _7425; ++_1660)
              {
                {
                  _ptr__1656[_1658] = ((*nativeidxs)(safe_add( safe_mul( _1660,((*shape)((int)1)) ),_1659 )));
                  ++ _1658;
                }
              }
            }
          }
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _1661 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( ((*shape)((int)1)),(int)1 ))));
          _checked_ptr_1<int> _ptr__1661(_1661 ? _1661->raw() : nullptr,_1661 ? _1661->size(0) : 0);
          int _1662 = ((*shape)((int)0));
          int _1663 = ((*shape)((int)1));
          int _7426 = (int)0;
          int _7427 = (int)((sparsity)->size(0));
          for (int _1664 = _7426; _1664 < _7427; ++_1664)
          {
            {
              ++ _ptr__1661[safe_add( (((*sparsity)(_1664)) % _1663),(int)1 )];
            }
          }
          int _7428 = (int)0;
          int _7429 = _1663;
          for (int _1665 = _7428; _1665 < _7429; ++_1665)
          {
            {
              _ptr__1661[safe_add( _1665,(int)1 )] += _ptr__1661[_1665];
            }
          }
          int _7430 = (int)0;
          int _7431 = (int)((sparsity)->size(0));
          for (int _1666 = _7430; _1666 < _7431; ++_1666)
          {
            {
              long long _1667 = (((*sparsity)(_1666)) % _1663);
              _ptr__1656[_ptr__1661[_1667]] = ((*nativeidxs)(_1666));
              _ptr__1657[_ptr__1661[_1667]] = safe_add( (((*sparsity)(_1666)) / _1663),safe_mul( (((*sparsity)(_1666)) % _1663),_1662 ) );
              ++ _ptr__1661[_1667];
            }
          }
        }
      }
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(((*shape)((int)1))),(int)(((*shape)((int)0)))}),_1657,_1656)).as<::mosek::fusion::Variable>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__index(int _1668,int _1669,int _1670) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__index(_1668,_1669,_1670); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::index(int _1668,int _1669,int _1670) { return __mosek_2fusion_2BaseVariable__index(_1668,_1669,_1670); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__index(int _1668,int _1669,int _1670) { return __mosek_2fusion_2BaseVariable__index(_1668,_1669,_1670); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__index(int _1668,int _1669,int _1670){
  return _pubthis->__mosek_2fusion_2BaseVariable__index(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1668),(int)(_1669),(int)(_1670)}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__index(int _1671,int _1672) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__index(_1671,_1672); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::index(int _1671,int _1672) { return __mosek_2fusion_2BaseVariable__index(_1671,_1672); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__index(int _1671,int _1672) { return __mosek_2fusion_2BaseVariable__index(_1671,_1672); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__index(int _1671,int _1672){
  return _pubthis->__mosek_2fusion_2BaseVariable__index(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1671),(int)(_1672)}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__index(std::shared_ptr< monty::ndarray< int,1 > > _1673) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__index(_1673); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::index(std::shared_ptr< monty::ndarray< int,1 > > _1673) { return __mosek_2fusion_2BaseVariable__index(_1673); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__index(std::shared_ptr< monty::ndarray< int,1 > > _1673) { return __mosek_2fusion_2BaseVariable__index(_1673); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__index(std::shared_ptr< monty::ndarray< int,1 > > _1673){
  _checked_ptr_1<int> _ptr__1673(_1673 ? _1673->raw() : nullptr, _1673 ? _1673->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,2 > > _1674 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)1,(int)((_1673)->size(0)))));
  int _7432 = (int)0;
  int _7433 = (int)((_1673)->size(0));
  for (int _1675 = _7432; _1675 < _7433; ++_1675)
  {
    {
      ((*_1674)((int)0,_1675)) = _ptr__1673[_1675];
    }
  }
  return _pubthis->__mosek_2fusion_2BaseVariable__pick(_1674)->__mosek_2fusion_2Variable__reshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__index(int _1676) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__index(_1676); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::index(int _1676) { return __mosek_2fusion_2BaseVariable__index(_1676); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__index(int _1676) { return __mosek_2fusion_2BaseVariable__index(_1676); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__index(int _1676){
  return _pubthis->__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1676)}))->__mosek_2fusion_2Variable__reshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1677,std::shared_ptr< monty::ndarray< int,1 > > _1678,std::shared_ptr< monty::ndarray< int,1 > > _1679) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__pick(_1677,_1678,_1679); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _1677,std::shared_ptr< monty::ndarray< int,1 > > _1678,std::shared_ptr< monty::ndarray< int,1 > > _1679) { return __mosek_2fusion_2BaseVariable__pick(_1677,_1678,_1679); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1677,std::shared_ptr< monty::ndarray< int,1 > > _1678,std::shared_ptr< monty::ndarray< int,1 > > _1679) { return __mosek_2fusion_2BaseVariable__pick(_1677,_1678,_1679); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1677,std::shared_ptr< monty::ndarray< int,1 > > _1678,std::shared_ptr< monty::ndarray< int,1 > > _1679){
  _checked_ptr_1<int> _ptr__1677(_1677 ? _1677->raw() : nullptr, _1677 ? _1677->size(0) : 0);
  _checked_ptr_1<int> _ptr__1678(_1678 ? _1678->raw() : nullptr, _1678 ? _1678->size(0) : 0);
  _checked_ptr_1<int> _ptr__1679(_1679 ? _1679->raw() : nullptr, _1679 ? _1679->size(0) : 0);
  if (((int)((shape)->size(0)) != (int)3))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  if ((((int)((_1677)->size(0)) != (int)((_1678)->size(0))) || ((int)((_1677)->size(0)) != (int)((_1679)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching argument lengths"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,2 > > _1680 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_1677)->size(0)),(int)3)));
  int _7434 = (int)0;
  int _7435 = (int)((_1677)->size(0));
  for (int _1681 = _7434; _1681 < _7435; ++_1681)
  {
    {
      ((*_1680)(_1681,(int)0)) = _ptr__1677[_1681];
      ((*_1680)(_1681,(int)1)) = _ptr__1678[_1681];
      ((*_1680)(_1681,(int)2)) = _ptr__1679[_1681];
    }
  }
  return _pubthis->__mosek_2fusion_2BaseVariable__pick(_1680);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1682,std::shared_ptr< monty::ndarray< int,1 > > _1683) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__pick(_1682,_1683); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _1682,std::shared_ptr< monty::ndarray< int,1 > > _1683) { return __mosek_2fusion_2BaseVariable__pick(_1682,_1683); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1682,std::shared_ptr< monty::ndarray< int,1 > > _1683) { return __mosek_2fusion_2BaseVariable__pick(_1682,_1683); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1682,std::shared_ptr< monty::ndarray< int,1 > > _1683){
  _checked_ptr_1<int> _ptr__1682(_1682 ? _1682->raw() : nullptr, _1682 ? _1682->size(0) : 0);
  _checked_ptr_1<int> _ptr__1683(_1683 ? _1683->raw() : nullptr, _1683 ? _1683->size(0) : 0);
  if ((((int)((shape)->size(0)) != (int)2) || ((int)((_1682)->size(0)) != (int)((_1683)->size(0)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,2 > > _1684 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_1682)->size(0)),(int)2)));
  int _7436 = (int)0;
  int _7437 = (int)((_1682)->size(0));
  for (int _1685 = _7436; _1685 < _7437; ++_1685)
  {
    {
      ((*_1684)(_1685,(int)0)) = _ptr__1682[_1685];
      ((*_1684)(_1685,(int)1)) = _ptr__1683[_1685];
    }
  }
  return _pubthis->__mosek_2fusion_2BaseVariable__pick(_1684);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,2 > > _1686) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__pick(_1686); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::pick(std::shared_ptr< monty::ndarray< int,2 > > _1686) { return __mosek_2fusion_2BaseVariable__pick(_1686); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__pick(std::shared_ptr< monty::ndarray< int,2 > > _1686) { return __mosek_2fusion_2BaseVariable__pick(_1686); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,2 > > _1686){
  if (((int)((shape)->size(0)) != (int)((_1686)->size(1))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  bool _1687 = false;
  int _7438 = (int)0;
  int _7439 = (int)((_1686)->size(0));
  for (int _1688 = _7438; _1688 < _7439; ++_1688)
  {
    {
      int _7440 = (int)0;
      int _7441 = (int)((_1686)->size(1));
      for (int _1689 = _7440; _1689 < _7441; ++_1689)
      {
        {
          if (((((*_1686)(_1688,_1689)) < (int)0) || (((*_1686)(_1688,_1689)) >= ((*shape)(_1689)))))
          {
            {
              _1687 = true;
            }
          }
          {}
        }
      }
    }
  }
  if (_1687)
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  int _1690 = (int)((shape)->size(0));
  std::shared_ptr< monty::ndarray< long long,1 > > _1691 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1690)));
  _checked_ptr_1<long long> _ptr__1691(_1691 ? _1691->raw() : nullptr,_1691 ? _1691->size(0) : 0);
  _ptr__1691[(_1690 - (int)1)] = (int)1;
  int _7442 = (int)1;
  int _7443 = _1690;
  for (int _1692 = _7442; _1692 < _7443; ++_1692)
  {
    {
      _ptr__1691[((_1690 - _1692) - (int)1)] = safe_mul( _ptr__1691[(_1690 - _1692)],((*shape)((_1690 - _1692))) );
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _1693 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_1686)->size(0)))});
  _checked_ptr_1<int> _ptr__1693(_1693 ? _1693->raw() : nullptr,_1693 ? _1693->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1694;
  _checked_ptr_1<long long> _ptr__1694(_1694 ? _1694->raw() : nullptr,_1694 ? _1694->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1695 = nullptr;
  _checked_ptr_1<long long> _ptr__1695(_1695 ? _1695->raw() : nullptr,_1695 ? _1695->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      _1694 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1686)->size(0)))));
      _ptr__1694.update(_1694 ? _1694->raw() : nullptr, _1694 ? _1694->size(0) : 0);
      {
        int _7444 = (int)0;
        int _7445 = (int)((_1686)->size(0));
        for (int _1696 = _7444; _1696 < _7445; ++_1696)
        {
          {
            long long _1697 = (long long)0;
            int _7446 = (int)0;
            int _7447 = _1690;
            for (int _1698 = _7446; _1698 < _7447; ++_1698)
            {
              {
                _1697 += safe_mul( _ptr__1691[_1698],((*_1686)(_1696,_1698)) );
              }
            }
            _ptr__1694[_1696] = ((*nativeidxs)(_1697));
          }
        }
      }
    }
  }
  else
  {
    {
      int _1699 = (int)0;
      int _7448 = (int)0;
      int _7449 = (int)((_1686)->size(0));
      for (int _1700 = _7448; _1700 < _7449; ++_1700)
      {
        {
          long long _1701 = (long long)0;
          int _7450 = (int)0;
          int _7451 = _1690;
          for (int _1702 = _7450; _1702 < _7451; ++_1702)
          {
            {
              _1701 += safe_mul( _ptr__1691[_1702],((*_1686)(_1700,_1702)) );
            }
          }
          if ((::mosek::fusion::p_CommonTools::binarySearch(sparsity,_1701) >= (int)0))
          {
            {
              ++ _1699;
            }
          }
          {}
        }
      }
      _1694 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1699)));
      _ptr__1694.update(_1694 ? _1694->raw() : nullptr, _1694 ? _1694->size(0) : 0);
      _1695 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1699)));
      _ptr__1695.update(_1695 ? _1695->raw() : nullptr, _1695 ? _1695->size(0) : 0);
      {
        int _1703 = (int)0;
        int _7452 = (int)0;
        int _7453 = (int)((_1686)->size(0));
        for (int _1704 = _7452; _1704 < _7453; ++_1704)
        {
          {
            long long _1705 = (long long)0;
            int _7454 = (int)0;
            int _7455 = _1690;
            for (int _1706 = _7454; _1706 < _7455; ++_1706)
            {
              {
                _1705 += safe_mul( _ptr__1691[_1706],((*_1686)(_1704,_1706)) );
              }
            }
            int _1707 = ::mosek::fusion::p_CommonTools::binarySearch(sparsity,_1705);
            if ((_1707 >= (int)0))
            {
              {
                _ptr__1694[_1703] = ((*nativeidxs)(_1707));
                _ptr__1695[_1703] = _1704;
                ++ _1703;
              }
            }
            {}
          }
        }
      }
      if ((_1699 == (int)((_1686)->size(0))))
      {
        {
          _1695 = nullptr;
          _ptr__1695.update(_1695 ? _1695->raw() : nullptr, _1695 ? _1695->size(0) : 0);
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_1693,_1695,_1694)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1708) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__pick(_1708); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _1708) { return __mosek_2fusion_2BaseVariable__pick(_1708); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1708) { return __mosek_2fusion_2BaseVariable__pick(_1708); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1708){
  _checked_ptr_1<int> _ptr__1708(_1708 ? _1708->raw() : nullptr, _1708 ? _1708->size(0) : 0);
  if (((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  bool _1709 = false;
  int _7456 = (int)0;
  int _7457 = (int)((_1708)->size(0));
  for (int _1710 = _7456; _1710 < _7457; ++_1710)
  {
    {
      if (((_ptr__1708[_1710] < (int)0) || (_ptr__1708[_1710] >= ((*shape)((int)0)))))
      {
        {
          _1709 = true;
        }
      }
      {}
    }
  }
  if (_1709)
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< long long,1 > > _1711;
  _checked_ptr_1<long long> _ptr__1711(_1711 ? _1711->raw() : nullptr,_1711 ? _1711->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1712 = nullptr;
  _checked_ptr_1<long long> _ptr__1712(_1712 ? _1712->raw() : nullptr,_1712 ? _1712->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      std::vector<long long> _7458;
      for (int _1713 = (int)0, _7459 = (int)((_1708)->size(0)); _1713 < _7459 ; ++_1713)
      {
        _7458.push_back(((*nativeidxs)(_ptr__1708[_1713])));
      }
      auto _7460 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7458.size()),_7458.begin(),_7458.end()));
      _1711 = _7460;
      _ptr__1711.update(_1711 ? _1711->raw() : nullptr, _1711 ? _1711->size(0) : 0);
    }
  }
  else
  {
    {
      int _1714 = (int)0;
      int _7461 = (int)0;
      int _7462 = (int)((_1708)->size(0));
      for (int _1715 = _7461; _1715 < _7462; ++_1715)
      {
        {
          if ((::mosek::fusion::p_CommonTools::binarySearch(sparsity,(long long)(_ptr__1708[_1715])) >= (int)0))
          {
            {
              ++ _1714;
            }
          }
          {}
        }
      }
      _1711 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1714)));
      _ptr__1711.update(_1711 ? _1711->raw() : nullptr, _1711 ? _1711->size(0) : 0);
      _1712 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1714)));
      _ptr__1712.update(_1712 ? _1712->raw() : nullptr, _1712 ? _1712->size(0) : 0);
      int _1716 = (int)0;
      int _7463 = (int)0;
      int _7464 = (int)((_1708)->size(0));
      for (int _1717 = _7463; _1717 < _7464; ++_1717)
      {
        {
          int _1718 = ::mosek::fusion::p_CommonTools::binarySearch(sparsity,(long long)(_ptr__1708[_1717]));
          if ((_1718 >= (int)0))
          {
            {
              _ptr__1712[_1716] = _1717;
              _ptr__1711[_1716] = ((*nativeidxs)(_1718));
              ++ _1716;
            }
          }
          {}
        }
      }
      if ((_1714 == (int)((_1708)->size(0))))
      {
        {
          _1712 = nullptr;
          _ptr__1712.update(_1712 ? _1712->raw() : nullptr, _1712 ? _1712->size(0) : 0);
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_1708)->size(0)))}),_1712,_1711)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__antidiag(int _1719) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__antidiag(_1719); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::antidiag(int _1719) { return __mosek_2fusion_2BaseVariable__antidiag(_1719); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__antidiag(int _1719) { return __mosek_2fusion_2BaseVariable__antidiag(_1719); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__antidiag(int _1719){
  if (((int)((shape)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("antidiag() only works on two-dimensional objects"));
    }
  }
  else if(((_1719 >= ((*shape)((int)1))) || ((-_1719) >= ((*shape)((int)2)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Diagonal index out of bounds"));
    }
  }
  {}
  if ((_1719 >= (int)0))
  {
    {
      int _7465;
      bool _7466 = (((*shape)((int)0)) < (((*shape)((int)1)) - _1719));
      if (_7466)
      {
        _7465 = ((*shape)((int)0));
      }
      else
      {
        _7465 = (((*shape)((int)1)) - _1719);
      }
      return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0),(int)(((((*shape)((int)1)) - (int)1) - _1719))}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((-(int)1))}),_7465);
    }
  }
  else
  {
    {
      int _7467;
      bool _7468 = (((*shape)((int)1)) < safe_add( ((*shape)((int)0)),_1719 ));
      if (_7468)
      {
        _7467 = ((*shape)((int)1));
      }
      else
      {
        _7467 = safe_add( ((*shape)((int)0)),_1719 );
      }
      return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((-_1719)),(int)((((*shape)((int)1)) - (int)1))}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((-(int)1))}),_7467);
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__antidiag() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__antidiag(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::antidiag() { return __mosek_2fusion_2BaseVariable__antidiag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__antidiag() { return __mosek_2fusion_2BaseVariable__antidiag(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__antidiag(){
  if (((int)((shape)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("antidiag() only works on two-dimensional objects"));
    }
  }
  {}
  int _7469;
  bool _7470 = (((*shape)((int)0)) < ((*shape)((int)1)));
  if (_7470)
  {
    _7469 = ((*shape)((int)0));
  }
  else
  {
    _7469 = ((*shape)((int)1));
  }
  return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0),(int)((((*shape)((int)1)) - (int)1))}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((-(int)1))}),_7469);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__diag(int _1720) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__diag(_1720); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::diag(int _1720) { return __mosek_2fusion_2BaseVariable__diag(_1720); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__diag(int _1720) { return __mosek_2fusion_2BaseVariable__diag(_1720); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__diag(int _1720){
  if (((int)((shape)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("diag() only works on two-dimensional objects"));
    }
  }
  else if(((_1720 >= ((*shape)((int)1))) || ((-_1720) >= ((*shape)((int)2)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Diagonal index out of bounds"));
    }
  }
  {}
  if ((_1720 >= (int)0))
  {
    {
      int _7471;
      bool _7472 = (((*shape)((int)0)) < (((*shape)((int)1)) - _1720));
      if (_7472)
      {
        _7471 = ((*shape)((int)0));
      }
      else
      {
        _7471 = (((*shape)((int)1)) - _1720);
      }
      return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0),(int)(_1720)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((int)1)}),_7471);
    }
  }
  else
  {
    {
      int _7473;
      bool _7474 = (((*shape)((int)1)) < safe_add( ((*shape)((int)0)),_1720 ));
      if (_7474)
      {
        _7473 = ((*shape)((int)1));
      }
      else
      {
        _7473 = safe_add( ((*shape)((int)0)),_1720 );
      }
      return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((-_1720)),(int)((int)0)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((int)1)}),_7473);
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__diag() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__diag(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::diag() { return __mosek_2fusion_2BaseVariable__diag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__diag() { return __mosek_2fusion_2BaseVariable__diag(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__diag(){
  if (((int)((shape)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("diag() only works on two-dimensional objects"));
    }
  }
  {}
  int _7475;
  bool _7476 = (((*shape)((int)0)) < ((*shape)((int)1)));
  if (_7476)
  {
    _7475 = ((*shape)((int)0));
  }
  else
  {
    _7475 = ((*shape)((int)1));
  }
  return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0),(int)((int)0)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((int)1)}),_7475);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int,1 > > _1721,std::shared_ptr< monty::ndarray< int,1 > > _1722,int _1723){
  _checked_ptr_1<int> _ptr__1721(_1721 ? _1721->raw() : nullptr, _1721 ? _1721->size(0) : 0);
  _checked_ptr_1<int> _ptr__1722(_1722 ? _1722->raw() : nullptr, _1722 ? _1722->size(0) : 0);
  int _1724 = (int)((shape)->size(0));
  if (((_1724 != (int)((_1721)->size(0))) || (_1724 != (int)((_1722)->size(0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid start or step definition"));
    }
  }
  {}
  int _7477 = (int)0;
  int _7478 = _1724;
  for (int _1725 = _7477; _1725 < _7478; ++_1725)
  {
    {
      if (((_ptr__1721[_1725] < (int)0) || (_ptr__1721[_1725] >= ((*shape)(_1725)))))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Start element is out of bounds"));
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _1726 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1724)));
  _checked_ptr_1<long long> _ptr__1726(_1726 ? _1726->raw() : nullptr,_1726 ? _1726->size(0) : 0);
  _ptr__1726[(_1724 - (int)1)] = (int)1;
  int _7479 = (int)1;
  int _7480 = _1724;
  for (int _1727 = _7479; _1727 < _7480; ++_1727)
  {
    {
      _ptr__1726[((_1724 - _1727) - (int)1)] = safe_mul( _ptr__1726[(_1724 - _1727)],((*shape)((_1724 - _1727))) );
    }
  }
  long long _1728 = (long long)0;
  int _7481 = (int)0;
  int _7482 = (int)((_1722)->size(0));
  for (int _1729 = _7481; _1729 < _7482; ++_1729)
  {
    {
      _1728 += safe_mul( _ptr__1721[_1729],_ptr__1726[_1729] );
    }
  }
  long long _1730 = (long long)0;
  int _7483 = (int)0;
  int _7484 = (int)((_1722)->size(0));
  for (int _1731 = _7483; _1731 < _7484; ++_1731)
  {
    {
      _1730 += safe_mul( _ptr__1722[_1731],_ptr__1726[_1731] );
    }
  }
  if ((NULL == sparsity.get()))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _1732 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1723)));
      _checked_ptr_1<long long> _ptr__1732(_1732 ? _1732->raw() : nullptr,_1732 ? _1732->size(0) : 0);
      int _7485 = (int)0;
      int _7486 = _1723;
      for (int _1733 = _7485; _1733 < _7486; ++_1733)
      {
        {
          _ptr__1732[_1733] = ((*nativeidxs)(safe_add( _1728,safe_mul( _1730,_1733 ) )));
        }
      }
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1723)}),nullptr,_1732)).as<::mosek::fusion::Variable>();
    }
  }
  else
  {
    {
      int _1734 = (int)0;
      int _7487 = (int)0;
      int _7488 = _1723;
      for (int _1735 = _7487; _1735 < _7488; ++_1735)
      {
        {
          long long _1736 = safe_add( _1728,safe_mul( _1730,_1735 ) );
          int _1737 = ::mosek::fusion::p_CommonTools::binarySearch(sparsity,_1736);
          if ((_1737 >= (int)0))
          {
            {
              ++ _1734;
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1738 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1734)));
      _checked_ptr_1<long long> _ptr__1738(_1738 ? _1738->raw() : nullptr,_1738 ? _1738->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _1739 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1734)));
      _checked_ptr_1<long long> _ptr__1739(_1739 ? _1739->raw() : nullptr,_1739 ? _1739->size(0) : 0);
      int _1740 = (int)0;
      int _7489 = (int)0;
      int _7490 = _1723;
      for (int _1741 = _7489; _1741 < _7490; ++_1741)
      {
        {
          _ptr__1738[_1741] = ((*nativeidxs)(safe_add( _1728,safe_mul( _1730,_1741 ) )));
          long long _1742 = safe_add( _1728,safe_mul( _1730,_1741 ) );
          int _1743 = ::mosek::fusion::p_CommonTools::binarySearch(sparsity,_1742);
          if ((_1743 >= (int)0))
          {
            {
              _ptr__1739[_1740] = _1741;
              _ptr__1738[_1740] = ((*nativeidxs)(_1743));
              ++ _1740;
            }
          }
          {}
        }
      }
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1723)}),_1739,_1738)).as<::mosek::fusion::Variable>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__slice(std::shared_ptr< monty::ndarray< int,1 > > _1744,std::shared_ptr< monty::ndarray< int,1 > > _1745) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__slice(_1744,_1745); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::slice(std::shared_ptr< monty::ndarray< int,1 > > _1744,std::shared_ptr< monty::ndarray< int,1 > > _1745) { return __mosek_2fusion_2BaseVariable__slice(_1744,_1745); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__slice(std::shared_ptr< monty::ndarray< int,1 > > _1744,std::shared_ptr< monty::ndarray< int,1 > > _1745) { return __mosek_2fusion_2BaseVariable__slice(_1744,_1745); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__slice(std::shared_ptr< monty::ndarray< int,1 > > _1744,std::shared_ptr< monty::ndarray< int,1 > > _1745){
  _checked_ptr_1<int> _ptr__1744(_1744 ? _1744->raw() : nullptr, _1744 ? _1744->size(0) : 0);
  _checked_ptr_1<int> _ptr__1745(_1745 ? _1745->raw() : nullptr, _1745 ? _1745->size(0) : 0);
  if (((int)((_1744)->size(0)) != (int)((_1745)->size(0))))
  {
    {
      throw ::mosek::fusion::SliceError(std::string ("Invalid slice"));
    }
  }
  else if(((int)((_1744)->size(0)) != (int)((shape)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable shape and slice do not match"));
    }
  }
  else
  {
    {
      int _7491 = (int)0;
      int _7492 = (int)((shape)->size(0));
      for (int _1746 = _7491; _1746 < _7492; ++_1746)
      {
        {
          if (((_ptr__1744[_1746] < (int)0) || (_ptr__1745[_1746] > ((*shape)(_1746)))))
          {
            {
              throw ::mosek::fusion::IndexError(std::string ("Slice is out of bounds"));
            }
          }
          else if((_ptr__1744[_1746] > _ptr__1745[_1746]))
          {
            {
              throw ::mosek::fusion::SliceError(std::string ("Invalid slice"));
            }
          }
          {}
        }
      }
      int _1747 = (int)((shape)->size(0));
      std::vector<int> _7493;
      for (int _1749 = (int)0, _7494 = _1747; _1749 < _7494 ; ++_1749)
      {
        _7493.push_back((_ptr__1745[_1749] - _ptr__1744[_1749]));
      }
      auto _7495 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7493.size()),_7493.begin(),_7493.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _1748 = _7495;
      _checked_ptr_1<int> _ptr__1748(_1748 ? _1748->raw() : nullptr,_1748 ? _1748->size(0) : 0);
      int _1750 = (int)1;
      int _7496 = (int)0;
      int _7497 = _1747;
      for (int _1751 = _7496; _1751 < _7497; ++_1751)
      {
        {
          _1750 *= (_ptr__1745[_1751] - _ptr__1744[_1751]);
        }
      }
      if ((_1750 == (int)0))
      {
        {
          return (::mosek::fusion::p_NilVariable::_new_NilVariable()).as<::mosek::fusion::Variable>();
        }
      }
      else if((NULL != sparsity.get()))
      {
        {
          int _1752 = (int)0;
          std::shared_ptr< monty::ndarray< int,1 > > _1753 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1747)));
          _checked_ptr_1<int> _ptr__1753(_1753 ? _1753->raw() : nullptr,_1753 ? _1753->size(0) : 0);
          int _7498 = (int)0;
          int _7499 = (int)((sparsity)->size(0));
          for (int _1754 = _7498; _1754 < _7499; ++_1754)
          {
            {
              long long _1755 = ((*sparsity)(_1754));
              int _7500 = (int)1;
              int _7501 = _1747;
              for (int _1756 = _7500; _1756 < _7501; ++_1756)
              {
                {
                  _ptr__1753[(_1747 - _1756)] = (int)(_1755 % ((*shape)((_1747 - _1756))));
                  _1755 /= ((*shape)((_1747 - _1756)));
                }
              }
              _ptr__1753[(int)0] = (int)_1755;
              int _1757 = (int)0;
              while ( ((_ptr__1753[_1757] >= _ptr__1744[_1757]) && (_ptr__1753[_1757] < _ptr__1745[_1757])) )
              {
                {
                  ++ _1757;
                }
              }
              if ((_1757 == _1747))
              {
                {
                  ++ _1752;
                }
              }
              {}
            }
          }
          int _1758 = (int)0;
          std::shared_ptr< monty::ndarray< long long,1 > > _1759 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1752)));
          _checked_ptr_1<long long> _ptr__1759(_1759 ? _1759->raw() : nullptr,_1759 ? _1759->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _1760 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1752)));
          _checked_ptr_1<long long> _ptr__1760(_1760 ? _1760->raw() : nullptr,_1760 ? _1760->size(0) : 0);
          int _7502 = (int)0;
          int _7503 = (int)((sparsity)->size(0));
          for (int _1761 = _7502; _1761 < _7503; ++_1761)
          {
            {
              long long _1762 = ((*sparsity)(_1761));
              int _7504 = (int)1;
              int _7505 = _1747;
              for (int _1763 = _7504; _1763 < _7505; ++_1763)
              {
                {
                  _ptr__1753[(_1747 - _1763)] = (int)(_1762 % ((*shape)((_1747 - _1763))));
                  _1762 /= ((*shape)((_1747 - _1763)));
                }
              }
              _ptr__1753[(int)0] = (int)_1762;
              int _1764 = (int)0;
              while ( ((_ptr__1753[_1764] >= _ptr__1744[_1764]) && (_ptr__1753[_1764] < _ptr__1745[_1764])) )
              {
                {
                  ++ _1764;
                }
              }
              if ((_1764 == _1747))
              {
                {
                  _ptr__1759[_1758] = ((*nativeidxs)(_1761));
                  int _1765 = (int)0;
                  int _7506 = (int)0;
                  int _7507 = _1747;
                  for (int _1766 = _7506; _1766 < _7507; ++_1766)
                  {
                    {
                      _1765 = safe_add( safe_mul( _1765,_ptr__1748[_1766] ),(_ptr__1753[_1766] - _ptr__1744[_1766]) );
                    }
                  }
                  _ptr__1760[_1758] = _1765;
                  ++ _1758;
                }
              }
              {}
            }
          }
          return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_1748,_1760,_1759)).as<::mosek::fusion::Variable>();
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< long long,1 > > _1767 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1750)));
          _checked_ptr_1<long long> _ptr__1767(_1767 ? _1767->raw() : nullptr,_1767 ? _1767->size(0) : 0);
          {
            std::shared_ptr< monty::ndarray< int,1 > > _1768 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1747)));
            _checked_ptr_1<int> _ptr__1768(_1768 ? _1768->raw() : nullptr,_1768 ? _1768->size(0) : 0);
            _ptr__1768[(_1747 - (int)1)] = (int)1;
            int _7508 = (int)1;
            int _7509 = _1747;
            for (int _1769 = _7508; _1769 < _7509; ++_1769)
            {
              {
                _ptr__1768[((_1747 - _1769) - (int)1)] = safe_mul( _ptr__1768[(_1747 - _1769)],((*shape)((_1747 - _1769))) );
              }
            }
            int _1770 = (int)0;
            int _7510 = (int)0;
            int _7511 = _1747;
            for (int _1771 = _7510; _1771 < _7511; ++_1771)
            {
              {
                _1770 += safe_mul( _ptr__1744[_1771],_ptr__1768[_1771] );
              }
            }
            std::vector<int> _7512;
            for (int _1773 = (int)0, _7513 = _1747; _1773 < _7513 ; ++_1773)
            {
              _7512.push_back(_1770);
            }
            auto _7514 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7512.size()),_7512.begin(),_7512.end()));
            std::shared_ptr< monty::ndarray< int,1 > > _1772 = _7514;
            _checked_ptr_1<int> _ptr__1772(_1772 ? _1772->raw() : nullptr,_1772 ? _1772->size(0) : 0);
            std::vector<int> _7515;
            for (int _1775 = (int)0, _7516 = _1747; _1775 < _7516 ; ++_1775)
            {
              _7515.push_back(_ptr__1744[_1775]);
            }
            auto _7517 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7515.size()),_7515.begin(),_7515.end()));
            std::shared_ptr< monty::ndarray< int,1 > > _1774 = _7517;
            _checked_ptr_1<int> _ptr__1774(_1774 ? _1774->raw() : nullptr,_1774 ? _1774->size(0) : 0);
            int _7518 = (int)0;
            int _7519 = _1750;
            for (int _1776 = _7518; _1776 < _7519; ++_1776)
            {
              {
                _ptr__1767[_1776] = ((*nativeidxs)(_ptr__1772[(_1747 - (int)1)]));
                _ptr__1774[(_1747 - (int)1)] += (int)1;
                _ptr__1772[(_1747 - (int)1)] += _ptr__1768[(_1747 - (int)1)];
                if ((_ptr__1774[(_1747 - (int)1)] >= _ptr__1745[(_1747 - (int)1)]))
                {
                  {
                    int _1777 = (_1747 - (int)1);
                    while ( ((_1777 > (int)0) && (_ptr__1774[_1777] >= _ptr__1745[_1777])) )
                    {
                      {
                        _ptr__1774[_1777] = _ptr__1744[_1777];
                        _ptr__1774[(_1777 - (int)1)] += (int)1;
                        _ptr__1772[(_1777 - (int)1)] += _ptr__1768[(_1777 - (int)1)];
                        -- _1777;
                      }
                    }
                    int _7520 = safe_add( _1777,(int)1 );
                    int _7521 = _1747;
                    for (int _1778 = _7520; _1778 < _7521; ++_1778)
                    {
                      {
                        _ptr__1772[_1778] = _ptr__1772[_1777];
                      }
                    }
                  }
                }
                {}
              }
            }
          }
          return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_1748,nullptr,_1767)).as<::mosek::fusion::Variable>();
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__slice(int _1779,int _1780) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__slice(_1779,_1780); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::slice(int _1779,int _1780) { return __mosek_2fusion_2BaseVariable__slice(_1779,_1780); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__slice(int _1779,int _1780) { return __mosek_2fusion_2BaseVariable__slice(_1779,_1780); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__slice(int _1779,int _1780){
  if (((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable shape and slice do not match"));
    }
  }
  {}
  if (((_1779 == (int)0) && (_1780 == ((*shape)((int)0)))))
  {
    {
      return (::mosek::fusion::BaseVariable::t(_pubthis)).as<::mosek::fusion::Variable>();
    }
  }
  else if(((_1779 < (int)0) || (_1780 > ((*shape)((int)0)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Slice is out of bounds"));
    }
  }
  else if((_1779 > _1780))
  {
    {
      throw ::mosek::fusion::SliceError(std::string ("Invalid slice"));
    }
  }
  else if((_1779 == _1780))
  {
    {
      return (::mosek::fusion::p_NilVariable::_new_NilVariable()).as<::mosek::fusion::Variable>();
    }
  }
  else if((NULL != sparsity.get()))
  {
    {
      int _1781 = (_1780 - _1779);
      int _1782 = (int)0;
      int _1783 = ::mosek::fusion::p_CommonTools::binarySearchL(sparsity,(long long)(_1779));
      int _1784 = ::mosek::fusion::p_CommonTools::binarySearchL(sparsity,(long long)(_1780));
      std::vector<long long> _7522;
      for (int _1785 = _1783, _7523 = _1784; _1785 < _7523 ; ++_1785)
      {
        _7522.push_back((((*sparsity)(_1785)) - _1779));
      }
      auto _7524 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7522.size()),_7522.begin(),_7522.end()));
      std::vector<long long> _7525;
      for (int _1786 = _1783, _7526 = _1784; _1786 < _7526 ; ++_1786)
      {
        _7525.push_back(((*nativeidxs)(_1786)));
      }
      auto _7527 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7525.size()),_7525.begin(),_7525.end()));
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1781)}),_7524,_7527)).as<::mosek::fusion::Variable>();
    }
  }
  else
  {
    {
      int _1787 = (_1780 - _1779);
      std::shared_ptr< monty::ndarray< long long,1 > > _1788 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1787)));
      _checked_ptr_1<long long> _ptr__1788(_1788 ? _1788->raw() : nullptr,_1788 ? _1788->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(nativeidxs,_1779,_1788,(int)0,_1787);
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1787)}),nullptr,_1788)).as<::mosek::fusion::Variable>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__asExpr() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__asExpr(); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseVariable::asExpr() { return __mosek_2fusion_2BaseVariable__asExpr(); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__asExpr() { return __mosek_2fusion_2BaseVariable__asExpr(); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__asExpr(){
  return (::mosek::fusion::p_ExprFromVar::_new_ExprFromVar((::mosek::fusion::BaseVariable::t(_pubthis)).as<::mosek::fusion::Variable>())).as<::mosek::fusion::Expression>();
}
int mosek::fusion::BaseVariable :: inst(int _1789,std::shared_ptr< monty::ndarray< long long,1 > > _1790,int _1791,std::shared_ptr< monty::ndarray< long long,1 > > _1792) { return mosek::fusion::p_BaseVariable::_get_impl(this)->inst(_1789,_1790,_1791,_1792); }int mosek::fusion::p_BaseVariable::inst(int _1789,std::shared_ptr< monty::ndarray< long long,1 > > _1790,int _1791,std::shared_ptr< monty::ndarray< long long,1 > > _1792){
  _checked_ptr_1<long long> _ptr__1790(_1790 ? _1790->raw() : nullptr, _1790 ? _1790->size(0) : 0);
  _checked_ptr_1<long long> _ptr__1792(_1792 ? _1792->raw() : nullptr, _1792 ? _1792->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1793 = mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->nativeidxs;
  _checked_ptr_1<long long> _ptr__1793(_1793 ? _1793->raw() : nullptr,_1793 ? _1793->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1794 = mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->sparsity;
  _checked_ptr_1<long long> _ptr__1794(_1794 ? _1794->raw() : nullptr,_1794 ? _1794->size(0) : 0);
  if ((NULL == _1794.get()))
  {
    {
      int _7528 = (int)0;
      int _7529 = (int)((_1793)->size(0));
      for (int _1795 = _7528; _1795 < _7529; ++_1795)
      {
        {
          _ptr__1790[safe_add( _1795,_1789 )] = _1795;
          _ptr__1792[safe_add( _1795,_1791 )] = _ptr__1793[_1795];
        }
      }
    }
  }
  else
  {
    {
      int _7530 = (int)0;
      int _7531 = (int)((mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->sparsity)->size(0));
      for (int _1796 = _7530; _1796 < _7531; ++_1796)
      {
        {
          _ptr__1790[safe_add( _1789,_1796 )] = _ptr__1794[_1796];
          _ptr__1792[safe_add( _1796,_1791 )] = _ptr__1793[_1796];
        }
      }
    }
  }
  return (int)((mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->nativeidxs)->size(0));
}
int mosek::fusion::BaseVariable :: numInst() { return mosek::fusion::p_BaseVariable::_get_impl(this)->numInst(); }int mosek::fusion::p_BaseVariable::numInst(){
  return (int)((nativeidxs)->size(0));
}
void mosek::fusion::BaseVariable :: inst(int _1797,std::shared_ptr< monty::ndarray< long long,1 > > _1798) { mosek::fusion::p_BaseVariable::_get_impl(this)->inst(_1797,_1798); }void mosek::fusion::p_BaseVariable::inst(int _1797,std::shared_ptr< monty::ndarray< long long,1 > > _1798){
  _checked_ptr_1<long long> _ptr__1798(_1798 ? _1798->raw() : nullptr, _1798 ? _1798->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      int _7532 = (int)0;
      int _7533 = (int)((nativeidxs)->size(0));
      for (int _1799 = _7532; _1799 < _7533; ++_1799)
      {
        {
          _ptr__1798[safe_add( _1797,_1799 )] = ((*nativeidxs)(_1799));
        }
      }
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _1800 = _pubthis->getShape();
      _checked_ptr_1<int> _ptr__1800(_1800 ? _1800->raw() : nullptr,_1800 ? _1800->size(0) : 0);
      int _1801 = (int)1;
      int _7534 = (int)0;
      int _7535 = (int)((_1800)->size(0));
      for (int _1802 = _7534; _1802 < _7535; ++_1802)
      {
        {
          _1801 *= _ptr__1800[_1802];
        }
      }
      int _7536 = (int)0;
      int _7537 = _1801;
      for (int _1803 = _7536; _1803 < _7537; ++_1803)
      {
        {
          _ptr__1798[safe_add( _1797,_1803 )] = (int)0;
        }
      }
      int _7538 = (int)0;
      int _7539 = (int)((sparsity)->size(0));
      for (int _1804 = _7538; _1804 < _7539; ++_1804)
      {
        {
          _ptr__1798[safe_add( _1797,((*sparsity)(_1804)) )] = ((*nativeidxs)(_1804));
        }
      }
    }
  }
}
void mosek::fusion::BaseVariable :: set_values(std::shared_ptr< monty::ndarray< double,1 > > _1805,bool _1806) { mosek::fusion::p_BaseVariable::_get_impl(this)->set_values(_1805,_1806); }void mosek::fusion::p_BaseVariable::set_values(std::shared_ptr< monty::ndarray< double,1 > > _1805,bool _1806){
  _checked_ptr_1<double> _ptr__1805(_1805 ? _1805->raw() : nullptr, _1805 ? _1805->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      _pubthis->__mosek_2fusion_2BaseVariable__getModel()->setVariableValues(_1806,nativeidxs,_1805);
    }
  }
  else
  {
    {
      int _1807 = (int)1;
      int _7540 = (int)0;
      int _7541 = (int)((shape)->size(0));
      for (int _1808 = _7540; _1808 < _7541; ++_1808)
      {
        {
          _1807 *= ((*shape)(_1808));
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1809 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1807)));
      _checked_ptr_1<long long> _ptr__1809(_1809 ? _1809->raw() : nullptr,_1809 ? _1809->size(0) : 0);
      int _7542 = (int)0;
      int _7543 = (int)((nativeidxs)->size(0));
      for (int _1810 = _7542; _1810 < _7543; ++_1810)
      {
        {
          _ptr__1809[((*sparsity)(_1810))] = ((*nativeidxs)(_1810));
        }
      }
      _pubthis->__mosek_2fusion_2BaseVariable__getModel()->setVariableValues(_1806,_1809,_1805);
    }
  }
}
void mosek::fusion::p_BaseVariable::dual_lu(int _1811,std::shared_ptr< monty::ndarray< double,1 > > _1812,bool _1813){
  _checked_ptr_1<double> _ptr__1812(_1812 ? _1812->raw() : nullptr, _1812 ? _1812->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      model->getVariableDuals(_1813,nativeidxs,_1812,_1811);
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _1814 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_pubthis->getSize())));
      _checked_ptr_1<long long> _ptr__1814(_1814 ? _1814->raw() : nullptr,_1814 ? _1814->size(0) : 0);
      int _7544 = (int)0;
      int _7545 = (int)((sparsity)->size(0));
      for (int _1815 = _7544; _1815 < _7545; ++_1815)
      {
        {
          _ptr__1814[((*sparsity)(_1815))] = ((*nativeidxs)(_1815));
        }
      }
      model->getVariableDuals(_1813,_1814,_1812,_1811);
    }
  }
}
void mosek::fusion::BaseVariable :: values(int _1816,std::shared_ptr< monty::ndarray< double,1 > > _1817,bool _1818) { mosek::fusion::p_BaseVariable::_get_impl(this)->values(_1816,_1817,_1818); }void mosek::fusion::p_BaseVariable::values(int _1816,std::shared_ptr< monty::ndarray< double,1 > > _1817,bool _1818){
  _checked_ptr_1<double> _ptr__1817(_1817 ? _1817->raw() : nullptr, _1817 ? _1817->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      model->getVariableValues(_1818,nativeidxs,_1817,_1816);
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _1819 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_pubthis->getSize())));
      _checked_ptr_1<long long> _ptr__1819(_1819 ? _1819->raw() : nullptr,_1819 ? _1819->size(0) : 0);
      int _7546 = (int)0;
      int _7547 = (int)((sparsity)->size(0));
      for (int _1820 = _7546; _1820 < _7547; ++_1820)
      {
        {
          _ptr__1819[((*sparsity)(_1820))] = ((*nativeidxs)(_1820));
        }
      }
      model->getVariableValues(_1818,_1819,_1817,_1816);
    }
  }
}
void mosek::fusion::BaseVariable :: make_continuous() { mosek::fusion::p_BaseVariable::_get_impl(this)->make_continuous(); }void mosek::fusion::p_BaseVariable::make_continuous(){
  mosek::fusion::p_Model::_get_impl(_pubthis->__mosek_2fusion_2BaseVariable__getModel().get())->make_continuous(nativeidxs);
}
void mosek::fusion::BaseVariable :: make_integer() { mosek::fusion::p_BaseVariable::_get_impl(this)->make_integer(); }void mosek::fusion::p_BaseVariable::make_integer(){
  mosek::fusion::p_Model::_get_impl(_pubthis->__mosek_2fusion_2BaseVariable__getModel().get())->make_integer(nativeidxs);
}
void mosek::fusion::p_BaseVariable::destroy(){sparsity.reset();nativeidxs.reset();model.reset();shape.reset();}void mosek::fusion::BaseVariable::destroy() { mosek::fusion::p_BaseVariable::_get_impl(this)->destroy(); }monty::rc_ptr< mosek::fusion::Model > mosek::fusion::Variable::getModel() { return __mosek_2fusion_2Variable__getModel(); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::reshape(int _1828,int _1829,int _1830) { return __mosek_2fusion_2Variable__reshape(_1828,_1829,_1830); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::reshape(int _1831,int _1832) { return __mosek_2fusion_2Variable__reshape(_1831,_1832); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::reshape(int _1833) { return __mosek_2fusion_2Variable__reshape(_1833); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::reshape(std::shared_ptr< monty::ndarray< int,1 > > _1834) { return __mosek_2fusion_2Variable__reshape(_1834); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::transpose() { return __mosek_2fusion_2Variable__transpose(); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::pick(std::shared_ptr< monty::ndarray< int,1 > > _1840,std::shared_ptr< monty::ndarray< int,1 > > _1841,std::shared_ptr< monty::ndarray< int,1 > > _1842) { return __mosek_2fusion_2Variable__pick(_1840,_1841,_1842); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::pick(std::shared_ptr< monty::ndarray< int,1 > > _1843,std::shared_ptr< monty::ndarray< int,1 > > _1844) { return __mosek_2fusion_2Variable__pick(_1843,_1844); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int,2 > > _1845) { return __mosek_2fusion_2Variable__pick(_1845); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::pick(std::shared_ptr< monty::ndarray< int,2 > > _1845) { return __mosek_2fusion_2Variable__pick(_1845); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int,1 > > _1846) { return __mosek_2fusion_2Variable__pick(_1846); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::pick(std::shared_ptr< monty::ndarray< int,1 > > _1846) { return __mosek_2fusion_2Variable__pick(_1846); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::antidiag() { return __mosek_2fusion_2Variable__antidiag(); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::antidiag(int _1847) { return __mosek_2fusion_2Variable__antidiag(_1847); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::diag() { return __mosek_2fusion_2Variable__diag(); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::diag(int _1848) { return __mosek_2fusion_2Variable__diag(_1848); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__index(std::shared_ptr< monty::ndarray< int,1 > > _1849) { return __mosek_2fusion_2Variable__index(_1849); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::index(std::shared_ptr< monty::ndarray< int,1 > > _1849) { return __mosek_2fusion_2Variable__index(_1849); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::index(int _1850,int _1851,int _1852) { return __mosek_2fusion_2Variable__index(_1850,_1851,_1852); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::index(int _1853,int _1854) { return __mosek_2fusion_2Variable__index(_1853,_1854); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__index(int _1855) { return __mosek_2fusion_2Variable__index(_1855); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::index(int _1855) { return __mosek_2fusion_2Variable__index(_1855); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__slice(std::shared_ptr< monty::ndarray< int,1 > > _1856,std::shared_ptr< monty::ndarray< int,1 > > _1857) { return __mosek_2fusion_2Variable__slice(_1856,_1857); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::slice(std::shared_ptr< monty::ndarray< int,1 > > _1856,std::shared_ptr< monty::ndarray< int,1 > > _1857) { return __mosek_2fusion_2Variable__slice(_1856,_1857); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__slice(int _1858,int _1859) { return __mosek_2fusion_2Variable__slice(_1858,_1859); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::slice(int _1858,int _1859) { return __mosek_2fusion_2Variable__slice(_1858,_1859); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::asExpr() { return __mosek_2fusion_2Variable__asExpr(); }
mosek::fusion::Var::Var(mosek::fusion::p_Var *_impl) : _impl(_impl) { /*std::cout << "Var() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Var::~Var() { delete _impl; _impl = nullptr; }mosek::fusion::p_Var::p_Var  (::mosek::fusion::Var * _pubthis) :     _pubthis(_pubthis){}monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::empty  ( std::shared_ptr< monty::ndarray< int,1 > > _1860) { return mosek::fusion::p_Var::empty(_1860); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::empty(std::shared_ptr< monty::ndarray< int,1 > > _1860){
  _checked_ptr_1<int> _ptr__1860(_1860 ? _1860->raw() : nullptr, _1860 ? _1860->size(0) : 0);
  int _7548 = (int)0;
  int _7549 = (int)((_1860)->size(0));
  for (int _1861 = _7548; _1861 < _7549; ++_1861)
  {
    {
      if ((_ptr__1860[_1861] < (int)0))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid shape"));
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_NilVariable::_new_NilVariable(_1860)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::compress  ( monty::rc_ptr< ::mosek::fusion::Variable > _1862) { return mosek::fusion::p_Var::compress(_1862); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::compress(monty::rc_ptr< ::mosek::fusion::Variable > _1862){
  std::shared_ptr< monty::ndarray< int,1 > > _1863 = _1862->getShape();
  _checked_ptr_1<int> _ptr__1863(_1863 ? _1863->raw() : nullptr,_1863 ? _1863->size(0) : 0);
  int _1864 = (int)((_1863)->size(0));
  int _1865 = (int)0;
  int _7550 = (int)0;
  int _7551 = _1864;
  for (int _1866 = _7550; _1866 < _7551; ++_1866)
  {
    {
      if ((_ptr__1863[_1866] != (int)1))
      {
        {
          ++ _1865;
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _1867 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1865)));
  _checked_ptr_1<int> _ptr__1867(_1867 ? _1867->raw() : nullptr,_1867 ? _1867->size(0) : 0);
  {
    int _1868 = (int)0;
    int _7552 = (int)0;
    int _7553 = _1864;
    for (int _1869 = _7552; _1869 < _7553; ++_1869)
    {
      {
        if ((_ptr__1863[_1869] != (int)1))
        {
          {
            _ptr__1867[_1868] = _ptr__1863[_1869];
            ++ _1868;
          }
        }
        {}
      }
    }
  }
  return ::mosek::fusion::p_Var::reshape(_1862,_1867);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::reshape  ( monty::rc_ptr< ::mosek::fusion::Variable > _1870,    int _1871) { return mosek::fusion::p_Var::reshape(_1870,_1871); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::reshape(monty::rc_ptr< ::mosek::fusion::Variable > _1870,int _1871){
  return ::mosek::fusion::p_Var::reshape(_1870,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1871)}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::reshape  ( monty::rc_ptr< ::mosek::fusion::Variable > _1872,    int _1873,    int _1874) { return mosek::fusion::p_Var::reshape(_1872,_1873,_1874); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::reshape(monty::rc_ptr< ::mosek::fusion::Variable > _1872,int _1873,int _1874){
  return ::mosek::fusion::p_Var::reshape(_1872,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1873),(int)(_1874)}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::flatten  ( monty::rc_ptr< ::mosek::fusion::Variable > _1875) { return mosek::fusion::p_Var::flatten(_1875); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::flatten(monty::rc_ptr< ::mosek::fusion::Variable > _1875){
  return ::mosek::fusion::p_Var::reshape(_1875,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)::mosek::fusion::p_Set::size(_1875->getShape()))}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::reshape  ( monty::rc_ptr< ::mosek::fusion::Variable > _1876,    std::shared_ptr< monty::ndarray< int,1 > > _1877) { return mosek::fusion::p_Var::reshape(_1876,_1877); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::reshape(monty::rc_ptr< ::mosek::fusion::Variable > _1876,std::shared_ptr< monty::ndarray< int,1 > > _1877){
  _checked_ptr_1<int> _ptr__1877(_1877 ? _1877->raw() : nullptr, _1877 ? _1877->size(0) : 0);
  return _1876->__mosek_2fusion_2Variable__reshape(_1877);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::index_permute_(monty::rc_ptr< ::mosek::fusion::Variable > _1878,std::shared_ptr< monty::ndarray< int,1 > > _1879){
  _checked_ptr_1<int> _ptr__1879(_1879 ? _1879->raw() : nullptr, _1879 ? _1879->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1880;
  _checked_ptr_1<long long> _ptr__1880(_1880 ? _1880->raw() : nullptr,_1880 ? _1880->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1881;
  _checked_ptr_1<long long> _ptr__1881(_1881 ? _1881->raw() : nullptr,_1881 ? _1881->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1882 = _1878->getShape();
  _checked_ptr_1<int> _ptr__1882(_1882 ? _1882->raw() : nullptr,_1882 ? _1882->size(0) : 0);
  int _1883 = (int)((_1882)->size(0));
  int _1884 = (int)1;
  int _7554 = (int)0;
  int _7555 = _1883;
  for (int _1885 = _7554; _1885 < _7555; ++_1885)
  {
    {
      _1884 *= _ptr__1882[_1885];
    }
  }
  int _1886 = _1878->numInst();
  std::shared_ptr< monty::ndarray< long long,1 > > _1887 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1883)));
  _checked_ptr_1<long long> _ptr__1887(_1887 ? _1887->raw() : nullptr,_1887 ? _1887->size(0) : 0);
  _ptr__1887[(_1883 - (int)1)] = (int)1;
  int _7556 = (int)1;
  int _7557 = _1883;
  for (int _1888 = _7556; _1888 < _7557; ++_1888)
  {
    {
      _ptr__1887[((_1883 - _1888) - (int)1)] = safe_mul( _ptr__1887[(_1883 - _1888)],_ptr__1882[_ptr__1879[(_1883 - _1888)]] );
    }
  }
  if ((_1886 < _1884))
  {
    {
      _1880 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1886)));
      _ptr__1880.update(_1880 ? _1880->raw() : nullptr, _1880 ? _1880->size(0) : 0);
      _1881 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1886)));
      _ptr__1881.update(_1881 ? _1881->raw() : nullptr, _1881 ? _1881->size(0) : 0);
      _1878->inst((int)0,_1880,(int)0,_1881);
    }
  }
  else
  {
    {
      _1880 = nullptr;
      _ptr__1880.update(_1880 ? _1880->raw() : nullptr, _1880 ? _1880->size(0) : 0);
      _1881 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1886)));
      _ptr__1881.update(_1881 ? _1881->raw() : nullptr, _1881 ? _1881->size(0) : 0);
      _1878->inst((int)0,_1881);
    }
  }
  if ((NULL == _1880.get()))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _1889 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1886)));
      _checked_ptr_1<long long> _ptr__1889(_1889 ? _1889->raw() : nullptr,_1889 ? _1889->size(0) : 0);
      {
        std::shared_ptr< monty::ndarray< int,1 > > _1890 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1883)));
        _checked_ptr_1<int> _ptr__1890(_1890 ? _1890->raw() : nullptr,_1890 ? _1890->size(0) : 0);
        int _7558 = (int)0;
        int _7559 = _1886;
        for (int _1891 = _7558; _1891 < _7559; ++_1891)
        {
          {
            int _1892 = _1891;
            int _7560 = (int)0;
            int _7561 = _1883;
            for (int _1893 = _7560; _1893 < _7561; ++_1893)
            {
              {
                _ptr__1890[((_1883 - _1891) - (int)1)] = (_1892 % _ptr__1882[((_1883 - _1891) - (int)1)]);
                _1892 /= _ptr__1882[((_1883 - _1891) - (int)1)];
              }
            }
            int _1894 = (int)0;
            int _7562 = (int)0;
            int _7563 = _1883;
            for (int _1895 = _7562; _1895 < _7563; ++_1895)
            {
              {
                _1894 += (int)safe_mul( _ptr__1890[_ptr__1879[_1895]],_ptr__1887[_1895] );
              }
            }
            _ptr__1889[_1894] = _ptr__1881[_1891];
          }
        }
      }
      _1881 = _1889;
      _ptr__1881.update(_1881 ? _1881->raw() : nullptr, _1881 ? _1881->size(0) : 0);
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _1896 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1886)));
      _checked_ptr_1<long long> _ptr__1896(_1896 ? _1896->raw() : nullptr,_1896 ? _1896->size(0) : 0);
      {
        std::shared_ptr< monty::ndarray< int,1 > > _1897 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1883)));
        _checked_ptr_1<int> _ptr__1897(_1897 ? _1897->raw() : nullptr,_1897 ? _1897->size(0) : 0);
        int _7564 = (int)0;
        int _7565 = _1886;
        for (int _1898 = _7564; _1898 < _7565; ++_1898)
        {
          {
            int _1899 = _1898;
            int _7566 = (int)0;
            int _7567 = _1883;
            for (int _1900 = _7566; _1900 < _7567; ++_1900)
            {
              {
                _ptr__1897[((_1883 - _1898) - (int)1)] = (_1899 % _ptr__1882[((_1883 - _1898) - (int)1)]);
                _1899 /= _ptr__1882[((_1883 - _1898) - (int)1)];
              }
            }
            int _1901 = (int)0;
            int _7568 = (int)0;
            int _7569 = _1883;
            for (int _1902 = _7568; _1902 < _7569; ++_1902)
            {
              {
                _1901 += (int)safe_mul( _ptr__1897[_ptr__1879[_1902]],_ptr__1887[_1902] );
              }
            }
            _ptr__1896[_1898] = _1901;
          }
        }
      }
      std::vector<long long> _7570;
      for (int _1904 = (int)0, _7571 = _1886; _1904 < _7571 ; ++_1904)
      {
        _7570.push_back(_1904);
      }
      auto _7572 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7570.size()),_7570.begin(),_7570.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _1903 = _7572;
      _checked_ptr_1<long long> _ptr__1903(_1903 ? _1903->raw() : nullptr,_1903 ? _1903->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_1903,_1896,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_1886));
      std::vector<long long> _7573;
      for (int _1905 = (int)0, _7574 = _1886; _1905 < _7574 ; ++_1905)
      {
        _7573.push_back(_ptr__1880[_ptr__1903[_1905]]);
      }
      auto _7575 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7573.size()),_7573.begin(),_7573.end()));
      _1880 = _7575;
      _ptr__1880.update(_1880 ? _1880->raw() : nullptr, _1880 ? _1880->size(0) : 0);
      std::vector<long long> _7576;
      for (int _1906 = (int)0, _7577 = _1886; _1906 < _7577 ; ++_1906)
      {
        _7576.push_back(_ptr__1881[_ptr__1903[_1906]]);
      }
      auto _7578 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7576.size()),_7576.begin(),_7576.end()));
      _1881 = _7578;
      _ptr__1881.update(_1881 ? _1881->raw() : nullptr, _1881 ? _1881->size(0) : 0);
    }
  }
  std::vector<int> _7579;
  for (int _1907 = (int)0, _7580 = _1883; _1907 < _7580 ; ++_1907)
  {
    _7579.push_back(_ptr__1882[_ptr__1879[_1907]]);
  }
  auto _7581 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7579.size()),_7579.begin(),_7579.end()));
  return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_1878->__mosek_2fusion_2Variable__getModel(),_7581,_1880,_1881)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::hrepeat  ( monty::rc_ptr< ::mosek::fusion::Variable > _1908,    int _1909) { return mosek::fusion::p_Var::hrepeat(_1908,_1909); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::hrepeat(monty::rc_ptr< ::mosek::fusion::Variable > _1908,int _1909){
  return ::mosek::fusion::p_Var::drepeat(_1908,(int)1,_1909);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::vrepeat  ( monty::rc_ptr< ::mosek::fusion::Variable > _1910,    int _1911) { return mosek::fusion::p_Var::vrepeat(_1910,_1911); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::vrepeat(monty::rc_ptr< ::mosek::fusion::Variable > _1910,int _1911){
  return ::mosek::fusion::p_Var::drepeat(_1910,(int)0,_1911);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::repeat  ( monty::rc_ptr< ::mosek::fusion::Variable > _1912,    int _1913) { return mosek::fusion::p_Var::repeat(_1912,_1913); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::repeat(monty::rc_ptr< ::mosek::fusion::Variable > _1912,int _1913){
  return ::mosek::fusion::p_Var::drepeat(_1912,(int)0,_1913);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::repeat  ( monty::rc_ptr< ::mosek::fusion::Variable > _1914,    int _1915,    int _1916) { return mosek::fusion::p_Var::repeat(_1914,_1915,_1916); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::repeat(monty::rc_ptr< ::mosek::fusion::Variable > _1914,int _1915,int _1916){
  return ::mosek::fusion::p_Var::drepeat(_1914,_1915,_1916);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::drepeat(monty::rc_ptr< ::mosek::fusion::Variable > _1917,int _1918,int _1919){
  if ((_1919 < (int)0))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Cannot repeat less than 0 times"));
    }
  }
  else if((_1919 == (int)0))
  {
    {
      return (::mosek::fusion::p_NilVariable::_new_NilVariable()).as<::mosek::fusion::Variable>();
    }
  }
  else if((_1919 == (int)1))
  {
    {
      return _1917;
    }
  }
  else
  {
    {
      monty::rc_ptr< ::mosek::fusion::Model > _1920 = _1917->__mosek_2fusion_2Variable__getModel();
      std::shared_ptr< monty::ndarray< int,1 > > _1921 = _1917->getShape();
      _checked_ptr_1<int> _ptr__1921(_1921 ? _1921->raw() : nullptr,_1921 ? _1921->size(0) : 0);
      int _1922 = (int)((_1921)->size(0));
      if (((_1918 < (int)0) || (_1918 > _1922)))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid stacking dimension"));
        }
      }
      {}
      long long _1923 = ::mosek::fusion::p_Set::size(_1921);
      int _1924 = _1917->numInst();
      int _1925 = safe_mul( _1924,_1919 );
      int _1926 = (int)1;
      int _7582 = (int)0;
      int _7583 = _1918;
      for (int _1927 = _7582; _1927 < _7583; ++_1927)
      {
        {
          _1926 *= _ptr__1921[_1927];
        }
      }
      int _7584;
      bool _7585 = (_1918 < _1922);
      if (_7585)
      {
        _7584 = _ptr__1921[_1918];
      }
      else
      {
        _7584 = (int)1;
      }
      int _1928 = _7584;
      int _1929 = safe_mul( _1928,_1919 );
      int _1930 = (int)1;
      int _7586 = safe_add( _1918,(int)1 );
      int _7587 = _1922;
      for (int _1931 = _7586; _1931 < _7587; ++_1931)
      {
        {
          _1930 *= _ptr__1921[_1931];
        }
      }
      int _7588;
      bool _7589 = (_1918 < _1922);
      if (_7589)
      {
        _7588 = _1922;
      }
      else
      {
        _7588 = safe_add( _1918,(int)1 );
      }
      int _1932 = _7588;
      std::shared_ptr< monty::ndarray< int,1 > > _1933 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1932)));
      _checked_ptr_1<int> _ptr__1933(_1933 ? _1933->raw() : nullptr,_1933 ? _1933->size(0) : 0);
      int _7590 = (int)0;
      int _7591 = _1922;
      for (int _1934 = _7590; _1934 < _7591; ++_1934)
      {
        {
          _ptr__1933[_1934] = _ptr__1921[_1934];
        }
      }
      int _7592 = _1922;
      int _7593 = _1932;
      for (int _1935 = _7592; _1935 < _7593; ++_1935)
      {
        {
          _ptr__1933[_1935] = (int)1;
        }
      }
      _ptr__1933[_1918] = _1929;
      if ((_1924 < _1923))
      {
        {
          std::shared_ptr< monty::ndarray< long long,1 > > _1936 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1924)));
          _checked_ptr_1<long long> _ptr__1936(_1936 ? _1936->raw() : nullptr,_1936 ? _1936->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _1937 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1924)));
          _checked_ptr_1<long long> _ptr__1937(_1937 ? _1937->raw() : nullptr,_1937 ? _1937->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _1938 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1925)));
          _checked_ptr_1<long long> _ptr__1938(_1938 ? _1938->raw() : nullptr,_1938 ? _1938->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _1939 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1925)));
          _checked_ptr_1<long long> _ptr__1939(_1939 ? _1939->raw() : nullptr,_1939 ? _1939->size(0) : 0);
          _1917->inst((int)0,_1937,(int)0,_1936);
          {
            int _1940 = safe_mul( _1929,_1930 );
            int _1941 = safe_mul( _1928,_1930 );
            int _1942 = _1930;
            if ((_1918 == (int)0))
            {
              {
                int _1943 = (int)0;
                int _7594 = (int)0;
                int _7595 = _1919;
                for (int _1944 = _7594; _1944 < _7595; ++_1944)
                {
                  {
                    int _7596 = (int)0;
                    int _7597 = _1924;
                    for (int _1945 = _7596; _1945 < _7597; ++_1945)
                    {
                      {
                        _ptr__1939[_1943] = safe_add( _ptr__1937[_1945],safe_mul( _1944,_1923 ) );
                        _ptr__1938[_1943] = _ptr__1936[_1945];
                        ++ _1943;
                      }
                    }
                  }
                }
                return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_1920,_1933,_1939,_1938)).as<::mosek::fusion::Variable>();
              }
            }
            else if((_1918 >= _1922))
            {
              {
                int _1946 = (int)0;
                int _7598 = (int)0;
                int _7599 = _1924;
                for (int _1947 = _7598; _1947 < _7599; ++_1947)
                {
                  {
                    int _7600 = (int)0;
                    int _7601 = _1919;
                    for (int _1948 = _7600; _1948 < _7601; ++_1948)
                    {
                      {
                        _ptr__1939[_1946] = safe_add( safe_mul( _ptr__1937[_1947],_1919 ),_1948 );
                        _ptr__1938[_1946] = _ptr__1936[_1947];
                        ++ _1946;
                      }
                    }
                  }
                }
                return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_1920,_1933,_1939,_1938)).as<::mosek::fusion::Variable>();
              }
            }
            else
            {
              {
                int _1949 = (int)0;
                int _7602 = (int)0;
                int _7603 = _1924;
                for (int _1950 = _7602; _1950 < _7603; ++_1950)
                {
                  {
                    long long _1951 = (_ptr__1937[_1950] / _1941);
                    long long _1952 = ((_ptr__1937[_1950] / _1942) % _1928);
                    long long _1953 = (_ptr__1937[_1950] % _1930);
                    int _7604 = (int)0;
                    int _7605 = _1919;
                    for (int _1954 = _7604; _1954 < _7605; ++_1954)
                    {
                      {
                        _ptr__1939[_1949] = safe_add( safe_add( safe_mul( _1951,_1940 ),safe_mul( safe_add( _1952,safe_mul( _1928,_1954 ) ),_1930 ) ),_1953 );
                        _ptr__1938[_1949] = _ptr__1936[_1950];
                        ++ _1949;
                      }
                    }
                  }
                }
                int _1955 = (int)1;
                int _7606 = (int)0;
                int _7607 = _1932;
                for (int _1956 = _7606; _1956 < _7607; ++_1956)
                {
                  {
                    if ((_1955 < _ptr__1933[_1956]))
                    {
                      {
                        _1955 = _ptr__1933[_1956];
                      }
                    }
                    {}
                  }
                }
                std::shared_ptr< monty::ndarray< int,1 > > _1957 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1925)));
                _checked_ptr_1<int> _ptr__1957(_1957 ? _1957->raw() : nullptr,_1957 ? _1957->size(0) : 0);
                std::shared_ptr< monty::ndarray< int,1 > > _1958 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1925)));
                _checked_ptr_1<int> _ptr__1958(_1958 ? _1958->raw() : nullptr,_1958 ? _1958->size(0) : 0);
                {
                  std::shared_ptr< monty::ndarray< int,1 > > _1959 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _1955,(int)1 ))));
                  _checked_ptr_1<int> _ptr__1959(_1959 ? _1959->raw() : nullptr,_1959 ? _1959->size(0) : 0);
                  std::shared_ptr< monty::ndarray< long long,1 > > _1960 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1932)));
                  _checked_ptr_1<long long> _ptr__1960(_1960 ? _1960->raw() : nullptr,_1960 ? _1960->size(0) : 0);
                  _ptr__1960[(_1932 - (int)1)] = (int)1;
                  int _7608 = (int)1;
                  int _7609 = _1932;
                  for (int _1961 = _7608; _1961 < _7609; ++_1961)
                  {
                    {
                      _ptr__1960[((_1932 - _1961) - (int)1)] = safe_mul( _ptr__1960[(_1932 - _1961)],_ptr__1933[(_1932 - _1961)] );
                    }
                  }
                  int _7610 = (int)0;
                  int _7611 = _1925;
                  for (int _1962 = _7610; _1962 < _7611; ++_1962)
                  {
                    {
                      _ptr__1957[_1962] = _1962;
                    }
                  }
                  int _7612 = (int)0;
                  int _7613 = _1932;
                  for (int _1963 = _7612; _1963 < _7613; ++_1963)
                  {
                    {
                      int _1964 = ((_1932 - _1963) - (int)1);
                      int _7614 = (int)0;
                      int _7615 = safe_add( _ptr__1933[_1964],(int)1 );
                      for (int _1965 = _7614; _1965 < _7615; ++_1965)
                      {
                        {
                          _ptr__1959[_1965] = (int)0;
                        }
                      }
                      int _7616 = (int)0;
                      int _7617 = _1925;
                      for (int _1966 = _7616; _1966 < _7617; ++_1966)
                      {
                        {
                          ++ _ptr__1959[safe_add( ((_ptr__1939[_1966] / _ptr__1960[_1964]) % _ptr__1933[_1964]),(int)1 )];
                        }
                      }
                      int _7618 = (int)0;
                      int _7619 = _ptr__1933[_1964];
                      for (int _1967 = _7618; _1967 < _7619; ++_1967)
                      {
                        {
                          _ptr__1959[safe_add( _1967,(int)1 )] += _ptr__1959[_1967];
                        }
                      }
                      int _7620 = (int)0;
                      int _7621 = _1925;
                      for (int _1968 = _7620; _1968 < _7621; ++_1968)
                      {
                        {
                          int _1969 = _ptr__1957[_1968];
                          long long _1970 = ((_ptr__1939[_1969] / _ptr__1960[_1964]) % _ptr__1933[_1964]);
                          _ptr__1958[_ptr__1959[_1970]] = _1969;
                          ++ _ptr__1959[_1970];
                        }
                      }
                      std::shared_ptr< monty::ndarray< int,1 > > _1971 = _1957;
                      _checked_ptr_1<int> _ptr__1971(_1971 ? _1971->raw() : nullptr,_1971 ? _1971->size(0) : 0);
                      _1957 = _1958;
                      _ptr__1957.update(_1957 ? _1957->raw() : nullptr, _1957 ? _1957->size(0) : 0);
                      _1958 = _1971;
                      _ptr__1958.update(_1958 ? _1958->raw() : nullptr, _1958 ? _1958->size(0) : 0);
                    }
                  }
                }
                std::vector<long long> _7622;
                for (int _1972 = (int)0, _7623 = _1925; _1972 < _7623 ; ++_1972)
                {
                  _7622.push_back(_ptr__1939[_ptr__1957[_1972]]);
                }
                auto _7624 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7622.size()),_7622.begin(),_7622.end()));
                std::vector<long long> _7625;
                for (int _1973 = (int)0, _7626 = _1925; _1973 < _7626 ; ++_1973)
                {
                  _7625.push_back(_ptr__1938[_ptr__1957[_1973]]);
                }
                auto _7627 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7625.size()),_7625.begin(),_7625.end()));
                return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_1920,_1933,_7624,_7627)).as<::mosek::fusion::Variable>();
              }
            }
          }
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< long long,1 > > _1974 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1924)));
          _checked_ptr_1<long long> _ptr__1974(_1974 ? _1974->raw() : nullptr,_1974 ? _1974->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _1975 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_mul( _1924,_1919 ))));
          _checked_ptr_1<long long> _ptr__1975(_1975 ? _1975->raw() : nullptr,_1975 ? _1975->size(0) : 0);
          _1917->inst((int)0,_1974);
          int _1976 = safe_mul( _1929,_1930 );
          int _1977 = _1930;
          int _1978 = (int)0;
          int _7628 = (int)0;
          int _7629 = _1926;
          for (int _1979 = _7628; _1979 < _7629; ++_1979)
          {
            {
              int _7630 = (int)0;
              int _7631 = _1928;
              for (int _1980 = _7630; _1980 < _7631; ++_1980)
              {
                {
                  int _7632 = (int)0;
                  int _7633 = _1930;
                  for (int _1981 = _7632; _1981 < _7633; ++_1981)
                  {
                    {
                      int _7634 = (int)0;
                      int _7635 = _1919;
                      for (int _1982 = _7634; _1982 < _7635; ++_1982)
                      {
                        {
                          _ptr__1975[safe_add( safe_add( safe_mul( _1979,_1976 ),safe_mul( safe_add( _1980,safe_mul( _1982,_1928 ) ),_1977 ) ),_1981 )] = _ptr__1974[_1978];
                        }
                      }
                      ++ _1978;
                    }
                  }
                }
              }
            }
          }
          return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_1920,_1933,nullptr,_1975)).as<::mosek::fusion::Variable>();
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack  ( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >,1 > > _1983) { return mosek::fusion::p_Var::stack(_1983); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack(std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >,1 > > _1983){
  std::vector<monty::rc_ptr< ::mosek::fusion::Variable >> _7636;
  for (int _1984 = (int)0, _7637 = (int)((_1983)->size(0)); _1984 < _7637 ; ++_1984)
  {
    _7636.push_back(::mosek::fusion::p_Var::dstack(((*_1983)(_1984)),(int)1));
  }
  auto _7638 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(_7636.size()),_7636.begin(),_7636.end()));
  return ::mosek::fusion::p_Var::dstack(_7638,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _1985,    monty::rc_ptr< ::mosek::fusion::Variable > _1986,    monty::rc_ptr< ::mosek::fusion::Variable > _1987) { return mosek::fusion::p_Var::vstack(_1985,_1986,_1987); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::vstack(monty::rc_ptr< ::mosek::fusion::Variable > _1985,monty::rc_ptr< ::mosek::fusion::Variable > _1986,monty::rc_ptr< ::mosek::fusion::Variable > _1987){
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_1985.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_1986.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_1987.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _1988,    monty::rc_ptr< ::mosek::fusion::Variable > _1989) { return mosek::fusion::p_Var::vstack(_1988,_1989); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::vstack(monty::rc_ptr< ::mosek::fusion::Variable > _1988,monty::rc_ptr< ::mosek::fusion::Variable > _1989){
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_1988.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_1989.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::vstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _1990) { return mosek::fusion::p_Var::vstack(_1990); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::vstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _1990){
  return ::mosek::fusion::p_Var::dstack(_1990,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _1991,    monty::rc_ptr< ::mosek::fusion::Variable > _1992,    monty::rc_ptr< ::mosek::fusion::Variable > _1993) { return mosek::fusion::p_Var::hstack(_1991,_1992,_1993); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::hstack(monty::rc_ptr< ::mosek::fusion::Variable > _1991,monty::rc_ptr< ::mosek::fusion::Variable > _1992,monty::rc_ptr< ::mosek::fusion::Variable > _1993){
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_1991.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_1992.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_1993.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _1994,    monty::rc_ptr< ::mosek::fusion::Variable > _1995) { return mosek::fusion::p_Var::hstack(_1994,_1995); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::hstack(monty::rc_ptr< ::mosek::fusion::Variable > _1994,monty::rc_ptr< ::mosek::fusion::Variable > _1995){
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_1994.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_1995.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::hstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _1996) { return mosek::fusion::p_Var::hstack(_1996); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::hstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _1996){
  return ::mosek::fusion::p_Var::dstack(_1996,(int)1);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack  ( monty::rc_ptr< ::mosek::fusion::Variable > _1997,    monty::rc_ptr< ::mosek::fusion::Variable > _1998,    monty::rc_ptr< ::mosek::fusion::Variable > _1999,    int _2000) { return mosek::fusion::p_Var::stack(_1997,_1998,_1999,_2000); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack(monty::rc_ptr< ::mosek::fusion::Variable > _1997,monty::rc_ptr< ::mosek::fusion::Variable > _1998,monty::rc_ptr< ::mosek::fusion::Variable > _1999,int _2000){
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_1997.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_1998.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_1999.get())}),_2000);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack  ( monty::rc_ptr< ::mosek::fusion::Variable > _2001,    monty::rc_ptr< ::mosek::fusion::Variable > _2002,    int _2003) { return mosek::fusion::p_Var::stack(_2001,_2002,_2003); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack(monty::rc_ptr< ::mosek::fusion::Variable > _2001,monty::rc_ptr< ::mosek::fusion::Variable > _2002,int _2003){
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_2001.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2002.get())}),_2003);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2004,    int _2005) { return mosek::fusion::p_Var::stack(_2004,_2005); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2004,int _2005){
  int _2006 = _2005;
  int _7639 = (int)0;
  int _7640 = (int)((_2004)->size(0));
  for (int _2007 = _7639; _2007 < _7640; ++_2007)
  {
    {
      if ((_2006 < ((*_2004)(_2007))->getND()))
      {
        {
          _2006 = ((*_2004)(_2007))->getND();
        }
      }
      {}
    }
  }
  return ::mosek::fusion::p_Var::dstack(_2004,_2005);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::promote  ( monty::rc_ptr< ::mosek::fusion::Variable > _2008,    int _2009) { return mosek::fusion::p_Var::promote(_2008,_2009); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::promote(monty::rc_ptr< ::mosek::fusion::Variable > _2008,int _2009){
  if ((_2009 > _2008->getND()))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _2010 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2009)));
      _checked_ptr_1<int> _ptr__2010(_2010 ? _2010->raw() : nullptr,_2010 ? _2010->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2011 = _2008->getShape();
      _checked_ptr_1<int> _ptr__2011(_2011 ? _2011->raw() : nullptr,_2011 ? _2011->size(0) : 0);
      int _7641 = (int)0;
      int _7642 = (int)((_2011)->size(0));
      for (int _2012 = _7641; _2012 < _7642; ++_2012)
      {
        {
          _ptr__2010[_2012] = _ptr__2011[_2012];
        }
      }
      int _7643 = (int)((_2011)->size(0));
      int _7644 = _2009;
      for (int _2013 = _7643; _2013 < _7644; ++_2013)
      {
        {
          _ptr__2010[_2013] = (int)1;
        }
      }
      return _2008->__mosek_2fusion_2Variable__reshape(_2010);
    }
  }
  else
  {
    {
      return _2008;
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2014,int _2015){
  if ((_2015 < (int)0))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid stacking dimension"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::Model > _2016 = nullptr;
  {
    int _7645 = (int)0;
    int _7646 = (int)((_2014)->size(0));
    for (int _2017 = _7645; _2017 < _7646; ++_2017)
    {
      {
        if ((NULL == _2016.get()))
        {
          {
            _2016 = ((*_2014)(_2017))->__mosek_2fusion_2Variable__getModel();
          }
        }
        else if(((NULL != ((*_2014)(_2017))->__mosek_2fusion_2Variable__getModel().get()) && (((*_2014)(_2017))->__mosek_2fusion_2Variable__getModel() != _2016)))
        {
          {
            monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2018 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
            std::string _7647;
            bool _7648 = ((int)((mosek::fusion::p_Model::_get_impl(_2016.get())->getName()).size()) > (int)0);
            if (_7648)
            {
              _7647 = mosek::fusion::p_Model::_get_impl(_2016.get())->getName();
            }
            else
            {
              _7647 = std::string ("?");
            }
            std::string _2019 = _7647;
            std::string _7649;
            bool _7650 = ((int)((mosek::fusion::p_Model::_get_impl(((*_2014)(_2017))->__mosek_2fusion_2Variable__getModel().get())->getName()).size()) > (int)0);
            if (_7650)
            {
              _7649 = mosek::fusion::p_Model::_get_impl(((*_2014)(_2017))->__mosek_2fusion_2Variable__getModel().get())->getName();
            }
            else
            {
              _7649 = std::string ("?");
            }
            std::string _2020 = _7649;
            _2018->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Variables belong to different models: '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_2019)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("' and '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_2020)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"));
            throw ::mosek::fusion::ModelError(_2018->toString());
          }
        }
        {}
      }
    }
  }
  if (((int)((_2014)->size(0)) == (int)0))
  {
    {
      return (::mosek::fusion::p_NilVariable::_new_NilVariable()).as<::mosek::fusion::Variable>();
    }
  }
  else if(((int)((_2014)->size(0)) == (int)1))
  {
    {
      return ((*_2014)((int)1));
    }
  }
  else
  {
    {
      int _2021 = (int)((_2014)->size(0));
      std::vector<int> _7651;
      for (int _2023 = (int)0, _7652 = _2021; _2023 < _7652 ; ++_2023)
      {
        _7651.push_back(((*_2014)(_2023))->numInst());
      }
      auto _7653 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7651.size()),_7651.begin(),_7651.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _2022 = _7653;
      _checked_ptr_1<int> _ptr__2022(_2022 ? _2022->raw() : nullptr,_2022 ? _2022->size(0) : 0);
      std::vector<std::shared_ptr< monty::ndarray< int,1 > >> _7654;
      for (int _2025 = (int)0, _7655 = _2021; _2025 < _7655 ; ++_2025)
      {
        _7654.push_back(((*_2014)(_2025))->getShape());
      }
      auto _7656 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 >(monty::shape(_7654.size()),_7654.begin(),_7654.end()));
      std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _2024 = _7656;
      std::vector<int> _7657;
      for (int _2027 = (int)0, _7658 = _2021; _2027 < _7658 ; ++_2027)
      {
        _7657.push_back((int)((((*_2024)(_2027)))->size(0)));
      }
      auto _7659 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7657.size()),_7657.begin(),_7657.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _2026 = _7659;
      _checked_ptr_1<int> _ptr__2026(_2026 ? _2026->raw() : nullptr,_2026 ? _2026->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2028 = ((*_2024)((int)0));
      _checked_ptr_1<int> _ptr__2028(_2028 ? _2028->raw() : nullptr,_2028 ? _2028->size(0) : 0);
      int _2029 = _ptr__2026[(int)0];
      int _2030 = (int)0;
      int _7660 = (int)0;
      int _7661 = _2021;
      for (int _2031 = _7660; _2031 < _7661; ++_2031)
      {
        {
          _2030 += _ptr__2022[_2031];
        }
      }
      int _2032 = safe_add( _2015,(int)1 );
      int _7662 = (int)0;
      int _7663 = _2021;
      for (int _2033 = _7662; _2033 < _7663; ++_2033)
      {
        {
          if ((_2032 < _ptr__2026[_2033]))
          {
            {
              _2032 = _ptr__2026[_2033];
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _2034 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2032)));
      _checked_ptr_1<int> _ptr__2034(_2034 ? _2034->raw() : nullptr,_2034 ? _2034->size(0) : 0);
      int _7664 = (int)0;
      int _7665 = _2029;
      for (int _2035 = _7664; _2035 < _7665; ++_2035)
      {
        {
          _ptr__2034[_2035] = _ptr__2028[_2035];
        }
      }
      int _7666 = _2029;
      int _7667 = _2032;
      for (int _2036 = _7666; _2036 < _7667; ++_2036)
      {
        {
          _ptr__2034[_2036] = (int)1;
        }
      }
      _ptr__2034[_2015] = (int)0;
      int _7668 = (int)0;
      int _7669 = _2021;
      for (int _2037 = _7668; _2037 < _7669; ++_2037)
      {
        {
          int _7670;
          bool _7671 = ((int)((((*_2024)(_2037)))->size(0)) > _2015);
          if (_7671)
          {
            _7670 = ((*((*_2024)(_2037)))(_2015));
          }
          else
          {
            _7670 = (int)1;
          }
          _ptr__2034[_2015] += _7670;
        }
      }
      int _7672 = (int)0;
      int _7673 = _2021;
      for (int _2038 = _7672; _2038 < _7673; ++_2038)
      {
        {
          int _7674 = (int)0;
          int _7675 = (int)((((*_2024)(_2038)))->size(0));
          for (int _2039 = _7674; _2039 < _7675; ++_2039)
          {
            {
              if (((_2039 != _2015) && (((*((*_2024)(_2038)))(_2039)) != _ptr__2034[_2039])))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Variable dimensions do not match"));
                }
              }
              {}
            }
          }
          int _7676 = (int)((((*_2024)(_2038)))->size(0));
          int _7677 = _2032;
          for (int _2040 = _7676; _2040 < _7677; ++_2040)
          {
            {
              if (((_2040 != _2015) && ((int)1 != _ptr__2034[_2040])))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Variable dimensions do not match"));
                }
              }
              {}
            }
          }
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _2041 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2030)));
      _checked_ptr_1<long long> _ptr__2041(_2041 ? _2041->raw() : nullptr,_2041 ? _2041->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _2042 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2030)));
      _checked_ptr_1<long long> _ptr__2042(_2042 ? _2042->raw() : nullptr,_2042 ? _2042->size(0) : 0);
      std::vector<int> _7678;
      for (int _2044 = (int)0, _7679 = (int)((_2014)->size(0)); _2044 < _7679 ; ++_2044)
      {
        int _7680;
        bool _7681 = (_2015 < (int)((((*_2024)(_2044)))->size(0)));
        if (_7681)
        {
          _7680 = ((*((*_2024)(_2044)))(_2015));
        }
        else
        {
          _7680 = (int)1;
        }
        _7678.push_back(_7680);
      }
      auto _7682 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7678.size()),_7678.begin(),_7678.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _2043 = _7682;
      _checked_ptr_1<int> _ptr__2043(_2043 ? _2043->raw() : nullptr,_2043 ? _2043->size(0) : 0);
      int _2045 = (int)1;
      int _7683 = (int)0;
      int _7684 = _2015;
      for (int _2046 = _7683; _2046 < _7684; ++_2046)
      {
        {
          int _7685;
          bool _7686 = (_2046 < (int)((_2028)->size(0)));
          if (_7686)
          {
            _7685 = _ptr__2028[_2046];
          }
          else
          {
            _7685 = (int)1;
          }
          _2045 *= _7685;
        }
      }
      int _2047 = (int)0;
      int _7687 = (int)0;
      int _7688 = _2021;
      for (int _2048 = _7687; _2048 < _7688; ++_2048)
      {
        {
          _2047 += _ptr__2043[_2048];
        }
      }
      int _2049 = (int)1;
      int _7689 = safe_add( _2015,(int)1 );
      int _7690 = (int)((_2028)->size(0));
      for (int _2050 = _7689; _2050 < _7690; ++_2050)
      {
        {
          _2049 *= _ptr__2028[_2050];
        }
      }
      if ((_2045 == (int)1))
      {
        {
          int _2051 = (int)0;
          long long _2052 = (int)0;
          int _7691 = (int)0;
          int _7692 = _2021;
          for (int _2053 = _7691; _2053 < _7692; ++_2053)
          {
            {
              ((*_2014)(_2053))->inst(_2051,_2042,_2051,_2041);
              int _7693 = (int)0;
              int _7694 = _ptr__2022[_2053];
              for (int _2054 = _7693; _2054 < _7694; ++_2054)
              {
                {
                  _ptr__2042[_2051] += _2052;
                  ++ _2051;
                }
              }
              _2052 += ::mosek::fusion::p_Set::size(((*_2024)(_2053)));
            }
          }
          std::shared_ptr< monty::ndarray< long long,1 > > _7695;
          bool _7696 = (_2030 < safe_mul( safe_mul( _2045,_2047 ),_2049 ));
          if (_7696)
          {
            _7695 = _2042;
          }
          else
          {
            _7695 = nullptr;
          }
          return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2016,_2034,_7695,_2041)).as<::mosek::fusion::Variable>();
        }
      }
      else
      {
        {
          int _2055 = (int)0;
          int _7697 = (int)0;
          int _7698 = _2021;
          for (int _2056 = _7697; _2056 < _7698; ++_2056)
          {
            {
              _2055 += ((*_2014)(_2056))->inst(_2055,_2042,_2055,_2041);
            }
          }
          std::shared_ptr< monty::ndarray< int,1 > > _2057 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2030)));
          _checked_ptr_1<int> _ptr__2057(_2057 ? _2057->raw() : nullptr,_2057 ? _2057->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _2058 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2030)));
          _checked_ptr_1<int> _ptr__2058(_2058 ? _2058->raw() : nullptr,_2058 ? _2058->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _2059 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2021)));
          _checked_ptr_1<int> _ptr__2059(_2059 ? _2059->raw() : nullptr,_2059 ? _2059->size(0) : 0);
          int _7699 = (int)0;
          int _7700 = (_2021 - (int)1);
          for (int _2060 = _7699; _2060 < _7700; ++_2060)
          {
            {
              _ptr__2059[safe_add( _2060,(int)1 )] = safe_add( _ptr__2059[_2060],_ptr__2043[_2060] );
            }
          }
          int _7701 = (int)0;
          int _7702 = _2030;
          for (int _2061 = _7701; _2061 < _7702; ++_2061)
          {
            {
              _ptr__2057[_2061] = _2061;
            }
          }
          int _2062 = (int)0;
          int _7703 = (int)0;
          int _7704 = _2021;
          for (int _2063 = _7703; _2063 < _7704; ++_2063)
          {
            {
              int _7705 = (int)0;
              int _7706 = _ptr__2022[_2063];
              for (int _2064 = _7705; _2064 < _7706; ++_2064)
              {
                {
                  long long _2065 = (_ptr__2042[_2062] / safe_mul( _ptr__2043[_2063],_2049 ));
                  long long _2066 = ((_ptr__2042[_2062] / _2049) % _ptr__2043[_2063]);
                  long long _2067 = (_ptr__2042[_2062] % _2049);
                  _ptr__2042[_2062] = safe_add( safe_mul( safe_add( safe_add( safe_mul( _2065,_2047 ),_2066 ),_ptr__2059[_2063] ),_2049 ),_2067 );
                  ++ _2062;
                }
              }
            }
          }
          int _2068 = (int)1;
          int _7707 = (int)0;
          int _7708 = _2032;
          for (int _2069 = _7707; _2069 < _7708; ++_2069)
          {
            {
              int _7709;
              bool _7710 = (_2068 < _ptr__2034[_2069]);
              if (_7710)
              {
                _7709 = _ptr__2034[_2069];
              }
              else
              {
                _7709 = _2068;
              }
              _2068 = _7709;
            }
          }
          std::shared_ptr< monty::ndarray< long long,1 > > _2070 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2032)));
          _checked_ptr_1<long long> _ptr__2070(_2070 ? _2070->raw() : nullptr,_2070 ? _2070->size(0) : 0);
          _ptr__2070[(_2032 - (int)1)] = (int)1;
          int _7711 = (int)1;
          int _7712 = _2032;
          for (int _2071 = _7711; _2071 < _7712; ++_2071)
          {
            {
              _ptr__2070[((_2032 - _2071) - (int)1)] = safe_mul( _ptr__2070[(_2032 - _2071)],_ptr__2034[(_2032 - _2071)] );
            }
          }
          std::shared_ptr< monty::ndarray< int,1 > > _2072 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _2068,(int)1 ))));
          _checked_ptr_1<int> _ptr__2072(_2072 ? _2072->raw() : nullptr,_2072 ? _2072->size(0) : 0);
          int _7713 = (int)0;
          int _7714 = _2032;
          for (int _2073 = _7713; _2073 < _7714; ++_2073)
          {
            {
              int _2074 = ((_2032 - _2073) - (int)1);
              int _7715 = (int)0;
              int _7716 = safe_add( _ptr__2034[_2074],(int)1 );
              for (int _2075 = _7715; _2075 < _7716; ++_2075)
              {
                {
                  _ptr__2072[_2075] = (int)0;
                }
              }
              int _7717 = (int)0;
              int _7718 = _2030;
              for (int _2076 = _7717; _2076 < _7718; ++_2076)
              {
                {
                  ++ _ptr__2072[safe_add( ((_ptr__2042[_2076] / _ptr__2070[_2074]) % _ptr__2034[_2074]),(int)1 )];
                }
              }
              int _7719 = (int)0;
              int _7720 = _ptr__2034[_2074];
              for (int _2077 = _7719; _2077 < _7720; ++_2077)
              {
                {
                  _ptr__2072[safe_add( _2077,(int)1 )] += _ptr__2072[_2077];
                }
              }
              int _7721 = (int)0;
              int _7722 = _2030;
              for (int _2078 = _7721; _2078 < _7722; ++_2078)
              {
                {
                  int _2079 = _ptr__2057[_2078];
                  long long _2080 = ((_ptr__2042[_2079] / _ptr__2070[_2074]) % _ptr__2034[_2074]);
                  _ptr__2058[_ptr__2072[_2080]] = _2079;
                  ++ _ptr__2072[_2080];
                }
              }
              std::shared_ptr< monty::ndarray< int,1 > > _2081 = _2057;
              _checked_ptr_1<int> _ptr__2081(_2081 ? _2081->raw() : nullptr,_2081 ? _2081->size(0) : 0);
              _2057 = _2058;
              _ptr__2057.update(_2057 ? _2057->raw() : nullptr, _2057 ? _2057->size(0) : 0);
              _2058 = _2081;
              _ptr__2058.update(_2058 ? _2058->raw() : nullptr, _2058 ? _2058->size(0) : 0);
            }
          }
          std::shared_ptr< monty::ndarray< long long,1 > > _7723;
          bool _7724 = (_2030 < safe_mul( safe_mul( _2045,_2047 ),_2049 ));
          if (_7724)
          {
            std::vector<long long> _7725;
            for (int _2082 = (int)0, _7726 = _2030; _2082 < _7726 ; ++_2082)
            {
              _7725.push_back(_ptr__2042[_ptr__2057[_2082]]);
            }
            auto _7727 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7725.size()),_7725.begin(),_7725.end()));
            _7723 = _7727;
          }
          else
          {
            _7723 = nullptr;
          }
          std::vector<long long> _7728;
          for (int _2083 = (int)0, _7729 = _2030; _2083 < _7729 ; ++_2083)
          {
            _7728.push_back(_ptr__2041[_ptr__2057[_2083]]);
          }
          auto _7730 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7728.size()),_7728.begin(),_7728.end()));
          return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2016,_2034,_7723,_7730)).as<::mosek::fusion::Variable>();
        }
      }
    }
  }
}
void mosek::fusion::p_Var::destroy(){}void mosek::fusion::Var::destroy() { mosek::fusion::p_Var::_get_impl(this)->destroy(); }mosek::fusion::LinearPSDConstraint::LinearPSDConstraint(mosek::fusion::p_LinearPSDConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "LinearPSDConstraint()" << this << std::endl; */ }mosek::fusion::LinearPSDConstraint::~LinearPSDConstraint() {  /* std::cout << "~LinearPSDConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_LinearPSDConstraint::p_LinearPSDConstraint  (::mosek::fusion::LinearPSDConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::LinearPSDConstraint::t mosek::fusion::p_LinearPSDConstraint::_new_LinearPSDConstraint  (monty::rc_ptr< ::mosek::fusion::LinearPSDConstraint > _2084,    monty::rc_ptr< ::mosek::fusion::Model > _2085){ return new mosek::fusion::LinearPSDConstraint(_2084,_2085); }mosek::fusion::LinearPSDConstraint::LinearPSDConstraint  (monty::rc_ptr< ::mosek::fusion::LinearPSDConstraint > _2084,    monty::rc_ptr< ::mosek::fusion::Model > _2085) :    LinearPSDConstraint(new mosek::fusion::p_LinearPSDConstraint(this)){ mosek::fusion::p_LinearPSDConstraint::_get_impl(this)->_initialize(_2084,_2085); }void mosek::fusion::p_LinearPSDConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearPSDConstraint > _2084,    monty::rc_ptr< ::mosek::fusion::Model > _2085){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelConstraint::_initialize(_2084,_2085);
    conid = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2084)->conid;
    slackidxs = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2084)->slackidxs;
    nativeidxs = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2084)->nativeidxs;
    conedim = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2084)->conedim;
    shape = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2084)->shape;
  }
}mosek::fusion::LinearPSDConstraint::t mosek::fusion::p_LinearPSDConstraint::_new_LinearPSDConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2086,    const std::string &  _2087,    int _2088,    std::shared_ptr< monty::ndarray< int,1 > > _2089,    int _2090,    std::shared_ptr< monty::ndarray< int,1 > > _2091,    std::shared_ptr< monty::ndarray< long long,1 > > _2092){ return new mosek::fusion::LinearPSDConstraint(_2086,_2087,_2088,_2089,_2090,_2091,_2092); }mosek::fusion::LinearPSDConstraint::LinearPSDConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2086,    const std::string &  _2087,    int _2088,    std::shared_ptr< monty::ndarray< int,1 > > _2089,    int _2090,    std::shared_ptr< monty::ndarray< int,1 > > _2091,    std::shared_ptr< monty::ndarray< long long,1 > > _2092) :    LinearPSDConstraint(new mosek::fusion::p_LinearPSDConstraint(this)){ mosek::fusion::p_LinearPSDConstraint::_get_impl(this)->_initialize(_2086,_2087,_2088,_2089,_2090,_2091,_2092); }void mosek::fusion::p_LinearPSDConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2086,    const std::string &  _2087,    int _2088,    std::shared_ptr< monty::ndarray< int,1 > > _2089,    int _2090,    std::shared_ptr< monty::ndarray< int,1 > > _2091,    std::shared_ptr< monty::ndarray< long long,1 > > _2092){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2089(_2089 ? _2089->raw() : nullptr, _2089 ? _2089->size(0) : 0);
    _checked_ptr_1<int> _ptr__2091(_2091 ? _2091->raw() : nullptr, _2091 ? _2091->size(0) : 0);
    _checked_ptr_1<long long> _ptr__2092(_2092 ? _2092->raw() : nullptr, _2092 ? _2092->size(0) : 0);
    mosek::fusion::p_ModelConstraint::_initialize(_2086,_2087,_2089,_2091);
    mosek::fusion::p_LinearPSDConstraint::_get_impl(::mosek::fusion::LinearPSDConstraint::t(_pubthis))->conid = _2088;
    mosek::fusion::p_LinearPSDConstraint::_get_impl(::mosek::fusion::LinearPSDConstraint::t(_pubthis))->slackidxs = _2092;
    mosek::fusion::p_LinearPSDConstraint::_get_impl(::mosek::fusion::LinearPSDConstraint::t(_pubthis))->nativeidxs = _2091;
    mosek::fusion::p_LinearPSDConstraint::_get_impl(::mosek::fusion::LinearPSDConstraint::t(_pubthis))->conedim = _2090;
    mosek::fusion::p_LinearPSDConstraint::_get_impl(::mosek::fusion::LinearPSDConstraint::t(_pubthis))->shape = _2089;
  }
}void mosek::fusion::p_LinearPSDConstraint::domainToString(long long _2093,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2094){
  std::shared_ptr< monty::ndarray< int,1 > > _2095 = ::mosek::fusion::p_Set::idxtokey(shape,_2093);
  _checked_ptr_1<int> _ptr__2095(_2095 ? _2095->raw() : nullptr,_2095 ? _2095->size(0) : 0);
  _2094->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" : element ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__2095[(int)0]);
  int _7731 = (int)1;
  int _7732 = (int)((_2095)->size(0));
  for (int _2096 = _7731; _2096 < _7732; ++_2096)
  {
    {
      _2094->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__2095[_2096]);
    }
  }
  _2094->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") in a positive semi-definite cone of size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
  int _7733 = (int)1;
  int _7734 = (int)((_2095)->size(0));
  for (int _2097 = _7733; _2097 < _7734; ++_2097)
  {
    {
      _2094->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_2097)));
    }
  }
  _2094->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
}
monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_LinearPSDConstraint::__mosek_2fusion_2LinearPSDConstraint__clone(monty::rc_ptr< ::mosek::fusion::Model > _2098){
  return (::mosek::fusion::p_LinearPSDConstraint::_new_LinearPSDConstraint(::mosek::fusion::LinearPSDConstraint::t(_pubthis),_2098)).as<::mosek::fusion::ModelConstraint>();
}
void mosek::fusion::p_LinearPSDConstraint::destroy(){shape.reset();slackidxs.reset();nativeidxs.reset();}void mosek::fusion::LinearPSDConstraint::destroy() { mosek::fusion::p_LinearPSDConstraint::_get_impl(this)->destroy(); }mosek::fusion::PSDConstraint::PSDConstraint(mosek::fusion::p_PSDConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "PSDConstraint()" << this << std::endl; */ }mosek::fusion::PSDConstraint::~PSDConstraint() {  /* std::cout << "~PSDConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_PSDConstraint::p_PSDConstraint  (::mosek::fusion::PSDConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::PSDConstraint::t mosek::fusion::p_PSDConstraint::_new_PSDConstraint  (monty::rc_ptr< ::mosek::fusion::PSDConstraint > _2099,    monty::rc_ptr< ::mosek::fusion::Model > _2100){ return new mosek::fusion::PSDConstraint(_2099,_2100); }mosek::fusion::PSDConstraint::PSDConstraint  (monty::rc_ptr< ::mosek::fusion::PSDConstraint > _2099,    monty::rc_ptr< ::mosek::fusion::Model > _2100) :    PSDConstraint(new mosek::fusion::p_PSDConstraint(this)){ mosek::fusion::p_PSDConstraint::_get_impl(this)->_initialize(_2099,_2100); }void mosek::fusion::p_PSDConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::PSDConstraint > _2099,    monty::rc_ptr< ::mosek::fusion::Model > _2100){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelConstraint::_initialize(_2099,_2100);
    conid = mosek::fusion::p_PSDConstraint::_get_impl(_2099)->conid;
    name = mosek::fusion::p_PSDConstraint::_get_impl(_2099)->name;
    shape = mosek::fusion::p_PSDConstraint::_get_impl(_2099)->shape;
    slackidxs = mosek::fusion::p_PSDConstraint::_get_impl(_2099)->slackidxs;
    nativeidxs = mosek::fusion::p_PSDConstraint::_get_impl(_2099)->nativeidxs;
    names_flushed = mosek::fusion::p_PSDConstraint::_get_impl(_2099)->names_flushed;
    conedim0 = mosek::fusion::p_PSDConstraint::_get_impl(_2099)->conedim0;
    conedim1 = mosek::fusion::p_PSDConstraint::_get_impl(_2099)->conedim1;
  }
}mosek::fusion::PSDConstraint::t mosek::fusion::p_PSDConstraint::_new_PSDConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2101,    const std::string &  _2102,    int _2103,    std::shared_ptr< monty::ndarray< int,1 > > _2104,    int _2105,    int _2106,    std::shared_ptr< monty::ndarray< long long,1 > > _2107,    std::shared_ptr< monty::ndarray< int,1 > > _2108){ return new mosek::fusion::PSDConstraint(_2101,_2102,_2103,_2104,_2105,_2106,_2107,_2108); }mosek::fusion::PSDConstraint::PSDConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2101,    const std::string &  _2102,    int _2103,    std::shared_ptr< monty::ndarray< int,1 > > _2104,    int _2105,    int _2106,    std::shared_ptr< monty::ndarray< long long,1 > > _2107,    std::shared_ptr< monty::ndarray< int,1 > > _2108) :    PSDConstraint(new mosek::fusion::p_PSDConstraint(this)){ mosek::fusion::p_PSDConstraint::_get_impl(this)->_initialize(_2101,_2102,_2103,_2104,_2105,_2106,_2107,_2108); }void mosek::fusion::p_PSDConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2101,    const std::string &  _2102,    int _2103,    std::shared_ptr< monty::ndarray< int,1 > > _2104,    int _2105,    int _2106,    std::shared_ptr< monty::ndarray< long long,1 > > _2107,    std::shared_ptr< monty::ndarray< int,1 > > _2108){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2104(_2104 ? _2104->raw() : nullptr, _2104 ? _2104->size(0) : 0);
    _checked_ptr_1<long long> _ptr__2107(_2107 ? _2107->raw() : nullptr, _2107 ? _2107->size(0) : 0);
    _checked_ptr_1<int> _ptr__2108(_2108 ? _2108->raw() : nullptr, _2108 ? _2108->size(0) : 0);
    mosek::fusion::p_ModelConstraint::_initialize(_2101,_2102,_2104,::mosek::fusion::p_PSDConstraint::computenidxs(_2104,_2105,_2106,_2108));
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->conid = _2103;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->nativeidxs = _2108;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->slackidxs = _2107;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->name = _2102;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->shape = _2104;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->conedim0 = _2105;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->conedim1 = _2106;
    names_flushed = false;
  }
}std::string mosek::fusion::PSDConstraint :: toString() { return mosek::fusion::p_PSDConstraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_PSDConstraint::toString(){
  throw ::mosek::fusion::UnimplementedError(std::string ("PSDConstraint.toString not implemented"));
}
monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_PSDConstraint::__mosek_2fusion_2PSDConstraint__clone(monty::rc_ptr< ::mosek::fusion::Model > _2109){
  return (::mosek::fusion::p_PSDConstraint::_new_PSDConstraint(::mosek::fusion::PSDConstraint::t(_pubthis),_2109)).as<::mosek::fusion::ModelConstraint>();
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_PSDConstraint::computenidxs(std::shared_ptr< monty::ndarray< int,1 > > _2110,int _2111,int _2112,std::shared_ptr< monty::ndarray< int,1 > > _2113){
  _checked_ptr_1<int> _ptr__2110(_2110 ? _2110->raw() : nullptr, _2110 ? _2110->size(0) : 0);
  _checked_ptr_1<int> _ptr__2113(_2113 ? _2113->raw() : nullptr, _2113 ? _2113->size(0) : 0);
  int _2114 = (int)((_2110)->size(0));
  bool _2115 = (_2111 < _2112);
  int _7735;
  bool _7736 = _2115;
  if (_7736)
  {
    _7735 = _2111;
  }
  else
  {
    _7735 = _2112;
  }
  int _2116 = _7735;
  int _7737;
  bool _7738 = _2115;
  if (_7738)
  {
    _7737 = _2112;
  }
  else
  {
    _7737 = _2111;
  }
  int _2117 = _7737;
  std::shared_ptr< monty::ndarray< int,1 > > _2118 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((int)1),(int)((int)1),(int)((int)1),(int)((int)1)});
  _checked_ptr_1<int> _ptr__2118(_2118 ? _2118->raw() : nullptr,_2118 ? _2118->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _2119 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)5)));
  _checked_ptr_1<int> _ptr__2119(_2119 ? _2119->raw() : nullptr,_2119 ? _2119->size(0) : 0);
  int _2120 = (int)1;
  int _7739 = (int)0;
  int _7740 = (int)((_2110)->size(0));
  for (int _2121 = _7739; _2121 < _7740; ++_2121)
  {
    {
      _2120 *= _ptr__2110[_2121];
    }
  }
  int _7741 = (int)0;
  int _7742 = _2116;
  for (int _2122 = _7741; _2122 < _7742; ++_2122)
  {
    {
      _ptr__2118[(int)0] *= _ptr__2110[_2122];
    }
  }
  _ptr__2118[(int)1] = _ptr__2110[_2116];
  int _7743 = safe_add( _2116,(int)1 );
  int _7744 = _2117;
  for (int _2123 = _7743; _2123 < _7744; ++_2123)
  {
    {
      _ptr__2118[(int)2] *= _ptr__2110[_2123];
    }
  }
  _ptr__2118[(int)3] = _ptr__2110[_2117];
  int _7745 = safe_add( _2117,(int)1 );
  int _7746 = _2114;
  for (int _2124 = _7745; _2124 < _7746; ++_2124)
  {
    {
      _ptr__2118[(int)4] *= _ptr__2110[_2124];
    }
  }
  _ptr__2119[(int)4] = (int)1;
  int _7747 = (int)1;
  int _7748 = (int)5;
  for (int _2125 = _7747; _2125 < _7748; ++_2125)
  {
    {
      _ptr__2119[(((int)5 - _2125) - (int)1)] = safe_mul( _ptr__2119[((int)5 - _2125)],_ptr__2118[((int)5 - _2125)] );
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _2126 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2120)));
  _checked_ptr_1<int> _ptr__2126(_2126 ? _2126->raw() : nullptr,_2126 ? _2126->size(0) : 0);
  int _2127 = (int)0;
  if (_2115)
  {
    {
      int _7749 = (int)0;
      int _7750 = _ptr__2118[(int)0];
      for (int _2128 = _7749; _2128 < _7750; ++_2128)
      {
        {
          int _7751 = (int)0;
          int _7752 = _ptr__2118[(int)1];
          for (int _2129 = _7751; _2129 < _7752; ++_2129)
          {
            {
              int _7753 = (int)0;
              int _7754 = _ptr__2118[(int)2];
              for (int _2130 = _7753; _2130 < _7754; ++_2130)
              {
                {
                  int _7755 = _2129;
                  int _7756 = _ptr__2118[(int)1];
                  for (int _2131 = _7755; _2131 < _7756; ++_2131)
                  {
                    {
                      int _7757 = (int)0;
                      int _7758 = _ptr__2118[(int)4];
                      for (int _2132 = _7757; _2132 < _7758; ++_2132)
                      {
                        {
                          _ptr__2126[safe_add( safe_add( safe_add( safe_add( safe_mul( _2128,_ptr__2119[(int)0] ),safe_mul( _2129,_ptr__2119[(int)1] ) ),safe_mul( _2130,_ptr__2119[(int)2] ) ),safe_mul( _2131,_ptr__2119[(int)3] ) ),safe_mul( _2132,_ptr__2119[(int)4] ) )] = _ptr__2113[_2127];
                          _ptr__2126[safe_add( safe_add( safe_add( safe_add( safe_mul( _2128,_ptr__2119[(int)0] ),safe_mul( _2131,_ptr__2119[(int)1] ) ),safe_mul( _2130,_ptr__2119[(int)2] ) ),safe_mul( _2129,_ptr__2119[(int)3] ) ),safe_mul( _2132,_ptr__2119[(int)4] ) )] = _ptr__2113[_2127];
                          ++ _2127;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int _7759 = (int)0;
      int _7760 = _ptr__2118[(int)0];
      for (int _2133 = _7759; _2133 < _7760; ++_2133)
      {
        {
          int _7761 = (int)0;
          int _7762 = _ptr__2118[(int)1];
          for (int _2134 = _7761; _2134 < _7762; ++_2134)
          {
            {
              int _7763 = (int)0;
              int _7764 = _ptr__2118[(int)2];
              for (int _2135 = _7763; _2135 < _7764; ++_2135)
              {
                {
                  int _7765 = (int)0;
                  int _7766 = safe_add( _2134,(int)1 );
                  for (int _2136 = _7765; _2136 < _7766; ++_2136)
                  {
                    {
                      int _7767 = (int)0;
                      int _7768 = _ptr__2118[(int)4];
                      for (int _2137 = _7767; _2137 < _7768; ++_2137)
                      {
                        {
                          _ptr__2126[safe_add( safe_add( safe_add( safe_add( safe_mul( _2133,_ptr__2119[(int)0] ),safe_mul( _2134,_ptr__2119[(int)1] ) ),safe_mul( _2135,_ptr__2119[(int)2] ) ),safe_mul( _2136,_ptr__2119[(int)3] ) ),safe_mul( _2137,_ptr__2119[(int)4] ) )] = _ptr__2113[_2127];
                          _ptr__2126[safe_add( safe_add( safe_add( safe_add( safe_mul( _2133,_ptr__2119[(int)0] ),safe_mul( _2136,_ptr__2119[(int)1] ) ),safe_mul( _2135,_ptr__2119[(int)2] ) ),safe_mul( _2134,_ptr__2119[(int)3] ) ),safe_mul( _2137,_ptr__2119[(int)4] ) )] = _ptr__2113[_2127];
                          ++ _2127;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return _2126;
}
void mosek::fusion::p_PSDConstraint::destroy(){shape.reset();slackidxs.reset();nativeidxs.reset();}void mosek::fusion::PSDConstraint::destroy() { mosek::fusion::p_PSDConstraint::_get_impl(this)->destroy(); }mosek::fusion::ConstraintCache::ConstraintCache(mosek::fusion::p_ConstraintCache *_impl) : _impl(_impl) { /*std::cout << "ConstraintCache() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::ConstraintCache::~ConstraintCache() { delete _impl; _impl = nullptr; }mosek::fusion::p_ConstraintCache::p_ConstraintCache  (::mosek::fusion::ConstraintCache * _pubthis) :     _pubthis(_pubthis){}std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConstraintCache::get_barmatidx() { return _impl->barmatidx; }
void mosek::fusion::ConstraintCache::set_barmatidx(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->barmatidx = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConstraintCache::get_barsubj() { return _impl->barsubj; }
void mosek::fusion::ConstraintCache::set_barsubj(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->barsubj = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConstraintCache::get_barsubi() { return _impl->barsubi; }
void mosek::fusion::ConstraintCache::set_barsubi(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->barsubi = _val; }
long long mosek::fusion::ConstraintCache::get_nbarnz() { return _impl->nbarnz; }
void mosek::fusion::ConstraintCache::set_nbarnz(long long _val) { _impl->nbarnz = _val; }
long long mosek::fusion::ConstraintCache::get_nunordered() { return _impl->nunordered; }
void mosek::fusion::ConstraintCache::set_nunordered(long long _val) { _impl->nunordered = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConstraintCache::get_buffer_subi() { return _impl->buffer_subi; }
void mosek::fusion::ConstraintCache::set_buffer_subi(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->buffer_subi = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConstraintCache::get_buffer_subj() { return _impl->buffer_subj; }
void mosek::fusion::ConstraintCache::set_buffer_subj(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->buffer_subj = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::ConstraintCache::get_buffer_cof() { return _impl->buffer_cof; }
void mosek::fusion::ConstraintCache::set_buffer_cof(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->buffer_cof = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::ConstraintCache::get_bfix() { return _impl->bfix; }
void mosek::fusion::ConstraintCache::set_bfix(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->bfix = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::ConstraintCache::get_cof() { return _impl->cof; }
void mosek::fusion::ConstraintCache::set_cof(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->cof = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConstraintCache::get_subi() { return _impl->subi; }
void mosek::fusion::ConstraintCache::set_subi(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->subi = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConstraintCache::get_subj() { return _impl->subj; }
void mosek::fusion::ConstraintCache::set_subj(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->subj = _val; }
long long mosek::fusion::ConstraintCache::get_nnz() { return _impl->nnz; }
void mosek::fusion::ConstraintCache::set_nnz(long long _val) { _impl->nnz = _val; }
int mosek::fusion::ConstraintCache::get_nrows() { return _impl->nrows; }
void mosek::fusion::ConstraintCache::set_nrows(int _val) { _impl->nrows = _val; }
mosek::fusion::ConstraintCache::t mosek::fusion::p_ConstraintCache::_new_ConstraintCache  (monty::rc_ptr< ::mosek::fusion::ConstraintCache > _2138){ return new mosek::fusion::ConstraintCache(_2138); }mosek::fusion::ConstraintCache::ConstraintCache  (monty::rc_ptr< ::mosek::fusion::ConstraintCache > _2138) :    ConstraintCache(new mosek::fusion::p_ConstraintCache(this)){ mosek::fusion::p_ConstraintCache::_get_impl(this)->_initialize(_2138); }void mosek::fusion::p_ConstraintCache::_initialize  (monty::rc_ptr< ::mosek::fusion::ConstraintCache > _2138){monty::rc_reserve __reserve_this(_pubthis);   {
    nrows = mosek::fusion::p_ConstraintCache::_get_impl(_2138)->nrows;
    nnz = mosek::fusion::p_ConstraintCache::_get_impl(_2138)->nnz;
    std::shared_ptr< monty::ndarray< int,1 > > _7769;
    bool _7770 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2138)->subj.get());
    if (_7770)
    {
      _7769 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2138)->subj);
    }
    else
    {
      _7769 = nullptr;
    }
    subj = _7769;
    std::shared_ptr< monty::ndarray< int,1 > > _7771;
    bool _7772 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2138)->subi.get());
    if (_7772)
    {
      _7771 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2138)->subi);
    }
    else
    {
      _7771 = nullptr;
    }
    subi = _7771;
    std::shared_ptr< monty::ndarray< double,1 > > _7773;
    bool _7774 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2138)->cof.get());
    if (_7774)
    {
      _7773 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2138)->cof);
    }
    else
    {
      _7773 = nullptr;
    }
    cof = _7773;
    std::shared_ptr< monty::ndarray< double,1 > > _7775;
    bool _7776 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2138)->bfix.get());
    if (_7776)
    {
      _7775 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2138)->bfix);
    }
    else
    {
      _7775 = nullptr;
    }
    bfix = _7775;
    std::shared_ptr< monty::ndarray< double,1 > > _7777;
    bool _7778 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2138)->buffer_cof.get());
    if (_7778)
    {
      _7777 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2138)->buffer_cof);
    }
    else
    {
      _7777 = nullptr;
    }
    buffer_cof = _7777;
    std::shared_ptr< monty::ndarray< int,1 > > _7779;
    bool _7780 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2138)->buffer_subj.get());
    if (_7780)
    {
      _7779 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2138)->buffer_subj);
    }
    else
    {
      _7779 = nullptr;
    }
    buffer_subj = _7779;
    std::shared_ptr< monty::ndarray< int,1 > > _7781;
    bool _7782 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2138)->buffer_subi.get());
    if (_7782)
    {
      _7781 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2138)->buffer_subi);
    }
    else
    {
      _7781 = nullptr;
    }
    buffer_subi = _7781;
    nunordered = mosek::fusion::p_ConstraintCache::_get_impl(_2138)->nunordered;
    nbarnz = mosek::fusion::p_ConstraintCache::_get_impl(_2138)->nbarnz;
    std::shared_ptr< monty::ndarray< int,1 > > _7783;
    bool _7784 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2138)->barsubi.get());
    if (_7784)
    {
      _7783 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2138)->barsubi);
    }
    else
    {
      _7783 = nullptr;
    }
    barsubi = _7783;
    std::shared_ptr< monty::ndarray< int,1 > > _7785;
    bool _7786 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2138)->barsubj.get());
    if (_7786)
    {
      _7785 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2138)->barsubj);
    }
    else
    {
      _7785 = nullptr;
    }
    barsubj = _7785;
    std::shared_ptr< monty::ndarray< int,1 > > _7787;
    bool _7788 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2138)->barmatidx.get());
    if (_7788)
    {
      _7787 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2138)->barmatidx);
    }
    else
    {
      _7787 = nullptr;
    }
    barmatidx = _7787;
  }
}mosek::fusion::ConstraintCache::t mosek::fusion::p_ConstraintCache::_new_ConstraintCache  (std::shared_ptr< monty::ndarray< long long,1 > > _2139,    std::shared_ptr< monty::ndarray< double,1 > > _2140,    std::shared_ptr< monty::ndarray< int,1 > > _2141,    std::shared_ptr< monty::ndarray< double,1 > > _2142,    std::shared_ptr< monty::ndarray< int,1 > > _2143,    std::shared_ptr< monty::ndarray< int,1 > > _2144,    std::shared_ptr< monty::ndarray< int,1 > > _2145){ return new mosek::fusion::ConstraintCache(_2139,_2140,_2141,_2142,_2143,_2144,_2145); }mosek::fusion::ConstraintCache::ConstraintCache  (std::shared_ptr< monty::ndarray< long long,1 > > _2139,    std::shared_ptr< monty::ndarray< double,1 > > _2140,    std::shared_ptr< monty::ndarray< int,1 > > _2141,    std::shared_ptr< monty::ndarray< double,1 > > _2142,    std::shared_ptr< monty::ndarray< int,1 > > _2143,    std::shared_ptr< monty::ndarray< int,1 > > _2144,    std::shared_ptr< monty::ndarray< int,1 > > _2145) :    ConstraintCache(new mosek::fusion::p_ConstraintCache(this)){ mosek::fusion::p_ConstraintCache::_get_impl(this)->_initialize(_2139,_2140,_2141,_2142,_2143,_2144,_2145); }void mosek::fusion::p_ConstraintCache::_initialize  (std::shared_ptr< monty::ndarray< long long,1 > > _2139,    std::shared_ptr< monty::ndarray< double,1 > > _2140,    std::shared_ptr< monty::ndarray< int,1 > > _2141,    std::shared_ptr< monty::ndarray< double,1 > > _2142,    std::shared_ptr< monty::ndarray< int,1 > > _2143,    std::shared_ptr< monty::ndarray< int,1 > > _2144,    std::shared_ptr< monty::ndarray< int,1 > > _2145){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__2139(_2139 ? _2139->raw() : nullptr, _2139 ? _2139->size(0) : 0);
    _checked_ptr_1<double> _ptr__2140(_2140 ? _2140->raw() : nullptr, _2140 ? _2140->size(0) : 0);
    _checked_ptr_1<int> _ptr__2141(_2141 ? _2141->raw() : nullptr, _2141 ? _2141->size(0) : 0);
    _checked_ptr_1<double> _ptr__2142(_2142 ? _2142->raw() : nullptr, _2142 ? _2142->size(0) : 0);
    _checked_ptr_1<int> _ptr__2143(_2143 ? _2143->raw() : nullptr, _2143 ? _2143->size(0) : 0);
    _checked_ptr_1<int> _ptr__2144(_2144 ? _2144->raw() : nullptr, _2144 ? _2144->size(0) : 0);
    _checked_ptr_1<int> _ptr__2145(_2145 ? _2145->raw() : nullptr, _2145 ? _2145->size(0) : 0);
    nrows = ((int)((_2139)->size(0)) - (int)1);
    nnz = _ptr__2139[((int)((_2139)->size(0)) - (int)1)];
    subj = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nnz)));
    subi = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nnz)));
    cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(nnz)));
    if ((NULL != _2142.get()))
    {
      {
        bfix = _2142;
      }
    }
    else
    {
      {
        bfix = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(nrows)));
      }
    }
    if (((NULL != _2143.get()) && ((NULL != _2144.get()) && (NULL != _2145.get()))))
    {
      {
        nbarnz = (int)((_2143)->size(0));
        if ((nbarnz > (int)((_2144)->size(0))))
        {
          {
            nbarnz = (int)((_2144)->size(0));
          }
        }
        {}
        if ((nbarnz > (int)((_2145)->size(0))))
        {
          {
            nbarnz = (int)((_2145)->size(0));
          }
        }
        {}
        barsubi = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nbarnz)));
        barsubj = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nbarnz)));
        barmatidx = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nbarnz)));
        ::mosek::fusion::Utils::Tools::arraycopy(_2143,(long long)((int)0),barsubi,(long long)((int)0),nbarnz);
        ::mosek::fusion::Utils::Tools::arraycopy(_2144,(long long)((int)0),barsubj,(long long)((int)0),nbarnz);
        ::mosek::fusion::Utils::Tools::arraycopy(_2145,(long long)((int)0),barmatidx,(long long)((int)0),nbarnz);
      }
    }
    else
    {
      {
        nbarnz = (int)0;
        barsubi = nullptr;
        barsubj = nullptr;
        barmatidx = nullptr;
      }
    }
    ::mosek::fusion::Utils::Tools::arraycopy(_2141,(long long)0,subj,(long long)0,nnz);
    ::mosek::fusion::Utils::Tools::arraycopy(_2140,(long long)0,cof,(long long)0,nnz);
    int _7789 = (int)0;
    int _7790 = nrows;
    for (int _2146 = _7789; _2146 < _7790; ++_2146)
    {
      {
        long long _7791 = _ptr__2139[_2146];
        long long _7792 = _ptr__2139[safe_add( _2146,(int)1 )];
        for (long long _2147 = _7791; _2147 < _7792; ++_2147)
        {
          {
            ((*subi)(_2147)) = _2146;
          }
        }
      }
    }
    buffer_cof = nullptr;
    buffer_subj = nullptr;
    buffer_subi = nullptr;
    nunordered = (long long)0;
  }
}void mosek::fusion::p_ConstraintCache::unchecked_add_fx(std::shared_ptr< monty::ndarray< double,1 > > _2148){
  _checked_ptr_1<double> _ptr__2148(_2148 ? _2148->raw() : nullptr, _2148 ? _2148->size(0) : 0);
  int _7793 = (int)0;
  int _7794 = nrows;
  for (int _2149 = _7793; _2149 < _7794; ++_2149)
  {
    {
      ((*bfix)(_2149)) = (((*bfix)(_2149)) + _ptr__2148[_2149]);
    }
  }
}
long long mosek::fusion::p_ConstraintCache::order_barentries(){
  std::vector<long long> _7795;
  for (long long _2151 = (long long)0, _7796 = nbarnz; _2151 < _7796 ; ++_2151)
  {
    _7795.push_back(_2151);
  }
  auto _7797 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7795.size()),_7795.begin(),_7795.end()));
  std::shared_ptr< monty::ndarray< long long,1 > > _2150 = _7797;
  _checked_ptr_1<long long> _ptr__2150(_2150 ? _2150->raw() : nullptr,_2150 ? _2150->size(0) : 0);
  if ((!::mosek::fusion::p_Sort::issorted(_2150,barsubi,barsubj,(long long)((int)0),nbarnz,false)))
  {
    {
      ::mosek::fusion::p_Sort::argsort(_2150,barsubi,barsubj,(long long)((int)0),nbarnz,false);
      std::shared_ptr< monty::ndarray< int,1 > > _2152 = barsubi;
      _checked_ptr_1<int> _ptr__2152(_2152 ? _2152->raw() : nullptr,_2152 ? _2152->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2153 = barsubj;
      _checked_ptr_1<int> _ptr__2153(_2153 ? _2153->raw() : nullptr,_2153 ? _2153->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2154 = barmatidx;
      _checked_ptr_1<int> _ptr__2154(_2154 ? _2154->raw() : nullptr,_2154 ? _2154->size(0) : 0);
      std::vector<int> _7798;
      for (long long _2155 = (int)0, _7799 = nbarnz; _2155 < _7799 ; ++_2155)
      {
        _7798.push_back(_ptr__2152[_ptr__2150[_2155]]);
      }
      auto _7800 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7798.size()),_7798.begin(),_7798.end()));
      barsubi = _7800;
      std::vector<int> _7801;
      for (long long _2156 = (int)0, _7802 = nbarnz; _2156 < _7802 ; ++_2156)
      {
        _7801.push_back(_ptr__2153[_ptr__2150[_2156]]);
      }
      auto _7803 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7801.size()),_7801.begin(),_7801.end()));
      barsubj = _7803;
      std::vector<int> _7804;
      for (long long _2157 = (int)0, _7805 = nbarnz; _2157 < _7805 ; ++_2157)
      {
        _7804.push_back(_ptr__2154[_ptr__2150[_2157]]);
      }
      auto _7806 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7804.size()),_7804.begin(),_7804.end()));
      barmatidx = _7806;
    }
  }
  {}
  return nbarnz;
}
void mosek::fusion::p_ConstraintCache::add_bar(std::shared_ptr< monty::ndarray< int,1 > > _2158,std::shared_ptr< monty::ndarray< int,1 > > _2159,std::shared_ptr< monty::ndarray< int,1 > > _2160){
  _checked_ptr_1<int> _ptr__2158(_2158 ? _2158->raw() : nullptr, _2158 ? _2158->size(0) : 0);
  _checked_ptr_1<int> _ptr__2159(_2159 ? _2159->raw() : nullptr, _2159 ? _2159->size(0) : 0);
  _checked_ptr_1<int> _ptr__2160(_2160 ? _2160->raw() : nullptr, _2160 ? _2160->size(0) : 0);
  if ((NULL != _2158.get()))
  {
    {
      int _2161 = (int)((_2158)->size(0));
      if (((int)((_2158)->size(0)) <= safe_add( nbarnz,_2161 )))
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _2162 = barsubi;
          _checked_ptr_1<int> _ptr__2162(_2162 ? _2162->raw() : nullptr,_2162 ? _2162->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _2163 = barsubj;
          _checked_ptr_1<int> _ptr__2163(_2163 ? _2163->raw() : nullptr,_2163 ? _2163->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _2164 = barmatidx;
          _checked_ptr_1<int> _ptr__2164(_2164 ? _2164->raw() : nullptr,_2164 ? _2164->size(0) : 0);
          long long _7807;
          bool _7808 = (safe_mul( (int)2,nbarnz ) > safe_add( nbarnz,_2161 ));
          if (_7808)
          {
            _7807 = safe_mul( (int)2,nbarnz );
          }
          else
          {
            _7807 = safe_add( nbarnz,safe_mul( _2161,(int)2 ) );
          }
          long long _2165 = _7807;
          barsubi = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2165)));
          barsubj = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2165)));
          barmatidx = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2165)));
          if ((nbarnz > (int)0))
          {
            {
              ::mosek::fusion::Utils::Tools::arraycopy(_2162,(long long)((int)0),barsubi,(long long)((int)0),nbarnz);
              ::mosek::fusion::Utils::Tools::arraycopy(_2163,(long long)((int)0),barsubj,(long long)((int)0),nbarnz);
              ::mosek::fusion::Utils::Tools::arraycopy(_2164,(long long)((int)0),barmatidx,(long long)((int)0),nbarnz);
            }
          }
          {}
        }
      }
      {}
      ::mosek::fusion::Utils::Tools::arraycopy(_2158,(long long)((int)0),barsubi,nbarnz,(long long)(_2161));
      ::mosek::fusion::Utils::Tools::arraycopy(_2159,(long long)((int)0),barsubj,nbarnz,(long long)(_2161));
      ::mosek::fusion::Utils::Tools::arraycopy(_2160,(long long)((int)0),barmatidx,nbarnz,(long long)(_2161));
      nbarnz += _2161;
    }
  }
  {}
}
void mosek::fusion::p_ConstraintCache::unchecked_add_l(std::shared_ptr< monty::ndarray< long long,1 > > _2166,std::shared_ptr< monty::ndarray< int,1 > > _2167,std::shared_ptr< monty::ndarray< double,1 > > _2168,std::shared_ptr< monty::ndarray< double,1 > > _2169){
  _checked_ptr_1<long long> _ptr__2166(_2166 ? _2166->raw() : nullptr, _2166 ? _2166->size(0) : 0);
  _checked_ptr_1<int> _ptr__2167(_2167 ? _2167->raw() : nullptr, _2167 ? _2167->size(0) : 0);
  _checked_ptr_1<double> _ptr__2168(_2168 ? _2168->raw() : nullptr, _2168 ? _2168->size(0) : 0);
  _checked_ptr_1<double> _ptr__2169(_2169 ? _2169->raw() : nullptr, _2169 ? _2169->size(0) : 0);
  long long _2170 = safe_add( nunordered,_ptr__2166[nrows] );
  long long _2171 = _ptr__2166[nrows];
  std::shared_ptr< monty::ndarray< int,1 > > _2172;
  _checked_ptr_1<int> _ptr__2172(_2172 ? _2172->raw() : nullptr,_2172 ? _2172->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _2173;
  _checked_ptr_1<int> _ptr__2173(_2173 ? _2173->raw() : nullptr,_2173 ? _2173->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _2174;
  _checked_ptr_1<double> _ptr__2174(_2174 ? _2174->raw() : nullptr,_2174 ? _2174->size(0) : 0);
  if (((NULL == buffer_cof.get()) || ((int)((buffer_cof)->size(0)) < _2170)))
  {
    {
      _2172 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2170)));
      _ptr__2172.update(_2172 ? _2172->raw() : nullptr, _2172 ? _2172->size(0) : 0);
      _2173 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2170)));
      _ptr__2173.update(_2173 ? _2173->raw() : nullptr, _2173 ? _2173->size(0) : 0);
      _2174 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2170)));
      _ptr__2174.update(_2174 ? _2174->raw() : nullptr, _2174 ? _2174->size(0) : 0);
      if ((NULL != buffer_cof.get()))
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(buffer_subi,(long long)0,_2172,(long long)0,nunordered);
          ::mosek::fusion::Utils::Tools::arraycopy(buffer_subj,(long long)0,_2173,(long long)0,nunordered);
          ::mosek::fusion::Utils::Tools::arraycopy(buffer_cof,(long long)0,_2174,(long long)0,nunordered);
        }
      }
      {}
    }
  }
  else
  {
    {
      _2172 = buffer_subi;
      _ptr__2172.update(_2172 ? _2172->raw() : nullptr, _2172 ? _2172->size(0) : 0);
      _2173 = buffer_subj;
      _ptr__2173.update(_2173 ? _2173->raw() : nullptr, _2173 ? _2173->size(0) : 0);
      _2174 = buffer_cof;
      _ptr__2174.update(_2174 ? _2174->raw() : nullptr, _2174 ? _2174->size(0) : 0);
    }
  }
  int _7809 = (int)0;
  int _7810 = nrows;
  for (int _2175 = _7809; _2175 < _7810; ++_2175)
  {
    {
      long long _7811 = _ptr__2166[_2175];
      long long _7812 = _ptr__2166[safe_add( _2175,(int)1 )];
      for (long long _2176 = _7811; _2176 < _7812; ++_2176)
      {
        {
          _ptr__2172[safe_add( nunordered,_2176 )] = _2175;
        }
      }
    }
  }
  ::mosek::fusion::Utils::Tools::arraycopy(_2167,(long long)0,_2173,nunordered,_2171);
  ::mosek::fusion::Utils::Tools::arraycopy(_2168,(long long)0,_2174,nunordered,_2171);
  buffer_subi = _2172;
  buffer_subj = _2173;
  buffer_cof = _2174;
  if ((NULL != _2169.get()))
  {
    {
      int _7813 = (int)0;
      int _7814 = nrows;
      for (int _2177 = _7813; _2177 < _7814; ++_2177)
      {
        {
          ((*bfix)(_2177)) = (((*bfix)(_2177)) + _ptr__2169[_2177]);
        }
      }
    }
  }
  {}
  nunordered = _2170;
}
void mosek::fusion::ConstraintCache :: add(std::shared_ptr< monty::ndarray< long long,1 > > _2178,std::shared_ptr< monty::ndarray< int,1 > > _2179,std::shared_ptr< monty::ndarray< double,1 > > _2180,std::shared_ptr< monty::ndarray< double,1 > > _2181) { mosek::fusion::p_ConstraintCache::_get_impl(this)->add(_2178,_2179,_2180,_2181); }void mosek::fusion::p_ConstraintCache::add(std::shared_ptr< monty::ndarray< long long,1 > > _2178,std::shared_ptr< monty::ndarray< int,1 > > _2179,std::shared_ptr< monty::ndarray< double,1 > > _2180,std::shared_ptr< monty::ndarray< double,1 > > _2181){
  _checked_ptr_1<long long> _ptr__2178(_2178 ? _2178->raw() : nullptr, _2178 ? _2178->size(0) : 0);
  _checked_ptr_1<int> _ptr__2179(_2179 ? _2179->raw() : nullptr, _2179 ? _2179->size(0) : 0);
  _checked_ptr_1<double> _ptr__2180(_2180 ? _2180->raw() : nullptr, _2180 ? _2180->size(0) : 0);
  _checked_ptr_1<double> _ptr__2181(_2181 ? _2181->raw() : nullptr, _2181 ? _2181->size(0) : 0);
  if ((((int)((_2178)->size(0)) != safe_add( nrows,(int)1 )) || ((NULL != _2181.get()) && ((int)((_2181)->size(0)) != nrows))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching expression lengths"));
    }
  }
  {}
  unchecked_add_l(_2178,_2179,_2180,_2181);
}
long long mosek::fusion::ConstraintCache :: flush(std::shared_ptr< monty::ndarray< int,1 > > _2182,std::shared_ptr< monty::ndarray< int,1 > > _2183,std::shared_ptr< monty::ndarray< double,1 > > _2184,std::shared_ptr< monty::ndarray< double,1 > > _2185) { return mosek::fusion::p_ConstraintCache::_get_impl(this)->flush(_2182,_2183,_2184,_2185); }long long mosek::fusion::p_ConstraintCache::flush(std::shared_ptr< monty::ndarray< int,1 > > _2182,std::shared_ptr< monty::ndarray< int,1 > > _2183,std::shared_ptr< monty::ndarray< double,1 > > _2184,std::shared_ptr< monty::ndarray< double,1 > > _2185){
  _checked_ptr_1<int> _ptr__2182(_2182 ? _2182->raw() : nullptr, _2182 ? _2182->size(0) : 0);
  _checked_ptr_1<int> _ptr__2183(_2183 ? _2183->raw() : nullptr, _2183 ? _2183->size(0) : 0);
  _checked_ptr_1<double> _ptr__2184(_2184 ? _2184->raw() : nullptr, _2184 ? _2184->size(0) : 0);
  _checked_ptr_1<double> _ptr__2185(_2185 ? _2185->raw() : nullptr, _2185 ? _2185->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2186 = nullptr;
  _checked_ptr_1<long long> _ptr__2186(_2186 ? _2186->raw() : nullptr,_2186 ? _2186->size(0) : 0);
  if (((NULL != bfix.get()) && (NULL != _2185.get())))
  {
    {
      int _7815 = (int)0;
      int _7816 = nrows;
      for (int _2187 = _7815; _2187 < _7816; ++_2187)
      {
        {
          _ptr__2185[_2187] = ((*bfix)(_2187));
        }
      }
    }
  }
  {}
  if ((nunordered == (long long)0))
  {
    {
      return (long long)0;
    }
  }
  {}
  bool _2188 = false;
  {
    int _2189 = (int)1;
    while ( ((_2189 < nunordered) && ((((*buffer_subi)((_2189 - (int)1))) < ((*buffer_subi)(_2189))) || ((((*buffer_subi)((_2189 - (int)1))) == ((*buffer_subi)(_2189))) && (((*buffer_subj)((_2189 - (int)1))) <= ((*buffer_subj)(_2189)))))) )
    {
      {
        ++ _2189;
      }
    }
    _2188 = (_2189 == nunordered);
  }
  if ((!_2188))
  {
    {
      std::vector<long long> _7817;
      for (long long _2190 = (int)0, _7818 = nunordered; _2190 < _7818 ; ++_2190)
      {
        _7817.push_back(_2190);
      }
      auto _7819 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7817.size()),_7817.begin(),_7817.end()));
      _2186 = _7819;
      _ptr__2186.update(_2186 ? _2186->raw() : nullptr, _2186 ? _2186->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_2186,buffer_subi,buffer_subj,(long long)0,nunordered);
    }
  }
  {}
  long long _2191 = nnz;
  std::shared_ptr< monty::ndarray< int,1 > > _2192 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( nunordered,_2191 ))));
  _checked_ptr_1<int> _ptr__2192(_2192 ? _2192->raw() : nullptr,_2192 ? _2192->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _2193 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( nunordered,_2191 ))));
  _checked_ptr_1<int> _ptr__2193(_2193 ? _2193->raw() : nullptr,_2193 ? _2193->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _2194 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_add( nunordered,_2191 ))));
  _checked_ptr_1<double> _ptr__2194(_2194 ? _2194->raw() : nullptr,_2194 ? _2194->size(0) : 0);
  long long _2195 = (long long)0;
  if (_2188)
  {
    {
      long long _2196 = (long long)0;
      int _2197 = (int)0;
      long long _2198 = nunordered;
      long long _2199 = _2191;
      int _2200 = (int)0;
      int _2201 = (int)0;
      while ( ((_2201 < _2199) && (_2200 < _2198)) )
      {
        {
          if (((((*subi)(_2201)) < ((*buffer_subi)(_2200))) || ((((*subi)(_2201)) == ((*buffer_subi)(_2200))) && (((*subj)(_2201)) < ((*buffer_subj)(_2200))))))
          {
            {
              _ptr__2192[_2197] = ((*subi)(_2201));
              _ptr__2193[_2197] = ((*subj)(_2201));
              _ptr__2194[_2197] = ((*cof)(_2201));
              ++ _2201;
              ++ _2197;
            }
          }
          else if(((((*subi)(_2201)) > ((*buffer_subi)(_2200))) || ((((*subi)(_2201)) == ((*buffer_subi)(_2200))) && (((*subj)(_2201)) > ((*buffer_subj)(_2200))))))
          {
            {
              _ptr__2192[_2197] = ((*buffer_subi)(_2200));
              _ptr__2193[_2197] = ((*buffer_subj)(_2200));
              _ptr__2194[_2197] = ((*buffer_cof)(_2200));
              _ptr__2182[_2195] = _ptr__2192[_2197];
              _ptr__2183[_2195] = _ptr__2193[_2197];
              _ptr__2184[_2195] = _ptr__2194[_2197];
              ++ _2195;
              ++ _2200;
              ++ _2197;
            }
          }
          else
          {
            {
              _ptr__2192[_2197] = ((*subi)(_2201));
              _ptr__2193[_2197] = ((*subj)(_2201));
              _ptr__2194[_2197] = ((*cof)(_2201));
              while ( ((_2201 < (int)((subi)->size(0))) && ((_2200 < (int)((buffer_subi)->size(0))) && ((((*subi)(_2201)) == ((*buffer_subi)(_2200))) && (((*subj)(_2201)) == ((*buffer_subj)(_2200)))))) )
              {
                {
                  _ptr__2194[_2197] = (_ptr__2194[_2197] + ((*buffer_cof)(_2200)));
                  ++ _2200;
                }
              }
              _ptr__2182[_2195] = _ptr__2192[_2197];
              _ptr__2183[_2195] = _ptr__2193[_2197];
              _ptr__2184[_2195] = _ptr__2194[_2197];
              ++ _2195;
              ++ _2201;
              ++ _2197;
            }
          }
        }
      }
      while ( (_2201 < _2199) )
      {
        {
          _ptr__2192[_2197] = ((*subi)(_2201));
          _ptr__2193[_2197] = ((*subj)(_2201));
          _ptr__2194[_2197] = ((*cof)(_2201));
          ++ _2201;
          ++ _2197;
        }
      }
      while ( (_2200 < _2198) )
      {
        {
          _ptr__2192[_2197] = ((*buffer_subi)(_2200));
          _ptr__2193[_2197] = ((*buffer_subj)(_2200));
          _ptr__2194[_2197] = ((*buffer_cof)(_2200));
          _ptr__2182[_2195] = _ptr__2192[_2197];
          _ptr__2183[_2195] = _ptr__2193[_2197];
          _ptr__2184[_2195] = _ptr__2194[_2197];
          ++ _2195;
          ++ _2200;
          ++ _2197;
        }
      }
      nnz = _2197;
    }
  }
  else
  {
    {
      long long _2202 = (long long)0;
      int _2203 = (int)0;
      long long _2204 = nunordered;
      long long _2205 = _2191;
      int _2206 = (int)0;
      int _2207 = (int)0;
      while ( ((_2207 < _2205) && (_2206 < _2204)) )
      {
        {
          if (((((*subi)(_2207)) < ((*buffer_subi)(_ptr__2186[_2206]))) || ((((*subi)(_2207)) == ((*buffer_subi)(_ptr__2186[_2206]))) && (((*subj)(_2207)) < ((*buffer_subj)(_ptr__2186[_2206]))))))
          {
            {
              _ptr__2192[_2203] = ((*subi)(_2207));
              _ptr__2193[_2203] = ((*subj)(_2207));
              _ptr__2194[_2203] = ((*cof)(_2207));
              ++ _2207;
              ++ _2203;
            }
          }
          else if(((((*subi)(_2207)) > ((*buffer_subi)(_ptr__2186[_2206]))) || ((((*subi)(_2207)) == ((*buffer_subi)(_ptr__2186[_2206]))) && (((*subj)(_2207)) > ((*buffer_subj)(_ptr__2186[_2206]))))))
          {
            {
              _ptr__2192[_2203] = ((*buffer_subi)(_ptr__2186[_2206]));
              _ptr__2193[_2203] = ((*buffer_subj)(_ptr__2186[_2206]));
              _ptr__2194[_2203] = ((*buffer_cof)(_ptr__2186[_2206]));
              _ptr__2182[_2195] = _ptr__2192[_2203];
              _ptr__2183[_2195] = _ptr__2193[_2203];
              _ptr__2184[_2195] = _ptr__2194[_2203];
              ++ _2195;
              ++ _2206;
              ++ _2203;
            }
          }
          else
          {
            {
              _ptr__2192[_2203] = ((*subi)(_2207));
              _ptr__2193[_2203] = ((*subj)(_2207));
              _ptr__2194[_2203] = ((*cof)(_2207));
              while ( ((((*subi)(_2207)) == ((*buffer_subi)(_ptr__2186[_2206]))) && (((*subj)(_2207)) == ((*buffer_subj)(_ptr__2186[_2206])))) )
              {
                {
                  _ptr__2194[_2203] = (_ptr__2194[_2203] + ((*buffer_cof)(_ptr__2186[_2206])));
                  ++ _2206;
                }
              }
              _ptr__2182[_2195] = _ptr__2192[_2203];
              _ptr__2183[_2195] = _ptr__2193[_2203];
              _ptr__2184[_2195] = _ptr__2194[_2203];
              ++ _2195;
              ++ _2207;
              ++ _2203;
            }
          }
        }
      }
      nnz = _2203;
    }
  }
  subi = _2192;
  subj = _2193;
  cof = _2194;
  nunordered = (long long)0;
  return _2195;
}
long long mosek::fusion::ConstraintCache :: numUnsorted() { return mosek::fusion::p_ConstraintCache::_get_impl(this)->numUnsorted(); }long long mosek::fusion::p_ConstraintCache::numUnsorted(){
  return nunordered;
}
monty::rc_ptr< ::mosek::fusion::ConstraintCache > mosek::fusion::p_ConstraintCache::__mosek_2fusion_2ConstraintCache__clone(){
  return ::mosek::fusion::p_ConstraintCache::_new_ConstraintCache(::mosek::fusion::ConstraintCache::t(_pubthis));
}
void mosek::fusion::p_ConstraintCache::destroy(){barmatidx.reset();barsubj.reset();barsubi.reset();buffer_subi.reset();buffer_subj.reset();buffer_cof.reset();bfix.reset();cof.reset();subi.reset();subj.reset();}void mosek::fusion::ConstraintCache::destroy() { mosek::fusion::p_ConstraintCache::_get_impl(this)->destroy(); }mosek::fusion::SliceConstraint::SliceConstraint(mosek::fusion::p_SliceConstraint *_impl) : mosek::fusion::Constraint(_impl) { /*std::cout << "SliceConstraint()" << this << std::endl; */ }mosek::fusion::SliceConstraint::~SliceConstraint() {  /* std::cout << "~SliceConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_SliceConstraint::p_SliceConstraint  (::mosek::fusion::SliceConstraint * _pubthis) :     mosek::fusion::p_Constraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SliceConstraint::t mosek::fusion::p_SliceConstraint::_new_SliceConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2208,    std::shared_ptr< monty::ndarray< int,1 > > _2209,    std::shared_ptr< monty::ndarray< int,1 > > _2210){ return new mosek::fusion::SliceConstraint(_2208,_2209,_2210); }mosek::fusion::SliceConstraint::SliceConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2208,    std::shared_ptr< monty::ndarray< int,1 > > _2209,    std::shared_ptr< monty::ndarray< int,1 > > _2210) :    SliceConstraint(new mosek::fusion::p_SliceConstraint(this)){ mosek::fusion::p_SliceConstraint::_get_impl(this)->_initialize(_2208,_2209,_2210); }void mosek::fusion::p_SliceConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2208,    std::shared_ptr< monty::ndarray< int,1 > > _2209,    std::shared_ptr< monty::ndarray< int,1 > > _2210){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2209(_2209 ? _2209->raw() : nullptr, _2209 ? _2209->size(0) : 0);
    _checked_ptr_1<int> _ptr__2210(_2210 ? _2210->raw() : nullptr, _2210 ? _2210->size(0) : 0);
    mosek::fusion::p_Constraint::_initialize(_2208,_2209,_2210);
  }
}std::string mosek::fusion::SliceConstraint :: toString() { return mosek::fusion::p_SliceConstraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_SliceConstraint::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2211 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2211->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("SliceConstraint()"));
  return _2211->toString();
}
void mosek::fusion::p_SliceConstraint::destroy(){}void mosek::fusion::SliceConstraint::destroy() { mosek::fusion::p_SliceConstraint::_get_impl(this)->destroy(); }mosek::fusion::RangedConstraint::RangedConstraint(mosek::fusion::p_RangedConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "RangedConstraint()" << this << std::endl; */ }mosek::fusion::RangedConstraint::~RangedConstraint() {  /* std::cout << "~RangedConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_RangedConstraint::p_RangedConstraint  (::mosek::fusion::RangedConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::RangedConstraint::t mosek::fusion::p_RangedConstraint::_new_RangedConstraint  (monty::rc_ptr< ::mosek::fusion::RangedConstraint > _2212,    monty::rc_ptr< ::mosek::fusion::Model > _2213){ return new mosek::fusion::RangedConstraint(_2212,_2213); }mosek::fusion::RangedConstraint::RangedConstraint  (monty::rc_ptr< ::mosek::fusion::RangedConstraint > _2212,    monty::rc_ptr< ::mosek::fusion::Model > _2213) :    RangedConstraint(new mosek::fusion::p_RangedConstraint(this)){ mosek::fusion::p_RangedConstraint::_get_impl(this)->_initialize(_2212,_2213); }void mosek::fusion::p_RangedConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::RangedConstraint > _2212,    monty::rc_ptr< ::mosek::fusion::Model > _2213){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelConstraint::_initialize(_2212,_2213);
    shape = mosek::fusion::p_RangedConstraint::_get_impl(_2212)->shape;
    nativeidxs = mosek::fusion::p_RangedConstraint::_get_impl(_2212)->nativeidxs;
  }
}mosek::fusion::RangedConstraint::t mosek::fusion::p_RangedConstraint::_new_RangedConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2214,    const std::string &  _2215,    std::shared_ptr< monty::ndarray< int,1 > > _2216,    std::shared_ptr< monty::ndarray< int,1 > > _2217){ return new mosek::fusion::RangedConstraint(_2214,_2215,_2216,_2217); }mosek::fusion::RangedConstraint::RangedConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2214,    const std::string &  _2215,    std::shared_ptr< monty::ndarray< int,1 > > _2216,    std::shared_ptr< monty::ndarray< int,1 > > _2217) :    RangedConstraint(new mosek::fusion::p_RangedConstraint(this)){ mosek::fusion::p_RangedConstraint::_get_impl(this)->_initialize(_2214,_2215,_2216,_2217); }void mosek::fusion::p_RangedConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2214,    const std::string &  _2215,    std::shared_ptr< monty::ndarray< int,1 > > _2216,    std::shared_ptr< monty::ndarray< int,1 > > _2217){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2216(_2216 ? _2216->raw() : nullptr, _2216 ? _2216->size(0) : 0);
    _checked_ptr_1<int> _ptr__2217(_2217 ? _2217->raw() : nullptr, _2217 ? _2217->size(0) : 0);
    mosek::fusion::p_ModelConstraint::_initialize(_2214,_2215,_2216,_2217);
    mosek::fusion::p_RangedConstraint::_get_impl(::mosek::fusion::RangedConstraint::t(_pubthis))->shape = _2216;
    mosek::fusion::p_RangedConstraint::_get_impl(::mosek::fusion::RangedConstraint::t(_pubthis))->nativeidxs = _2217;
  }
}monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_RangedConstraint::__mosek_2fusion_2RangedConstraint__clone(monty::rc_ptr< ::mosek::fusion::Model > _2218){
  return (::mosek::fusion::p_RangedConstraint::_new_RangedConstraint(::mosek::fusion::RangedConstraint::t(_pubthis),_2218)).as<::mosek::fusion::ModelConstraint>();
}
void mosek::fusion::p_RangedConstraint::destroy(){nativeidxs.reset();shape.reset();}void mosek::fusion::RangedConstraint::destroy() { mosek::fusion::p_RangedConstraint::_get_impl(this)->destroy(); }mosek::fusion::ConicConstraint::ConicConstraint(mosek::fusion::p_ConicConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "ConicConstraint()" << this << std::endl; */ }mosek::fusion::ConicConstraint::~ConicConstraint() {  /* std::cout << "~ConicConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_ConicConstraint::p_ConicConstraint  (::mosek::fusion::ConicConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ConicConstraint::t mosek::fusion::p_ConicConstraint::_new_ConicConstraint  (monty::rc_ptr< ::mosek::fusion::ConicConstraint > _2219,    monty::rc_ptr< ::mosek::fusion::Model > _2220){ return new mosek::fusion::ConicConstraint(_2219,_2220); }mosek::fusion::ConicConstraint::ConicConstraint  (monty::rc_ptr< ::mosek::fusion::ConicConstraint > _2219,    monty::rc_ptr< ::mosek::fusion::Model > _2220) :    ConicConstraint(new mosek::fusion::p_ConicConstraint(this)){ mosek::fusion::p_ConicConstraint::_get_impl(this)->_initialize(_2219,_2220); }void mosek::fusion::p_ConicConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::ConicConstraint > _2219,    monty::rc_ptr< ::mosek::fusion::Model > _2220){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelConstraint::_initialize(_2219,_2220);
    dom = mosek::fusion::p_ConicConstraint::_get_impl(_2219)->dom;
    conid = mosek::fusion::p_ConicConstraint::_get_impl(_2219)->conid;
    shape = mosek::fusion::p_ConicConstraint::_get_impl(_2219)->shape;
    name = mosek::fusion::p_ConicConstraint::_get_impl(_2219)->name;
    nativeidxs = mosek::fusion::p_ConicConstraint::_get_impl(_2219)->nativeidxs;
    nativeslack = mosek::fusion::p_ConicConstraint::_get_impl(_2219)->nativeslack;
    names_flushed = mosek::fusion::p_ConicConstraint::_get_impl(_2219)->names_flushed;
  }
}mosek::fusion::ConicConstraint::t mosek::fusion::p_ConicConstraint::_new_ConicConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2221,    const std::string &  _2222,    monty::rc_ptr< ::mosek::fusion::ConeDomain > _2223,    std::shared_ptr< monty::ndarray< int,1 > > _2224,    int _2225,    std::shared_ptr< monty::ndarray< int,1 > > _2226,    std::shared_ptr< monty::ndarray< int,1 > > _2227){ return new mosek::fusion::ConicConstraint(_2221,_2222,_2223,_2224,_2225,_2226,_2227); }mosek::fusion::ConicConstraint::ConicConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2221,    const std::string &  _2222,    monty::rc_ptr< ::mosek::fusion::ConeDomain > _2223,    std::shared_ptr< monty::ndarray< int,1 > > _2224,    int _2225,    std::shared_ptr< monty::ndarray< int,1 > > _2226,    std::shared_ptr< monty::ndarray< int,1 > > _2227) :    ConicConstraint(new mosek::fusion::p_ConicConstraint(this)){ mosek::fusion::p_ConicConstraint::_get_impl(this)->_initialize(_2221,_2222,_2223,_2224,_2225,_2226,_2227); }void mosek::fusion::p_ConicConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2221,    const std::string &  _2222,    monty::rc_ptr< ::mosek::fusion::ConeDomain > _2223,    std::shared_ptr< monty::ndarray< int,1 > > _2224,    int _2225,    std::shared_ptr< monty::ndarray< int,1 > > _2226,    std::shared_ptr< monty::ndarray< int,1 > > _2227){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2224(_2224 ? _2224->raw() : nullptr, _2224 ? _2224->size(0) : 0);
    _checked_ptr_1<int> _ptr__2226(_2226 ? _2226->raw() : nullptr, _2226 ? _2226->size(0) : 0);
    _checked_ptr_1<int> _ptr__2227(_2227 ? _2227->raw() : nullptr, _2227 ? _2227->size(0) : 0);
    mosek::fusion::p_ModelConstraint::_initialize(_2221,_2222,_2224,_2226);
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->dom = _2223;
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->shape = _2224;
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->name = _2222;
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->nativeidxs = _2226;
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->nativeslack = _2227;
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->conid = _2225;
    names_flushed = false;
  }
}void mosek::fusion::p_ConicConstraint::flushNames(){
  ::mosek::fusion::p_ModelConstraint::flushNames();
  int _2228 = (int)((nativeslack)->size(0));
  monty::rc_ptr< ::mosek::fusion::Model > _2229 = _pubthis->__mosek_2fusion_2Constraint__getModel();
  if (((!names_flushed) && ((int)((name).size()) > (int)0)))
  {
    {
      if (((int)((name).size()) == (int)0))
      {
        {
          int _7820 = (int)0;
          int _7821 = _2228;
          for (int _2230 = _7820; _2230 < _7821; ++_2230)
          {
            {
              mosek::fusion::p_Model::_get_impl(_2229.get())->task_var_name(((*nativeslack)(_2230)),std::string (""));
            }
          }
        }
      }
      else
      {
        {
          monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2231 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
          int _7822 = (int)0;
          int _7823 = _2228;
          for (int _2232 = _7822; _2232 < _7823; ++_2232)
          {
            {
              mosek::fusion::p_Model::_get_impl(_2229.get())->task_var_name(((*nativeslack)(_2232)),_2231->__mosek_2fusion_2Utils_2StringBuffer__clear()->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["))->__mosek_2fusion_2Utils_2StringBuffer__a(::mosek::fusion::p_Set::indexToString(shape,(long long)(_2232)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("].coneslack"))->toString());
            }
          }
        }
      }
      names_flushed = true;
    }
  }
  {}
}
std::string mosek::fusion::ConicConstraint :: toString() { return mosek::fusion::p_ConicConstraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_ConicConstraint::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2233 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2233->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ConicConstraint('"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("')"));
  return _2233->toString();
}
void mosek::fusion::p_ConicConstraint::domainToString(long long _2234,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2235){
  throw ::mosek::fusion::UnimplementedError(std::string ("ConicConstraint.domainToString"));
}
monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_ConicConstraint::__mosek_2fusion_2ConicConstraint__clone(monty::rc_ptr< ::mosek::fusion::Model > _2236){
  return (::mosek::fusion::p_ConicConstraint::_new_ConicConstraint(::mosek::fusion::ConicConstraint::t(_pubthis),_2236)).as<::mosek::fusion::ModelConstraint>();
}
void mosek::fusion::p_ConicConstraint::destroy(){nativeslack.reset();nativeidxs.reset();shape.reset();dom.reset();}void mosek::fusion::ConicConstraint::destroy() { mosek::fusion::p_ConicConstraint::_get_impl(this)->destroy(); }mosek::fusion::LinearConstraint::LinearConstraint(mosek::fusion::p_LinearConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "LinearConstraint()" << this << std::endl; */ }mosek::fusion::LinearConstraint::~LinearConstraint() {  /* std::cout << "~LinearConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_LinearConstraint::p_LinearConstraint  (::mosek::fusion::LinearConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::LinearConstraint::t mosek::fusion::p_LinearConstraint::_new_LinearConstraint  (monty::rc_ptr< ::mosek::fusion::LinearConstraint > _2237,    monty::rc_ptr< ::mosek::fusion::Model > _2238){ return new mosek::fusion::LinearConstraint(_2237,_2238); }mosek::fusion::LinearConstraint::LinearConstraint  (monty::rc_ptr< ::mosek::fusion::LinearConstraint > _2237,    monty::rc_ptr< ::mosek::fusion::Model > _2238) :    LinearConstraint(new mosek::fusion::p_LinearConstraint(this)){ mosek::fusion::p_LinearConstraint::_get_impl(this)->_initialize(_2237,_2238); }void mosek::fusion::p_LinearConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearConstraint > _2237,    monty::rc_ptr< ::mosek::fusion::Model > _2238){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelConstraint::_initialize(_2237,_2238);
    conid = mosek::fusion::p_LinearConstraint::_get_impl(_2237)->conid;
    name = mosek::fusion::p_LinearConstraint::_get_impl(_2237)->name;
  }
}mosek::fusion::LinearConstraint::t mosek::fusion::p_LinearConstraint::_new_LinearConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2239,    const std::string &  _2240,    int _2241,    std::shared_ptr< monty::ndarray< int,1 > > _2242,    std::shared_ptr< monty::ndarray< int,1 > > _2243){ return new mosek::fusion::LinearConstraint(_2239,_2240,_2241,_2242,_2243); }mosek::fusion::LinearConstraint::LinearConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2239,    const std::string &  _2240,    int _2241,    std::shared_ptr< monty::ndarray< int,1 > > _2242,    std::shared_ptr< monty::ndarray< int,1 > > _2243) :    LinearConstraint(new mosek::fusion::p_LinearConstraint(this)){ mosek::fusion::p_LinearConstraint::_get_impl(this)->_initialize(_2239,_2240,_2241,_2242,_2243); }void mosek::fusion::p_LinearConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2239,    const std::string &  _2240,    int _2241,    std::shared_ptr< monty::ndarray< int,1 > > _2242,    std::shared_ptr< monty::ndarray< int,1 > > _2243){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2242(_2242 ? _2242->raw() : nullptr, _2242 ? _2242->size(0) : 0);
    _checked_ptr_1<int> _ptr__2243(_2243 ? _2243->raw() : nullptr, _2243 ? _2243->size(0) : 0);
    mosek::fusion::p_ModelConstraint::_initialize(_2239,_2240,_2242,_2243);
    mosek::fusion::p_LinearConstraint::_get_impl(::mosek::fusion::LinearConstraint::t(_pubthis))->conid = _2241;
    mosek::fusion::p_LinearConstraint::_get_impl(::mosek::fusion::LinearConstraint::t(_pubthis))->name = _2240;
  }
}std::string mosek::fusion::LinearConstraint :: toString() { return mosek::fusion::p_LinearConstraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_LinearConstraint::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2244 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2244->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("LinearConstraint('"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("')"));
  return _2244->toString();
}
void mosek::fusion::p_LinearConstraint::domainToString(long long _2245,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2246){
}
monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_LinearConstraint::__mosek_2fusion_2LinearConstraint__clone(monty::rc_ptr< ::mosek::fusion::Model > _2247){
  return (::mosek::fusion::p_LinearConstraint::_new_LinearConstraint(::mosek::fusion::LinearConstraint::t(_pubthis),_2247)).as<::mosek::fusion::ModelConstraint>();
}
void mosek::fusion::p_LinearConstraint::destroy(){}void mosek::fusion::LinearConstraint::destroy() { mosek::fusion::p_LinearConstraint::_get_impl(this)->destroy(); }mosek::fusion::ModelConstraint::ModelConstraint(mosek::fusion::p_ModelConstraint *_impl) : mosek::fusion::Constraint(_impl) { /*std::cout << "ModelConstraint()" << this << std::endl; */ }mosek::fusion::ModelConstraint::~ModelConstraint() {  /* std::cout << "~ModelConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_ModelConstraint::p_ModelConstraint  (::mosek::fusion::ModelConstraint * _pubthis) :     mosek::fusion::p_Constraint(_pubthis),    _pubthis(_pubthis){}void mosek::fusion::p_ModelConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::ModelConstraint > _2248,    monty::rc_ptr< ::mosek::fusion::Model > _2249){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_Constraint::_initialize(_2248,_2249);
    name = mosek::fusion::p_ModelConstraint::_get_impl(_2248)->name;
    names_flushed = mosek::fusion::p_ModelConstraint::_get_impl(_2248)->names_flushed;
    nativeidxs = mosek::fusion::p_ModelConstraint::_get_impl(_2248)->nativeidxs;
    shape = mosek::fusion::p_ModelConstraint::_get_impl(_2248)->shape;
  }
}void mosek::fusion::p_ModelConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2250,    const std::string &  _2251,    std::shared_ptr< monty::ndarray< int,1 > > _2252,    std::shared_ptr< monty::ndarray< int,1 > > _2253){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2252(_2252 ? _2252->raw() : nullptr, _2252 ? _2252->size(0) : 0);
    _checked_ptr_1<int> _ptr__2253(_2253 ? _2253->raw() : nullptr, _2253 ? _2253->size(0) : 0);
    mosek::fusion::p_Constraint::_initialize(_2250,_2252,_2253);
    mosek::fusion::p_ModelConstraint::_get_impl(::mosek::fusion::ModelConstraint::t(_pubthis))->name = _2251;
    mosek::fusion::p_ModelConstraint::_get_impl(::mosek::fusion::ModelConstraint::t(_pubthis))->names_flushed = false;
    mosek::fusion::p_ModelConstraint::_get_impl(::mosek::fusion::ModelConstraint::t(_pubthis))->nativeidxs = _2253;
    mosek::fusion::p_ModelConstraint::_get_impl(::mosek::fusion::ModelConstraint::t(_pubthis))->shape = _2252;
  }
}std::string mosek::fusion::ModelConstraint :: toString() { return mosek::fusion::p_ModelConstraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_ModelConstraint::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2254 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2254->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Constraint('"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("')"));
  return _2254->toString();
}
void mosek::fusion::p_ModelConstraint::flushNames(){
  monty::rc_ptr< ::mosek::fusion::Model > _2255 = _pubthis->__mosek_2fusion_2Constraint__getModel();
  if ((!names_flushed))
  {
    {
      if (((int)((name).size()) == (int)0))
      {
        {
          mosek::fusion::p_Model::_get_impl(_2255.get())->connames(nativeidxs,std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_pubthis->getSize())}),std::shared_ptr< monty::ndarray< long long,1 > >(nullptr));
        }
      }
      else
      {
        {
          monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2256 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
          _2256->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
          if ((_pubthis->getND() > (int)0))
          {
            {
              _2256->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
              int _7824 = (int)1;
              int _7825 = _pubthis->getND();
              for (int _2257 = _7824; _2257 < _7825; ++_2257)
              {
                {
                  _2256->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_2257);
                }
              }
            }
          }
          {}
          _2256->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
          std::shared_ptr< monty::ndarray< int,1 > > _7826;
          bool _7827 = (_pubthis->getND() > (int)0);
          if (_7827)
          {
            _7826 = _pubthis->getShape();
          }
          else
          {
            _7826 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1)});
          }
          mosek::fusion::p_Model::_get_impl(_2255.get())->connames(nativeidxs,_2256->toString(),_7826,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr));
          names_flushed = true;
        }
      }
    }
  }
  {}
}
void mosek::fusion::p_ModelConstraint::destroy(){shape.reset();nativeidxs.reset();}void mosek::fusion::ModelConstraint::destroy() { mosek::fusion::p_ModelConstraint::_get_impl(this)->destroy(); }mosek::fusion::Constraint::Constraint(mosek::fusion::p_Constraint *_impl) : _impl(_impl) { /*std::cout << "Constraint() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Constraint::~Constraint() { delete _impl; _impl = nullptr; }mosek::fusion::p_Constraint::p_Constraint  (::mosek::fusion::Constraint * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::p_Constraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Constraint > _2259,    monty::rc_ptr< ::mosek::fusion::Model > _2260){monty::rc_reserve __reserve_this(_pubthis);   {
    model = _2260;
    shape = mosek::fusion::p_Constraint::_get_impl(_2259)->shape;
    nativeidxs = mosek::fusion::p_Constraint::_get_impl(_2259)->nativeidxs;
  }
}void mosek::fusion::p_Constraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2261,    std::shared_ptr< monty::ndarray< int,1 > > _2262,    std::shared_ptr< monty::ndarray< int,1 > > _2263){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2262(_2262 ? _2262->raw() : nullptr, _2262 ? _2262->size(0) : 0);
    _checked_ptr_1<int> _ptr__2263(_2263 ? _2263->raw() : nullptr, _2263 ? _2263->size(0) : 0);
    mosek::fusion::p_Constraint::_get_impl(::mosek::fusion::Constraint::t(_pubthis))->model = _2261;
    mosek::fusion::p_Constraint::_get_impl(::mosek::fusion::Constraint::t(_pubthis))->shape = _2262;
    mosek::fusion::p_Constraint::_get_impl(::mosek::fusion::Constraint::t(_pubthis))->nativeidxs = _2263;
  }
}std::string mosek::fusion::Constraint :: toString() { return mosek::fusion::p_Constraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_Constraint::toString(){
  throw ::mosek::fusion::UnimplementedError(std::string ("Constraint.toString"));
}
void mosek::fusion::p_Constraint::toStringArray(std::shared_ptr< monty::ndarray< long long,1 > > _2264,long long _2265,std::shared_ptr< monty::ndarray< std::string,1 > > _2266){
  _checked_ptr_1<long long> _ptr__2264(_2264 ? _2264->raw() : nullptr, _2264 ? _2264->size(0) : 0);
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::Constraint :: dual() { return mosek::fusion::p_Constraint::_get_impl(this)->dual(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Constraint::dual(){
  std::shared_ptr< monty::ndarray< double,1 > > _2267 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((nativeidxs)->size(0)))));
  _checked_ptr_1<double> _ptr__2267(_2267 ? _2267->raw() : nullptr,_2267 ? _2267->size(0) : 0);
  values(false,(int)0,_2267);
  return _2267;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::Constraint :: level() { return mosek::fusion::p_Constraint::_get_impl(this)->level(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Constraint::level(){
  std::shared_ptr< monty::ndarray< double,1 > > _2268 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((nativeidxs)->size(0)))));
  _checked_ptr_1<double> _ptr__2268(_2268 ? _2268->raw() : nullptr,_2268 ? _2268->size(0) : 0);
  values(true,(int)0,_2268);
  return _2268;
}
void mosek::fusion::p_Constraint::values(bool _2269,int _2270,std::shared_ptr< monty::ndarray< double,1 > > _2271){
  _checked_ptr_1<double> _ptr__2271(_2271 ? _2271->raw() : nullptr, _2271 ? _2271->size(0) : 0);
  model->getConstraintValues(_2269,nativeidxs,_2271,_2270);
}
void mosek::fusion::Constraint :: update(std::shared_ptr< monty::ndarray< double,1 > > _2272) { mosek::fusion::p_Constraint::_get_impl(this)->update(_2272); }void mosek::fusion::p_Constraint::update(std::shared_ptr< monty::ndarray< double,1 > > _2272){
  _checked_ptr_1<double> _ptr__2272(_2272 ? _2272->raw() : nullptr, _2272 ? _2272->size(0) : 0);
  mosek::fusion::p_Model::_get_impl(model.get())->update_bfix(nativeidxs,_2272);
}
void mosek::fusion::Constraint :: update(monty::rc_ptr< ::mosek::fusion::Expression > _2273) { mosek::fusion::p_Constraint::_get_impl(this)->update(_2273); }void mosek::fusion::p_Constraint::update(monty::rc_ptr< ::mosek::fusion::Expression > _2273){
  std::shared_ptr< monty::ndarray< int,1 > > _2274 = _2273->getShape();
  _checked_ptr_1<int> _ptr__2274(_2274 ? _2274->raw() : nullptr,_2274 ? _2274->size(0) : 0);
  if (((int)((shape)->size(0)) < (int)((_2274)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
    }
  }
  {}
  int _7828 = (int)0;
  int _7829 = (int)((_2274)->size(0));
  for (int _2275 = _7828; _2275 < _7829; ++_2275)
  {
    {
      if ((_ptr__2274[_2275] != ((*shape)(_2275))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
        }
      }
      {}
    }
  }
  int _7830 = (int)((_2274)->size(0));
  int _7831 = (int)((shape)->size(0));
  for (int _2276 = _7830; _2276 < _7831; ++_2276)
  {
    {
      if ((((*shape)(_2276)) != (int)1))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
        }
      }
      {}
    }
  }
  mosek::fusion::p_Model::_get_impl(model.get())->update(nativeidxs,_2273);
}
void mosek::fusion::Constraint :: update(monty::rc_ptr< ::mosek::fusion::Expression > _2277,monty::rc_ptr< ::mosek::fusion::Variable > _2278,bool _2279) { mosek::fusion::p_Constraint::_get_impl(this)->update(_2277,_2278,_2279); }void mosek::fusion::p_Constraint::update(monty::rc_ptr< ::mosek::fusion::Expression > _2277,monty::rc_ptr< ::mosek::fusion::Variable > _2278,bool _2279){
  int _2280 = _pubthis->getND();
  std::shared_ptr< monty::ndarray< int,1 > > _2281 = _2277->getShape();
  _checked_ptr_1<int> _ptr__2281(_2281 ? _2281->raw() : nullptr,_2281 ? _2281->size(0) : 0);
  if ((_2280 < (int)((_2281)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
    }
  }
  {}
  int _7832 = (int)0;
  int _7833 = (int)((_2281)->size(0));
  for (int _2282 = _7832; _2282 < _7833; ++_2282)
  {
    {
      if ((_ptr__2281[_2282] != ((*shape)(_2282))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
        }
      }
      {}
    }
  }
  int _7834 = (int)((_2281)->size(0));
  int _7835 = (int)((shape)->size(0));
  for (int _2283 = _7834; _2283 < _7835; ++_2283)
  {
    {
      if ((((*shape)(_2283)) != (int)1))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
        }
      }
      {}
    }
  }
  int _2284 = _2278->numInst();
  std::shared_ptr< monty::ndarray< long long,1 > > _2285 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2284)));
  _checked_ptr_1<long long> _ptr__2285(_2285 ? _2285->raw() : nullptr,_2285 ? _2285->size(0) : 0);
  if ((_2284 < _2278->getSize()))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _2286 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2284)));
      _checked_ptr_1<long long> _ptr__2286(_2286 ? _2286->raw() : nullptr,_2286 ? _2286->size(0) : 0);
      _2278->inst((int)0,_2286,(int)0,_2285);
    }
  }
  else
  {
    {
      _2278->inst((int)0,_2285);
    }
  }
  int _7836 = (int)0;
  int _7837 = _2284;
  for (int _2287 = _7836; _2287 < _7837; ++_2287)
  {
    {
      if ((_ptr__2285[_2287] < (int)0))
      {
        {
          throw ::mosek::fusion::UnimplementedError(std::string ("Updating semidefinite terms is currently not possible"));
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _2288;
  _checked_ptr_1<int> _ptr__2288(_2288 ? _2288->raw() : nullptr,_2288 ? _2288->size(0) : 0);
  {
    bool _2289 = true;
    int _7838 = (int)0;
    int _7839 = (_2284 - (int)1);
    for (int _2290 = _7838; _2290 < _7839; ++_2290)
    {
      {
        _2289 = (_2289 && (_ptr__2285[_2290] < _ptr__2285[safe_add( _2290,(int)1 )]));
      }
    }
    if (_2289)
    {
      {
        std::vector<int> _7840;
        for (int _2291 = (int)0, _7841 = _2284; _2291 < _7841 ; ++_2291)
        {
          _7840.push_back((int)(_ptr__2285[_2291] - (int)1));
        }
        auto _7842 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7840.size()),_7840.begin(),_7840.end()));
        _2288 = _7842;
        _ptr__2288.update(_2288 ? _2288->raw() : nullptr, _2288 ? _2288->size(0) : 0);
      }
    }
    else
    {
      {
        std::vector<long long> _7843;
        for (int _2293 = (int)0, _7844 = _2284; _2293 < _7844 ; ++_2293)
        {
          _7843.push_back(_2293);
        }
        auto _7845 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7843.size()),_7843.begin(),_7843.end()));
        std::shared_ptr< monty::ndarray< long long,1 > > _2292 = _7845;
        _checked_ptr_1<long long> _ptr__2292(_2292 ? _2292->raw() : nullptr,_2292 ? _2292->size(0) : 0);
        ::mosek::fusion::p_CommonTools::argQsort(_2292,_2285,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_2284));
        int _2294 = (int)1;
        int _7846 = (int)1;
        int _7847 = _2284;
        for (int _2295 = _7846; _2295 < _7847; ++_2295)
        {
          {
            if ((_ptr__2285[_ptr__2292[(_2295 - (int)1)]] < _ptr__2285[_ptr__2292[_2295]]))
            {
              {
                ++ _2294;
              }
            }
            {}
          }
        }
        _2288 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2294)));
        _ptr__2288.update(_2288 ? _2288->raw() : nullptr, _2288 ? _2288->size(0) : 0);
        int _2296 = (int)0;
        _ptr__2288[(int)0] = (int)(_ptr__2285[_ptr__2292[(int)0]] - (int)1);
        int _7848 = (int)1;
        int _7849 = _2284;
        for (int _2297 = _7848; _2297 < _7849; ++_2297)
        {
          {
            if ((_ptr__2285[(_2297 - (int)1)] < _ptr__2285[_2297]))
            {
              {
                _ptr__2288[_2296] = (int)(_ptr__2285[_ptr__2292[_2297]] - (int)1);
                ++ _2296;
              }
            }
            {}
          }
        }
      }
    }
  }
  mosek::fusion::p_Model::_get_impl(model.get())->update(nativeidxs,_2277,_2288,_2279);
}
void mosek::fusion::Constraint :: update(monty::rc_ptr< ::mosek::fusion::Expression > _2298,monty::rc_ptr< ::mosek::fusion::Variable > _2299) { mosek::fusion::p_Constraint::_get_impl(this)->update(_2298,_2299); }void mosek::fusion::p_Constraint::update(monty::rc_ptr< ::mosek::fusion::Expression > _2298,monty::rc_ptr< ::mosek::fusion::Variable > _2299){
  _pubthis->update(_2298,_2299,false);
}
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__get_model() { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__get_model(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Constraint::get_model() { return __mosek_2fusion_2Constraint__get_model(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__get_model(){
  return model;
}
int mosek::fusion::Constraint :: get_nd() { return mosek::fusion::p_Constraint::_get_impl(this)->get_nd(); }int mosek::fusion::p_Constraint::get_nd(){
  return (int)((shape)->size(0));
}
long long mosek::fusion::Constraint :: size() { return mosek::fusion::p_Constraint::_get_impl(this)->size(); }long long mosek::fusion::p_Constraint::size(){
  long long _2300 = (int)1;
  int _7850 = (int)0;
  int _7851 = (int)((shape)->size(0));
  for (int _2301 = _7850; _2301 < _7851; ++_2301)
  {
    {
      _2300 *= ((*shape)(_2301));
    }
  }
  return _2300;
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::stack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2302,    int _2303) { return mosek::fusion::p_Constraint::stack(_2302,_2303); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::stack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2302,int _2303){
  return ::mosek::fusion::p_Constraint::dstack(_2302,_2303);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::stack  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2304,    monty::rc_ptr< ::mosek::fusion::Constraint > _2305,    monty::rc_ptr< ::mosek::fusion::Constraint > _2306,    int _2307) { return mosek::fusion::p_Constraint::stack(_2304,_2305,_2306,_2307); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::stack(monty::rc_ptr< ::mosek::fusion::Constraint > _2304,monty::rc_ptr< ::mosek::fusion::Constraint > _2305,monty::rc_ptr< ::mosek::fusion::Constraint > _2306,int _2307){
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2304.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2305.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2306.get())}),_2307);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::stack  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2308,    monty::rc_ptr< ::mosek::fusion::Constraint > _2309,    int _2310) { return mosek::fusion::p_Constraint::stack(_2308,_2309,_2310); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::stack(monty::rc_ptr< ::mosek::fusion::Constraint > _2308,monty::rc_ptr< ::mosek::fusion::Constraint > _2309,int _2310){
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2308.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2309.get())}),_2310);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::hstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2311) { return mosek::fusion::p_Constraint::hstack(_2311); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::hstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2311){
  return ::mosek::fusion::p_Constraint::dstack(_2311,(int)1);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::vstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2312) { return mosek::fusion::p_Constraint::vstack(_2312); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::vstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2312){
  return ::mosek::fusion::p_Constraint::dstack(_2312,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::hstack  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2313,    monty::rc_ptr< ::mosek::fusion::Constraint > _2314,    monty::rc_ptr< ::mosek::fusion::Constraint > _2315) { return mosek::fusion::p_Constraint::hstack(_2313,_2314,_2315); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::hstack(monty::rc_ptr< ::mosek::fusion::Constraint > _2313,monty::rc_ptr< ::mosek::fusion::Constraint > _2314,monty::rc_ptr< ::mosek::fusion::Constraint > _2315){
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2313.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2314.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2315.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::vstack  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2316,    monty::rc_ptr< ::mosek::fusion::Constraint > _2317,    monty::rc_ptr< ::mosek::fusion::Constraint > _2318) { return mosek::fusion::p_Constraint::vstack(_2316,_2317,_2318); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::vstack(monty::rc_ptr< ::mosek::fusion::Constraint > _2316,monty::rc_ptr< ::mosek::fusion::Constraint > _2317,monty::rc_ptr< ::mosek::fusion::Constraint > _2318){
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2316.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2317.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2318.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::hstack  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2319,    monty::rc_ptr< ::mosek::fusion::Constraint > _2320) { return mosek::fusion::p_Constraint::hstack(_2319,_2320); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::hstack(monty::rc_ptr< ::mosek::fusion::Constraint > _2319,monty::rc_ptr< ::mosek::fusion::Constraint > _2320){
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2319.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2320.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::vstack  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2321,    monty::rc_ptr< ::mosek::fusion::Constraint > _2322) { return mosek::fusion::p_Constraint::vstack(_2321,_2322); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::vstack(monty::rc_ptr< ::mosek::fusion::Constraint > _2321,monty::rc_ptr< ::mosek::fusion::Constraint > _2322){
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2321.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2322.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2323,int _2324){
  monty::rc_ptr< ::mosek::fusion::Model > _2325 = nullptr;
  {
    int _7852 = (int)0;
    int _7853 = (int)((_2323)->size(0));
    for (int _2326 = _7852; _2326 < _7853; ++_2326)
    {
      {
        if ((NULL == _2325.get()))
        {
          {
            _2325 = ((*_2323)(_2326))->__mosek_2fusion_2Constraint__getModel();
          }
        }
        else if(((NULL != mosek::fusion::p_Constraint::_get_impl(((*_2323)(_2326)))->model.get()) && (mosek::fusion::p_Constraint::_get_impl(((*_2323)(_2326)))->model != _2325)))
        {
          {
            monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2327 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
            std::string _7854;
            bool _7855 = ((int)((mosek::fusion::p_Model::_get_impl(_2325.get())->getName()).size()) > (int)0);
            if (_7855)
            {
              _7854 = mosek::fusion::p_Model::_get_impl(_2325.get())->getName();
            }
            else
            {
              _7854 = std::string ("?");
            }
            std::string _2328 = _7854;
            std::string _7856;
            bool _7857 = ((int)((mosek::fusion::p_Model::_get_impl(((*_2323)(_2326))->__mosek_2fusion_2Constraint__getModel().get())->getName()).size()) > (int)0);
            if (_7857)
            {
              _7856 = mosek::fusion::p_Model::_get_impl(((*_2323)(_2326))->__mosek_2fusion_2Constraint__getModel().get())->getName();
            }
            else
            {
              _7856 = std::string ("?");
            }
            std::string _2329 = _7856;
            _2327->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Constraints belong to different models: '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_2328)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("' and '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_2329)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"));
            throw ::mosek::fusion::ModelError(_2327->toString());
          }
        }
        {}
      }
    }
  }
  if (((int)((_2323)->size(0)) == (int)0))
  {
    {
      return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(nullptr,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))))).as<::mosek::fusion::Constraint>();
    }
  }
  else if(((int)((_2323)->size(0)) == (int)1))
  {
    {
      return ((*_2323)((int)1));
    }
  }
  else
  {
    {
      int _2330 = (int)((_2323)->size(0));
      int _2331 = (int)1;
      int _7858 = (int)0;
      int _7859 = _2330;
      for (int _2332 = _7858; _2332 < _7859; ++_2332)
      {
        {
          int _7860;
          bool _7861 = (((*_2323)(_2332))->getND() > _2331);
          if (_7861)
          {
            _7860 = ((*_2323)(_2332))->getND();
          }
          else
          {
            _7860 = _2331;
          }
          _2331 = _7860;
        }
      }
      if ((_2324 == _2331))
      {
        {
          ++ _2331;
        }
      }
      {}
      std::shared_ptr< monty::ndarray< int,2 > > _2333 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape(_2330,_2331)));
      int _7862 = (int)0;
      int _7863 = _2330;
      for (int _2334 = _7862; _2334 < _7863; ++_2334)
      {
        {
          int _7864 = (int)0;
          int _7865 = _2331;
          for (int _2335 = _7864; _2335 < _7865; ++_2335)
          {
            {
              ((*_2333)(_2334,_2335)) = (int)1;
            }
          }
        }
      }
      std::vector<int> _7866;
      for (int _2337 = (int)0, _7867 = _2330; _2337 < _7867 ; ++_2337)
      {
        _7866.push_back(((*_2323)(_2337))->getSize());
      }
      auto _7868 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7866.size()),_7866.begin(),_7866.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _2336 = _7868;
      _checked_ptr_1<int> _ptr__2336(_2336 ? _2336->raw() : nullptr,_2336 ? _2336->size(0) : 0);
      int _2338 = (int)0;
      int _7869 = (int)0;
      int _7870 = _2330;
      for (int _2339 = _7869; _2339 < _7870; ++_2339)
      {
        {
          _2338 += _ptr__2336[_2339];
        }
      }
      int _7871 = (int)0;
      int _7872 = _2330;
      for (int _2340 = _7871; _2340 < _7872; ++_2340)
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _2341 = ((*_2323)(_2340))->getShape();
          _checked_ptr_1<int> _ptr__2341(_2341 ? _2341->raw() : nullptr,_2341 ? _2341->size(0) : 0);
          int _7873 = (int)0;
          int _7874 = (int)((_2341)->size(0));
          for (int _2342 = _7873; _2342 < _7874; ++_2342)
          {
            {
              ((*_2333)(_2340,_2342)) = _ptr__2341[_2342];
            }
          }
        }
      }
      if (((_2324 < (int)0) || (_2324 > _2331)))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid stacking dimension"));
        }
      }
      {}
      int _7875 = (int)0;
      int _7876 = _2324;
      for (int _2343 = _7875; _2343 < _7876; ++_2343)
      {
        {
          int _7877 = (int)1;
          int _7878 = _2330;
          for (int _2344 = _7877; _2344 < _7878; ++_2344)
          {
            {
              if ((((*_2333)((int)0,_2343)) != ((*_2333)(_2344,_2343))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Constraint dimensions do not match"));
                }
              }
              {}
            }
          }
        }
      }
      int _7879 = safe_add( _2324,(int)1 );
      int _7880 = _2331;
      for (int _2345 = _7879; _2345 < _7880; ++_2345)
      {
        {
          int _7881 = (int)1;
          int _7882 = _2330;
          for (int _2346 = _7881; _2346 < _7882; ++_2346)
          {
            {
              if ((((*_2333)((int)0,_2345)) != ((*_2333)(_2346,_2345))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Constraint dimensions do not match"));
                }
              }
              {}
            }
          }
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _2347 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2338)));
      _checked_ptr_1<int> _ptr__2347(_2347 ? _2347->raw() : nullptr,_2347 ? _2347->size(0) : 0);
      std::vector<int> _7883;
      for (int _2349 = (int)0, _7884 = _2331; _2349 < _7884 ; ++_2349)
      {
        _7883.push_back(((*_2333)((int)0,_2349)));
      }
      auto _7885 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7883.size()),_7883.begin(),_7883.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _2348 = _7885;
      _checked_ptr_1<int> _ptr__2348(_2348 ? _2348->raw() : nullptr,_2348 ? _2348->size(0) : 0);
      int _7886 = (int)0;
      int _7887 = _2331;
      for (int _2350 = _7886; _2350 < _7887; ++_2350)
      {
        {
          _ptr__2348[_2324] += ((*_2333)(_2350,_2324));
        }
      }
      {
        int _2351 = (int)((_2348)->size(0));
        std::shared_ptr< monty::ndarray< long long,1 > > _2352 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( (int)((_2323)->size(0)),(int)1 ))));
        _checked_ptr_1<long long> _ptr__2352(_2352 ? _2352->raw() : nullptr,_2352 ? _2352->size(0) : 0);
        int _7888 = (int)0;
        int _7889 = (int)((_2323)->size(0));
        for (int _2353 = _7888; _2353 < _7889; ++_2353)
        {
          {
            _ptr__2352[safe_add( _2353,(int)1 )] = safe_add( _ptr__2352[_2353],((*_2333)(_2353,_2324)) );
          }
        }
        if ((_2324 == (int)0))
        {
          {
            int _2354 = (int)0;
            int _7890 = (int)0;
            int _7891 = _2330;
            for (int _2355 = _7890; _2355 < _7891; ++_2355)
            {
              {
                int _2356 = (int)((mosek::fusion::p_Constraint::_get_impl(((*_2323)(_2355)))->nativeidxs)->size(0));
                ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Constraint::_get_impl(((*_2323)(_2355)))->nativeidxs,(int)0,_2347,_2354,_2356);
                _2354 += _2356;
              }
            }
          }
        }
        else
        {
          {
            std::vector<std::shared_ptr< monty::ndarray< int,1 > >> _7892;
            for (int _2358 = (int)0, _7893 = _2330; _2358 < _7893 ; ++_2358)
            {
              _7892.push_back(mosek::fusion::p_Constraint::_get_impl(((*_2323)(_2358)))->nativeidxs);
            }
            auto _7894 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 >(monty::shape(_7892.size()),_7892.begin(),_7892.end()));
            std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _2357 = _7894;
            if ((_2324 < _2331))
            {
              {
                int _2359 = (int)1;
                int _7895 = (int)0;
                int _7896 = _2324;
                for (int _2360 = _7895; _2360 < _7896; ++_2360)
                {
                  {
                    _2359 *= _ptr__2348[_2360];
                  }
                }
                int _2361 = (int)1;
                int _7897 = safe_add( _2324,(int)1 );
                int _7898 = _2331;
                for (int _2362 = _7897; _2362 < _7898; ++_2362)
                {
                  {
                    _2361 *= _ptr__2348[_2362];
                  }
                }
                int _2363 = (int)0;
                int _7899 = (int)0;
                int _7900 = _2359;
                for (int _2364 = _7899; _2364 < _7900; ++_2364)
                {
                  {
                    int _7901 = (int)0;
                    int _7902 = _2330;
                    for (int _2365 = _7901; _2365 < _7902; ++_2365)
                    {
                      {
                        int _2366 = (int)0;
                        int _2367 = ((*_2333)(_2365,_2324));
                        int _7903 = (int)0;
                        int _7904 = _2367;
                        for (int _2368 = _7903; _2368 < _7904; ++_2368)
                        {
                          {
                            int _7905 = (int)0;
                            int _7906 = _2361;
                            for (int _2369 = _7905; _2369 < _7906; ++_2369)
                            {
                              {
                                _ptr__2347[_2363] = ((*mosek::fusion::p_Constraint::_get_impl(((*_2323)(_2330)))->nativeidxs)(safe_add( safe_mul( safe_mul( _2364,_2361 ),_2367 ),_2366 )));
                                ++ _2363;
                                ++ _2366;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            else
            {
              {
                int _2370 = (int)1;
                int _7907 = (int)0;
                int _7908 = _2331;
                for (int _2371 = _7907; _2371 < _7908; ++_2371)
                {
                  {
                    _2370 *= _ptr__2348[_2371];
                  }
                }
                int _2372 = (int)0;
                int _7909 = (int)0;
                int _7910 = _2370;
                for (int _2373 = _7909; _2373 < _7910; ++_2373)
                {
                  {
                    int _7911 = (int)0;
                    int _7912 = _2330;
                    for (int _2374 = _7911; _2374 < _7912; ++_2374)
                    {
                      {
                        _ptr__2347[_2372] = ((*((*_2357)(_2374)))(_2373));
                        ++ _2372;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(_2325,_2348,_2347)).as<::mosek::fusion::Constraint>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__index(std::shared_ptr< monty::ndarray< int,1 > > _2375) { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__index(_2375); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::index(std::shared_ptr< monty::ndarray< int,1 > > _2375) { return __mosek_2fusion_2Constraint__index(_2375); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__index(std::shared_ptr< monty::ndarray< int,1 > > _2375){
  _checked_ptr_1<int> _ptr__2375(_2375 ? _2375->raw() : nullptr, _2375 ? _2375->size(0) : 0);
  if (((int)((_2375)->size(0)) != (int)((shape)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("variable shape and slice do not match"));
    }
  }
  else
  {
    {
      int _7913 = (int)0;
      int _7914 = (int)((shape)->size(0));
      for (int _2376 = _7913; _2376 < _7914; ++_2376)
      {
        {
          if (((_ptr__2375[_2376] < (int)0) || (_ptr__2375[_2376] > ((*shape)(_2376)))))
          {
            {
              throw ::mosek::fusion::IndexError(std::string ("index is out of bounds"));
            }
          }
          {}
        }
      }
      int _2377 = (int)((shape)->size(0));
      std::shared_ptr< monty::ndarray< long long,1 > > _2378 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2377)));
      _checked_ptr_1<long long> _ptr__2378(_2378 ? _2378->raw() : nullptr,_2378 ? _2378->size(0) : 0);
      _ptr__2378[(_2377 - (int)1)] = (int)1;
      int _7915 = (int)1;
      int _7916 = _2377;
      for (int _2379 = _7915; _2379 < _7916; ++_2379)
      {
        {
          _ptr__2378[((_2377 - _2379) - (int)1)] = safe_mul( _ptr__2378[(_2377 - _2379)],((*shape)(_2379)) );
        }
      }
      int _2380 = (int)0;
      int _7917 = (int)0;
      int _7918 = _2377;
      for (int _2381 = _7917; _2381 < _7918; ++_2381)
      {
        {
          _2380 += (int)safe_mul( _ptr__2378[_2381],_ptr__2375[_2381] );
        }
      }
      return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(model,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(((*nativeidxs)(_2380)))}))).as<::mosek::fusion::Constraint>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__index(int _2382) { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__index(_2382); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::index(int _2382) { return __mosek_2fusion_2Constraint__index(_2382); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__index(int _2382){
  if ((((int)((shape)->size(0)) == (int)0) && (_2382 == (int)0)))
  {
    {
      return ::mosek::fusion::Constraint::t(_pubthis);
    }
  }
  else if(((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable shape and slice do not match"));
    }
  }
  else if(((_2382 < (int)0) || (_2382 > ((*shape)((int)0)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Index is out of bounds"));
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(model,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(((*nativeidxs)(_2382)))}))).as<::mosek::fusion::Constraint>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__slice(std::shared_ptr< monty::ndarray< int,1 > > _2383,std::shared_ptr< monty::ndarray< int,1 > > _2384) { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__slice(_2383,_2384); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::slice(std::shared_ptr< monty::ndarray< int,1 > > _2383,std::shared_ptr< monty::ndarray< int,1 > > _2384) { return __mosek_2fusion_2Constraint__slice(_2383,_2384); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__slice(std::shared_ptr< monty::ndarray< int,1 > > _2383,std::shared_ptr< monty::ndarray< int,1 > > _2384){
  _checked_ptr_1<int> _ptr__2383(_2383 ? _2383->raw() : nullptr, _2383 ? _2383->size(0) : 0);
  _checked_ptr_1<int> _ptr__2384(_2384 ? _2384->raw() : nullptr, _2384 ? _2384->size(0) : 0);
  if (((int)((_2383)->size(0)) != (int)((_2384)->size(0))))
  {
    {
      throw ::mosek::fusion::SliceError(std::string ("invalid slice"));
    }
  }
  else if(((int)((_2383)->size(0)) != (int)((shape)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("variable shape and slice do not match"));
    }
  }
  else
  {
    {
      int _7919 = (int)0;
      int _7920 = (int)((shape)->size(0));
      for (int _2385 = _7919; _2385 < _7920; ++_2385)
      {
        {
          if (((_ptr__2383[_2385] < (int)0) || (_ptr__2384[_2385] > ((*shape)(_2385)))))
          {
            {
              throw ::mosek::fusion::IndexError(std::string ("slice is out of bounds"));
            }
          }
          else if((_ptr__2383[_2385] > _ptr__2384[_2385]))
          {
            {
              throw ::mosek::fusion::SliceError(std::string ("invalid slice"));
            }
          }
          {}
        }
      }
      int _2386 = (int)((shape)->size(0));
      std::vector<int> _7921;
      for (int _2388 = (int)0, _7922 = _2386; _2388 < _7922 ; ++_2388)
      {
        _7921.push_back((_ptr__2384[_2388] - _ptr__2383[_2388]));
      }
      auto _7923 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7921.size()),_7921.begin(),_7921.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _2387 = _7923;
      _checked_ptr_1<int> _ptr__2387(_2387 ? _2387->raw() : nullptr,_2387 ? _2387->size(0) : 0);
      int _2389 = (int)1;
      int _7924 = (int)0;
      int _7925 = _2386;
      for (int _2390 = _7924; _2390 < _7925; ++_2390)
      {
        {
          _2389 *= (_ptr__2384[_2390] - _ptr__2383[_2390]);
        }
      }
      if ((_2389 == (int)0))
      {
        {
          return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(model,_2387,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))))).as<::mosek::fusion::Constraint>();
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _2391 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2389)));
          _checked_ptr_1<int> _ptr__2391(_2391 ? _2391->raw() : nullptr,_2391 ? _2391->size(0) : 0);
          {
            std::shared_ptr< monty::ndarray< int,1 > > _2392 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2386)));
            _checked_ptr_1<int> _ptr__2392(_2392 ? _2392->raw() : nullptr,_2392 ? _2392->size(0) : 0);
            _ptr__2392[(_2386 - (int)1)] = (int)1;
            int _7926 = (int)1;
            int _7927 = _2386;
            for (int _2393 = _7926; _2393 < _7927; ++_2393)
            {
              {
                _ptr__2392[((_2386 - _2393) - (int)1)] = safe_mul( _ptr__2392[(_2386 - _2393)],((*shape)((_2386 - _2393))) );
              }
            }
            int _2394 = (int)0;
            int _7928 = (int)0;
            int _7929 = _2386;
            for (int _2395 = _7928; _2395 < _7929; ++_2395)
            {
              {
                _2394 += safe_mul( _ptr__2383[_2395],_ptr__2392[_2395] );
              }
            }
            std::vector<int> _7930;
            for (int _2397 = (int)0, _7931 = _2386; _2397 < _7931 ; ++_2397)
            {
              _7930.push_back(_2394);
            }
            auto _7932 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7930.size()),_7930.begin(),_7930.end()));
            std::shared_ptr< monty::ndarray< int,1 > > _2396 = _7932;
            _checked_ptr_1<int> _ptr__2396(_2396 ? _2396->raw() : nullptr,_2396 ? _2396->size(0) : 0);
            std::vector<int> _7933;
            for (int _2399 = (int)0, _7934 = _2386; _2399 < _7934 ; ++_2399)
            {
              _7933.push_back(_ptr__2383[_2399]);
            }
            auto _7935 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7933.size()),_7933.begin(),_7933.end()));
            std::shared_ptr< monty::ndarray< int,1 > > _2398 = _7935;
            _checked_ptr_1<int> _ptr__2398(_2398 ? _2398->raw() : nullptr,_2398 ? _2398->size(0) : 0);
            int _7936 = (int)0;
            int _7937 = _2389;
            for (int _2400 = _7936; _2400 < _7937; ++_2400)
            {
              {
                _ptr__2391[_2400] = ((*nativeidxs)(_ptr__2396[(_2386 - (int)1)]));
                _ptr__2398[(_2386 - (int)1)] += (int)1;
                _ptr__2396[(_2386 - (int)1)] += _ptr__2392[(_2386 - (int)1)];
                if ((_ptr__2398[(_2386 - (int)1)] >= _ptr__2384[(_2386 - (int)1)]))
                {
                  {
                    int _2401 = (_2386 - (int)1);
                    while ( ((_2401 > (int)0) && (_ptr__2398[_2401] >= _ptr__2384[_2401])) )
                    {
                      {
                        _ptr__2398[_2401] = _ptr__2383[_2401];
                        _ptr__2398[(_2401 - (int)1)] += (int)1;
                        _ptr__2396[(_2401 - (int)1)] += _ptr__2392[(_2401 - (int)1)];
                        -- _2401;
                      }
                    }
                    int _7938 = safe_add( _2401,(int)1 );
                    int _7939 = _2386;
                    for (int _2402 = _7938; _2402 < _7939; ++_2402)
                    {
                      {
                        _ptr__2396[_2402] = _ptr__2396[_2401];
                      }
                    }
                  }
                }
                {}
              }
            }
          }
          return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(_pubthis->__mosek_2fusion_2Constraint__getModel(),_2387,_2391)).as<::mosek::fusion::Constraint>();
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__slice(int _2403,int _2404) { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__slice(_2403,_2404); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::slice(int _2403,int _2404) { return __mosek_2fusion_2Constraint__slice(_2403,_2404); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__slice(int _2403,int _2404){
  if (((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable shape and slice do not match"));
    }
  }
  {}
  if (((_2403 == (int)0) && (_2404 == ((*shape)((int)0)))))
  {
    {
      return ::mosek::fusion::Constraint::t(_pubthis);
    }
  }
  else if(((_2403 < (int)0) || (_2404 > ((*shape)((int)0)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Slice is out of bounds"));
    }
  }
  else if((_2403 > _2404))
  {
    {
      throw ::mosek::fusion::SliceError(std::string ("Invalid slice"));
    }
  }
  else
  {
    {
      std::vector<int> _7940;
      for (int _2405 = _2403, _7941 = _2404; _2405 < _7941 ; ++_2405)
      {
        _7940.push_back(((*nativeidxs)(_2405)));
      }
      auto _7942 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7940.size()),_7940.begin(),_7940.end()));
      return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(model,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((_2404 - _2403))}),_7942)).as<::mosek::fusion::Constraint>();
    }
  }
}
int mosek::fusion::Constraint :: getND() { return mosek::fusion::p_Constraint::_get_impl(this)->getND(); }int mosek::fusion::p_Constraint::getND(){
  return (int)((shape)->size(0));
}
int mosek::fusion::Constraint :: getSize() { return mosek::fusion::p_Constraint::_get_impl(this)->getSize(); }int mosek::fusion::p_Constraint::getSize(){
  int _2406 = (int)1;
  int _7943 = (int)0;
  int _7944 = (int)((shape)->size(0));
  for (int _2407 = _7943; _2407 < _7944; ++_2407)
  {
    {
      _2406 *= ((*shape)(_2407));
    }
  }
  return _2406;
}
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__getModel() { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__getModel(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Constraint::getModel() { return __mosek_2fusion_2Constraint__getModel(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__getModel(){
  return model;
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Constraint :: getShape() { return mosek::fusion::p_Constraint::_get_impl(this)->getShape(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Constraint::getShape(){
  std::vector<int> _7945;
  for (int _2408 = (int)0, _7946 = (int)((shape)->size(0)); _2408 < _7946 ; ++_2408)
  {
    _7945.push_back(((*shape)(_2408)));
  }
  auto _7947 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7945.size()),_7945.begin(),_7945.end()));
  return _7947;
}
void mosek::fusion::p_Constraint::destroy(){nativeidxs.reset();shape.reset();model.reset();}void mosek::fusion::Constraint::destroy() { mosek::fusion::p_Constraint::_get_impl(this)->destroy(); }mosek::fusion::Set::Set(mosek::fusion::p_Set *_impl) : _impl(_impl) { /*std::cout << "Set() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Set::~Set() { delete _impl; _impl = nullptr; }mosek::fusion::p_Set::p_Set  (::mosek::fusion::Set * _pubthis) :     _pubthis(_pubthis){}long long mosek::fusion::Set::size  ( std::shared_ptr< monty::ndarray< int,1 > > _2409) { return mosek::fusion::p_Set::size(_2409); }long long mosek::fusion::p_Set::size(std::shared_ptr< monty::ndarray< int,1 > > _2409){
  _checked_ptr_1<int> _ptr__2409(_2409 ? _2409->raw() : nullptr, _2409 ? _2409->size(0) : 0);
  long long _2410 = (long long)1;
  int _7948 = (int)0;
  int _7949 = (int)((_2409)->size(0));
  for (int _2411 = _7948; _2411 < _7949; ++_2411)
  {
    {
      _2410 *= _ptr__2409[_2411];
    }
  }
  return _2410;
}
bool mosek::fusion::Set::match  ( std::shared_ptr< monty::ndarray< int,1 > > _2412,    std::shared_ptr< monty::ndarray< int,1 > > _2413) { return mosek::fusion::p_Set::match(_2412,_2413); }bool mosek::fusion::p_Set::match(std::shared_ptr< monty::ndarray< int,1 > > _2412,std::shared_ptr< monty::ndarray< int,1 > > _2413){
  _checked_ptr_1<int> _ptr__2412(_2412 ? _2412->raw() : nullptr, _2412 ? _2412->size(0) : 0);
  _checked_ptr_1<int> _ptr__2413(_2413 ? _2413->raw() : nullptr, _2413 ? _2413->size(0) : 0);
  if (((int)((_2412)->size(0)) != (int)((_2413)->size(0))))
  {
    {
      return false;
    }
  }
  {}
  int _7950 = (int)0;
  int _7951 = (int)((_2412)->size(0));
  for (int _2414 = _7950; _2414 < _7951; ++_2414)
  {
    {
      if ((_ptr__2412[_2414] != _ptr__2413[_2414]))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
long long mosek::fusion::Set::linearidx  ( std::shared_ptr< monty::ndarray< int,1 > > _2415,    std::shared_ptr< monty::ndarray< int,1 > > _2416) { return mosek::fusion::p_Set::linearidx(_2415,_2416); }long long mosek::fusion::p_Set::linearidx(std::shared_ptr< monty::ndarray< int,1 > > _2415,std::shared_ptr< monty::ndarray< int,1 > > _2416){
  _checked_ptr_1<int> _ptr__2415(_2415 ? _2415->raw() : nullptr, _2415 ? _2415->size(0) : 0);
  _checked_ptr_1<int> _ptr__2416(_2416 ? _2416->raw() : nullptr, _2416 ? _2416->size(0) : 0);
  long long _2417 = _ptr__2416[(int)0];
  int _7952 = (int)1;
  int _7953 = (int)((_2416)->size(0));
  for (int _2418 = _7952; _2418 < _7953; ++_2418)
  {
    {
      _2417 = safe_add( safe_mul( _2417,_ptr__2415[_2418] ),_ptr__2416[_2418] );
    }
  }
  return _2417;
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::idxtokey  ( std::shared_ptr< monty::ndarray< int,1 > > _2419,    long long _2420) { return mosek::fusion::p_Set::idxtokey(_2419,_2420); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::idxtokey(std::shared_ptr< monty::ndarray< int,1 > > _2419,long long _2420){
  _checked_ptr_1<int> _ptr__2419(_2419 ? _2419->raw() : nullptr, _2419 ? _2419->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _2421 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_2419)->size(0)))));
  _checked_ptr_1<int> _ptr__2421(_2421 ? _2421->raw() : nullptr,_2421 ? _2421->size(0) : 0);
  ::mosek::fusion::p_Set::idxtokey(_2419,_2420,_2421);
  return _2421;
}
void mosek::fusion::Set::idxtokey  ( std::shared_ptr< monty::ndarray< int,1 > > _2422,    long long _2423,    std::shared_ptr< monty::ndarray< int,1 > > _2424) { mosek::fusion::p_Set::idxtokey(_2422,_2423,_2424); }void mosek::fusion::p_Set::idxtokey(std::shared_ptr< monty::ndarray< int,1 > > _2422,long long _2423,std::shared_ptr< monty::ndarray< int,1 > > _2424){
  _checked_ptr_1<int> _ptr__2422(_2422 ? _2422->raw() : nullptr, _2422 ? _2422->size(0) : 0);
  _checked_ptr_1<int> _ptr__2424(_2424 ? _2424->raw() : nullptr, _2424 ? _2424->size(0) : 0);
  int _2425 = (int)((_2422)->size(0));
  if ((_2425 > (int)0))
  {
    {
      long long _2426 = _2423;
      int _7954 = (int)0;
      int _7955 = (_2425 - (int)1);
      for (int _2427 = _7954; _2427 < _7955; ++_2427)
      {
        {
          _ptr__2424[((_2425 - _2427) - (int)1)] = (int)(_2426 % _ptr__2422[((_2425 - _2427) - (int)1)]);
          _2426 /= _ptr__2422[((_2425 - _2427) - (int)1)];
        }
      }
      _ptr__2424[(int)0] = (int)_2426;
    }
  }
  {}
}
std::string mosek::fusion::Set::indexToString  ( std::shared_ptr< monty::ndarray< int,1 > > _2428,    long long _2429) { return mosek::fusion::p_Set::indexToString(_2428,_2429); }std::string mosek::fusion::p_Set::indexToString(std::shared_ptr< monty::ndarray< int,1 > > _2428,long long _2429){
  _checked_ptr_1<int> _ptr__2428(_2428 ? _2428->raw() : nullptr, _2428 ? _2428->size(0) : 0);
  int _2430 = (int)((_2428)->size(0));
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2431 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  if ((_2430 == (int)0))
  {
    {
      return std::string ("0");
    }
  }
  else if((_2430 == (int)1))
  {
    {
      return _2431->__mosek_2fusion_2Utils_2StringBuffer__a(_2429)->toString();
    }
  }
  else
  {
    {
      long long _2432 = _2429;
      std::shared_ptr< monty::ndarray< int,1 > > _2433 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2430)));
      _checked_ptr_1<int> _ptr__2433(_2433 ? _2433->raw() : nullptr,_2433 ? _2433->size(0) : 0);
      int _7956 = (int)1;
      int _7957 = _2430;
      for (int _2434 = _7956; _2434 < _7957; ++_2434)
      {
        {
          _ptr__2433[(_2430 - _2434)] = (int)(_2432 % _ptr__2428[(_2430 - _2434)]);
          _2432 /= _ptr__2428[(_2430 - _2434)];
        }
      }
      _ptr__2433[(int)0] = (int)_2432;
      _2431->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__2433[(int)0]);
      int _7958 = (int)1;
      int _7959 = _2430;
      for (int _2435 = _7958; _2435 < _7959; ++_2435)
      {
        {
          _2431->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__2433[_2435]);
        }
      }
      return _2431->toString();
    }
  }
}
std::string mosek::fusion::Set::keyToString  ( std::shared_ptr< monty::ndarray< int,1 > > _2436) { return mosek::fusion::p_Set::keyToString(_2436); }std::string mosek::fusion::p_Set::keyToString(std::shared_ptr< monty::ndarray< int,1 > > _2436){
  _checked_ptr_1<int> _ptr__2436(_2436 ? _2436->raw() : nullptr, _2436 ? _2436->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2437 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2437->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__2436[(int)0]);
  int _7960 = (int)1;
  int _7961 = (int)((_2436)->size(0));
  for (int _2438 = _7960; _2438 < _7961; ++_2438)
  {
    {
      _2437->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__2436[_2438]);
    }
  }
  return _2437->toString();
}
void mosek::fusion::Set::indexToKey  ( std::shared_ptr< monty::ndarray< int,1 > > _2439,    long long _2440,    std::shared_ptr< monty::ndarray< int,1 > > _2441) { mosek::fusion::p_Set::indexToKey(_2439,_2440,_2441); }void mosek::fusion::p_Set::indexToKey(std::shared_ptr< monty::ndarray< int,1 > > _2439,long long _2440,std::shared_ptr< monty::ndarray< int,1 > > _2441){
  _checked_ptr_1<int> _ptr__2439(_2439 ? _2439->raw() : nullptr, _2439 ? _2439->size(0) : 0);
  _checked_ptr_1<int> _ptr__2441(_2441 ? _2441->raw() : nullptr, _2441 ? _2441->size(0) : 0);
  int _2442 = (int)((_2439)->size(0));
  if ((_2442 == (int)1))
  {
    {
      _ptr__2441[(int)0] = (int)_2440;
    }
  }
  else
  {
    {
      long long _2443 = _2440;
      int _7962 = (int)1;
      int _7963 = _2442;
      for (int _2444 = _7962; _2444 < _7963; ++_2444)
      {
        {
          _ptr__2441[(_2442 - _2444)] = (int)(_2443 % _ptr__2439[(_2442 - _2444)]);
          _2443 /= _ptr__2439[(_2442 - _2444)];
        }
      }
      _ptr__2441[(int)0] = (int)_2443;
    }
  }
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::Set::strides  ( std::shared_ptr< monty::ndarray< int,1 > > _2445) { return mosek::fusion::p_Set::strides(_2445); }std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_Set::strides(std::shared_ptr< monty::ndarray< int,1 > > _2445){
  _checked_ptr_1<int> _ptr__2445(_2445 ? _2445->raw() : nullptr, _2445 ? _2445->size(0) : 0);
  int _2446 = (int)((_2445)->size(0));
  std::shared_ptr< monty::ndarray< long long,1 > > _2447 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2446)));
  _checked_ptr_1<long long> _ptr__2447(_2447 ? _2447->raw() : nullptr,_2447 ? _2447->size(0) : 0);
  _ptr__2447[(_2446 - (int)1)] = (int)1;
  int _7964 = (int)1;
  int _7965 = _2446;
  for (int _2448 = _7964; _2448 < _7965; ++_2448)
  {
    {
      _ptr__2447[((_2446 - _2448) - (int)1)] = safe_mul( _ptr__2447[(_2446 - _2448)],_ptr__2445[(_2446 - _2448)] );
    }
  }
  return _2447;
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::make  ( std::shared_ptr< monty::ndarray< int,1 > > _2449,    std::shared_ptr< monty::ndarray< int,1 > > _2450) { return mosek::fusion::p_Set::make(_2449,_2450); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::make(std::shared_ptr< monty::ndarray< int,1 > > _2449,std::shared_ptr< monty::ndarray< int,1 > > _2450){
  _checked_ptr_1<int> _ptr__2449(_2449 ? _2449->raw() : nullptr, _2449 ? _2449->size(0) : 0);
  _checked_ptr_1<int> _ptr__2450(_2450 ? _2450->raw() : nullptr, _2450 ? _2450->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _2451 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( (int)((_2449)->size(0)),(int)((_2450)->size(0)) ))));
  _checked_ptr_1<int> _ptr__2451(_2451 ? _2451->raw() : nullptr,_2451 ? _2451->size(0) : 0);
  int _7966 = (int)0;
  int _7967 = (int)((_2449)->size(0));
  for (int _2452 = _7966; _2452 < _7967; ++_2452)
  {
    {
      _ptr__2451[_2452] = _ptr__2449[_2452];
    }
  }
  int _7968 = (int)0;
  int _7969 = (int)((_2450)->size(0));
  for (int _2453 = _7968; _2453 < _7969; ++_2453)
  {
    {
      _ptr__2451[safe_add( (int)((_2449)->size(0)),_2453 )] = _ptr__2450[_2453];
    }
  }
  return _2451;
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::make  ( std::shared_ptr< monty::ndarray< int,1 > > _2454) { return mosek::fusion::p_Set::make(_2454); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::make(std::shared_ptr< monty::ndarray< int,1 > > _2454){
  _checked_ptr_1<int> _ptr__2454(_2454 ? _2454->raw() : nullptr, _2454 ? _2454->size(0) : 0);
  std::vector<int> _7970;
  for (int _2455 = (int)0, _7971 = (int)((_2454)->size(0)); _2455 < _7971 ; ++_2455)
  {
    _7970.push_back(_ptr__2454[_2455]);
  }
  auto _7972 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7970.size()),_7970.begin(),_7970.end()));
  return _7972;
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::make  ( int _2456,    int _2457,    int _2458) { return mosek::fusion::p_Set::make(_2456,_2457,_2458); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::make(int _2456,int _2457,int _2458){
  return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2456),(int)(_2457),(int)(_2458)});
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::make  ( int _2459,    int _2460) { return mosek::fusion::p_Set::make(_2459,_2460); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::make(int _2459,int _2460){
  return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2459),(int)(_2460)});
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::make  ( int _2461) { return mosek::fusion::p_Set::make(_2461); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::make(int _2461){
  return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2461)});
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::scalar  ( ) { return mosek::fusion::p_Set::scalar(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::scalar(){
  return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::make  ( std::shared_ptr< monty::ndarray< std::string,1 > > _2462) { return mosek::fusion::p_Set::make(_2462); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::make(std::shared_ptr< monty::ndarray< std::string,1 > > _2462){
  return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2462)->size(0)))});
}
void mosek::fusion::p_Set::destroy(){}void mosek::fusion::Set::destroy() { mosek::fusion::p_Set::_get_impl(this)->destroy(); }mosek::fusion::ConeDomain::ConeDomain(mosek::fusion::p_ConeDomain *_impl) : _impl(_impl) { /*std::cout << "ConeDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::ConeDomain::~ConeDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_ConeDomain::p_ConeDomain  (::mosek::fusion::ConeDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::ConeDomain::t mosek::fusion::p_ConeDomain::_new_ConeDomain  (mosek::fusion::QConeKey _2463,    double _2464,    std::shared_ptr< monty::ndarray< int,1 > > _2465){ return new mosek::fusion::ConeDomain(_2463,_2464,_2465); }mosek::fusion::ConeDomain::ConeDomain  (mosek::fusion::QConeKey _2463,    double _2464,    std::shared_ptr< monty::ndarray< int,1 > > _2465) :    ConeDomain(new mosek::fusion::p_ConeDomain(this)){ mosek::fusion::p_ConeDomain::_get_impl(this)->_initialize(_2463,_2464,_2465); }void mosek::fusion::p_ConeDomain::_initialize  (mosek::fusion::QConeKey _2463,    double _2464,    std::shared_ptr< monty::ndarray< int,1 > > _2465){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2465(_2465 ? _2465->raw() : nullptr, _2465 ? _2465->size(0) : 0);
    std::shared_ptr< monty::ndarray< int,1 > > _7973;
    bool _7974 = (NULL != _2465.get());
    if (_7974)
    {
      _7973 = ::mosek::fusion::p_Set::make(_2465);
    }
    else
    {
      _7973 = nullptr;
    }
    shape = _7973;
    mosek::fusion::p_ConeDomain::_get_impl(::mosek::fusion::ConeDomain::t(_pubthis))->alpha = _2464;
    key = _2463;
    axisidx = (int)0;
    axisset = false;
    int_flag = false;
    mosek::fusion::p_ConeDomain::_get_impl(::mosek::fusion::ConeDomain::t(_pubthis))->alpha = _2464;
  }
}mosek::fusion::ConeDomain::t mosek::fusion::p_ConeDomain::_new_ConeDomain  (mosek::fusion::QConeKey _2466,    std::shared_ptr< monty::ndarray< int,1 > > _2467){ return new mosek::fusion::ConeDomain(_2466,_2467); }mosek::fusion::ConeDomain::ConeDomain  (mosek::fusion::QConeKey _2466,    std::shared_ptr< monty::ndarray< int,1 > > _2467) :    ConeDomain(new mosek::fusion::p_ConeDomain(this)){ mosek::fusion::p_ConeDomain::_get_impl(this)->_initialize(_2466,_2467); }void mosek::fusion::p_ConeDomain::_initialize  (mosek::fusion::QConeKey _2466,    std::shared_ptr< monty::ndarray< int,1 > > _2467){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2467(_2467 ? _2467->raw() : nullptr, _2467 ? _2467->size(0) : 0);
    mosek::fusion::p_ConeDomain::_initialize(_2466,1.0,_2467);
  }
}bool mosek::fusion::p_ConeDomain::match_shape(std::shared_ptr< monty::ndarray< int,1 > > _2468){
  _checked_ptr_1<int> _ptr__2468(_2468 ? _2468->raw() : nullptr, _2468 ? _2468->size(0) : 0);
  return ((NULL == shape.get()) || ::mosek::fusion::p_Set::match(_2468,shape));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain :: __mosek_2fusion_2ConeDomain__integral() { return mosek::fusion::p_ConeDomain::_get_impl(this)->__mosek_2fusion_2ConeDomain__integral(); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain::integral() { return __mosek_2fusion_2ConeDomain__integral(); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_ConeDomain::__mosek_2fusion_2ConeDomain__integral(){
  int_flag = true;
  return ::mosek::fusion::ConeDomain::t(_pubthis);
}
bool mosek::fusion::ConeDomain :: axisIsSet() { return mosek::fusion::p_ConeDomain::_get_impl(this)->axisIsSet(); }bool mosek::fusion::p_ConeDomain::axisIsSet(){
  return axisset;
}
int mosek::fusion::ConeDomain :: getAxis() { return mosek::fusion::p_ConeDomain::_get_impl(this)->getAxis(); }int mosek::fusion::p_ConeDomain::getAxis(){
  return axisidx;
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain :: __mosek_2fusion_2ConeDomain__axis(int _2469) { return mosek::fusion::p_ConeDomain::_get_impl(this)->__mosek_2fusion_2ConeDomain__axis(_2469); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain::axis(int _2469) { return __mosek_2fusion_2ConeDomain__axis(_2469); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_ConeDomain::__mosek_2fusion_2ConeDomain__axis(int _2469){
  axisidx = _2469;
  axisset = true;
  return ::mosek::fusion::ConeDomain::t(_pubthis);
}
void mosek::fusion::p_ConeDomain::destroy(){shape.reset();}void mosek::fusion::ConeDomain::destroy() { mosek::fusion::p_ConeDomain::_get_impl(this)->destroy(); }mosek::fusion::LinPSDDomain::LinPSDDomain(mosek::fusion::p_LinPSDDomain *_impl) : _impl(_impl) { /*std::cout << "LinPSDDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::LinPSDDomain::~LinPSDDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_LinPSDDomain::p_LinPSDDomain  (::mosek::fusion::LinPSDDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::LinPSDDomain::t mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain  (std::shared_ptr< monty::ndarray< int,1 > > _2470,    int _2471){ return new mosek::fusion::LinPSDDomain(_2470,_2471); }mosek::fusion::LinPSDDomain::LinPSDDomain  (std::shared_ptr< monty::ndarray< int,1 > > _2470,    int _2471) :    LinPSDDomain(new mosek::fusion::p_LinPSDDomain(this)){ mosek::fusion::p_LinPSDDomain::_get_impl(this)->_initialize(_2470,_2471); }void mosek::fusion::p_LinPSDDomain::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _2470,    int _2471){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2470(_2470 ? _2470->raw() : nullptr, _2470 ? _2470->size(0) : 0);
    mosek::fusion::p_LinPSDDomain::_get_impl(::mosek::fusion::LinPSDDomain::t(_pubthis))->conedim = _2471;
    shape = ::mosek::fusion::Utils::Tools::arraycopy(_2470);
  }
}mosek::fusion::LinPSDDomain::t mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain  (std::shared_ptr< monty::ndarray< int,1 > > _2472){ return new mosek::fusion::LinPSDDomain(_2472); }mosek::fusion::LinPSDDomain::LinPSDDomain  (std::shared_ptr< monty::ndarray< int,1 > > _2472) :    LinPSDDomain(new mosek::fusion::p_LinPSDDomain(this)){ mosek::fusion::p_LinPSDDomain::_get_impl(this)->_initialize(_2472); }void mosek::fusion::p_LinPSDDomain::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _2472){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2472(_2472 ? _2472->raw() : nullptr, _2472 ? _2472->size(0) : 0);
    shape = ::mosek::fusion::Utils::Tools::arraycopy(_2472);
    conedim = ((int)((shape)->size(0)) - (int)1);
  }
}mosek::fusion::LinPSDDomain::t mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain  (){ return new mosek::fusion::LinPSDDomain(); }mosek::fusion::LinPSDDomain::LinPSDDomain  () :    LinPSDDomain(new mosek::fusion::p_LinPSDDomain(this)){ mosek::fusion::p_LinPSDDomain::_get_impl(this)->_initialize(); }void mosek::fusion::p_LinPSDDomain::_initialize  (){monty::rc_reserve __reserve_this(_pubthis);   {
    conedim = (int)0;
    shape = nullptr;
  }
}void mosek::fusion::p_LinPSDDomain::destroy(){shape.reset();}void mosek::fusion::LinPSDDomain::destroy() { mosek::fusion::p_LinPSDDomain::_get_impl(this)->destroy(); }mosek::fusion::PSDDomain::PSDDomain(mosek::fusion::p_PSDDomain *_impl) : _impl(_impl) { /*std::cout << "PSDDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::PSDDomain::~PSDDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_PSDDomain::p_PSDDomain  (::mosek::fusion::PSDDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::PSDDomain::t mosek::fusion::p_PSDDomain::_new_PSDDomain  (mosek::fusion::PSDKey _2473,    std::shared_ptr< monty::ndarray< int,1 > > _2474,    int _2475,    int _2476){ return new mosek::fusion::PSDDomain(_2473,_2474,_2475,_2476); }mosek::fusion::PSDDomain::PSDDomain  (mosek::fusion::PSDKey _2473,    std::shared_ptr< monty::ndarray< int,1 > > _2474,    int _2475,    int _2476) :    PSDDomain(new mosek::fusion::p_PSDDomain(this)){ mosek::fusion::p_PSDDomain::_get_impl(this)->_initialize(_2473,_2474,_2475,_2476); }void mosek::fusion::p_PSDDomain::_initialize  (mosek::fusion::PSDKey _2473,    std::shared_ptr< monty::ndarray< int,1 > > _2474,    int _2475,    int _2476){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2474(_2474 ? _2474->raw() : nullptr, _2474 ? _2474->size(0) : 0);
    axisIsSet = true;
    shape = _2474;
    key = _2473;
    mosek::fusion::p_PSDDomain::_get_impl(::mosek::fusion::PSDDomain::t(_pubthis))->conedim1 = _2475;
    mosek::fusion::p_PSDDomain::_get_impl(::mosek::fusion::PSDDomain::t(_pubthis))->conedim2 = _2476;
    int _2477 = (int)((shape)->size(0));
    if (((!(((int)((shape)->size(0)) > _2475) && (((int)((shape)->size(0)) > _2476) && ((_2475 >= (int)0) && ((_2476 >= (int)0) && (_2475 != _2476)))))) && (((*shape)(_2475)) == ((*shape)(_2476)))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape or cone dimensions"));
      }
    }
    {}
  }
}mosek::fusion::PSDDomain::t mosek::fusion::p_PSDDomain::_new_PSDDomain  (mosek::fusion::PSDKey _2478,    std::shared_ptr< monty::ndarray< int,1 > > _2479){ return new mosek::fusion::PSDDomain(_2478,_2479); }mosek::fusion::PSDDomain::PSDDomain  (mosek::fusion::PSDKey _2478,    std::shared_ptr< monty::ndarray< int,1 > > _2479) :    PSDDomain(new mosek::fusion::p_PSDDomain(this)){ mosek::fusion::p_PSDDomain::_get_impl(this)->_initialize(_2478,_2479); }void mosek::fusion::p_PSDDomain::_initialize  (mosek::fusion::PSDKey _2478,    std::shared_ptr< monty::ndarray< int,1 > > _2479){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2479(_2479 ? _2479->raw() : nullptr, _2479 ? _2479->size(0) : 0);
    mosek::fusion::p_PSDDomain::_initialize(_2478,_2479,((int)((_2479)->size(0)) - (int)2),((int)((_2479)->size(0)) - (int)1));
  }
}mosek::fusion::PSDDomain::t mosek::fusion::p_PSDDomain::_new_PSDDomain  (mosek::fusion::PSDKey _2480){ return new mosek::fusion::PSDDomain(_2480); }mosek::fusion::PSDDomain::PSDDomain  (mosek::fusion::PSDKey _2480) :    PSDDomain(new mosek::fusion::p_PSDDomain(this)){ mosek::fusion::p_PSDDomain::_get_impl(this)->_initialize(_2480); }void mosek::fusion::p_PSDDomain::_initialize  (mosek::fusion::PSDKey _2480){monty::rc_reserve __reserve_this(_pubthis);   {
    shape = nullptr;
    key = _2480;
    conedim1 = (int)0;
    conedim2 = (int)0;
    axisIsSet = false;
  }
}monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::PSDDomain :: __mosek_2fusion_2PSDDomain__axis(int _2481,int _2482) { return mosek::fusion::p_PSDDomain::_get_impl(this)->__mosek_2fusion_2PSDDomain__axis(_2481,_2482); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::PSDDomain::axis(int _2481,int _2482) { return __mosek_2fusion_2PSDDomain__axis(_2481,_2482); }
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_PSDDomain::__mosek_2fusion_2PSDDomain__axis(int _2481,int _2482){
  mosek::fusion::p_PSDDomain::_get_impl(::mosek::fusion::PSDDomain::t(_pubthis))->conedim1 = _2481;
  mosek::fusion::p_PSDDomain::_get_impl(::mosek::fusion::PSDDomain::t(_pubthis))->conedim2 = _2482;
  axisIsSet = true;
  if (((NULL == shape.get()) && (!((_2481 >= (int)0) && ((_2482 >= (int)0) && (_2481 != _2482))))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape or cone dimensions"));
    }
  }
  else if(((NULL != shape.get()) && ((!(((int)((shape)->size(0)) > _2481) && (((int)((shape)->size(0)) > _2482) && ((_2481 >= (int)0) && ((_2482 >= (int)0) && (_2481 != _2482)))))) && (((*shape)(_2481)) == ((*shape)(_2482))))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape or cone dimensions"));
    }
  }
  {}
  return ::mosek::fusion::PSDDomain::t(_pubthis);
}
void mosek::fusion::p_PSDDomain::destroy(){shape.reset();}void mosek::fusion::PSDDomain::destroy() { mosek::fusion::p_PSDDomain::_get_impl(this)->destroy(); }mosek::fusion::SymmetricRangeDomain::SymmetricRangeDomain(mosek::fusion::p_SymmetricRangeDomain *_impl) : mosek::fusion::RangeDomain(_impl) { /*std::cout << "SymmetricRangeDomain()" << this << std::endl; */ }mosek::fusion::SymmetricRangeDomain::~SymmetricRangeDomain() {  /* std::cout << "~SymmetricRangeDomain()" << this << std::endl << std::flush; */ }mosek::fusion::p_SymmetricRangeDomain::p_SymmetricRangeDomain  (::mosek::fusion::SymmetricRangeDomain * _pubthis) :     mosek::fusion::p_RangeDomain(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SymmetricRangeDomain::t mosek::fusion::p_SymmetricRangeDomain::_new_SymmetricRangeDomain  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _2483){ return new mosek::fusion::SymmetricRangeDomain(_2483); }mosek::fusion::SymmetricRangeDomain::SymmetricRangeDomain  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _2483) :    SymmetricRangeDomain(new mosek::fusion::p_SymmetricRangeDomain(this)){ mosek::fusion::p_SymmetricRangeDomain::_get_impl(this)->_initialize(_2483); }void mosek::fusion::p_SymmetricRangeDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _2483){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_RangeDomain::_initialize(_2483);
    if (((NULL != shape.get()) && (((int)((shape)->size(0)) != (int)2) || (((*shape)((int)0)) != ((*shape)((int)1))))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Only square domains can be symmetric"));
      }
    }
    {}
    int _7975;
    bool _7976 = (NULL == shape.get());
    if (_7976)
    {
      _7975 = (int)0;
    }
    else
    {
      _7975 = ((*shape)((int)0));
    }
    dim = _7975;
  }
}void mosek::fusion::p_SymmetricRangeDomain::destroy(){}void mosek::fusion::SymmetricRangeDomain::destroy() { mosek::fusion::p_SymmetricRangeDomain::_get_impl(this)->destroy(); }mosek::fusion::RangeDomain::RangeDomain(mosek::fusion::p_RangeDomain *_impl) : _impl(_impl) { /*std::cout << "RangeDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::RangeDomain::~RangeDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_RangeDomain::p_RangeDomain  (::mosek::fusion::RangeDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::RangeDomain::t mosek::fusion::p_RangeDomain::_new_RangeDomain  (bool _2484,    std::shared_ptr< monty::ndarray< double,1 > > _2485,    std::shared_ptr< monty::ndarray< double,1 > > _2486,    std::shared_ptr< monty::ndarray< int,1 > > _2487){ return new mosek::fusion::RangeDomain(_2484,_2485,_2486,_2487); }mosek::fusion::RangeDomain::RangeDomain  (bool _2484,    std::shared_ptr< monty::ndarray< double,1 > > _2485,    std::shared_ptr< monty::ndarray< double,1 > > _2486,    std::shared_ptr< monty::ndarray< int,1 > > _2487) :    RangeDomain(new mosek::fusion::p_RangeDomain(this)){ mosek::fusion::p_RangeDomain::_get_impl(this)->_initialize(_2484,_2485,_2486,_2487); }void mosek::fusion::p_RangeDomain::_initialize  (bool _2484,    std::shared_ptr< monty::ndarray< double,1 > > _2485,    std::shared_ptr< monty::ndarray< double,1 > > _2486,    std::shared_ptr< monty::ndarray< int,1 > > _2487){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__2485(_2485 ? _2485->raw() : nullptr, _2485 ? _2485->size(0) : 0);
    _checked_ptr_1<double> _ptr__2486(_2486 ? _2486->raw() : nullptr, _2486 ? _2486->size(0) : 0);
    _checked_ptr_1<int> _ptr__2487(_2487 ? _2487->raw() : nullptr, _2487 ? _2487->size(0) : 0);
    mosek::fusion::p_RangeDomain::_initialize(_2484,_2485,_2486,_2487,nullptr,(int)1);
  }
}mosek::fusion::RangeDomain::t mosek::fusion::p_RangeDomain::_new_RangeDomain  (bool _2488,    std::shared_ptr< monty::ndarray< double,1 > > _2489,    std::shared_ptr< monty::ndarray< double,1 > > _2490,    std::shared_ptr< monty::ndarray< int,1 > > _2491,    std::shared_ptr< monty::ndarray< int,2 > > _2492){ return new mosek::fusion::RangeDomain(_2488,_2489,_2490,_2491,_2492); }mosek::fusion::RangeDomain::RangeDomain  (bool _2488,    std::shared_ptr< monty::ndarray< double,1 > > _2489,    std::shared_ptr< monty::ndarray< double,1 > > _2490,    std::shared_ptr< monty::ndarray< int,1 > > _2491,    std::shared_ptr< monty::ndarray< int,2 > > _2492) :    RangeDomain(new mosek::fusion::p_RangeDomain(this)){ mosek::fusion::p_RangeDomain::_get_impl(this)->_initialize(_2488,_2489,_2490,_2491,_2492); }void mosek::fusion::p_RangeDomain::_initialize  (bool _2488,    std::shared_ptr< monty::ndarray< double,1 > > _2489,    std::shared_ptr< monty::ndarray< double,1 > > _2490,    std::shared_ptr< monty::ndarray< int,1 > > _2491,    std::shared_ptr< monty::ndarray< int,2 > > _2492){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__2489(_2489 ? _2489->raw() : nullptr, _2489 ? _2489->size(0) : 0);
    _checked_ptr_1<double> _ptr__2490(_2490 ? _2490->raw() : nullptr, _2490 ? _2490->size(0) : 0);
    _checked_ptr_1<int> _ptr__2491(_2491 ? _2491->raw() : nullptr, _2491 ? _2491->size(0) : 0);
    mosek::fusion::p_RangeDomain::_initialize(_2488,_2489,_2490,_2491,_2492,(int)1);
  }
}mosek::fusion::RangeDomain::t mosek::fusion::p_RangeDomain::_new_RangeDomain  (bool _2493,    std::shared_ptr< monty::ndarray< double,1 > > _2494,    std::shared_ptr< monty::ndarray< double,1 > > _2495,    std::shared_ptr< monty::ndarray< int,1 > > _2496,    std::shared_ptr< monty::ndarray< int,2 > > _2497,    int _2498){ return new mosek::fusion::RangeDomain(_2493,_2494,_2495,_2496,_2497,_2498); }mosek::fusion::RangeDomain::RangeDomain  (bool _2493,    std::shared_ptr< monty::ndarray< double,1 > > _2494,    std::shared_ptr< monty::ndarray< double,1 > > _2495,    std::shared_ptr< monty::ndarray< int,1 > > _2496,    std::shared_ptr< monty::ndarray< int,2 > > _2497,    int _2498) :    RangeDomain(new mosek::fusion::p_RangeDomain(this)){ mosek::fusion::p_RangeDomain::_get_impl(this)->_initialize(_2493,_2494,_2495,_2496,_2497,_2498); }void mosek::fusion::p_RangeDomain::_initialize  (bool _2493,    std::shared_ptr< monty::ndarray< double,1 > > _2494,    std::shared_ptr< monty::ndarray< double,1 > > _2495,    std::shared_ptr< monty::ndarray< int,1 > > _2496,    std::shared_ptr< monty::ndarray< int,2 > > _2497,    int _2498){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__2494(_2494 ? _2494->raw() : nullptr, _2494 ? _2494->size(0) : 0);
    _checked_ptr_1<double> _ptr__2495(_2495 ? _2495->raw() : nullptr, _2495 ? _2495->size(0) : 0);
    _checked_ptr_1<int> _ptr__2496(_2496 ? _2496->raw() : nullptr, _2496 ? _2496->size(0) : 0);
    cardinal_flag = false;
    shape = _2496;
    sparsity = nullptr;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->scalable = _2493;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->ub = _2495;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->lb = _2494;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity = _2497;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->empty = false;
  }
}mosek::fusion::RangeDomain::t mosek::fusion::p_RangeDomain::_new_RangeDomain  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _2499){ return new mosek::fusion::RangeDomain(_2499); }mosek::fusion::RangeDomain::RangeDomain  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _2499) :    RangeDomain(new mosek::fusion::p_RangeDomain(this)){ mosek::fusion::p_RangeDomain::_get_impl(this)->_initialize(_2499); }void mosek::fusion::p_RangeDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _2499){monty::rc_reserve __reserve_this(_pubthis);   {
    cardinal_flag = mosek::fusion::p_RangeDomain::_get_impl(_2499)->cardinal_flag;
    sparsity = mosek::fusion::p_RangeDomain::_get_impl(_2499)->sparsity;
    scalable = mosek::fusion::p_RangeDomain::_get_impl(_2499)->scalable;
    shape = mosek::fusion::p_RangeDomain::_get_impl(_2499)->shape;
    ub = mosek::fusion::p_RangeDomain::_get_impl(_2499)->ub;
    lb = mosek::fusion::p_RangeDomain::_get_impl(_2499)->lb;
    empty = mosek::fusion::p_RangeDomain::_get_impl(_2499)->empty;
  }
}monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__symmetric() { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__symmetric(); }monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::RangeDomain::symmetric() { return __mosek_2fusion_2RangeDomain__symmetric(); }
monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__symmetric(){
  return ::mosek::fusion::p_SymmetricRangeDomain::_new_SymmetricRangeDomain(::mosek::fusion::RangeDomain::t(_pubthis));
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__sparse(std::shared_ptr< monty::ndarray< int,2 > > _2500) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__sparse(_2500); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::sparse(std::shared_ptr< monty::ndarray< int,2 > > _2500) { return __mosek_2fusion_2RangeDomain__sparse(_2500); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__sparse(std::shared_ptr< monty::ndarray< int,2 > > _2500){
  mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2500)->size(0)),(int)((_2500)->size(1)))));
  {
    int _2501 = (int)0;
    for(;(_2501 < (int)((_2500)->size(0)));++ _2501)
    {
      {
        {
          int _2502 = (int)0;
          for(;(_2502 < (int)((_2500)->size(1)));++ _2502)
          {
            {
              ((*mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity)(_2501,_2502)) = ((*_2500)(_2501,_2502));
            }
          }
        }
      }
    }
  }
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__sparse(std::shared_ptr< monty::ndarray< int,1 > > _2503) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__sparse(_2503); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::sparse(std::shared_ptr< monty::ndarray< int,1 > > _2503) { return __mosek_2fusion_2RangeDomain__sparse(_2503); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__sparse(std::shared_ptr< monty::ndarray< int,1 > > _2503){
  _checked_ptr_1<int> _ptr__2503(_2503 ? _2503->raw() : nullptr, _2503 ? _2503->size(0) : 0);
  mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2503)->size(0)),(int)1)));
  int _7977 = (int)0;
  int _7978 = (int)((_2503)->size(0));
  for (int _2504 = _7977; _2504 < _7978; ++_2504)
  {
    {
      ((*mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity)(_2504,(int)0)) = _ptr__2503[_2504];
    }
  }
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__sparse() { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__sparse(); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::sparse() { return __mosek_2fusion_2RangeDomain__sparse(); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__sparse(){
  mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->empty = true;
  mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity = nullptr;
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__integral() { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__integral(); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::integral() { return __mosek_2fusion_2RangeDomain__integral(); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__integral(){
  cardinal_flag = true;
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__withShape(std::shared_ptr< monty::ndarray< int,1 > > _2505) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__withShape(_2505); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::withShape(std::shared_ptr< monty::ndarray< int,1 > > _2505) { return __mosek_2fusion_2RangeDomain__withShape(_2505); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__withShape(std::shared_ptr< monty::ndarray< int,1 > > _2505){
  _checked_ptr_1<int> _ptr__2505(_2505 ? _2505->raw() : nullptr, _2505 ? _2505->size(0) : 0);
  shape = _2505;
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
bool mosek::fusion::p_RangeDomain::match_shape(std::shared_ptr< monty::ndarray< int,1 > > _2506){
  _checked_ptr_1<int> _ptr__2506(_2506 ? _2506->raw() : nullptr, _2506 ? _2506->size(0) : 0);
  if (scalable)
  {
    {
      return true;
    }
  }
  else if(((int)((shape)->size(0)) != (int)((_2506)->size(0))))
  {
    {
      return false;
    }
  }
  else
  {
    {
      int _7979 = (int)0;
      int _7980 = (int)((shape)->size(0));
      for (int _2507 = _7979; _2507 < _7980; ++_2507)
      {
        {
          if ((((*shape)(_2507)) != _ptr__2506[_2507]))
          {
            {
              return false;
            }
          }
          {}
        }
      }
    }
  }
  return true;
}
void mosek::fusion::p_RangeDomain::destroy(){ub.reset();lb.reset();sparsity.reset();shape.reset();}void mosek::fusion::RangeDomain::destroy() { mosek::fusion::p_RangeDomain::_get_impl(this)->destroy(); }mosek::fusion::SymmetricLinearDomain::SymmetricLinearDomain(mosek::fusion::p_SymmetricLinearDomain *_impl) : _impl(_impl) { /*std::cout << "SymmetricLinearDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::SymmetricLinearDomain::~SymmetricLinearDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_SymmetricLinearDomain::p_SymmetricLinearDomain  (::mosek::fusion::SymmetricLinearDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::SymmetricLinearDomain::t mosek::fusion::p_SymmetricLinearDomain::_new_SymmetricLinearDomain  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _2508){ return new mosek::fusion::SymmetricLinearDomain(_2508); }mosek::fusion::SymmetricLinearDomain::SymmetricLinearDomain  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _2508) :    SymmetricLinearDomain(new mosek::fusion::p_SymmetricLinearDomain(this)){ mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->_initialize(_2508); }void mosek::fusion::p_SymmetricLinearDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _2508){monty::rc_reserve __reserve_this(_pubthis);   {
    dom = _2508;
    shape = mosek::fusion::p_LinearDomain::_get_impl(_2508)->shape;
    key = mosek::fusion::p_LinearDomain::_get_impl(_2508)->key;
    cardinal_flag = mosek::fusion::p_LinearDomain::_get_impl(_2508)->cardinal_flag;
    sparsity = mosek::fusion::p_LinearDomain::_get_impl(_2508)->sparsity;
    if (((NULL != shape.get()) && (((int)((shape)->size(0)) != (int)2) || (((*shape)((int)0)) != ((*shape)((int)1))))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Only square domains can be symmetric"));
      }
    }
    {}
    int _7981;
    bool _7982 = (NULL == shape.get());
    if (_7982)
    {
      _7981 = (int)0;
    }
    else
    {
      _7981 = ((*shape)((int)0));
    }
    dim = _7981;
  }
}monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain :: __mosek_2fusion_2SymmetricLinearDomain__sparse(std::shared_ptr< monty::ndarray< int,2 > > _2509) { return mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->__mosek_2fusion_2SymmetricLinearDomain__sparse(_2509); }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain::sparse(std::shared_ptr< monty::ndarray< int,2 > > _2509) { return __mosek_2fusion_2SymmetricLinearDomain__sparse(_2509); }
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_SymmetricLinearDomain::__mosek_2fusion_2SymmetricLinearDomain__sparse(std::shared_ptr< monty::ndarray< int,2 > > _2509){
  mosek::fusion::p_SymmetricLinearDomain::_get_impl(::mosek::fusion::SymmetricLinearDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2509)->size(0)),(int)((_2509)->size(1)))));
  {
    int _2510 = (int)0;
    for(;(_2510 < (int)((_2509)->size(0)));++ _2510)
    {
      {
        {
          int _2511 = (int)0;
          for(;(_2511 < (int)((_2509)->size(1)));++ _2511)
          {
            {
              ((*mosek::fusion::p_SymmetricLinearDomain::_get_impl(::mosek::fusion::SymmetricLinearDomain::t(_pubthis))->sparsity)(_2510,_2511)) = ((*_2509)(_2510,_2511));
            }
          }
        }
      }
    }
  }
  return ::mosek::fusion::SymmetricLinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain :: __mosek_2fusion_2SymmetricLinearDomain__sparse(std::shared_ptr< monty::ndarray< int,1 > > _2512) { return mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->__mosek_2fusion_2SymmetricLinearDomain__sparse(_2512); }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain::sparse(std::shared_ptr< monty::ndarray< int,1 > > _2512) { return __mosek_2fusion_2SymmetricLinearDomain__sparse(_2512); }
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_SymmetricLinearDomain::__mosek_2fusion_2SymmetricLinearDomain__sparse(std::shared_ptr< monty::ndarray< int,1 > > _2512){
  _checked_ptr_1<int> _ptr__2512(_2512 ? _2512->raw() : nullptr, _2512 ? _2512->size(0) : 0);
  mosek::fusion::p_SymmetricLinearDomain::_get_impl(::mosek::fusion::SymmetricLinearDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2512)->size(0)),(int)1)));
  int _7983 = (int)0;
  int _7984 = (int)((_2512)->size(0));
  for (int _2513 = _7983; _2513 < _7984; ++_2513)
  {
    {
      ((*mosek::fusion::p_SymmetricLinearDomain::_get_impl(::mosek::fusion::SymmetricLinearDomain::t(_pubthis))->sparsity)(_2513,(int)0)) = _ptr__2512[_2513];
    }
  }
  return ::mosek::fusion::SymmetricLinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain :: __mosek_2fusion_2SymmetricLinearDomain__integral() { return mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->__mosek_2fusion_2SymmetricLinearDomain__integral(); }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain::integral() { return __mosek_2fusion_2SymmetricLinearDomain__integral(); }
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_SymmetricLinearDomain::__mosek_2fusion_2SymmetricLinearDomain__integral(){
  cardinal_flag = true;
  return ::mosek::fusion::SymmetricLinearDomain::t(_pubthis);
}
bool mosek::fusion::p_SymmetricLinearDomain::match_shape(std::shared_ptr< monty::ndarray< int,1 > > _2514){
  _checked_ptr_1<int> _ptr__2514(_2514 ? _2514->raw() : nullptr, _2514 ? _2514->size(0) : 0);
  int _7985 = (int)0;
  int _7986 = (int)((_2514)->size(0));
  for (int _2515 = _7985; _2515 < _7986; ++_2515)
  {
    {
      if ((_ptr__2514[_2515] == ((*shape)(_2515))))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
void mosek::fusion::p_SymmetricLinearDomain::destroy(){sparsity.reset();shape.reset();dom.reset();}void mosek::fusion::SymmetricLinearDomain::destroy() { mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->destroy(); }mosek::fusion::LinearDomain::LinearDomain(mosek::fusion::p_LinearDomain *_impl) : _impl(_impl) { /*std::cout << "LinearDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::LinearDomain::~LinearDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_LinearDomain::p_LinearDomain  (::mosek::fusion::LinearDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::LinearDomain::t mosek::fusion::p_LinearDomain::_new_LinearDomain  (mosek::fusion::RelationKey _2516,    bool _2517,    std::shared_ptr< monty::ndarray< double,1 > > _2518,    std::shared_ptr< monty::ndarray< int,1 > > _2519){ return new mosek::fusion::LinearDomain(_2516,_2517,_2518,_2519); }mosek::fusion::LinearDomain::LinearDomain  (mosek::fusion::RelationKey _2516,    bool _2517,    std::shared_ptr< monty::ndarray< double,1 > > _2518,    std::shared_ptr< monty::ndarray< int,1 > > _2519) :    LinearDomain(new mosek::fusion::p_LinearDomain(this)){ mosek::fusion::p_LinearDomain::_get_impl(this)->_initialize(_2516,_2517,_2518,_2519); }void mosek::fusion::p_LinearDomain::_initialize  (mosek::fusion::RelationKey _2516,    bool _2517,    std::shared_ptr< monty::ndarray< double,1 > > _2518,    std::shared_ptr< monty::ndarray< int,1 > > _2519){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__2518(_2518 ? _2518->raw() : nullptr, _2518 ? _2518->size(0) : 0);
    _checked_ptr_1<int> _ptr__2519(_2519 ? _2519->raw() : nullptr, _2519 ? _2519->size(0) : 0);
    mosek::fusion::p_LinearDomain::_initialize(_2516,_2517,_2518,_2519,nullptr,(int)1);
  }
}mosek::fusion::LinearDomain::t mosek::fusion::p_LinearDomain::_new_LinearDomain  (mosek::fusion::RelationKey _2520,    bool _2521,    std::shared_ptr< monty::ndarray< double,1 > > _2522,    std::shared_ptr< monty::ndarray< int,1 > > _2523,    std::shared_ptr< monty::ndarray< int,2 > > _2524,    int _2525){ return new mosek::fusion::LinearDomain(_2520,_2521,_2522,_2523,_2524,_2525); }mosek::fusion::LinearDomain::LinearDomain  (mosek::fusion::RelationKey _2520,    bool _2521,    std::shared_ptr< monty::ndarray< double,1 > > _2522,    std::shared_ptr< monty::ndarray< int,1 > > _2523,    std::shared_ptr< monty::ndarray< int,2 > > _2524,    int _2525) :    LinearDomain(new mosek::fusion::p_LinearDomain(this)){ mosek::fusion::p_LinearDomain::_get_impl(this)->_initialize(_2520,_2521,_2522,_2523,_2524,_2525); }void mosek::fusion::p_LinearDomain::_initialize  (mosek::fusion::RelationKey _2520,    bool _2521,    std::shared_ptr< monty::ndarray< double,1 > > _2522,    std::shared_ptr< monty::ndarray< int,1 > > _2523,    std::shared_ptr< monty::ndarray< int,2 > > _2524,    int _2525){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__2522(_2522 ? _2522->raw() : nullptr, _2522 ? _2522->size(0) : 0);
    _checked_ptr_1<int> _ptr__2523(_2523 ? _2523->raw() : nullptr, _2523 ? _2523->size(0) : 0);
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->scalable = _2521;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->shape = _2523;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->key = _2520;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->bnd = _2522;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity = _2524;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->cardinal_flag = false;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->empty = false;
  }
}mosek::fusion::LinearDomain::t mosek::fusion::p_LinearDomain::_new_LinearDomain  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _2526){ return new mosek::fusion::LinearDomain(_2526); }mosek::fusion::LinearDomain::LinearDomain  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _2526) :    LinearDomain(new mosek::fusion::p_LinearDomain(this)){ mosek::fusion::p_LinearDomain::_get_impl(this)->_initialize(_2526); }void mosek::fusion::p_LinearDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _2526){monty::rc_reserve __reserve_this(_pubthis);   {
    scalable = mosek::fusion::p_LinearDomain::_get_impl(_2526)->scalable;
    shape = mosek::fusion::p_LinearDomain::_get_impl(_2526)->shape;
    key = mosek::fusion::p_LinearDomain::_get_impl(_2526)->key;
    bnd = mosek::fusion::p_LinearDomain::_get_impl(_2526)->bnd;
    sparsity = mosek::fusion::p_LinearDomain::_get_impl(_2526)->sparsity;
    cardinal_flag = mosek::fusion::p_LinearDomain::_get_impl(_2526)->cardinal_flag;
    empty = mosek::fusion::p_LinearDomain::_get_impl(_2526)->empty;
  }
}monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__symmetric() { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__symmetric(); }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::LinearDomain::symmetric() { return __mosek_2fusion_2LinearDomain__symmetric(); }
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__symmetric(){
  return ::mosek::fusion::p_SymmetricLinearDomain::_new_SymmetricLinearDomain(::mosek::fusion::LinearDomain::t(_pubthis));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__sparse(std::shared_ptr< monty::ndarray< int,2 > > _2527) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__sparse(_2527); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::sparse(std::shared_ptr< monty::ndarray< int,2 > > _2527) { return __mosek_2fusion_2LinearDomain__sparse(_2527); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__sparse(std::shared_ptr< monty::ndarray< int,2 > > _2527){
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2527)->size(0)),(int)((_2527)->size(1)))));
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->empty = false;
  {
    int _2528 = (int)0;
    for(;(_2528 < (int)((_2527)->size(0)));++ _2528)
    {
      {
        {
          int _2529 = (int)0;
          for(;(_2529 < (int)((_2527)->size(1)));++ _2529)
          {
            {
              ((*mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity)(_2528,_2529)) = ((*_2527)(_2528,_2529));
            }
          }
        }
      }
    }
  }
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__sparse(std::shared_ptr< monty::ndarray< int,1 > > _2530) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__sparse(_2530); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::sparse(std::shared_ptr< monty::ndarray< int,1 > > _2530) { return __mosek_2fusion_2LinearDomain__sparse(_2530); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__sparse(std::shared_ptr< monty::ndarray< int,1 > > _2530){
  _checked_ptr_1<int> _ptr__2530(_2530 ? _2530->raw() : nullptr, _2530 ? _2530->size(0) : 0);
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2530)->size(0)),(int)1)));
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->empty = false;
  int _7987 = (int)0;
  int _7988 = (int)((_2530)->size(0));
  for (int _2531 = _7987; _2531 < _7988; ++_2531)
  {
    {
      ((*mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity)(_2531,(int)0)) = _ptr__2530[_2531];
    }
  }
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__sparse() { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__sparse(); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::sparse() { return __mosek_2fusion_2LinearDomain__sparse(); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__sparse(){
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->empty = true;
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity = nullptr;
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__integral() { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__integral(); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::integral() { return __mosek_2fusion_2LinearDomain__integral(); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__integral(){
  cardinal_flag = true;
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__withShape(std::shared_ptr< monty::ndarray< int,1 > > _2532) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__withShape(_2532); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::withShape(std::shared_ptr< monty::ndarray< int,1 > > _2532) { return __mosek_2fusion_2LinearDomain__withShape(_2532); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__withShape(std::shared_ptr< monty::ndarray< int,1 > > _2532){
  _checked_ptr_1<int> _ptr__2532(_2532 ? _2532->raw() : nullptr, _2532 ? _2532->size(0) : 0);
  shape = _2532;
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
bool mosek::fusion::p_LinearDomain::match_shape(std::shared_ptr< monty::ndarray< int,1 > > _2533){
  _checked_ptr_1<int> _ptr__2533(_2533 ? _2533->raw() : nullptr, _2533 ? _2533->size(0) : 0);
  if ((!scalable))
  {
    {
      int _7989 = (int)0;
      int _7990 = (int)((_2533)->size(0));
      for (int _2534 = _7989; _2534 < _7990; ++_2534)
      {
        {
          if ((_ptr__2533[_2534] == ((*shape)(_2534))))
          {
            {
              return false;
            }
          }
          {}
        }
      }
    }
  }
  {}
  return true;
}
void mosek::fusion::p_LinearDomain::destroy(){sparsity.reset();bnd.reset();shape.reset();}void mosek::fusion::LinearDomain::destroy() { mosek::fusion::p_LinearDomain::_get_impl(this)->destroy(); }mosek::fusion::Domain::Domain(mosek::fusion::p_Domain *_impl) : _impl(_impl) { /*std::cout << "Domain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Domain::~Domain() { delete _impl; _impl = nullptr; }mosek::fusion::p_Domain::p_Domain  (::mosek::fusion::Domain * _pubthis) :     _pubthis(_pubthis){}long long mosek::fusion::p_Domain::dimsize(std::shared_ptr< monty::ndarray< int,1 > > _2535){
  _checked_ptr_1<int> _ptr__2535(_2535 ? _2535->raw() : nullptr, _2535 ? _2535->size(0) : 0);
  long long _2536 = (long long)1;
  int _7991 = (int)0;
  int _7992 = (int)((_2535)->size(0));
  for (int _2537 = _7991; _2537 < _7992; ++_2537)
  {
    {
      _2536 *= _ptr__2535[_2537];
    }
  }
  return _2536;
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::mkLinearDomain(mosek::fusion::RelationKey _2538,monty::rc_ptr< ::mosek::fusion::Matrix > _2539){
  if (_2539->isSparse())
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _2540 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2539->numNonzeros())));
      _checked_ptr_1<int> _ptr__2540(_2540 ? _2540->raw() : nullptr,_2540 ? _2540->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2541 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2539->numNonzeros())));
      _checked_ptr_1<int> _ptr__2541(_2541 ? _2541->raw() : nullptr,_2541 ? _2541->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _2542 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2539->numNonzeros())));
      _checked_ptr_1<double> _ptr__2542(_2542 ? _2542->raw() : nullptr,_2542 ? _2542->size(0) : 0);
      _2539->getDataAsTriplets(_2540,_2541,_2542);
      std::shared_ptr< monty::ndarray< int,2 > > _2543 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2540)->size(0)),(int)2)));
      int _7993 = (int)0;
      int _7994 = (int)((_2540)->size(0));
      for (int _2544 = _7993; _2544 < _7994; ++_2544)
      {
        {
          ((*_2543)(_2544,(int)0)) = _ptr__2540[_2544];
          ((*_2543)(_2544,(int)1)) = _ptr__2541[_2544];
        }
      }
      return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(_2538,false,_2542,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(mosek::fusion::p_Matrix::_get_impl(_2539)->dimi),(int)(mosek::fusion::p_Matrix::_get_impl(_2539)->dimj)}),_2543,(int)1);
    }
  }
  else
  {
    {
      return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(_2538,false,_2539->getDataAsArray(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(mosek::fusion::p_Matrix::_get_impl(_2539)->dimi),(int)(mosek::fusion::p_Matrix::_get_impl(_2539)->dimj)}),nullptr,(int)1);
    }
  }
}
long long mosek::fusion::p_Domain::prod(std::shared_ptr< monty::ndarray< int,1 > > _2545){
  _checked_ptr_1<int> _ptr__2545(_2545 ? _2545->raw() : nullptr, _2545 ? _2545->size(0) : 0);
  long long _2546 = (int)1;
  int _7995 = (int)0;
  int _7996 = (int)((_2545)->size(0));
  for (int _2547 = _7995; _2547 < _7996; ++_2547)
  {
    {
      _2546 *= _ptr__2545[_2547];
    }
  }
  return _2546;
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(bool _2548,std::shared_ptr< monty::ndarray< double,1 > > _2549,std::shared_ptr< monty::ndarray< double,1 > > _2550,std::shared_ptr< monty::ndarray< int,2 > > _2551,std::shared_ptr< monty::ndarray< int,1 > > _2552){
  _checked_ptr_1<double> _ptr__2549(_2549 ? _2549->raw() : nullptr, _2549 ? _2549->size(0) : 0);
  _checked_ptr_1<double> _ptr__2550(_2550 ? _2550->raw() : nullptr, _2550 ? _2550->size(0) : 0);
  _checked_ptr_1<int> _ptr__2552(_2552 ? _2552->raw() : nullptr, _2552 ? _2552->size(0) : 0);
  if (((!_2548) && ((int)((_2549)->size(0)) != (int)((_2550)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching lengths of upper and lower bounds."));
    }
  }
  {}
  if (((NULL != _2551.get()) && ((int)((_2551)->size(0)) != (int)((_2549)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching lengths of upper/lower bounds and sparsity."));
    }
  }
  {}
  int _7997 = (int)0;
  int _7998 = (int)((_2550)->size(0));
  for (int _2553 = _7997; _2553 < _7998; ++_2553)
  {
    {
      if ((_ptr__2549[_2553] > _ptr__2550[_2553]))
      {
        {
          throw ::mosek::fusion::DomainError(std::string ("Invalid range specified"));
        }
      }
      {}
    }
  }
  if (((NULL != _2552.get()) && (::mosek::fusion::p_Domain::dimsize(_2552) != (int)((_2549)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching dimensions."));
    }
  }
  {}
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(_2548,_2549,_2550,_2552)->__mosek_2fusion_2RangeDomain__sparse(_2551);
}
monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::Domain::symmetric  ( monty::rc_ptr< ::mosek::fusion::RangeDomain > _2554) { return mosek::fusion::p_Domain::symmetric(_2554); }monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::p_Domain::symmetric(monty::rc_ptr< ::mosek::fusion::RangeDomain > _2554){
  return _2554->__mosek_2fusion_2RangeDomain__symmetric();
}
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::Domain::symmetric  ( monty::rc_ptr< ::mosek::fusion::LinearDomain > _2555) { return mosek::fusion::p_Domain::symmetric(_2555); }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_Domain::symmetric(monty::rc_ptr< ::mosek::fusion::LinearDomain > _2555){
  return _2555->__mosek_2fusion_2LinearDomain__symmetric();
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::sparse  ( monty::rc_ptr< ::mosek::fusion::RangeDomain > _2556,    std::shared_ptr< monty::ndarray< int,2 > > _2557) { return mosek::fusion::p_Domain::sparse(_2556,_2557); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::sparse(monty::rc_ptr< ::mosek::fusion::RangeDomain > _2556,std::shared_ptr< monty::ndarray< int,2 > > _2557){
  return _2556->__mosek_2fusion_2RangeDomain__sparse(_2557);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::sparse  ( monty::rc_ptr< ::mosek::fusion::RangeDomain > _2558,    std::shared_ptr< monty::ndarray< int,1 > > _2559) { return mosek::fusion::p_Domain::sparse(_2558,_2559); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::sparse(monty::rc_ptr< ::mosek::fusion::RangeDomain > _2558,std::shared_ptr< monty::ndarray< int,1 > > _2559){
  _checked_ptr_1<int> _ptr__2559(_2559 ? _2559->raw() : nullptr, _2559 ? _2559->size(0) : 0);
  return _2558->__mosek_2fusion_2RangeDomain__sparse(_2559);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::sparse  ( monty::rc_ptr< ::mosek::fusion::LinearDomain > _2560,    std::shared_ptr< monty::ndarray< int,2 > > _2561) { return mosek::fusion::p_Domain::sparse(_2560,_2561); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::sparse(monty::rc_ptr< ::mosek::fusion::LinearDomain > _2560,std::shared_ptr< monty::ndarray< int,2 > > _2561){
  return _2560->__mosek_2fusion_2LinearDomain__sparse(_2561);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::sparse  ( monty::rc_ptr< ::mosek::fusion::LinearDomain > _2562,    std::shared_ptr< monty::ndarray< int,1 > > _2563) { return mosek::fusion::p_Domain::sparse(_2562,_2563); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::sparse(monty::rc_ptr< ::mosek::fusion::LinearDomain > _2562,std::shared_ptr< monty::ndarray< int,1 > > _2563){
  _checked_ptr_1<int> _ptr__2563(_2563 ? _2563->raw() : nullptr, _2563 ? _2563->size(0) : 0);
  return _2562->__mosek_2fusion_2LinearDomain__sparse(_2563);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::integral  ( monty::rc_ptr< ::mosek::fusion::RangeDomain > _2564) { return mosek::fusion::p_Domain::integral(_2564); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::integral(monty::rc_ptr< ::mosek::fusion::RangeDomain > _2564){
  return _2564->__mosek_2fusion_2RangeDomain__integral();
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::integral  ( monty::rc_ptr< ::mosek::fusion::LinearDomain > _2565) { return mosek::fusion::p_Domain::integral(_2565); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::integral(monty::rc_ptr< ::mosek::fusion::LinearDomain > _2565){
  return _2565->__mosek_2fusion_2LinearDomain__integral();
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::integral  ( monty::rc_ptr< ::mosek::fusion::ConeDomain > _2566) { return mosek::fusion::p_Domain::integral(_2566); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::integral(monty::rc_ptr< ::mosek::fusion::ConeDomain > _2566){
  return _2566->__mosek_2fusion_2ConeDomain__integral();
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::axis  ( monty::rc_ptr< ::mosek::fusion::ConeDomain > _2567,    int _2568) { return mosek::fusion::p_Domain::axis(_2567,_2568); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::axis(monty::rc_ptr< ::mosek::fusion::ConeDomain > _2567,int _2568){
  return _2567->__mosek_2fusion_2ConeDomain__axis(_2568);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDPowerCone  ( double _2569,    std::shared_ptr< monty::ndarray< int,1 > > _2570) { return mosek::fusion::p_Domain::inDPowerCone(_2569,_2570); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDPowerCone(double _2569,std::shared_ptr< monty::ndarray< int,1 > > _2570){
  _checked_ptr_1<int> _ptr__2570(_2570 ? _2570->raw() : nullptr, _2570 ? _2570->size(0) : 0);
  std::vector<int> _7999;
  for (int _2571 = (int)0, _8000 = (int)((_2570)->size(0)); _2571 < _8000 ; ++_2571)
  {
    _7999.push_back(_ptr__2570[_2571]);
  }
  auto _8001 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7999.size()),_7999.begin(),_7999.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDPowCone,_2569,_8001);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDPowerCone  ( double _2572,    int _2573) { return mosek::fusion::p_Domain::inDPowerCone(_2572,_2573); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDPowerCone(double _2572,int _2573){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDPowCone,_2572,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2573),(int)((int)3)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDPowerCone  ( double _2574) { return mosek::fusion::p_Domain::inDPowerCone(_2574); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDPowerCone(double _2574){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDPowCone,_2574,nullptr);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPPowerCone  ( double _2575,    std::shared_ptr< monty::ndarray< int,1 > > _2576) { return mosek::fusion::p_Domain::inPPowerCone(_2575,_2576); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPPowerCone(double _2575,std::shared_ptr< monty::ndarray< int,1 > > _2576){
  _checked_ptr_1<int> _ptr__2576(_2576 ? _2576->raw() : nullptr, _2576 ? _2576->size(0) : 0);
  std::vector<int> _8002;
  for (int _2577 = (int)0, _8003 = (int)((_2576)->size(0)); _2577 < _8003 ; ++_2577)
  {
    _8002.push_back(_ptr__2576[_2577]);
  }
  auto _8004 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8002.size()),_8002.begin(),_8002.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPPowCone,_2575,_8004);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPPowerCone  ( double _2578,    int _2579) { return mosek::fusion::p_Domain::inPPowerCone(_2578,_2579); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPPowerCone(double _2578,int _2579){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPPowCone,_2578,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2579),(int)((int)3)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPPowerCone  ( double _2580) { return mosek::fusion::p_Domain::inPPowerCone(_2580); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPPowerCone(double _2580){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPPowCone,_2580,nullptr);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDExpCone  ( std::shared_ptr< monty::ndarray< int,1 > > _2581) { return mosek::fusion::p_Domain::inDExpCone(_2581); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDExpCone(std::shared_ptr< monty::ndarray< int,1 > > _2581){
  _checked_ptr_1<int> _ptr__2581(_2581 ? _2581->raw() : nullptr, _2581 ? _2581->size(0) : 0);
  std::vector<int> _8005;
  for (int _2582 = (int)0, _8006 = (int)((_2581)->size(0)); _2582 < _8006 ; ++_2582)
  {
    _8005.push_back(_ptr__2581[_2582]);
  }
  auto _8007 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8005.size()),_8005.begin(),_8005.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDExpCone,_8007);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDExpCone  ( int _2583) { return mosek::fusion::p_Domain::inDExpCone(_2583); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDExpCone(int _2583){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDExpCone,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2583),(int)((int)3)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDExpCone  ( ) { return mosek::fusion::p_Domain::inDExpCone(); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDExpCone(){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDExpCone,nullptr);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPExpCone  ( std::shared_ptr< monty::ndarray< int,1 > > _2584) { return mosek::fusion::p_Domain::inPExpCone(_2584); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPExpCone(std::shared_ptr< monty::ndarray< int,1 > > _2584){
  _checked_ptr_1<int> _ptr__2584(_2584 ? _2584->raw() : nullptr, _2584 ? _2584->size(0) : 0);
  std::vector<int> _8008;
  for (int _2585 = (int)0, _8009 = (int)((_2584)->size(0)); _2585 < _8009 ; ++_2585)
  {
    _8008.push_back(_ptr__2584[_2585]);
  }
  auto _8010 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8008.size()),_8008.begin(),_8008.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPExpCone,_8010);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPExpCone  ( int _2586) { return mosek::fusion::p_Domain::inPExpCone(_2586); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPExpCone(int _2586){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPExpCone,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2586),(int)((int)3)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPExpCone  ( ) { return mosek::fusion::p_Domain::inPExpCone(); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPExpCone(){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPExpCone,nullptr);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inRotatedQCone  ( std::shared_ptr< monty::ndarray< int,1 > > _2587) { return mosek::fusion::p_Domain::inRotatedQCone(_2587); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inRotatedQCone(std::shared_ptr< monty::ndarray< int,1 > > _2587){
  _checked_ptr_1<int> _ptr__2587(_2587 ? _2587->raw() : nullptr, _2587 ? _2587->size(0) : 0);
  std::vector<int> _8011;
  for (int _2588 = (int)0, _8012 = (int)((_2587)->size(0)); _2588 < _8012 ; ++_2588)
  {
    _8011.push_back(_ptr__2587[_2588]);
  }
  auto _8013 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8011.size()),_8011.begin(),_8011.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InRotatedQCone,0.0,_8013);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inRotatedQCone  ( int _2589,    int _2590) { return mosek::fusion::p_Domain::inRotatedQCone(_2589,_2590); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inRotatedQCone(int _2589,int _2590){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InRotatedQCone,0.0,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2589),(int)(_2590)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inRotatedQCone  ( int _2591) { return mosek::fusion::p_Domain::inRotatedQCone(_2591); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inRotatedQCone(int _2591){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InRotatedQCone,0.0,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2591)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inRotatedQCone  ( ) { return mosek::fusion::p_Domain::inRotatedQCone(); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inRotatedQCone(){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InRotatedQCone,0.0,nullptr);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inQCone  ( std::shared_ptr< monty::ndarray< int,1 > > _2592) { return mosek::fusion::p_Domain::inQCone(_2592); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inQCone(std::shared_ptr< monty::ndarray< int,1 > > _2592){
  _checked_ptr_1<int> _ptr__2592(_2592 ? _2592->raw() : nullptr, _2592 ? _2592->size(0) : 0);
  std::vector<int> _8014;
  for (int _2593 = (int)0, _8015 = (int)((_2592)->size(0)); _2593 < _8015 ; ++_2593)
  {
    _8014.push_back(_ptr__2592[_2593]);
  }
  auto _8016 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8014.size()),_8014.begin(),_8014.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InQCone,0.0,_8016);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inQCone  ( int _2594,    int _2595) { return mosek::fusion::p_Domain::inQCone(_2594,_2595); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inQCone(int _2594,int _2595){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InQCone,0.0,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2594),(int)(_2595)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inQCone  ( int _2596) { return mosek::fusion::p_Domain::inQCone(_2596); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inQCone(int _2596){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InQCone,0.0,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2596)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inQCone  ( ) { return mosek::fusion::p_Domain::inQCone(); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inQCone(){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InQCone,0.0,nullptr);
}
monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::Domain::isLinPSD  ( int _2597,    int _2598) { return mosek::fusion::p_Domain::isLinPSD(_2597,_2598); }monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::p_Domain::isLinPSD(int _2597,int _2598){
  return ::mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain(::mosek::fusion::p_Set::make((safe_mul( _2597,safe_add( _2597,(int)1 ) ) / (int)2),_2598));
}
monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::Domain::isLinPSD  ( int _2599) { return mosek::fusion::p_Domain::isLinPSD(_2599); }monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::p_Domain::isLinPSD(int _2599){
  return ::mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain(::mosek::fusion::p_Set::make((safe_mul( _2599,safe_add( _2599,(int)1 ) ) / (int)2)));
}
monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::Domain::isLinPSD  ( ) { return mosek::fusion::p_Domain::isLinPSD(); }monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::p_Domain::isLinPSD(){
  return ::mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain();
}
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::isTrilPSD  ( int _2600,    int _2601) { return mosek::fusion::p_Domain::isTrilPSD(_2600,_2601); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::isTrilPSD(int _2600,int _2601){
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsTrilPSD,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2601),(int)(_2600),(int)(_2600)}),(int)1,(int)2);
}
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::isTrilPSD  ( int _2602) { return mosek::fusion::p_Domain::isTrilPSD(_2602); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::isTrilPSD(int _2602){
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsTrilPSD,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2602),(int)(_2602)}),(int)0,(int)1);
}
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::isTrilPSD  ( ) { return mosek::fusion::p_Domain::isTrilPSD(); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::isTrilPSD(){
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsTrilPSD);
}
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::inPSDCone  ( int _2603,    int _2604) { return mosek::fusion::p_Domain::inPSDCone(_2603,_2604); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::inPSDCone(int _2603,int _2604){
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsSymPSD,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2604),(int)(_2603),(int)(_2603)}));
}
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::inPSDCone  ( int _2605) { return mosek::fusion::p_Domain::inPSDCone(_2605); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::inPSDCone(int _2605){
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsSymPSD,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2605),(int)(_2605)}));
}
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::inPSDCone  ( ) { return mosek::fusion::p_Domain::inPSDCone(); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::inPSDCone(){
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsSymPSD);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::binary  ( ) { return mosek::fusion::p_Domain::binary(); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::binary(){
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(0.0)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(1.0)}),nullptr)->__mosek_2fusion_2RangeDomain__integral();
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::binary  ( std::shared_ptr< monty::ndarray< int,1 > > _2606) { return mosek::fusion::p_Domain::binary(_2606); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::binary(std::shared_ptr< monty::ndarray< int,1 > > _2606){
  _checked_ptr_1<int> _ptr__2606(_2606 ? _2606->raw() : nullptr, _2606 ? _2606->size(0) : 0);
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(0.0)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(1.0)}),_2606)->__mosek_2fusion_2RangeDomain__integral();
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::binary  ( int _2607,    int _2608) { return mosek::fusion::p_Domain::binary(_2607,_2608); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::binary(int _2607,int _2608){
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(0.0)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(1.0)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2607),(int)(_2608)}))->__mosek_2fusion_2RangeDomain__integral();
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::binary  ( int _2609) { return mosek::fusion::p_Domain::binary(_2609); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::binary(int _2609){
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(0.0)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(1.0)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2609)}))->__mosek_2fusion_2RangeDomain__integral();
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( std::shared_ptr< monty::ndarray< double,1 > > _2610,    std::shared_ptr< monty::ndarray< double,1 > > _2611,    std::shared_ptr< monty::ndarray< int,1 > > _2612) { return mosek::fusion::p_Domain::inRange(_2610,_2611,_2612); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(std::shared_ptr< monty::ndarray< double,1 > > _2610,std::shared_ptr< monty::ndarray< double,1 > > _2611,std::shared_ptr< monty::ndarray< int,1 > > _2612){
  _checked_ptr_1<double> _ptr__2610(_2610 ? _2610->raw() : nullptr, _2610 ? _2610->size(0) : 0);
  _checked_ptr_1<double> _ptr__2611(_2611 ? _2611->raw() : nullptr, _2611 ? _2611->size(0) : 0);
  _checked_ptr_1<int> _ptr__2612(_2612 ? _2612->raw() : nullptr, _2612 ? _2612->size(0) : 0);
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_2610,_2611,_2612);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( std::shared_ptr< monty::ndarray< double,1 > > _2613,    double _2614,    std::shared_ptr< monty::ndarray< int,1 > > _2615) { return mosek::fusion::p_Domain::inRange(_2613,_2614,_2615); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(std::shared_ptr< monty::ndarray< double,1 > > _2613,double _2614,std::shared_ptr< monty::ndarray< int,1 > > _2615){
  _checked_ptr_1<double> _ptr__2613(_2613 ? _2613->raw() : nullptr, _2613 ? _2613->size(0) : 0);
  _checked_ptr_1<int> _ptr__2615(_2615 ? _2615->raw() : nullptr, _2615 ? _2615->size(0) : 0);
  std::vector<double> _8017;
  for (int _2616 = (int)0, _8018 = (int)((_2613)->size(0)); _2616 < _8018 ; ++_2616)
  {
    _8017.push_back(_2614);
  }
  auto _8019 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8017.size()),_8017.begin(),_8017.end()));
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_2613,_8019,_2615);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( double _2617,    std::shared_ptr< monty::ndarray< double,1 > > _2618,    std::shared_ptr< monty::ndarray< int,1 > > _2619) { return mosek::fusion::p_Domain::inRange(_2617,_2618,_2619); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(double _2617,std::shared_ptr< monty::ndarray< double,1 > > _2618,std::shared_ptr< monty::ndarray< int,1 > > _2619){
  _checked_ptr_1<double> _ptr__2618(_2618 ? _2618->raw() : nullptr, _2618 ? _2618->size(0) : 0);
  _checked_ptr_1<int> _ptr__2619(_2619 ? _2619->raw() : nullptr, _2619 ? _2619->size(0) : 0);
  std::vector<double> _8020;
  for (int _2620 = (int)0, _8021 = (int)((_2618)->size(0)); _2620 < _8021 ; ++_2620)
  {
    _8020.push_back(_2617);
  }
  auto _8022 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8020.size()),_8020.begin(),_8020.end()));
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_8022,_2618,_2619);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( double _2621,    double _2622,    std::shared_ptr< monty::ndarray< int,1 > > _2623) { return mosek::fusion::p_Domain::inRange(_2621,_2622,_2623); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(double _2621,double _2622,std::shared_ptr< monty::ndarray< int,1 > > _2623){
  _checked_ptr_1<int> _ptr__2623(_2623 ? _2623->raw() : nullptr, _2623 ? _2623->size(0) : 0);
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_2621)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_2622)}),_2623);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( std::shared_ptr< monty::ndarray< double,1 > > _2624,    std::shared_ptr< monty::ndarray< double,1 > > _2625) { return mosek::fusion::p_Domain::inRange(_2624,_2625); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(std::shared_ptr< monty::ndarray< double,1 > > _2624,std::shared_ptr< monty::ndarray< double,1 > > _2625){
  _checked_ptr_1<double> _ptr__2624(_2624 ? _2624->raw() : nullptr, _2624 ? _2624->size(0) : 0);
  _checked_ptr_1<double> _ptr__2625(_2625 ? _2625->raw() : nullptr, _2625 ? _2625->size(0) : 0);
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_2624,_2625,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2624)->size(0)))}));
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( std::shared_ptr< monty::ndarray< double,1 > > _2626,    double _2627) { return mosek::fusion::p_Domain::inRange(_2626,_2627); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(std::shared_ptr< monty::ndarray< double,1 > > _2626,double _2627){
  _checked_ptr_1<double> _ptr__2626(_2626 ? _2626->raw() : nullptr, _2626 ? _2626->size(0) : 0);
  std::vector<double> _8023;
  for (int _2628 = (int)0, _8024 = (int)((_2626)->size(0)); _2628 < _8024 ; ++_2628)
  {
    _8023.push_back(_2627);
  }
  auto _8025 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8023.size()),_8023.begin(),_8023.end()));
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_2626,_8025,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2626)->size(0)))}));
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( double _2629,    std::shared_ptr< monty::ndarray< double,1 > > _2630) { return mosek::fusion::p_Domain::inRange(_2629,_2630); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(double _2629,std::shared_ptr< monty::ndarray< double,1 > > _2630){
  _checked_ptr_1<double> _ptr__2630(_2630 ? _2630->raw() : nullptr, _2630 ? _2630->size(0) : 0);
  std::vector<double> _8026;
  for (int _2631 = (int)0, _8027 = (int)((_2630)->size(0)); _2631 < _8027 ; ++_2631)
  {
    _8026.push_back(_2629);
  }
  auto _8028 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8026.size()),_8026.begin(),_8026.end()));
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_8028,_2630,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2630)->size(0)))}));
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( double _2632,    double _2633) { return mosek::fusion::p_Domain::inRange(_2632,_2633); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(double _2632,double _2633){
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_2632)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_2633)}),nullptr);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( monty::rc_ptr< ::mosek::fusion::Matrix > _2634) { return mosek::fusion::p_Domain::greaterThan(_2634); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(monty::rc_ptr< ::mosek::fusion::Matrix > _2634){
  return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::GreaterThan,_2634);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( std::shared_ptr< monty::ndarray< double,1 > > _2635,    std::shared_ptr< monty::ndarray< int,1 > > _2636) { return mosek::fusion::p_Domain::greaterThan(_2635,_2636); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(std::shared_ptr< monty::ndarray< double,1 > > _2635,std::shared_ptr< monty::ndarray< int,1 > > _2636){
  _checked_ptr_1<double> _ptr__2635(_2635 ? _2635->raw() : nullptr, _2635 ? _2635->size(0) : 0);
  _checked_ptr_1<int> _ptr__2636(_2636 ? _2636->raw() : nullptr, _2636 ? _2636->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,false,::mosek::fusion::Utils::Tools::arraycopy(_2635),_2636);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( std::shared_ptr< monty::ndarray< double,2 > > _2637) { return mosek::fusion::p_Domain::greaterThan(_2637); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(std::shared_ptr< monty::ndarray< double,2 > > _2637){
  std::vector<double> _8029;
  for (int _2638 = (int)0, _8030 = (int)((_2637)->size(0)); _2638 < _8030 ; ++_2638)
  {
    for (int _2639 = (int)0, _8031 = (int)((_2637)->size(1)); _2639 < _8031 ; ++_2639)
    {
      _8029.push_back(((*_2637)(_2638,_2639)));
    }
  }
  auto _8032 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8029.size()),_8029.begin(),_8029.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,false,_8032,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2637)->size(0))),(int)((int)((_2637)->size(1)))}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( std::shared_ptr< monty::ndarray< double,1 > > _2640) { return mosek::fusion::p_Domain::greaterThan(_2640); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(std::shared_ptr< monty::ndarray< double,1 > > _2640){
  _checked_ptr_1<double> _ptr__2640(_2640 ? _2640->raw() : nullptr, _2640 ? _2640->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,false,::mosek::fusion::Utils::Tools::arraycopy(_2640),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2640)->size(0)))}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( double _2641,    std::shared_ptr< monty::ndarray< int,1 > > _2642) { return mosek::fusion::p_Domain::greaterThan(_2641,_2642); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(double _2641,std::shared_ptr< monty::ndarray< int,1 > > _2642){
  _checked_ptr_1<int> _ptr__2642(_2642 ? _2642->raw() : nullptr, _2642 ? _2642->size(0) : 0);
  std::vector<double> _8033;
  for (long long _2643 = (int)0, _8034 = ::mosek::fusion::p_Domain::prod(_2642); _2643 < _8034 ; ++_2643)
  {
    _8033.push_back(_2641);
  }
  auto _8035 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8033.size()),_8033.begin(),_8033.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,true,_8035,_2642);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( double _2644,    int _2645,    int _2646) { return mosek::fusion::p_Domain::greaterThan(_2644,_2645,_2646); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(double _2644,int _2645,int _2646){
  std::vector<double> _8036;
  for (int _2647 = (int)0, _8037 = safe_mul( _2646,_2645 ); _2647 < _8037 ; ++_2647)
  {
    _8036.push_back(_2644);
  }
  auto _8038 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8036.size()),_8036.begin(),_8036.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,true,_8038,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2645),(int)(_2646)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( double _2648,    int _2649) { return mosek::fusion::p_Domain::greaterThan(_2648,_2649); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(double _2648,int _2649){
  std::vector<double> _8039;
  for (int _2650 = (int)0, _8040 = _2649; _2650 < _8040 ; ++_2650)
  {
    _8039.push_back(_2648);
  }
  auto _8041 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8039.size()),_8039.begin(),_8039.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,true,_8041,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2649)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( double _2651) { return mosek::fusion::p_Domain::greaterThan(_2651); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(double _2651){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_2651)}),nullptr);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( monty::rc_ptr< ::mosek::fusion::Matrix > _2652) { return mosek::fusion::p_Domain::lessThan(_2652); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(monty::rc_ptr< ::mosek::fusion::Matrix > _2652){
  return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::LessThan,_2652);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( std::shared_ptr< monty::ndarray< double,1 > > _2653,    std::shared_ptr< monty::ndarray< int,1 > > _2654) { return mosek::fusion::p_Domain::lessThan(_2653,_2654); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(std::shared_ptr< monty::ndarray< double,1 > > _2653,std::shared_ptr< monty::ndarray< int,1 > > _2654){
  _checked_ptr_1<double> _ptr__2653(_2653 ? _2653->raw() : nullptr, _2653 ? _2653->size(0) : 0);
  _checked_ptr_1<int> _ptr__2654(_2654 ? _2654->raw() : nullptr, _2654 ? _2654->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,false,::mosek::fusion::Utils::Tools::arraycopy(_2653),_2654);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( std::shared_ptr< monty::ndarray< double,2 > > _2655) { return mosek::fusion::p_Domain::lessThan(_2655); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(std::shared_ptr< monty::ndarray< double,2 > > _2655){
  std::vector<double> _8042;
  for (int _2656 = (int)0, _8043 = (int)((_2655)->size(0)); _2656 < _8043 ; ++_2656)
  {
    for (int _2657 = (int)0, _8044 = (int)((_2655)->size(1)); _2657 < _8044 ; ++_2657)
    {
      _8042.push_back(((*_2655)(_2656,_2657)));
    }
  }
  auto _8045 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8042.size()),_8042.begin(),_8042.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,false,_8045,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2655)->size(0))),(int)((int)((_2655)->size(1)))}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( std::shared_ptr< monty::ndarray< double,1 > > _2658) { return mosek::fusion::p_Domain::lessThan(_2658); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(std::shared_ptr< monty::ndarray< double,1 > > _2658){
  _checked_ptr_1<double> _ptr__2658(_2658 ? _2658->raw() : nullptr, _2658 ? _2658->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,false,::mosek::fusion::Utils::Tools::arraycopy(_2658),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2658)->size(0)))}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( double _2659,    std::shared_ptr< monty::ndarray< int,1 > > _2660) { return mosek::fusion::p_Domain::lessThan(_2659,_2660); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(double _2659,std::shared_ptr< monty::ndarray< int,1 > > _2660){
  _checked_ptr_1<int> _ptr__2660(_2660 ? _2660->raw() : nullptr, _2660 ? _2660->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_2659)}),_2660);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( double _2661,    int _2662,    int _2663) { return mosek::fusion::p_Domain::lessThan(_2661,_2662,_2663); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(double _2661,int _2662,int _2663){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_2661)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2662),(int)(_2663)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( double _2664,    int _2665) { return mosek::fusion::p_Domain::lessThan(_2664,_2665); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(double _2664,int _2665){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_2664)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2665)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( double _2666) { return mosek::fusion::p_Domain::lessThan(_2666); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(double _2666){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_2666)}),nullptr);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( monty::rc_ptr< ::mosek::fusion::Matrix > _2667) { return mosek::fusion::p_Domain::equalsTo(_2667); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(monty::rc_ptr< ::mosek::fusion::Matrix > _2667){
  return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::EqualsTo,_2667);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( std::shared_ptr< monty::ndarray< double,1 > > _2668,    std::shared_ptr< monty::ndarray< int,1 > > _2669) { return mosek::fusion::p_Domain::equalsTo(_2668,_2669); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(std::shared_ptr< monty::ndarray< double,1 > > _2668,std::shared_ptr< monty::ndarray< int,1 > > _2669){
  _checked_ptr_1<double> _ptr__2668(_2668 ? _2668->raw() : nullptr, _2668 ? _2668->size(0) : 0);
  _checked_ptr_1<int> _ptr__2669(_2669 ? _2669->raw() : nullptr, _2669 ? _2669->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,false,::mosek::fusion::Utils::Tools::arraycopy(_2668),_2669);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( std::shared_ptr< monty::ndarray< double,2 > > _2670) { return mosek::fusion::p_Domain::equalsTo(_2670); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(std::shared_ptr< monty::ndarray< double,2 > > _2670){
  std::vector<double> _8046;
  for (int _2671 = (int)0, _8047 = (int)((_2670)->size(0)); _2671 < _8047 ; ++_2671)
  {
    for (int _2672 = (int)0, _8048 = (int)((_2670)->size(1)); _2672 < _8048 ; ++_2672)
    {
      _8046.push_back(((*_2670)(_2671,_2672)));
    }
  }
  auto _8049 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8046.size()),_8046.begin(),_8046.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,false,_8049,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2670)->size(0))),(int)((int)((_2670)->size(1)))}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( std::shared_ptr< monty::ndarray< double,1 > > _2673) { return mosek::fusion::p_Domain::equalsTo(_2673); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(std::shared_ptr< monty::ndarray< double,1 > > _2673){
  _checked_ptr_1<double> _ptr__2673(_2673 ? _2673->raw() : nullptr, _2673 ? _2673->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,false,::mosek::fusion::Utils::Tools::arraycopy(_2673),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2673)->size(0)))}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( double _2674,    std::shared_ptr< monty::ndarray< int,1 > > _2675) { return mosek::fusion::p_Domain::equalsTo(_2674,_2675); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(double _2674,std::shared_ptr< monty::ndarray< int,1 > > _2675){
  _checked_ptr_1<int> _ptr__2675(_2675 ? _2675->raw() : nullptr, _2675 ? _2675->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_2674)}),_2675);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( double _2676,    int _2677,    int _2678) { return mosek::fusion::p_Domain::equalsTo(_2676,_2677,_2678); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(double _2676,int _2677,int _2678){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_2676)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2677),(int)(_2678)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( double _2679,    int _2680) { return mosek::fusion::p_Domain::equalsTo(_2679,_2680); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(double _2679,int _2680){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_2679)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2680)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( double _2681) { return mosek::fusion::p_Domain::equalsTo(_2681); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(double _2681){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_2681)}),nullptr);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::unbounded  ( std::shared_ptr< monty::ndarray< int,1 > > _2682) { return mosek::fusion::p_Domain::unbounded(_2682); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::unbounded(std::shared_ptr< monty::ndarray< int,1 > > _2682){
  _checked_ptr_1<int> _ptr__2682(_2682 ? _2682->raw() : nullptr, _2682 ? _2682->size(0) : 0);
  std::vector<int> _8050;
  for (int _2683 = (int)0, _8051 = (int)((_2682)->size(0)); _2683 < _8051 ; ++_2683)
  {
    _8050.push_back(_ptr__2682[_2683]);
  }
  auto _8052 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8050.size()),_8050.begin(),_8050.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::IsFree,false,nullptr,_8052);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::unbounded  ( int _2684,    int _2685) { return mosek::fusion::p_Domain::unbounded(_2684,_2685); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::unbounded(int _2684,int _2685){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::IsFree,false,nullptr,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2684),(int)(_2685)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::unbounded  ( int _2686) { return mosek::fusion::p_Domain::unbounded(_2686); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::unbounded(int _2686){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::IsFree,false,nullptr,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2686)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::unbounded  ( ) { return mosek::fusion::p_Domain::unbounded(); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::unbounded(){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::IsFree,true,nullptr,nullptr);
}
void mosek::fusion::p_Domain::destroy(){}void mosek::fusion::Domain::destroy() { mosek::fusion::p_Domain::_get_impl(this)->destroy(); }mosek::fusion::ExprConst::ExprConst(mosek::fusion::p_ExprConst *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprConst()" << this << std::endl; */ }mosek::fusion::ExprConst::~ExprConst() {  /* std::cout << "~ExprConst()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprConst::p_ExprConst  (::mosek::fusion::ExprConst * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprConst::t mosek::fusion::p_ExprConst::_new_ExprConst  (std::shared_ptr< monty::ndarray< int,1 > > _2687,    std::shared_ptr< monty::ndarray< long long,1 > > _2688,    std::shared_ptr< monty::ndarray< double,1 > > _2689){ return new mosek::fusion::ExprConst(_2687,_2688,_2689); }mosek::fusion::ExprConst::ExprConst  (std::shared_ptr< monty::ndarray< int,1 > > _2687,    std::shared_ptr< monty::ndarray< long long,1 > > _2688,    std::shared_ptr< monty::ndarray< double,1 > > _2689) :    ExprConst(new mosek::fusion::p_ExprConst(this)){ mosek::fusion::p_ExprConst::_get_impl(this)->_initialize(_2687,_2688,_2689); }void mosek::fusion::p_ExprConst::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _2687,    std::shared_ptr< monty::ndarray< long long,1 > > _2688,    std::shared_ptr< monty::ndarray< double,1 > > _2689){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2687(_2687 ? _2687->raw() : nullptr, _2687 ? _2687->size(0) : 0);
    _checked_ptr_1<long long> _ptr__2688(_2688 ? _2688->raw() : nullptr, _2688 ? _2688->size(0) : 0);
    _checked_ptr_1<double> _ptr__2689(_2689 ? _2689->raw() : nullptr, _2689 ? _2689->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(_2687);
    mosek::fusion::p_ExprConst::_get_impl(::mosek::fusion::ExprConst::t(_pubthis))->bfix = ::mosek::fusion::Utils::Tools::arraycopy(_2689);
    std::shared_ptr< monty::ndarray< long long,1 > > _8053;
    bool _8054 = (NULL != _2688.get());
    if (_8054)
    {
      _8053 = ::mosek::fusion::Utils::Tools::arraycopy(_2688);
    }
    else
    {
      _8053 = nullptr;
    }
    mosek::fusion::p_ExprConst::_get_impl(::mosek::fusion::ExprConst::t(_pubthis))->sparsity = _8053;
    ::mosek::fusion::p_ExprConst::validate(_2687,_2689,_2688);
  }
}mosek::fusion::ExprConst::t mosek::fusion::p_ExprConst::_new_ExprConst  (std::shared_ptr< monty::ndarray< int,1 > > _2690,    std::shared_ptr< monty::ndarray< long long,1 > > _2691,    double _2692){ return new mosek::fusion::ExprConst(_2690,_2691,_2692); }mosek::fusion::ExprConst::ExprConst  (std::shared_ptr< monty::ndarray< int,1 > > _2690,    std::shared_ptr< monty::ndarray< long long,1 > > _2691,    double _2692) :    ExprConst(new mosek::fusion::p_ExprConst(this)){ mosek::fusion::p_ExprConst::_get_impl(this)->_initialize(_2690,_2691,_2692); }void mosek::fusion::p_ExprConst::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _2690,    std::shared_ptr< monty::ndarray< long long,1 > > _2691,    double _2692){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2690(_2690 ? _2690->raw() : nullptr, _2690 ? _2690->size(0) : 0);
    _checked_ptr_1<long long> _ptr__2691(_2691 ? _2691->raw() : nullptr, _2691 ? _2691->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(_2690);
    long long _8055;
    bool _8056 = (NULL == _2691.get());
    if (_8056)
    {
      _8055 = ::mosek::fusion::p_Set::size(_2690);
    }
    else
    {
      _8055 = (int)((_2691)->size(0));
    }
    long long _2693 = _8055;
    std::vector<double> _8057;
    for (long long _2694 = (int)0, _8058 = _2693; _2694 < _8058 ; ++_2694)
    {
      _8057.push_back(_2692);
    }
    auto _8059 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8057.size()),_8057.begin(),_8057.end()));
    mosek::fusion::p_ExprConst::_get_impl(::mosek::fusion::ExprConst::t(_pubthis))->bfix = _8059;
    std::shared_ptr< monty::ndarray< long long,1 > > _8060;
    bool _8061 = (NULL != _2691.get());
    if (_8061)
    {
      _8060 = ::mosek::fusion::Utils::Tools::arraycopy(_2691);
    }
    else
    {
      _8060 = nullptr;
    }
    mosek::fusion::p_ExprConst::_get_impl(::mosek::fusion::ExprConst::t(_pubthis))->sparsity = _8060;
    ::mosek::fusion::p_ExprConst::validate(_2690,mosek::fusion::p_ExprConst::_get_impl(::mosek::fusion::ExprConst::t(_pubthis))->bfix,_2691);
  }
}void mosek::fusion::ExprConst :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _2695,monty::rc_ptr< ::mosek::fusion::WorkStack > _2696,monty::rc_ptr< ::mosek::fusion::WorkStack > _2697) { mosek::fusion::p_ExprConst::_get_impl(this)->eval(_2695,_2696,_2697); }void mosek::fusion::p_ExprConst::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _2695,monty::rc_ptr< ::mosek::fusion::WorkStack > _2696,monty::rc_ptr< ::mosek::fusion::WorkStack > _2697){
  std::shared_ptr< monty::ndarray< int,1 > > _2698 = _pubthis->getShape();
  _checked_ptr_1<int> _ptr__2698(_2698 ? _2698->raw() : nullptr,_2698 ? _2698->size(0) : 0);
  int _2699 = (int)((bfix)->size(0));
  bool _2700 = ((NULL != sparsity.get()) && ((int)((sparsity)->size(0)) < ::mosek::fusion::p_Set::size(_2698)));
  int _2701 = _2695->alloci32(safe_add( _2699,(int)1 ));
  int _8062;
  bool _8063 = _2700;
  if (_8063)
  {
    _8062 = (int)1;
  }
  else
  {
    _8062 = (int)0;
  }
  _2695->pushi32(_8062);
  _2695->pushi32((int)0);
  _2695->pushi32(_2699);
  int _8064 = (int)0;
  int _8065 = (int)((_2698)->size(0));
  for (int _2702 = _8064; _2702 < _8065; ++_2702)
  {
    {
      _2695->pushi32(_ptr__2698[_2702]);
    }
  }
  _2695->pushi32((int)((_2698)->size(0)));
  if ((NULL != sparsity.get()))
  {
    {
      int _2703 = _2695->alloci64((int)((sparsity)->size(0)));
      std::shared_ptr< monty::ndarray< long long,1 > > _2704 = mosek::fusion::p_WorkStack::_get_impl(_2695)->i64;
      _checked_ptr_1<long long> _ptr__2704(_2704 ? _2704->raw() : nullptr,_2704 ? _2704->size(0) : 0);
      int _8066 = (int)0;
      int _8067 = (int)((sparsity)->size(0));
      for (int _2705 = _8066; _2705 < _8067; ++_2705)
      {
        {
          _ptr__2704[safe_add( _2703,_2705 )] = ((*sparsity)(_2705));
        }
      }
    }
  }
  {}
  int _2706 = _2695->allocf64((int)((bfix)->size(0)));
  std::shared_ptr< monty::ndarray< double,1 > > _2707 = mosek::fusion::p_WorkStack::_get_impl(_2695)->f64;
  _checked_ptr_1<double> _ptr__2707(_2707 ? _2707->raw() : nullptr,_2707 ? _2707->size(0) : 0);
  int _8068 = (int)0;
  int _8069 = (int)((bfix)->size(0));
  for (int _2708 = _8068; _2708 < _8069; ++_2708)
  {
    {
      _ptr__2707[safe_add( _2706,_2708 )] = ((*bfix)(_2708));
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _2709 = mosek::fusion::p_WorkStack::_get_impl(_2695)->i32;
  _checked_ptr_1<int> _ptr__2709(_2709 ? _2709->raw() : nullptr,_2709 ? _2709->size(0) : 0);
  int _8070 = (int)0;
  int _8071 = safe_add( _2699,(int)1 );
  for (int _2710 = _8070; _2710 < _8071; ++_2710)
  {
    {
      _ptr__2709[safe_add( _2701,_2710 )] = (int)0;
    }
  }
}
void mosek::fusion::p_ExprConst::validate(std::shared_ptr< monty::ndarray< int,1 > > _2711,std::shared_ptr< monty::ndarray< double,1 > > _2712,std::shared_ptr< monty::ndarray< long long,1 > > _2713){
  _checked_ptr_1<int> _ptr__2711(_2711 ? _2711->raw() : nullptr, _2711 ? _2711->size(0) : 0);
  _checked_ptr_1<double> _ptr__2712(_2712 ? _2712->raw() : nullptr, _2712 ? _2712->size(0) : 0);
  _checked_ptr_1<long long> _ptr__2713(_2713 ? _2713->raw() : nullptr, _2713 ? _2713->size(0) : 0);
  long long _2714 = ::mosek::fusion::p_Set::size(_2711);
  if ((NULL != _2713.get()))
  {
    {
      if (((int)((_2713)->size(0)) != (int)((_2712)->size(0))))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Mismatching data lengths"));
        }
      }
      {}
      bool _2715 = false;
      int _8072 = (int)0;
      int _8073 = (int)((_2713)->size(0));
      for (int _2716 = _8072; _2716 < _8073; ++_2716)
      {
        {
          if (((_ptr__2713[_2716] < (int)0) || (_ptr__2713[_2716] >= _2714)))
          {
            {
              _2715 = true;
            }
          }
          {}
        }
      }
      if (_2715)
      {
        {
          throw ::mosek::fusion::IndexError(std::string ("Invalid sparsity index"));
        }
      }
      {}
    }
  }
  else
  {
    {
      if (((int)((_2712)->size(0)) != _2714))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Mismatching data length"));
        }
      }
      {}
    }
  }
}
std::string mosek::fusion::ExprConst :: toString() { return mosek::fusion::p_ExprConst::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprConst::toString(){
  return std::string ("ExprConst()");
}
void mosek::fusion::p_ExprConst::destroy(){sparsity.reset();bfix.reset();}void mosek::fusion::ExprConst::destroy() { mosek::fusion::p_ExprConst::_get_impl(this)->destroy(); }mosek::fusion::ExprPick::ExprPick(mosek::fusion::p_ExprPick *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprPick()" << this << std::endl; */ }mosek::fusion::ExprPick::~ExprPick() {  /* std::cout << "~ExprPick()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprPick::p_ExprPick  (::mosek::fusion::ExprPick * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprPick::t mosek::fusion::p_ExprPick::_new_ExprPick  (monty::rc_ptr< ::mosek::fusion::Expression > _2717,    std::shared_ptr< monty::ndarray< int,2 > > _2718){ return new mosek::fusion::ExprPick(_2717,_2718); }mosek::fusion::ExprPick::ExprPick  (monty::rc_ptr< ::mosek::fusion::Expression > _2717,    std::shared_ptr< monty::ndarray< int,2 > > _2718) :    ExprPick(new mosek::fusion::p_ExprPick(this)){ mosek::fusion::p_ExprPick::_get_impl(this)->_initialize(_2717,_2718); }void mosek::fusion::p_ExprPick::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _2717,    std::shared_ptr< monty::ndarray< int,2 > > _2718){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2718)->size(0)))}));
    std::shared_ptr< monty::ndarray< int,1 > > _2719 = _2717->getShape();
    _checked_ptr_1<int> _ptr__2719(_2719 ? _2719->raw() : nullptr,_2719 ? _2719->size(0) : 0);
    int _2720 = (int)((_2719)->size(0));
    mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->expr = _2717;
    mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->idxs = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_2718)->size(0)))));
    std::shared_ptr< monty::ndarray< long long,1 > > _2721 = mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->idxs;
    _checked_ptr_1<long long> _ptr__2721(_2721 ? _2721->raw() : nullptr,_2721 ? _2721->size(0) : 0);
    if (((int)((_2718)->size(1)) != _2720))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and index dimensions"));
      }
    }
    {}
    bool _2722 = false;
    int _8074 = (int)0;
    int _8075 = (int)((_2718)->size(0));
    for (int _2723 = _8074; _2723 < _8075; ++_2723)
    {
      {
        int _8076 = (int)0;
        int _8077 = _2720;
        for (int _2724 = _8076; _2724 < _8077; ++_2724)
        {
          {
            if (((((*_2718)(_2723,_2724)) < (int)0) || (((*_2718)(_2723,_2724)) >= _ptr__2719[_2724])))
            {
              {
                _2722 = true;
              }
            }
            {}
          }
        }
      }
    }
    if (_2722)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Pick index out of bounds"));
      }
    }
    {}
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _2725 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2720)));
      _checked_ptr_1<long long> _ptr__2725(_2725 ? _2725->raw() : nullptr,_2725 ? _2725->size(0) : 0);
      _ptr__2725[(_2720 - (int)1)] = (int)1;
      int _8078 = (int)1;
      int _8079 = _2720;
      for (int _2726 = _8078; _2726 < _8079; ++_2726)
      {
        {
          _ptr__2725[((_2720 - _2726) - (int)1)] = safe_mul( _ptr__2725[(_2720 - _2726)],_ptr__2719[(_2720 - _2726)] );
        }
      }
      int _8080 = (int)0;
      int _8081 = (int)((_2718)->size(0));
      for (int _2727 = _8080; _2727 < _8081; ++_2727)
      {
        {
          long long _2728 = (long long)0;
          int _8082 = (int)0;
          int _8083 = _2720;
          for (int _2729 = _8082; _2729 < _8083; ++_2729)
          {
            {
              _2728 += safe_mul( _ptr__2725[_2729],((*_2718)(_2727,_2729)) );
            }
          }
          _ptr__2721[_2727] = _2728;
        }
      }
    }
  }
}mosek::fusion::ExprPick::t mosek::fusion::p_ExprPick::_new_ExprPick  (monty::rc_ptr< ::mosek::fusion::Expression > _2730,    std::shared_ptr< monty::ndarray< long long,1 > > _2731){ return new mosek::fusion::ExprPick(_2730,_2731); }mosek::fusion::ExprPick::ExprPick  (monty::rc_ptr< ::mosek::fusion::Expression > _2730,    std::shared_ptr< monty::ndarray< long long,1 > > _2731) :    ExprPick(new mosek::fusion::p_ExprPick(this)){ mosek::fusion::p_ExprPick::_get_impl(this)->_initialize(_2730,_2731); }void mosek::fusion::p_ExprPick::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _2730,    std::shared_ptr< monty::ndarray< long long,1 > > _2731){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__2731(_2731 ? _2731->raw() : nullptr, _2731 ? _2731->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2731)->size(0)))}));
    mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->expr = _2730;
    std::shared_ptr< monty::ndarray< int,1 > > _2732 = _2730->getShape();
    _checked_ptr_1<int> _ptr__2732(_2732 ? _2732->raw() : nullptr,_2732 ? _2732->size(0) : 0);
    long long _2733 = ::mosek::fusion::p_Set::size(_2732);
    bool _2734 = false;
    int _8084 = (int)0;
    int _8085 = (int)((_2731)->size(0));
    for (int _2735 = _8084; _2735 < _8085; ++_2735)
    {
      {
        if (((_ptr__2731[_2735] < (int)0) || (_ptr__2731[_2735] >= _2733)))
        {
          {
            _2734 = true;
          }
        }
        {}
      }
    }
    if (_2734)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Pick index out of bounds"));
      }
    }
    {}
    mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->idxs = ::mosek::fusion::Utils::Tools::arraycopy(_2731);
  }
}void mosek::fusion::ExprPick :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _2736,monty::rc_ptr< ::mosek::fusion::WorkStack > _2737,monty::rc_ptr< ::mosek::fusion::WorkStack > _2738) { mosek::fusion::p_ExprPick::_get_impl(this)->eval(_2736,_2737,_2738); }void mosek::fusion::p_ExprPick::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _2736,monty::rc_ptr< ::mosek::fusion::WorkStack > _2737,monty::rc_ptr< ::mosek::fusion::WorkStack > _2738){
  expr->eval(_2737,_2736,_2738);
  _2737->pop_expr();
  int _2739 = mosek::fusion::p_WorkStack::_get_impl(_2737)->nd;
  int _2740 = mosek::fusion::p_WorkStack::_get_impl(_2737)->shape_base;
  int _2741 = mosek::fusion::p_WorkStack::_get_impl(_2737)->nelem;
  int _2742 = mosek::fusion::p_WorkStack::_get_impl(_2737)->nnz;
  bool _2743 = mosek::fusion::p_WorkStack::_get_impl(_2737)->hassp;
  int _2744 = mosek::fusion::p_WorkStack::_get_impl(_2737)->ptr_base;
  int _2745 = mosek::fusion::p_WorkStack::_get_impl(_2737)->sp_base;
  int _2746 = mosek::fusion::p_WorkStack::_get_impl(_2737)->nidxs_base;
  int _2747 = mosek::fusion::p_WorkStack::_get_impl(_2737)->bfix_base;
  int _2748 = mosek::fusion::p_WorkStack::_get_impl(_2737)->cof_base;
  std::shared_ptr< monty::ndarray< int,1 > > _2749 = mosek::fusion::p_WorkStack::_get_impl(_2737)->i32;
  _checked_ptr_1<int> _ptr__2749(_2749 ? _2749->raw() : nullptr,_2749 ? _2749->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2750 = mosek::fusion::p_WorkStack::_get_impl(_2737)->i64;
  _checked_ptr_1<long long> _ptr__2750(_2750 ? _2750->raw() : nullptr,_2750 ? _2750->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _2751 = mosek::fusion::p_WorkStack::_get_impl(_2737)->f64;
  _checked_ptr_1<double> _ptr__2751(_2751 ? _2751->raw() : nullptr,_2751 ? _2751->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2752 = mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->idxs;
  _checked_ptr_1<long long> _ptr__2752(_2752 ? _2752->raw() : nullptr,_2752 ? _2752->size(0) : 0);
  if ((!_2743))
  {
    {
      int _2753 = (int)((_2752)->size(0));
      int _2754 = (int)1;
      int _2755 = (int)0;
      int _8086 = (int)0;
      int _8087 = (int)((_2752)->size(0));
      for (int _2756 = _8086; _2756 < _8087; ++_2756)
      {
        {
          _2755 += (_ptr__2749[safe_add( safe_add( _2744,_ptr__2752[_2756] ),(int)1 )] - _ptr__2749[safe_add( _2744,_ptr__2752[_2756] )]);
        }
      }
      _2736->alloc_expr(_2754,_2753,_2755,false);
      int _2757 = mosek::fusion::p_WorkStack::_get_impl(_2736)->cof_base;
      int _2758 = mosek::fusion::p_WorkStack::_get_impl(_2736)->bfix_base;
      int _2759 = mosek::fusion::p_WorkStack::_get_impl(_2736)->nidxs_base;
      int _2760 = mosek::fusion::p_WorkStack::_get_impl(_2736)->ptr_base;
      int _2761 = mosek::fusion::p_WorkStack::_get_impl(_2736)->shape_base;
      std::shared_ptr< monty::ndarray< int,1 > > _2762 = mosek::fusion::p_WorkStack::_get_impl(_2736)->i32;
      _checked_ptr_1<int> _ptr__2762(_2762 ? _2762->raw() : nullptr,_2762 ? _2762->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _2763 = mosek::fusion::p_WorkStack::_get_impl(_2736)->i64;
      _checked_ptr_1<long long> _ptr__2763(_2763 ? _2763->raw() : nullptr,_2763 ? _2763->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _2764 = mosek::fusion::p_WorkStack::_get_impl(_2736)->f64;
      _checked_ptr_1<double> _ptr__2764(_2764 ? _2764->raw() : nullptr,_2764 ? _2764->size(0) : 0);
      _ptr__2762[_2761] = (int)((_2752)->size(0));
      int _2765 = (int)0;
      _ptr__2762[_2760] = (int)0;
      int _8088 = (int)0;
      int _8089 = (int)((_2752)->size(0));
      for (int _2766 = _8088; _2766 < _8089; ++_2766)
      {
        {
          int _8090 = _ptr__2749[safe_add( _2744,_ptr__2752[_2766] )];
          int _8091 = _ptr__2749[safe_add( safe_add( _2744,_ptr__2752[_2766] ),(int)1 )];
          for (int _2767 = _8090; _2767 < _8091; ++_2767)
          {
            {
              _ptr__2763[safe_add( _2759,_2765 )] = _ptr__2750[safe_add( _2746,_2767 )];
              _ptr__2764[safe_add( _2757,_2765 )] = _ptr__2751[safe_add( _2748,_2767 )];
              ++ _2765;
            }
          }
          _ptr__2764[safe_add( _2758,_2766 )] = _ptr__2751[safe_add( _2747,_ptr__2752[_2766] )];
          _ptr__2762[safe_add( safe_add( _2760,_2766 ),(int)1 )] = _2765;
        }
      }
    }
  }
  else
  {
    {
      int _2768 = (int)1;
      int _2769 = (int)((_2752)->size(0));
      int _2770 = (int)0;
      std::shared_ptr< monty::ndarray< long long,1 > > _2771 = mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->idxs;
      _checked_ptr_1<long long> _ptr__2771(_2771 ? _2771->raw() : nullptr,_2771 ? _2771->size(0) : 0);
      int _2772 = _2738->alloci32((int)((_2771)->size(0)));
      std::shared_ptr< monty::ndarray< int,1 > > _2773 = mosek::fusion::p_WorkStack::_get_impl(_2738)->i32;
      _checked_ptr_1<int> _ptr__2773(_2773 ? _2773->raw() : nullptr,_2773 ? _2773->size(0) : 0);
      int _8092 = (int)0;
      int _8093 = (int)((_2771)->size(0));
      for (int _2774 = _8092; _2774 < _8093; ++_2774)
      {
        {
          int _2775 = _2741;
          int _2776 = (int)0;
          while ( (_2776 < (_2775 - (int)1)) )
          {
            {
              int _2777 = (safe_add( safe_add( _2775,_2776 ),(int)1 ) / (int)2);
              if ((_ptr__2750[safe_add( _2745,_2777 )] >= _ptr__2771[_2774]))
              {
                {
                  _2775 = _2777;
                }
              }
              else
              {
                {
                  _2776 = _2777;
                }
              }
            }
          }
          ++ _2776;
          if (((_2776 < _2741) && (_ptr__2750[safe_add( _2745,_2776 )] == _ptr__2771[_2774])))
          {
            {
              _ptr__2773[safe_add( _2772,_2774 )] = _2776;
              _2770 += (_ptr__2749[safe_add( safe_add( _2744,_2776 ),(int)1 )] - _ptr__2749[safe_add( _2744,_2776 )]);
            }
          }
          else
          {
            {
              _ptr__2773[safe_add( _2772,_2774 )] = (-(int)1);
            }
          }
        }
      }
      _2736->alloc_expr(_2768,_2769,_2770,false);
      int _2778 = mosek::fusion::p_WorkStack::_get_impl(_2736)->ptr_base;
      int _2779 = mosek::fusion::p_WorkStack::_get_impl(_2736)->nidxs_base;
      int _2780 = mosek::fusion::p_WorkStack::_get_impl(_2736)->cof_base;
      int _2781 = mosek::fusion::p_WorkStack::_get_impl(_2736)->bfix_base;
      int _2782 = mosek::fusion::p_WorkStack::_get_impl(_2736)->shape_base;
      std::shared_ptr< monty::ndarray< int,1 > > _2783 = mosek::fusion::p_WorkStack::_get_impl(_2736)->i32;
      _checked_ptr_1<int> _ptr__2783(_2783 ? _2783->raw() : nullptr,_2783 ? _2783->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _2784 = mosek::fusion::p_WorkStack::_get_impl(_2736)->i64;
      _checked_ptr_1<long long> _ptr__2784(_2784 ? _2784->raw() : nullptr,_2784 ? _2784->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _2785 = mosek::fusion::p_WorkStack::_get_impl(_2736)->f64;
      _checked_ptr_1<double> _ptr__2785(_2785 ? _2785->raw() : nullptr,_2785 ? _2785->size(0) : 0);
      _ptr__2783[_2782] = (int)((_2771)->size(0));
      _ptr__2783[_2778] = (int)0;
      int _2786 = (int)0;
      int _8094 = (int)0;
      int _8095 = (int)((_2771)->size(0));
      for (int _2787 = _8094; _2787 < _8095; ++_2787)
      {
        {
          if ((_ptr__2773[safe_add( _2772,_2787 )] >= (int)0))
          {
            {
              int _2788 = _ptr__2773[safe_add( _2772,_2787 )];
              int _8096 = _ptr__2749[safe_add( _2744,_2788 )];
              int _8097 = _ptr__2749[safe_add( safe_add( _2744,_2788 ),(int)1 )];
              for (int _2789 = _8096; _2789 < _8097; ++_2789)
              {
                {
                  _ptr__2784[safe_add( _2779,_2786 )] = _ptr__2750[safe_add( _2746,_2789 )];
                  _ptr__2785[safe_add( _2780,_2786 )] = _ptr__2751[safe_add( _2748,_2789 )];
                  ++ _2786;
                }
              }
              _ptr__2785[safe_add( _2781,_2787 )] = _ptr__2751[safe_add( _2747,_2788 )];
            }
          }
          else
          {
            {
              _ptr__2785[safe_add( _2781,_2787 )] = 0.0;
            }
          }
          _ptr__2783[safe_add( safe_add( _2778,_2787 ),(int)1 )] = _2786;
        }
      }
    }
  }
}
std::string mosek::fusion::ExprPick :: toString() { return mosek::fusion::p_ExprPick::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprPick::toString(){
  return std::string ("ExprPick()");
}
void mosek::fusion::p_ExprPick::destroy(){idxs.reset();expr.reset();}void mosek::fusion::ExprPick::destroy() { mosek::fusion::p_ExprPick::_get_impl(this)->destroy(); }mosek::fusion::ExprSlice::ExprSlice(mosek::fusion::p_ExprSlice *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprSlice()" << this << std::endl; */ }mosek::fusion::ExprSlice::~ExprSlice() {  /* std::cout << "~ExprSlice()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprSlice::p_ExprSlice  (::mosek::fusion::ExprSlice * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprSlice::t mosek::fusion::p_ExprSlice::_new_ExprSlice  (monty::rc_ptr< ::mosek::fusion::Expression > _2790,    std::shared_ptr< monty::ndarray< int,1 > > _2791,    std::shared_ptr< monty::ndarray< int,1 > > _2792){ return new mosek::fusion::ExprSlice(_2790,_2791,_2792); }mosek::fusion::ExprSlice::ExprSlice  (monty::rc_ptr< ::mosek::fusion::Expression > _2790,    std::shared_ptr< monty::ndarray< int,1 > > _2791,    std::shared_ptr< monty::ndarray< int,1 > > _2792) :    ExprSlice(new mosek::fusion::p_ExprSlice(this)){ mosek::fusion::p_ExprSlice::_get_impl(this)->_initialize(_2790,_2791,_2792); }void mosek::fusion::p_ExprSlice::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _2790,    std::shared_ptr< monty::ndarray< int,1 > > _2791,    std::shared_ptr< monty::ndarray< int,1 > > _2792){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2791(_2791 ? _2791->raw() : nullptr, _2791 ? _2791->size(0) : 0);
    _checked_ptr_1<int> _ptr__2792(_2792 ? _2792->raw() : nullptr, _2792 ? _2792->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprSlice::makeShape(_2790->getShape(),_2791,_2792));
    mosek::fusion::p_ExprSlice::_get_impl(::mosek::fusion::ExprSlice::t(_pubthis))->expr = _2790;
    mosek::fusion::p_ExprSlice::_get_impl(::mosek::fusion::ExprSlice::t(_pubthis))->first = _2791;
    mosek::fusion::p_ExprSlice::_get_impl(::mosek::fusion::ExprSlice::t(_pubthis))->last = _2792;
  }
}void mosek::fusion::ExprSlice :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _2793,monty::rc_ptr< ::mosek::fusion::WorkStack > _2794,monty::rc_ptr< ::mosek::fusion::WorkStack > _2795) { mosek::fusion::p_ExprSlice::_get_impl(this)->eval(_2793,_2794,_2795); }void mosek::fusion::p_ExprSlice::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _2793,monty::rc_ptr< ::mosek::fusion::WorkStack > _2794,monty::rc_ptr< ::mosek::fusion::WorkStack > _2795){
  expr->eval(_2794,_2793,_2795);
  int _2796 = _2794->popi32();
  int _2797 = _2794->popi32(_2796);
  int _2798 = _2794->popi32();
  int _2799 = _2794->popi32();
  bool _2800 = (_2794->popi32() != (int)0);
  int _2801 = _2794->popi32(safe_add( _2798,(int)1 ));
  int _8098;
  bool _8099 = _2800;
  if (_8099)
  {
    _8098 = _2794->popi64(_2798);
  }
  else
  {
    _8098 = (-(int)1);
  }
  int _2802 = _8098;
  int _2803 = _2794->popi64(_2799);
  int _2804 = _2794->popf64(_2798);
  int _2805 = _2794->popf64(_2799);
  std::shared_ptr< monty::ndarray< int,1 > > _2806 = mosek::fusion::p_WorkStack::_get_impl(_2794)->i32;
  _checked_ptr_1<int> _ptr__2806(_2806 ? _2806->raw() : nullptr,_2806 ? _2806->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2807 = mosek::fusion::p_WorkStack::_get_impl(_2794)->i64;
  _checked_ptr_1<long long> _ptr__2807(_2807 ? _2807->raw() : nullptr,_2807 ? _2807->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _2808 = mosek::fusion::p_WorkStack::_get_impl(_2794)->f64;
  _checked_ptr_1<double> _ptr__2808(_2808 ? _2808->raw() : nullptr,_2808 ? _2808->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2809 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2796)));
  _checked_ptr_1<long long> _ptr__2809(_2809 ? _2809->raw() : nullptr,_2809 ? _2809->size(0) : 0);
  _ptr__2809[(_2796 - (int)1)] = (int)1;
  int _8100 = (int)1;
  int _8101 = _2796;
  for (int _2810 = _8100; _2810 < _8101; ++_2810)
  {
    {
      _ptr__2809[((_2796 - _2810) - (int)1)] = safe_mul( _ptr__2809[(_2796 - _2810)],_ptr__2806[(safe_add( _2797,_2796 ) - _2810)] );
    }
  }
  int _2811 = (int)0;
  int _2812 = (int)0;
  if (_2800)
  {
    {
      int _8102 = (int)0;
      int _8103 = _2798;
      for (int _2813 = _8102; _2813 < _8103; ++_2813)
      {
        {
          bool _2814 = true;
          int _8104 = (int)0;
          int _8105 = _2796;
          for (int _2815 = _8104; _2815 < _8105; ++_2815)
          {
            {
              long long _2816 = ((_ptr__2807[safe_add( _2802,_2813 )] / _ptr__2809[_2815]) % _ptr__2806[safe_add( _2797,_2815 )]);
              _2814 = (_2814 && ((_2816 >= ((*first)(_2815))) && (_2816 < ((*last)(_2815)))));
            }
          }
          if (_2814)
          {
            {
              _2812 += (_ptr__2806[safe_add( safe_add( _2801,_2813 ),(int)1 )] - _ptr__2806[safe_add( _2801,_2813 )]);
              ++ _2811;
            }
          }
          {}
        }
      }
    }
  }
  else
  {
    {
      _2811 = (int)1;
      int _8106 = (int)0;
      int _8107 = _2796;
      for (int _2817 = _8106; _2817 < _8107; ++_2817)
      {
        {
          _2811 *= (((*last)(_2817)) - ((*first)(_2817)));
        }
      }
      int _8108 = (int)0;
      int _8109 = _2798;
      for (int _2818 = _8108; _2818 < _8109; ++_2818)
      {
        {
          bool _2819 = true;
          int _8110 = (int)0;
          int _8111 = _2796;
          for (int _2820 = _8110; _2820 < _8111; ++_2820)
          {
            {
              long long _2821 = ((_2818 / _ptr__2809[_2820]) % _ptr__2806[safe_add( _2797,_2820 )]);
              _2819 = (_2819 && ((_2821 >= ((*first)(_2820))) && (_2821 < ((*last)(_2820)))));
            }
          }
          if (_2819)
          {
            {
              _2812 += (_ptr__2806[safe_add( safe_add( _2801,_2818 ),(int)1 )] - _ptr__2806[safe_add( _2801,_2818 )]);
            }
          }
          {}
        }
      }
    }
  }
  std::vector<int> _8112;
  for (int _2823 = (int)0, _8113 = _2796; _2823 < _8113 ; ++_2823)
  {
    _8112.push_back((((*last)(_2823)) - ((*first)(_2823))));
  }
  auto _8114 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8112.size()),_8112.begin(),_8112.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _2822 = _8114;
  _checked_ptr_1<int> _ptr__2822(_2822 ? _2822->raw() : nullptr,_2822 ? _2822->size(0) : 0);
  int _2824 = _2793->allocf64(_2812);
  int _2825 = _2793->allocf64(_2811);
  int _2826 = _2793->alloci64(_2812);
  int _8115;
  bool _8116 = _2800;
  if (_8116)
  {
    _8115 = _2793->alloci64(_2811);
  }
  else
  {
    _8115 = (-(int)1);
  }
  int _2827 = _8115;
  int _2828 = _2793->alloci32(safe_add( _2811,(int)1 ));
  int _8117;
  bool _8118 = _2800;
  if (_8118)
  {
    _8117 = (int)1;
  }
  else
  {
    _8117 = (int)0;
  }
  _2793->pushi32(_8117);
  _2793->pushi32(_2812);
  _2793->pushi32(_2811);
  int _8119 = (int)0;
  int _8120 = _2796;
  for (int _2829 = _8119; _2829 < _8120; ++_2829)
  {
    {
      _2793->pushi32(_ptr__2822[_2829]);
    }
  }
  _2793->pushi32(_2796);
  std::shared_ptr< monty::ndarray< int,1 > > _2830 = mosek::fusion::p_WorkStack::_get_impl(_2793)->i32;
  _checked_ptr_1<int> _ptr__2830(_2830 ? _2830->raw() : nullptr,_2830 ? _2830->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2831 = mosek::fusion::p_WorkStack::_get_impl(_2793)->i64;
  _checked_ptr_1<long long> _ptr__2831(_2831 ? _2831->raw() : nullptr,_2831 ? _2831->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _2832 = mosek::fusion::p_WorkStack::_get_impl(_2793)->f64;
  _checked_ptr_1<double> _ptr__2832(_2832 ? _2832->raw() : nullptr,_2832 ? _2832->size(0) : 0);
  _ptr__2830[_2828] = (int)0;
  std::shared_ptr< monty::ndarray< long long,1 > > _2833 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2796)));
  _checked_ptr_1<long long> _ptr__2833(_2833 ? _2833->raw() : nullptr,_2833 ? _2833->size(0) : 0);
  _ptr__2833[(_2796 - (int)1)] = (int)1;
  int _8121 = (int)1;
  int _8122 = _2796;
  for (int _2834 = _8121; _2834 < _8122; ++_2834)
  {
    {
      _ptr__2833[((_2796 - _2834) - (int)1)] = safe_mul( _ptr__2833[(_2796 - _2834)],_ptr__2822[(_2796 - _2834)] );
    }
  }
  int _2835 = (int)0;
  int _2836 = (int)0;
  if (_2800)
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _2837 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2796)));
      _checked_ptr_1<int> _ptr__2837(_2837 ? _2837->raw() : nullptr,_2837 ? _2837->size(0) : 0);
      int _8123 = (int)0;
      int _8124 = _2798;
      for (int _2838 = _8123; _2838 < _8124; ++_2838)
      {
        {
          bool _2839 = true;
          int _8125 = (int)0;
          int _8126 = _2796;
          for (int _2840 = _8125; _2840 < _8126; ++_2840)
          {
            {
              _ptr__2837[_2840] = (int)((_ptr__2807[safe_add( _2802,_2838 )] / _ptr__2809[_2840]) % _ptr__2806[safe_add( _2797,_2840 )]);
              _2839 = (_2839 && ((_ptr__2837[_2840] >= ((*first)(_2840))) && (_ptr__2837[_2840] < ((*last)(_2840)))));
            }
          }
          if (_2839)
          {
            {
              int _8127 = _ptr__2806[safe_add( _2801,_2838 )];
              int _8128 = _ptr__2806[safe_add( safe_add( _2801,_2838 ),(int)1 )];
              for (int _2841 = _8127; _2841 < _8128; ++_2841)
              {
                {
                  _ptr__2831[safe_add( _2826,_2836 )] = _ptr__2807[safe_add( _2803,_2841 )];
                  _ptr__2832[safe_add( _2824,_2836 )] = _ptr__2808[safe_add( _2805,_2841 )];
                  ++ _2836;
                }
              }
              long long _2842 = (long long)0;
              int _8129 = (int)0;
              int _8130 = _2796;
              for (int _2843 = _8129; _2843 < _8130; ++_2843)
              {
                {
                  _2842 += safe_mul( _ptr__2833[_2843],(_ptr__2837[_2843] - ((*first)(_2843))) );
                }
              }
              _ptr__2831[safe_add( _2827,_2835 )] = _2842;
              _ptr__2832[safe_add( _2825,_2835 )] = _ptr__2808[safe_add( _2804,_2838 )];
              _ptr__2830[safe_add( safe_add( _2828,_2835 ),(int)1 )] = _2836;
              ++ _2835;
            }
          }
          {}
        }
      }
    }
  }
  else
  {
    {
      int _8131 = (int)0;
      int _8132 = _2798;
      for (int _2844 = _8131; _2844 < _8132; ++_2844)
      {
        {
          bool _2845 = true;
          int _8133 = (int)0;
          int _8134 = _2796;
          for (int _2846 = _8133; _2846 < _8134; ++_2846)
          {
            {
              long long _2847 = ((_2844 / _ptr__2809[_2846]) % _ptr__2806[safe_add( _2797,_2846 )]);
              _2845 = (_2845 && ((_2847 >= ((*first)(_2846))) && (_2847 < ((*last)(_2846)))));
            }
          }
          if (_2845)
          {
            {
              int _8135 = _ptr__2806[safe_add( _2801,_2844 )];
              int _8136 = _ptr__2806[safe_add( safe_add( _2801,_2844 ),(int)1 )];
              for (int _2848 = _8135; _2848 < _8136; ++_2848)
              {
                {
                  _ptr__2831[safe_add( _2826,_2836 )] = _ptr__2807[safe_add( _2803,_2848 )];
                  _ptr__2832[safe_add( _2824,_2836 )] = _ptr__2808[safe_add( _2805,_2848 )];
                  ++ _2836;
                }
              }
              _ptr__2832[safe_add( _2825,_2835 )] = _ptr__2808[safe_add( _2804,_2844 )];
              _ptr__2830[safe_add( safe_add( _2828,_2835 ),(int)1 )] = _2836;
              ++ _2835;
            }
          }
          {}
        }
      }
    }
  }
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprSlice::makeShape(std::shared_ptr< monty::ndarray< int,1 > > _2849,std::shared_ptr< monty::ndarray< int,1 > > _2850,std::shared_ptr< monty::ndarray< int,1 > > _2851){
  _checked_ptr_1<int> _ptr__2849(_2849 ? _2849->raw() : nullptr, _2849 ? _2849->size(0) : 0);
  _checked_ptr_1<int> _ptr__2850(_2850 ? _2850->raw() : nullptr, _2850 ? _2850->size(0) : 0);
  _checked_ptr_1<int> _ptr__2851(_2851 ? _2851->raw() : nullptr, _2851 ? _2851->size(0) : 0);
  if ((((int)((_2849)->size(0)) != (int)((_2850)->size(0))) || ((int)((_2849)->size(0)) != (int)((_2851)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid or mismatching index lengths"));
    }
  }
  {}
  int _8137 = (int)0;
  int _8138 = (int)((_2849)->size(0));
  for (int _2852 = _8137; _2852 < _8138; ++_2852)
  {
    {
      if (((_ptr__2850[_2852] < (int)0) || ((_ptr__2851[_2852] < _ptr__2850[_2852]) || (_ptr__2851[_2852] > _ptr__2849[_2852]))))
      {
        {
          throw ::mosek::fusion::IndexError(std::string ("Slice is out of bounds"));
        }
      }
      {}
    }
  }
  std::vector<int> _8139;
  for (int _2853 = (int)0, _8140 = (int)((_2849)->size(0)); _2853 < _8140 ; ++_2853)
  {
    _8139.push_back((_ptr__2851[_2853] - _ptr__2850[_2853]));
  }
  auto _8141 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8139.size()),_8139.begin(),_8139.end()));
  return _8141;
}
std::string mosek::fusion::ExprSlice :: toString() { return mosek::fusion::p_ExprSlice::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprSlice::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2854 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprSlice(["))->__mosek_2fusion_2Utils_2StringBuffer__a(((*first)((int)0)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (":"))->__mosek_2fusion_2Utils_2StringBuffer__a(((*last)((int)0)));
  int _8142 = (int)1;
  int _8143 = (int)((first)->size(0));
  for (int _2855 = _8142; _2855 < _8143; ++_2855)
  {
    {
      _2854->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*first)(_2855)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (":"))->__mosek_2fusion_2Utils_2StringBuffer__a(((*last)(_2855)));
    }
  }
  _2854->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("],"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _2854->toString();
}
void mosek::fusion::p_ExprSlice::destroy(){last.reset();first.reset();expr.reset();}void mosek::fusion::ExprSlice::destroy() { mosek::fusion::p_ExprSlice::_get_impl(this)->destroy(); }mosek::fusion::ExprPermuteDims::ExprPermuteDims(mosek::fusion::p_ExprPermuteDims *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprPermuteDims()" << this << std::endl; */ }mosek::fusion::ExprPermuteDims::~ExprPermuteDims() {  /* std::cout << "~ExprPermuteDims()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprPermuteDims::p_ExprPermuteDims  (::mosek::fusion::ExprPermuteDims * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprPermuteDims::t mosek::fusion::p_ExprPermuteDims::_new_ExprPermuteDims  (std::shared_ptr< monty::ndarray< int,1 > > _2856,    monty::rc_ptr< ::mosek::fusion::Expression > _2857){ return new mosek::fusion::ExprPermuteDims(_2856,_2857); }mosek::fusion::ExprPermuteDims::ExprPermuteDims  (std::shared_ptr< monty::ndarray< int,1 > > _2856,    monty::rc_ptr< ::mosek::fusion::Expression > _2857) :    ExprPermuteDims(new mosek::fusion::p_ExprPermuteDims(this)){ mosek::fusion::p_ExprPermuteDims::_get_impl(this)->_initialize(_2856,_2857); }void mosek::fusion::p_ExprPermuteDims::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _2856,    monty::rc_ptr< ::mosek::fusion::Expression > _2857){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2856(_2856 ? _2856->raw() : nullptr, _2856 ? _2856->size(0) : 0);
    mosek::fusion::p_ExprPermuteDims::_initialize(_2856,_2857,(int)1);
    std::shared_ptr< monty::ndarray< int,1 > > _2858 = _2857->getShape();
    _checked_ptr_1<int> _ptr__2858(_2858 ? _2858->raw() : nullptr,_2858 ? _2858->size(0) : 0);
    if (((int)((_2856)->size(0)) != (int)((_2858)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Invalid dimension permutation"));
      }
    }
    {}
    std::vector<int> _8144;
    for (int _2860 = (int)0, _8145 = (int)((_2856)->size(0)); _2860 < _8145 ; ++_2860)
    {
      _8144.push_back((int)0);
    }
    auto _8146 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8144.size()),_8144.begin(),_8144.end()));
    std::shared_ptr< monty::ndarray< int,1 > > _2859 = _8146;
    _checked_ptr_1<int> _ptr__2859(_2859 ? _2859->raw() : nullptr,_2859 ? _2859->size(0) : 0);
    int _8147 = (int)0;
    int _8148 = (int)((_2859)->size(0));
    for (int _2861 = _8147; _2861 < _8148; ++_2861)
    {
      {
        if (((_ptr__2856[_2861] < (int)0) || (_ptr__2856[_2861] > (int)((_2858)->size(0)))))
        {
          {
            throw ::mosek::fusion::LengthError(std::string ("Invalid dimension permutation"));
          }
        }
        {}
        ++ _ptr__2859[_ptr__2856[_2861]];
      }
    }
    int _8149 = (int)0;
    int _8150 = (int)((_2859)->size(0));
    for (int _2862 = _8149; _2862 < _8150; ++_2862)
    {
      {
        if (((_ptr__2859[_2862] < (int)1) || (_ptr__2859[_2862] > (int)1)))
        {
          {
            throw ::mosek::fusion::LengthError(std::string ("Invalid dimension permutation"));
          }
        }
        {}
      }
    }
  }
}mosek::fusion::ExprPermuteDims::t mosek::fusion::p_ExprPermuteDims::_new_ExprPermuteDims  (std::shared_ptr< monty::ndarray< int,1 > > _2863,    monty::rc_ptr< ::mosek::fusion::Expression > _2864,    int _2865){ return new mosek::fusion::ExprPermuteDims(_2863,_2864,_2865); }mosek::fusion::ExprPermuteDims::ExprPermuteDims  (std::shared_ptr< monty::ndarray< int,1 > > _2863,    monty::rc_ptr< ::mosek::fusion::Expression > _2864,    int _2865) :    ExprPermuteDims(new mosek::fusion::p_ExprPermuteDims(this)){ mosek::fusion::p_ExprPermuteDims::_get_impl(this)->_initialize(_2863,_2864,_2865); }void mosek::fusion::p_ExprPermuteDims::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _2863,    monty::rc_ptr< ::mosek::fusion::Expression > _2864,    int _2865){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2863(_2863 ? _2863->raw() : nullptr, _2863 ? _2863->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprPermuteDims::computeshape(_2863,_2864->getShape()));
    mosek::fusion::p_ExprPermuteDims::_get_impl(::mosek::fusion::ExprPermuteDims::t(_pubthis))->expr = _2864;
    dperm = ::mosek::fusion::Utils::Tools::arraycopy(_2863);
  }
}void mosek::fusion::ExprPermuteDims :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _2866,monty::rc_ptr< ::mosek::fusion::WorkStack > _2867,monty::rc_ptr< ::mosek::fusion::WorkStack > _2868) { mosek::fusion::p_ExprPermuteDims::_get_impl(this)->eval(_2866,_2867,_2868); }void mosek::fusion::p_ExprPermuteDims::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _2866,monty::rc_ptr< ::mosek::fusion::WorkStack > _2867,monty::rc_ptr< ::mosek::fusion::WorkStack > _2868){
  expr->eval(_2867,_2866,_2868);
  int _2869 = _2867->popi32();
  int _2870 = _2867->popi32(_2869);
  std::shared_ptr< monty::ndarray< long long,1 > > _2871 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2869)));
  _checked_ptr_1<long long> _ptr__2871(_2871 ? _2871->raw() : nullptr,_2871 ? _2871->size(0) : 0);
  _ptr__2871[(_2869 - (int)1)] = (int)1;
  int _8151 = (int)1;
  int _8152 = _2869;
  for (int _2872 = _8151; _2872 < _8152; ++_2872)
  {
    {
      _ptr__2871[((_2869 - _2872) - (int)1)] = safe_mul( _ptr__2871[(_2869 - _2872)],((*mosek::fusion::p_WorkStack::_get_impl(_2867)->i32)((safe_add( _2870,_2869 ) - _2872))) );
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _2873 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2869)));
  _checked_ptr_1<int> _ptr__2873(_2873 ? _2873->raw() : nullptr,_2873 ? _2873->size(0) : 0);
  _ptr__2873[(_2869 - (int)1)] = (int)1;
  int _8153 = (int)1;
  int _8154 = _2869;
  for (int _2874 = _8153; _2874 < _8154; ++_2874)
  {
    {
      _ptr__2873[((_2869 - _2874) - (int)1)] = safe_mul( _ptr__2873[(_2869 - _2874)],((*mosek::fusion::p_WorkStack::_get_impl(_2867)->i32)(safe_add( _2870,((*dperm)((_2869 - _2874))) ))) );
    }
  }
  int _2875 = _2867->popi32();
  int _2876 = _2867->popi32();
  bool _2877 = (_2867->popi32() != (int)0);
  int _2878 = _2867->popi32(safe_add( _2875,(int)1 ));
  int _8155;
  bool _8156 = (!_2877);
  if (_8156)
  {
    _8155 = (-(int)1);
  }
  else
  {
    _8155 = _2867->popi64(_2875);
  }
  int _2879 = _8155;
  int _2880 = _2867->popi64(_2876);
  int _2881 = _2867->popf64(_2875);
  int _2882 = _2867->popf64(_2876);
  std::shared_ptr< monty::ndarray< int,1 > > _2883 = mosek::fusion::p_WorkStack::_get_impl(_2867)->i32;
  _checked_ptr_1<int> _ptr__2883(_2883 ? _2883->raw() : nullptr,_2883 ? _2883->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2884 = mosek::fusion::p_WorkStack::_get_impl(_2867)->i64;
  _checked_ptr_1<long long> _ptr__2884(_2884 ? _2884->raw() : nullptr,_2884 ? _2884->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _2885 = mosek::fusion::p_WorkStack::_get_impl(_2867)->f64;
  _checked_ptr_1<double> _ptr__2885(_2885 ? _2885->raw() : nullptr,_2885 ? _2885->size(0) : 0);
  if (_2877)
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _2886 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2875)));
      _checked_ptr_1<long long> _ptr__2886(_2886 ? _2886->raw() : nullptr,_2886 ? _2886->size(0) : 0);
      {
        int _8157 = (int)0;
        int _8158 = _2875;
        for (int _2887 = _8157; _2887 < _8158; ++_2887)
        {
          {
            long long _2888 = (long long)0;
            int _8159 = (int)0;
            int _8160 = _2869;
            for (int _2889 = _8159; _2889 < _8160; ++_2889)
            {
              {
                _2888 += safe_mul( ((_ptr__2884[safe_add( _2879,_2887 )] / _ptr__2871[_2889]) % _ptr__2883[safe_add( _2870,_2889 )]),_ptr__2873[((*dperm)(_2889))] );
              }
            }
            _ptr__2886[_2887] = _2888;
          }
        }
      }
      std::vector<long long> _8161;
      for (int _2891 = (int)0, _8162 = _2875; _2891 < _8162 ; ++_2891)
      {
        _8161.push_back(_2891);
      }
      auto _8163 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8161.size()),_8161.begin(),_8161.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _2890 = _8163;
      _checked_ptr_1<long long> _ptr__2890(_2890 ? _2890->raw() : nullptr,_2890 ? _2890->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_2890,_2886,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_2875));
      int _2892 = _2866->alloci32(safe_add( _2875,(int)1 ));
      int _2893 = _2866->alloci64(_2876);
      int _2894 = _2866->alloci64(_2875);
      int _2895 = _2866->allocf64(_2876);
      int _2896 = _2866->allocf64(_2875);
      _2866->pushi32((int)1);
      _2866->pushi32(_2876);
      _2866->pushi32(_2875);
      int _8164 = (int)0;
      int _8165 = _2869;
      for (int _2897 = _8164; _2897 < _8165; ++_2897)
      {
        {
          _2866->pushi32(_ptr__2883[safe_add( _2870,((*dperm)(_2897)) )]);
        }
      }
      _2866->pushi32(_2869);
      std::shared_ptr< monty::ndarray< int,1 > > _2898 = mosek::fusion::p_WorkStack::_get_impl(_2866)->i32;
      _checked_ptr_1<int> _ptr__2898(_2898 ? _2898->raw() : nullptr,_2898 ? _2898->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _2899 = mosek::fusion::p_WorkStack::_get_impl(_2866)->i64;
      _checked_ptr_1<long long> _ptr__2899(_2899 ? _2899->raw() : nullptr,_2899 ? _2899->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _2900 = mosek::fusion::p_WorkStack::_get_impl(_2866)->f64;
      _checked_ptr_1<double> _ptr__2900(_2900 ? _2900->raw() : nullptr,_2900 ? _2900->size(0) : 0);
      _ptr__2898[_2892] = (int)0;
      int _2901 = (int)0;
      int _2902 = (int)0;
      int _8166 = (int)0;
      int _8167 = _2875;
      for (int _2903 = _8166; _2903 < _8167; ++_2903)
      {
        {
          long long _2904 = _ptr__2890[_2903];
          int _8168 = _ptr__2883[safe_add( _2878,_2904 )];
          int _8169 = _ptr__2883[safe_add( safe_add( _2878,_2904 ),(int)1 )];
          for (int _2905 = _8168; _2905 < _8169; ++_2905)
          {
            {
              _ptr__2899[safe_add( _2893,_2902 )] = _ptr__2884[safe_add( _2880,_2905 )];
              _ptr__2900[safe_add( _2895,_2902 )] = _ptr__2885[safe_add( _2882,_2905 )];
              ++ _2902;
            }
          }
          _ptr__2899[safe_add( _2894,_2903 )] = _ptr__2886[_2904];
          _ptr__2900[safe_add( _2896,_2903 )] = _ptr__2885[safe_add( _2881,_2904 )];
          ++ _2901;
          _ptr__2898[safe_add( safe_add( _2892,_2903 ),(int)1 )] = _2902;
        }
      }
    }
  }
  else
  {
    {
      int _2906 = _2866->alloci32(safe_add( _2875,(int)1 ));
      int _2907 = _2866->alloci64(_2876);
      int _2908 = _2866->allocf64(_2876);
      int _2909 = _2866->allocf64(_2875);
      _2866->pushi32((int)0);
      _2866->pushi32(_2876);
      _2866->pushi32(_2875);
      int _8170 = (int)0;
      int _8171 = _2869;
      for (int _2910 = _8170; _2910 < _8171; ++_2910)
      {
        {
          _2866->pushi32(_ptr__2883[safe_add( _2870,((*dperm)(_2910)) )]);
        }
      }
      _2866->pushi32(_2869);
      std::shared_ptr< monty::ndarray< int,1 > > _2911 = mosek::fusion::p_WorkStack::_get_impl(_2866)->i32;
      _checked_ptr_1<int> _ptr__2911(_2911 ? _2911->raw() : nullptr,_2911 ? _2911->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _2912 = mosek::fusion::p_WorkStack::_get_impl(_2866)->i64;
      _checked_ptr_1<long long> _ptr__2912(_2912 ? _2912->raw() : nullptr,_2912 ? _2912->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _2913 = mosek::fusion::p_WorkStack::_get_impl(_2866)->f64;
      _checked_ptr_1<double> _ptr__2913(_2913 ? _2913->raw() : nullptr,_2913 ? _2913->size(0) : 0);
      _ptr__2911[_2906] = (int)0;
      int _2914 = (int)0;
      int _2915 = (int)0;
      int _8172 = (int)0;
      int _8173 = _2875;
      for (int _2916 = _8172; _2916 < _8173; ++_2916)
      {
        {
          long long _2917 = (long long)0;
          int _8174 = (int)0;
          int _8175 = _2869;
          for (int _2918 = _8174; _2918 < _8175; ++_2918)
          {
            {
              _2917 += safe_mul( ((_2916 / _ptr__2871[((*dperm)(_2918))]) % _ptr__2883[safe_add( _2870,((*dperm)(_2918)) )]),_ptr__2873[_2918] );
            }
          }
          int _8176 = _ptr__2883[safe_add( _2878,_2917 )];
          int _8177 = _ptr__2883[safe_add( safe_add( _2878,_2917 ),(int)1 )];
          for (int _2919 = _8176; _2919 < _8177; ++_2919)
          {
            {
              _ptr__2912[safe_add( _2907,_2915 )] = _ptr__2884[safe_add( _2880,_2919 )];
              _ptr__2913[safe_add( _2908,_2915 )] = _ptr__2885[safe_add( _2882,_2919 )];
              ++ _2915;
            }
          }
          _ptr__2913[safe_add( _2909,_2914 )] = _ptr__2885[safe_add( _2881,_2917 )];
          ++ _2914;
          _ptr__2911[safe_add( _2906,_2914 )] = _2915;
        }
      }
    }
  }
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprPermuteDims::computeshape(std::shared_ptr< monty::ndarray< int,1 > > _2920,std::shared_ptr< monty::ndarray< int,1 > > _2921){
  _checked_ptr_1<int> _ptr__2920(_2920 ? _2920->raw() : nullptr, _2920 ? _2920->size(0) : 0);
  _checked_ptr_1<int> _ptr__2921(_2921 ? _2921->raw() : nullptr, _2921 ? _2921->size(0) : 0);
  std::vector<int> _8178;
  for (int _2922 = (int)0, _8179 = (int)((_2920)->size(0)); _2922 < _8179 ; ++_2922)
  {
    _8178.push_back(_ptr__2921[_ptr__2920[_2922]]);
  }
  auto _8180 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8178.size()),_8178.begin(),_8178.end()));
  return _8180;
}
void mosek::fusion::p_ExprPermuteDims::destroy(){dperm.reset();expr.reset();}void mosek::fusion::ExprPermuteDims::destroy() { mosek::fusion::p_ExprPermuteDims::_get_impl(this)->destroy(); }mosek::fusion::ExprTranspose::ExprTranspose(mosek::fusion::p_ExprTranspose *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprTranspose()" << this << std::endl; */ }mosek::fusion::ExprTranspose::~ExprTranspose() {  /* std::cout << "~ExprTranspose()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprTranspose::p_ExprTranspose  (::mosek::fusion::ExprTranspose * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprTranspose::t mosek::fusion::p_ExprTranspose::_new_ExprTranspose  (monty::rc_ptr< ::mosek::fusion::Expression > _2923){ return new mosek::fusion::ExprTranspose(_2923); }mosek::fusion::ExprTranspose::ExprTranspose  (monty::rc_ptr< ::mosek::fusion::Expression > _2923) :    ExprTranspose(new mosek::fusion::p_ExprTranspose(this)){ mosek::fusion::p_ExprTranspose::_get_impl(this)->_initialize(_2923); }void mosek::fusion::p_ExprTranspose::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _2923){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprTranspose::transposeShape(_2923->getShape()));
    mosek::fusion::p_ExprTranspose::_get_impl(::mosek::fusion::ExprTranspose::t(_pubthis))->expr = _2923;
  }
}void mosek::fusion::ExprTranspose :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _2924,monty::rc_ptr< ::mosek::fusion::WorkStack > _2925,monty::rc_ptr< ::mosek::fusion::WorkStack > _2926) { mosek::fusion::p_ExprTranspose::_get_impl(this)->eval(_2924,_2925,_2926); }void mosek::fusion::p_ExprTranspose::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _2924,monty::rc_ptr< ::mosek::fusion::WorkStack > _2925,monty::rc_ptr< ::mosek::fusion::WorkStack > _2926){
  expr->eval(_2925,_2924,_2926);
  _2925->pop_expr();
  if ((mosek::fusion::p_WorkStack::_get_impl(_2925)->nd != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  else
  {
    {
      int _2927 = mosek::fusion::p_WorkStack::_get_impl(_2925)->shape_base;
      int _2928 = mosek::fusion::p_WorkStack::_get_impl(_2925)->nelem;
      int _2929 = mosek::fusion::p_WorkStack::_get_impl(_2925)->nnz;
      bool _2930 = mosek::fusion::p_WorkStack::_get_impl(_2925)->hassp;
      int _2931 = mosek::fusion::p_WorkStack::_get_impl(_2925)->ptr_base;
      int _2932 = mosek::fusion::p_WorkStack::_get_impl(_2925)->sp_base;
      int _2933 = mosek::fusion::p_WorkStack::_get_impl(_2925)->nidxs_base;
      int _2934 = mosek::fusion::p_WorkStack::_get_impl(_2925)->bfix_base;
      int _2935 = mosek::fusion::p_WorkStack::_get_impl(_2925)->cof_base;
      int _2936 = ((*mosek::fusion::p_WorkStack::_get_impl(_2925)->i32)(_2927));
      int _2937 = ((*mosek::fusion::p_WorkStack::_get_impl(_2925)->i32)(safe_add( _2927,(int)1 )));
      std::shared_ptr< monty::ndarray< int,1 > > _2938 = mosek::fusion::p_WorkStack::_get_impl(_2925)->i32;
      _checked_ptr_1<int> _ptr__2938(_2938 ? _2938->raw() : nullptr,_2938 ? _2938->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _2939 = mosek::fusion::p_WorkStack::_get_impl(_2925)->i64;
      _checked_ptr_1<long long> _ptr__2939(_2939 ? _2939->raw() : nullptr,_2939 ? _2939->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _2940 = mosek::fusion::p_WorkStack::_get_impl(_2925)->f64;
      _checked_ptr_1<double> _ptr__2940(_2940 ? _2940->raw() : nullptr,_2940 ? _2940->size(0) : 0);
      _2924->alloc_expr((int)2,_2928,_2929,_2930);
      int _2941 = mosek::fusion::p_WorkStack::_get_impl(_2924)->ptr_base;
      int _2942 = mosek::fusion::p_WorkStack::_get_impl(_2924)->nidxs_base;
      int _2943 = mosek::fusion::p_WorkStack::_get_impl(_2924)->sp_base;
      int _2944 = mosek::fusion::p_WorkStack::_get_impl(_2924)->cof_base;
      int _2945 = mosek::fusion::p_WorkStack::_get_impl(_2924)->bfix_base;
      int _2946 = mosek::fusion::p_WorkStack::_get_impl(_2924)->shape_base;
      std::shared_ptr< monty::ndarray< int,1 > > _2947 = mosek::fusion::p_WorkStack::_get_impl(_2924)->i32;
      _checked_ptr_1<int> _ptr__2947(_2947 ? _2947->raw() : nullptr,_2947 ? _2947->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _2948 = mosek::fusion::p_WorkStack::_get_impl(_2924)->i64;
      _checked_ptr_1<long long> _ptr__2948(_2948 ? _2948->raw() : nullptr,_2948 ? _2948->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _2949 = mosek::fusion::p_WorkStack::_get_impl(_2924)->f64;
      _checked_ptr_1<double> _ptr__2949(_2949 ? _2949->raw() : nullptr,_2949 ? _2949->size(0) : 0);
      _ptr__2947[_2946] = _2937;
      _ptr__2947[safe_add( _2946,(int)1 )] = _2936;
      if (_2930)
      {
        {
          int _2950 = _2926->alloci32(_2928);
          int _2951 = _2926->alloci32(safe_add( _2937,(int)1 ));
          std::shared_ptr< monty::ndarray< int,1 > > _2952 = mosek::fusion::p_WorkStack::_get_impl(_2926)->i32;
          _checked_ptr_1<int> _ptr__2952(_2952 ? _2952->raw() : nullptr,_2952 ? _2952->size(0) : 0);
          {
            int _8181 = (int)0;
            int _8182 = safe_add( _2937,(int)1 );
            for (int _2953 = _8181; _2953 < _8182; ++_2953)
            {
              {
                _ptr__2952[safe_add( _2951,_2953 )] = (int)0;
              }
            }
            int _8183 = (int)0;
            int _8184 = _2928;
            for (int _2954 = _8183; _2954 < _8184; ++_2954)
            {
              {
                ++ _ptr__2952[safe_add( safe_add( _2951,(_ptr__2939[safe_add( _2932,_2954 )] % _2937) ),(int)1 )];
              }
            }
            int _8185 = (int)0;
            int _8186 = _2937;
            for (int _2955 = _8185; _2955 < _8186; ++_2955)
            {
              {
                _ptr__2952[safe_add( safe_add( _2951,_2955 ),(int)1 )] += _ptr__2952[safe_add( _2951,_2955 )];
              }
            }
            int _8187 = (int)0;
            int _8188 = _2928;
            for (int _2956 = _8187; _2956 < _8188; ++_2956)
            {
              {
                long long _2957 = (_ptr__2939[safe_add( _2932,_2956 )] % _2937);
                _ptr__2952[safe_add( _2950,_ptr__2952[safe_add( _2951,_2957 )] )] = _2956;
                ++ _ptr__2952[safe_add( _2951,_2957 )];
              }
            }
            _ptr__2947[_2941] = (int)0;
            int _2958 = (int)0;
            int _8189 = (int)0;
            int _8190 = _2928;
            for (int _2959 = _8189; _2959 < _8190; ++_2959)
            {
              {
                int _2960 = _ptr__2952[safe_add( _2950,_2959 )];
                int _8191 = _ptr__2938[safe_add( _2931,_2960 )];
                int _8192 = _ptr__2938[safe_add( safe_add( _2931,_2960 ),(int)1 )];
                for (int _2961 = _8191; _2961 < _8192; ++_2961)
                {
                  {
                    _ptr__2948[safe_add( _2942,_2958 )] = _ptr__2939[safe_add( _2933,_2961 )];
                    _ptr__2949[safe_add( _2944,_2958 )] = _ptr__2940[safe_add( _2935,_2961 )];
                    ++ _2958;
                  }
                }
                long long _2962 = (_ptr__2939[safe_add( _2932,_2960 )] / _2937);
                long long _2963 = (_ptr__2939[safe_add( _2932,_2960 )] % _2937);
                _ptr__2947[safe_add( safe_add( _2941,_2959 ),(int)1 )] = _2958;
                _ptr__2948[safe_add( _2943,_2959 )] = safe_add( safe_mul( _2963,_2936 ),_2962 );
                _ptr__2949[safe_add( _2945,_2959 )] = _ptr__2940[safe_add( _2934,_2960 )];
              }
            }
          }
        }
      }
      else
      {
        {
          _ptr__2947[_2941] = (int)0;
          int _2964 = (int)0;
          int _2965 = (int)0;
          int _8193 = (int)0;
          int _8194 = _2937;
          for (int _2966 = _8193; _2966 < _8194; ++_2966)
          {
            {
              int _8195 = (int)0;
              int _8196 = _2936;
              for (int _2967 = _8195; _2967 < _8196; ++_2967)
              {
                {
                  int _2968 = safe_add( safe_mul( _2967,_2937 ),_2966 );
                  int _8197 = _ptr__2938[safe_add( _2931,_2968 )];
                  int _8198 = _ptr__2938[safe_add( safe_add( _2931,_2968 ),(int)1 )];
                  for (int _2969 = _8197; _2969 < _8198; ++_2969)
                  {
                    {
                      _ptr__2948[safe_add( _2942,_2964 )] = _ptr__2939[safe_add( _2933,_2969 )];
                      _ptr__2949[safe_add( _2944,_2964 )] = _ptr__2940[safe_add( _2935,_2969 )];
                      ++ _2964;
                    }
                  }
                  _ptr__2949[safe_add( _2945,_2965 )] = _ptr__2940[safe_add( _2934,_2968 )];
                  _ptr__2947[safe_add( safe_add( _2941,_2965 ),(int)1 )] = _2964;
                  ++ _2965;
                }
              }
            }
          }
        }
      }
      _2926->clear();
    }
  }
}
std::string mosek::fusion::ExprTranspose :: toString() { return mosek::fusion::p_ExprTranspose::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprTranspose::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprTranspose("))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprTranspose::transposeShape(std::shared_ptr< monty::ndarray< int,1 > > _2970){
  _checked_ptr_1<int> _ptr__2970(_2970 ? _2970->raw() : nullptr, _2970 ? _2970->size(0) : 0);
  if (((int)((_2970)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  else
  {
    {
      return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__2970[(int)1]),(int)(_ptr__2970[(int)0])});
    }
  }
}
void mosek::fusion::p_ExprTranspose::destroy(){expr.reset();}void mosek::fusion::ExprTranspose::destroy() { mosek::fusion::p_ExprTranspose::_get_impl(this)->destroy(); }mosek::fusion::ExprStack::ExprStack(mosek::fusion::p_ExprStack *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprStack()" << this << std::endl; */ }mosek::fusion::ExprStack::~ExprStack() {  /* std::cout << "~ExprStack()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprStack::p_ExprStack  (::mosek::fusion::ExprStack * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprStack::t mosek::fusion::p_ExprStack::_new_ExprStack  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _2971,    int _2972){ return new mosek::fusion::ExprStack(_2971,_2972); }mosek::fusion::ExprStack::ExprStack  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _2971,    int _2972) :    ExprStack(new mosek::fusion::p_ExprStack(this)){ mosek::fusion::p_ExprStack::_get_impl(this)->_initialize(_2971,_2972); }void mosek::fusion::p_ExprStack::_initialize  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _2971,    int _2972){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprStack::getshape(_2971,_2972));
    std::vector<monty::rc_ptr< ::mosek::fusion::Expression >> _8199;
    for (int _2973 = (int)0, _8200 = (int)((_2971)->size(0)); _2973 < _8200 ; ++_2973)
    {
      _8199.push_back(((*_2971)(_2973)));
    }
    auto _8201 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_8199.size()),_8199.begin(),_8199.end()));
    mosek::fusion::p_ExprStack::_get_impl(::mosek::fusion::ExprStack::t(_pubthis))->exprs = _8201;
    mosek::fusion::p_ExprStack::_get_impl(::mosek::fusion::ExprStack::t(_pubthis))->dim = _2972;
  }
}void mosek::fusion::ExprStack :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _2974,monty::rc_ptr< ::mosek::fusion::WorkStack > _2975,monty::rc_ptr< ::mosek::fusion::WorkStack > _2976) { mosek::fusion::p_ExprStack::_get_impl(this)->eval(_2974,_2975,_2976); }void mosek::fusion::p_ExprStack::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _2974,monty::rc_ptr< ::mosek::fusion::WorkStack > _2975,monty::rc_ptr< ::mosek::fusion::WorkStack > _2976){
  int _2977 = (int)((exprs)->size(0));
  if ((_2977 == (int)1))
  {
    {
      ((*exprs)((int)0))->eval(_2974,_2975,_2976);
    }
  }
  else
  {
    {
      int _8202 = (int)0;
      int _8203 = _2977;
      for (int _2978 = _8202; _2978 < _8203; ++_2978)
      {
        {
          ((*exprs)(((_2977 - _2978) - (int)1)))->eval(_2975,_2974,_2976);
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _2979 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2977)));
      _checked_ptr_1<int> _ptr__2979(_2979 ? _2979->raw() : nullptr,_2979 ? _2979->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2980 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2977)));
      _checked_ptr_1<int> _ptr__2980(_2980 ? _2980->raw() : nullptr,_2980 ? _2980->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2981 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2977)));
      _checked_ptr_1<int> _ptr__2981(_2981 ? _2981->raw() : nullptr,_2981 ? _2981->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2982 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2977)));
      _checked_ptr_1<int> _ptr__2982(_2982 ? _2982->raw() : nullptr,_2982 ? _2982->size(0) : 0);
      std::shared_ptr< monty::ndarray< bool,1 > > _2983 = std::shared_ptr< monty::ndarray< bool,1 > >(new monty::ndarray< bool,1 >(monty::shape(_2977)));
      std::shared_ptr< monty::ndarray< int,1 > > _2984 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2977)));
      _checked_ptr_1<int> _ptr__2984(_2984 ? _2984->raw() : nullptr,_2984 ? _2984->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2985 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2977)));
      _checked_ptr_1<int> _ptr__2985(_2985 ? _2985->raw() : nullptr,_2985 ? _2985->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2986 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2977)));
      _checked_ptr_1<int> _ptr__2986(_2986 ? _2986->raw() : nullptr,_2986 ? _2986->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2987 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2977)));
      _checked_ptr_1<int> _ptr__2987(_2987 ? _2987->raw() : nullptr,_2987 ? _2987->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2988 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2977)));
      _checked_ptr_1<int> _ptr__2988(_2988 ? _2988->raw() : nullptr,_2988 ? _2988->size(0) : 0);
      int _8204 = (int)0;
      int _8205 = _2977;
      for (int _2989 = _8204; _2989 < _8205; ++_2989)
      {
        {
          _2975->pop_expr();
          _ptr__2979[_2989] = mosek::fusion::p_WorkStack::_get_impl(_2975)->nd;
          _ptr__2980[_2989] = mosek::fusion::p_WorkStack::_get_impl(_2975)->shape_base;
          _ptr__2981[_2989] = mosek::fusion::p_WorkStack::_get_impl(_2975)->nelem;
          _ptr__2982[_2989] = mosek::fusion::p_WorkStack::_get_impl(_2975)->nnz;
          ((*_2983)(_2989)) = mosek::fusion::p_WorkStack::_get_impl(_2975)->hassp;
          _ptr__2984[_2989] = mosek::fusion::p_WorkStack::_get_impl(_2975)->ptr_base;
          _ptr__2986[_2989] = mosek::fusion::p_WorkStack::_get_impl(_2975)->sp_base;
          _ptr__2985[_2989] = mosek::fusion::p_WorkStack::_get_impl(_2975)->nidxs_base;
          _ptr__2988[_2989] = mosek::fusion::p_WorkStack::_get_impl(_2975)->bfix_base;
          _ptr__2987[_2989] = mosek::fusion::p_WorkStack::_get_impl(_2975)->cof_base;
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _2990 = mosek::fusion::p_WorkStack::_get_impl(_2975)->i32;
      _checked_ptr_1<int> _ptr__2990(_2990 ? _2990->raw() : nullptr,_2990 ? _2990->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _2991 = mosek::fusion::p_WorkStack::_get_impl(_2975)->i64;
      _checked_ptr_1<long long> _ptr__2991(_2991 ? _2991->raw() : nullptr,_2991 ? _2991->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _2992 = mosek::fusion::p_WorkStack::_get_impl(_2975)->f64;
      _checked_ptr_1<double> _ptr__2992(_2992 ? _2992->raw() : nullptr,_2992 ? _2992->size(0) : 0);
      int _2993 = _ptr__2979[(int)0];
      int _2994 = _ptr__2980[(int)0];
      bool _2995 = (!((*_2983)((int)0)));
      bool _2996 = false;
      int _8206 = (int)1;
      int _8207 = _2977;
      for (int _2997 = _8206; _2997 < _8207; ++_2997)
      {
        {
          {
            _2996 = (_2996 || ((dim != _2997) && (_ptr__2979[_2997] != _2993)));
            if ((!_2996))
            {
              {
                int _8208 = (int)0;
                int _8209 = dim;
                for (int _2998 = _8208; _2998 < _8209; ++_2998)
                {
                  {
                    _2996 = (_2996 || (_ptr__2990[safe_add( _2994,_2998 )] != _ptr__2990[safe_add( _ptr__2980[_2997],_2998 )]));
                  }
                }
              }
            }
            {}
            if ((!_2996))
            {
              {
                int _8210 = safe_add( dim,(int)1 );
                int _8211 = _2993;
                for (int _2999 = _8210; _2999 < _8211; ++_2999)
                {
                  {
                    _2996 = (_2996 || (_ptr__2990[safe_add( _2994,_2999 )] != _ptr__2990[safe_add( _ptr__2980[_2997],_2999 )]));
                  }
                }
              }
            }
            {}
          }
          _2995 = (_2995 && (!((*_2983)(_2997))));
        }
      }
      if (_2996)
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression dimensions"));
        }
      }
      {}
      int _3000 = (int)0;
      if ((dim < _2993))
      {
        {
          int _8212 = (int)0;
          int _8213 = _2977;
          for (int _3001 = _8212; _3001 < _8213; ++_3001)
          {
            {
              _3000 += _ptr__2990[safe_add( _ptr__2980[_3001],dim )];
            }
          }
        }
      }
      else
      {
        {
          _3000 = _2977;
        }
      }
      int _8214;
      bool _8215 = (dim < _2993);
      if (_8215)
      {
        _8214 = _2993;
      }
      else
      {
        _8214 = safe_add( _2993,(int)1 );
      }
      int _3002 = _8214;
      if ((_3002 != _pubthis->getND()))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Oops!!"));
        }
      }
      {}
      int _3003 = (int)0;
      int _3004 = (int)0;
      {
        int _8216 = (int)0;
        int _8217 = _2977;
        for (int _3005 = _8216; _3005 < _8217; ++_3005)
        {
          {
            _3004 += _ptr__2982[_3005];
          }
        }
        int _8218 = (int)0;
        int _8219 = _2977;
        for (int _3006 = _8218; _3006 < _8219; ++_3006)
        {
          {
            _3003 += _ptr__2981[_3006];
          }
        }
      }
      int _3007 = (int)1;
      int _8220 = (int)0;
      int _8221 = dim;
      for (int _3008 = _8220; _3008 < _8221; ++_3008)
      {
        {
          _3007 *= _ptr__2990[safe_add( _2994,_3008 )];
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _8222;
      bool _8223 = (dim < _2993);
      if (_8223)
      {
        std::vector<int> _8224;
        for (int _3010 = (int)0, _8225 = _2977; _3010 < _8225 ; ++_3010)
        {
          _8224.push_back(_ptr__2990[safe_add( _ptr__2980[_3010],dim )]);
        }
        auto _8226 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8224.size()),_8224.begin(),_8224.end()));
        _8222 = _8226;
      }
      else
      {
        std::vector<int> _8227;
        for (int _3011 = (int)0, _8228 = _2977; _3011 < _8228 ; ++_3011)
        {
          _8227.push_back((int)1);
        }
        auto _8229 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8227.size()),_8227.begin(),_8227.end()));
        _8222 = _8229;
      }
      std::shared_ptr< monty::ndarray< int,1 > > _3009 = _8222;
      _checked_ptr_1<int> _ptr__3009(_3009 ? _3009->raw() : nullptr,_3009 ? _3009->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _3012 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2977)));
      _checked_ptr_1<int> _ptr__3012(_3012 ? _3012->raw() : nullptr,_3012 ? _3012->size(0) : 0);
      _ptr__3012[(int)0] = (int)0;
      int _8230 = (int)1;
      int _8231 = _2977;
      for (int _3013 = _8230; _3013 < _8231; ++_3013)
      {
        {
          _ptr__3012[_3013] = safe_add( _ptr__3012[(_3013 - (int)1)],_ptr__3009[(_3013 - (int)1)] );
        }
      }
      int _3014 = (int)0;
      int _8232 = (int)0;
      int _8233 = _2977;
      for (int _3015 = _8232; _3015 < _8233; ++_3015)
      {
        {
          _3014 += _ptr__3009[_3015];
        }
      }
      int _3016 = (int)1;
      int _8234 = safe_add( dim,(int)1 );
      int _8235 = _2993;
      for (int _3017 = _8234; _3017 < _8235; ++_3017)
      {
        {
          _3016 *= _ptr__2990[safe_add( _2994,_3017 )];
        }
      }
      if (_2995)
      {
        {
          _2974->alloc_expr(_3002,_3003,_3004,false);
          int _3018 = mosek::fusion::p_WorkStack::_get_impl(_2974)->ptr_base;
          int _3019 = mosek::fusion::p_WorkStack::_get_impl(_2974)->shape_base;
          int _3020 = mosek::fusion::p_WorkStack::_get_impl(_2974)->nidxs_base;
          int _3021 = mosek::fusion::p_WorkStack::_get_impl(_2974)->cof_base;
          int _3022 = mosek::fusion::p_WorkStack::_get_impl(_2974)->bfix_base;
          std::shared_ptr< monty::ndarray< int,1 > > _3023 = mosek::fusion::p_WorkStack::_get_impl(_2974)->i32;
          _checked_ptr_1<int> _ptr__3023(_3023 ? _3023->raw() : nullptr,_3023 ? _3023->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _3024 = mosek::fusion::p_WorkStack::_get_impl(_2974)->i64;
          _checked_ptr_1<long long> _ptr__3024(_3024 ? _3024->raw() : nullptr,_3024 ? _3024->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _3025 = mosek::fusion::p_WorkStack::_get_impl(_2974)->f64;
          _checked_ptr_1<double> _ptr__3025(_3025 ? _3025->raw() : nullptr,_3025 ? _3025->size(0) : 0);
          int _8236 = (int)0;
          int _8237 = _2993;
          for (int _3026 = _8236; _3026 < _8237; ++_3026)
          {
            {
              _ptr__3023[safe_add( _3019,_3026 )] = _ptr__2990[safe_add( _2994,_3026 )];
            }
          }
          _ptr__3023[safe_add( _3019,dim )] = _3000;
          {
            _ptr__3023[_3018] = (int)0;
            {
              int _3027 = (int)0;
              int _8238 = (int)0;
              int _8239 = _2977;
              for (int _3028 = _8238; _3028 < _8239; ++_3028)
              {
                {
                  int _3029 = _ptr__2984[_3028];
                  int _3030 = (int)0;
                  int _8240 = (int)0;
                  int _8241 = _3007;
                  for (int _3031 = _8240; _3031 < _8241; ++_3031)
                  {
                    {
                      int _8242 = (int)0;
                      int _8243 = _ptr__3009[_3028];
                      for (int _3032 = _8242; _3032 < _8243; ++_3032)
                      {
                        {
                          int _8244 = (int)0;
                          int _8245 = _3016;
                          for (int _3033 = _8244; _3033 < _8245; ++_3033)
                          {
                            {
                              int _3034 = safe_add( safe_add( _3033,safe_mul( safe_add( _3032,_3027 ),_3016 ) ),safe_mul( safe_mul( _3031,_3014 ),_3016 ) );
                              int _3035 = (_ptr__2990[safe_add( safe_add( _3029,_3030 ),(int)1 )] - _ptr__2990[safe_add( _3029,_3030 )]);
                              _ptr__3023[safe_add( safe_add( _3018,_3034 ),(int)1 )] = _3035;
                              _ptr__3025[safe_add( _3022,_3034 )] = _ptr__2992[safe_add( _ptr__2988[_3028],_3030 )];
                              ++ _3030;
                            }
                          }
                        }
                      }
                    }
                  }
                  _3027 += _ptr__3009[_3028];
                }
              }
              int _8246 = (int)0;
              int _8247 = _3003;
              for (int _3036 = _8246; _3036 < _8247; ++_3036)
              {
                {
                  _ptr__3023[safe_add( safe_add( _3018,_3036 ),(int)1 )] += _ptr__3023[safe_add( _3018,_3036 )];
                }
              }
            }
            {
              int _3037 = (int)0;
              int _8248 = (int)0;
              int _8249 = _2977;
              for (int _3038 = _8248; _3038 < _8249; ++_3038)
              {
                {
                  int _3039 = _ptr__2984[_3038];
                  int _3040 = (int)0;
                  int _8250 = (int)0;
                  int _8251 = _3007;
                  for (int _3041 = _8250; _3041 < _8251; ++_3041)
                  {
                    {
                      int _8252 = (int)0;
                      int _8253 = _ptr__3009[_3038];
                      for (int _3042 = _8252; _3042 < _8253; ++_3042)
                      {
                        {
                          int _8254 = (int)0;
                          int _8255 = _3016;
                          for (int _3043 = _8254; _3043 < _8255; ++_3043)
                          {
                            {
                              int _3044 = safe_add( safe_add( _3043,safe_mul( safe_add( _3042,_3037 ),_3016 ) ),safe_mul( safe_mul( _3041,_3014 ),_3016 ) );
                              int _3045 = _ptr__2990[safe_add( _3039,_3040 )];
                              int _3046 = (_ptr__2990[safe_add( safe_add( _3039,_3040 ),(int)1 )] - _3045);
                              int _8256 = (int)0;
                              int _8257 = _3046;
                              for (int _3047 = _8256; _3047 < _8257; ++_3047)
                              {
                                {
                                  _ptr__3024[safe_add( safe_add( _3020,_ptr__3023[safe_add( _3018,_3044 )] ),_3047 )] = _ptr__2991[safe_add( safe_add( _ptr__2985[_3038],_3045 ),_3047 )];
                                }
                              }
                              int _8258 = (int)0;
                              int _8259 = _3046;
                              for (int _3048 = _8258; _3048 < _8259; ++_3048)
                              {
                                {
                                  _ptr__3025[safe_add( safe_add( _3021,_ptr__3023[safe_add( _3018,_3044 )] ),_3048 )] = _ptr__2992[safe_add( safe_add( _ptr__2987[_3038],_3045 ),_3048 )];
                                }
                              }
                              ++ _3040;
                            }
                          }
                        }
                      }
                    }
                  }
                  _3037 += _ptr__3009[_3038];
                }
              }
            }
          }
        }
      }
      else
      {
        {
          int _3049 = (int)1;
          int _8260 = (int)0;
          int _8261 = dim;
          for (int _3050 = _8260; _3050 < _8261; ++_3050)
          {
            {
              _3049 *= _ptr__2990[safe_add( _2994,_3050 )];
            }
          }
          _3049 *= _3000;
          int _8262 = safe_add( dim,(int)1 );
          int _8263 = _2993;
          for (int _3051 = _8262; _3051 < _8263; ++_3051)
          {
            {
              _3049 *= _ptr__2990[safe_add( _2994,_3051 )];
            }
          }
          bool _3052 = (_3003 < _3049);
          _2974->alloc_expr(_3002,_3003,_3004,_3052);
          int _3053 = mosek::fusion::p_WorkStack::_get_impl(_2974)->ptr_base;
          int _3054 = mosek::fusion::p_WorkStack::_get_impl(_2974)->nidxs_base;
          int _8264;
          bool _8265 = _3052;
          if (_8265)
          {
            _8264 = mosek::fusion::p_WorkStack::_get_impl(_2974)->sp_base;
          }
          else
          {
            _8264 = _2974->alloci64(_3003);
          }
          int _3055 = _8264;
          int _3056 = mosek::fusion::p_WorkStack::_get_impl(_2974)->cof_base;
          int _3057 = mosek::fusion::p_WorkStack::_get_impl(_2974)->bfix_base;
          int _3058 = mosek::fusion::p_WorkStack::_get_impl(_2974)->shape_base;
          int _8266 = (int)0;
          int _8267 = _2993;
          for (int _3059 = _8266; _3059 < _8267; ++_3059)
          {
            {
              ((*mosek::fusion::p_WorkStack::_get_impl(_2974)->i32)(safe_add( _3058,_3059 ))) = _ptr__2990[safe_add( _2994,_3059 )];
            }
          }
          ((*mosek::fusion::p_WorkStack::_get_impl(_2974)->i32)(safe_add( _3058,dim ))) = _3000;
          int _3060 = _2976->alloci32(safe_add( _3003,(int)1 ));
          int _3061 = _2976->alloci64(_3004);
          int _3062 = _2976->alloci64(_3003);
          int _3063 = _2976->allocf64(_3004);
          int _3064 = _2976->allocf64(_3003);
          std::shared_ptr< monty::ndarray< int,1 > > _3065 = mosek::fusion::p_WorkStack::_get_impl(_2974)->i32;
          _checked_ptr_1<int> _ptr__3065(_3065 ? _3065->raw() : nullptr,_3065 ? _3065->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _3066 = mosek::fusion::p_WorkStack::_get_impl(_2974)->i64;
          _checked_ptr_1<long long> _ptr__3066(_3066 ? _3066->raw() : nullptr,_3066 ? _3066->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _3067 = mosek::fusion::p_WorkStack::_get_impl(_2974)->f64;
          _checked_ptr_1<double> _ptr__3067(_3067 ? _3067->raw() : nullptr,_3067 ? _3067->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _3068 = mosek::fusion::p_WorkStack::_get_impl(_2976)->i32;
          _checked_ptr_1<int> _ptr__3068(_3068 ? _3068->raw() : nullptr,_3068 ? _3068->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _3069 = mosek::fusion::p_WorkStack::_get_impl(_2976)->i64;
          _checked_ptr_1<long long> _ptr__3069(_3069 ? _3069->raw() : nullptr,_3069 ? _3069->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _3070 = mosek::fusion::p_WorkStack::_get_impl(_2976)->f64;
          _checked_ptr_1<double> _ptr__3070(_3070 ? _3070->raw() : nullptr,_3070 ? _3070->size(0) : 0);
          {
            int _3071 = (int)0;
            int _3072 = (int)0;
            int _8268 = (int)0;
            int _8269 = _2977;
            for (int _3073 = _8268; _3073 < _8269; ++_3073)
            {
              {
                ::mosek::fusion::Utils::Tools::arraycopy(_2991,_ptr__2985[_3073],_3069,safe_add( _3061,_3072 ),_ptr__2982[_3073]);
                ::mosek::fusion::Utils::Tools::arraycopy(_2992,_ptr__2987[_3073],_3070,safe_add( _3063,_3072 ),_ptr__2982[_3073]);
                ::mosek::fusion::Utils::Tools::arraycopy(_2992,_ptr__2988[_3073],_3070,safe_add( _3064,_3071 ),_ptr__2981[_3073]);
                _3072 += _ptr__2982[_3073];
                _3071 += _ptr__2981[_3073];
              }
            }
          }
          {
            _ptr__3068[_3060] = (int)0;
            int _3074 = (int)0;
            int _3075 = (int)0;
            int _8270 = (int)0;
            int _8271 = _2977;
            for (int _3076 = _8270; _3076 < _8271; ++_3076)
            {
              {
                int _3077 = _ptr__3009[_3076];
                int _3078 = safe_mul( _3077,_3016 );
                int _3079 = _3016;
                if (((*_2983)(_3076)))
                {
                  {
                    int _8272 = (int)0;
                    int _8273 = _ptr__2981[_3076];
                    for (int _3080 = _8272; _3080 < _8273; ++_3080)
                    {
                      {
                        long long _3081 = (_ptr__2991[safe_add( _ptr__2986[_3076],_3080 )] / _3078);
                        long long _3082 = ((_ptr__2991[safe_add( _ptr__2986[_3076],_3080 )] / _3079) % _3077);
                        long long _3083 = (_ptr__2991[safe_add( _ptr__2986[_3076],_3080 )] % _3016);
                        _ptr__3069[safe_add( _3062,_3075 )] = safe_add( safe_mul( safe_add( safe_add( safe_mul( _3081,_3000 ),_3082 ),_ptr__3012[_3076] ),_3016 ),_3083 );
                        _ptr__3068[safe_add( safe_add( _3060,_3075 ),(int)1 )] = safe_add( _3074,_ptr__2990[safe_add( safe_add( _ptr__2984[_3076],_3080 ),(int)1 )] );
                        ++ _3075;
                      }
                    }
                  }
                }
                else
                {
                  {
                    int _3084 = (int)0;
                    int _8274 = (int)0;
                    int _8275 = _3007;
                    for (int _3085 = _8274; _3085 < _8275; ++_3085)
                    {
                      {
                        int _8276 = (int)0;
                        int _8277 = _3077;
                        for (int _3086 = _8276; _3086 < _8277; ++_3086)
                        {
                          {
                            int _8278 = (int)0;
                            int _8279 = _3016;
                            for (int _3087 = _8278; _3087 < _8279; ++_3087)
                            {
                              {
                                _ptr__3069[safe_add( _3062,_3075 )] = safe_add( safe_mul( safe_add( safe_add( safe_mul( _3085,_3000 ),_3086 ),_ptr__3012[_3076] ),_3016 ),_3087 );
                                _ptr__3068[safe_add( safe_add( _3060,_3075 ),(int)1 )] = safe_add( _3074,_ptr__2990[safe_add( safe_add( _ptr__2984[_3076],_3084 ),(int)1 )] );
                                ++ _3075;
                                ++ _3084;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                _3074 += _ptr__2982[_3076];
              }
            }
          }
          if ((dim > (int)0))
          {
            {
              int _3088 = (int)0;
              int _8280 = (int)0;
              int _8281 = _3002;
              for (int _3089 = _8280; _3089 < _8281; ++_3089)
              {
                {
                  if ((_3088 < _ptr__3065[safe_add( _3058,_3089 )]))
                  {
                    {
                      _3088 = _ptr__3065[safe_add( _3058,_3089 )];
                    }
                  }
                  {}
                }
              }
              std::shared_ptr< monty::ndarray< long long,1 > > _3090 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_3002)));
              _checked_ptr_1<long long> _ptr__3090(_3090 ? _3090->raw() : nullptr,_3090 ? _3090->size(0) : 0);
              _ptr__3090[(_3002 - (int)1)] = (int)1;
              int _8282 = (int)1;
              int _8283 = _3002;
              for (int _3091 = _8282; _3091 < _8283; ++_3091)
              {
                {
                  _ptr__3090[((_3002 - _3091) - (int)1)] = safe_mul( _ptr__3090[(_3002 - _3091)],_ptr__3065[(safe_add( _3058,_3002 ) - _3091)] );
                }
              }
              int _3092 = _2976->alloci32(_3003);
              int _3093 = _2976->alloci32(_3003);
              int _3094 = _2976->alloci32(safe_add( _3088,(int)1 ));
              std::shared_ptr< monty::ndarray< int,1 > > _3095 = mosek::fusion::p_WorkStack::_get_impl(_2976)->i32;
              _checked_ptr_1<int> _ptr__3095(_3095 ? _3095->raw() : nullptr,_3095 ? _3095->size(0) : 0);
              std::shared_ptr< monty::ndarray< long long,1 > > _3096 = mosek::fusion::p_WorkStack::_get_impl(_2976)->i64;
              _checked_ptr_1<long long> _ptr__3096(_3096 ? _3096->raw() : nullptr,_3096 ? _3096->size(0) : 0);
              std::shared_ptr< monty::ndarray< double,1 > > _3097 = mosek::fusion::p_WorkStack::_get_impl(_2976)->f64;
              _checked_ptr_1<double> _ptr__3097(_3097 ? _3097->raw() : nullptr,_3097 ? _3097->size(0) : 0);
              {
                int _8284 = (int)0;
                int _8285 = _3003;
                for (int _3098 = _8284; _3098 < _8285; ++_3098)
                {
                  {
                    _ptr__3095[safe_add( _3092,_3098 )] = _3098;
                  }
                }
                int _8286 = (int)0;
                int _8287 = _3002;
                for (int _3099 = _8286; _3099 < _8287; ++_3099)
                {
                  {
                    int _3100 = ((_3002 - _3099) - (int)1);
                    int _3101 = _ptr__3065[safe_add( _3058,_3100 )];
                    int _8288 = (int)0;
                    int _8289 = safe_add( _3101,(int)1 );
                    for (int _3102 = _8288; _3102 < _8289; ++_3102)
                    {
                      {
                        _ptr__3095[safe_add( _3094,_3102 )] = (int)0;
                      }
                    }
                    int _8290 = (int)0;
                    int _8291 = _3003;
                    for (int _3103 = _8290; _3103 < _8291; ++_3103)
                    {
                      {
                        int _3104 = _ptr__3095[safe_add( _3092,_3103 )];
                        long long _3105 = ((_ptr__3096[safe_add( _3062,_3104 )] / _ptr__3090[_3100]) % _3101);
                        ++ _ptr__3095[safe_add( safe_add( _3094,_3105 ),(int)1 )];
                      }
                    }
                    {
                      int _8292 = (int)0;
                      int _8293 = _3101;
                      for (int _3106 = _8292; _3106 < _8293; ++_3106)
                      {
                        {
                          _ptr__3095[safe_add( safe_add( _3094,_3106 ),(int)1 )] += _ptr__3095[safe_add( _3094,_3106 )];
                        }
                      }
                      int _8294 = (int)0;
                      int _8295 = _3003;
                      for (int _3107 = _8294; _3107 < _8295; ++_3107)
                      {
                        {
                          int _3108 = _ptr__3095[safe_add( _3092,_3107 )];
                          long long _3109 = ((_ptr__3096[safe_add( _3062,_3108 )] / _ptr__3090[_3100]) % _3101);
                          _ptr__3095[safe_add( _3093,_ptr__3095[safe_add( _3094,_3109 )] )] = _3108;
                          ++ _ptr__3095[safe_add( _3094,_3109 )];
                        }
                      }
                    }
                    int _3110 = _3092;
                    _3092 = _3093;
                    _3093 = _3110;
                  }
                }
                int _3111 = (int)0;
                _ptr__3065[_3053] = (int)0;
                int _8296 = (int)0;
                int _8297 = _3003;
                for (int _3112 = _8296; _3112 < _8297; ++_3112)
                {
                  {
                    int _3113 = _ptr__3095[safe_add( _3092,_3112 )];
                    int _3114 = _ptr__3095[safe_add( _3060,_3113 )];
                    int _3115 = _ptr__3095[safe_add( safe_add( _3060,_3113 ),(int)1 )];
                    int _3116 = (_3115 - _3114);
                    _ptr__3065[safe_add( safe_add( _3053,_3112 ),(int)1 )] = safe_add( _ptr__3065[safe_add( _3053,_3112 )],_3116 );
                    _ptr__3067[safe_add( _3057,_3112 )] = _ptr__3097[safe_add( _3064,_3113 )];
                    _ptr__3066[safe_add( _3055,_3112 )] = _ptr__3096[safe_add( _3062,_3113 )];
                    int _8298 = _3114;
                    int _8299 = _3115;
                    for (int _3117 = _8298; _3117 < _8299; ++_3117)
                    {
                      {
                        _ptr__3066[safe_add( _3054,_3111 )] = _ptr__3096[safe_add( _3061,_3117 )];
                        _ptr__3067[safe_add( _3056,_3111 )] = _ptr__3097[safe_add( _3063,_3117 )];
                        ++ _3111;
                      }
                    }
                  }
                }
              }
            }
          }
          else
          {
            {
              int _3118 = (int)0;
              _ptr__3065[_3053] = (int)0;
              int _8300 = (int)0;
              int _8301 = _3003;
              for (int _3119 = _8300; _3119 < _8301; ++_3119)
              {
                {
                  int _3120 = _ptr__3068[safe_add( _3060,_3119 )];
                  int _3121 = _ptr__3068[safe_add( safe_add( _3060,_3119 ),(int)1 )];
                  int _3122 = (_3121 - _3120);
                  _ptr__3065[safe_add( safe_add( _3053,_3119 ),(int)1 )] = safe_add( _ptr__3065[safe_add( _3053,_3119 )],_3122 );
                  _ptr__3067[safe_add( _3057,_3119 )] = _ptr__3070[safe_add( _3064,_3119 )];
                  _ptr__3066[safe_add( _3055,_3119 )] = _ptr__3069[safe_add( _3062,_3119 )];
                  int _8302 = _3120;
                  int _8303 = _3121;
                  for (int _3123 = _8302; _3123 < _8303; ++_3123)
                  {
                    {
                      _ptr__3066[safe_add( _3054,_3118 )] = _ptr__3069[safe_add( _3061,_3123 )];
                      _ptr__3067[safe_add( _3056,_3118 )] = _ptr__3070[safe_add( _3063,_3123 )];
                      ++ _3118;
                    }
                  }
                }
              }
            }
          }
          if ((!_3052))
          {
            {
              _2974->popi64(_3003);
            }
          }
          {}
          _2976->clear();
        }
      }
    }
  }
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprStack::getshape(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _3124,int _3125){
  if (((int)((_3124)->size(0)) == (int)0))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Cannot stack empty list"));
    }
  }
  else if(((int)((_3124)->size(0)) == (int)1))
  {
    {
      return ((*_3124)((int)0))->getShape();
    }
  }
  else
  {
    {
      std::vector<std::shared_ptr< monty::ndarray< int,1 > >> _8304;
      for (int _3127 = (int)0, _8305 = (int)((_3124)->size(0)); _3127 < _8305 ; ++_3127)
      {
        _8304.push_back(((*_3124)(_3127))->getShape());
      }
      auto _8306 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 >(monty::shape(_8304.size()),_8304.begin(),_8304.end()));
      std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _3126 = _8306;
      std::shared_ptr< monty::ndarray< int,1 > > _3128 = ((*_3126)((int)0));
      _checked_ptr_1<int> _ptr__3128(_3128 ? _3128->raw() : nullptr,_3128 ? _3128->size(0) : 0);
      int _3129 = (int)((_3128)->size(0));
      int _8307 = (int)1;
      int _8308 = (int)((_3126)->size(0));
      for (int _3130 = _8307; _3130 < _8308; ++_3130)
      {
        {
          if ((_3129 != (int)((((*_3126)(_3130)))->size(0))))
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression dimensions"));
            }
          }
          {}
          int _8309 = (int)0;
          int _8310 = _3125;
          for (int _3131 = _8309; _3131 < _8310; ++_3131)
          {
            {
              if ((_ptr__3128[_3131] != ((*((*_3126)(_3130)))(_3131))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("mismatching expression dimensions"));
                }
              }
              {}
            }
          }
          int _8311 = safe_add( _3125,(int)1 );
          int _8312 = _3129;
          for (int _3132 = _8311; _3132 < _8312; ++_3132)
          {
            {
              if ((_ptr__3128[_3132] != ((*((*_3126)(_3130)))(_3132))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("mismatching expression dimensions"));
                }
              }
              {}
            }
          }
        }
      }
      if ((_3125 == _3129))
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _3133 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _3129,(int)1 ))));
          _checked_ptr_1<int> _ptr__3133(_3133 ? _3133->raw() : nullptr,_3133 ? _3133->size(0) : 0);
          int _8313 = (int)0;
          int _8314 = _3129;
          for (int _3134 = _8313; _3134 < _8314; ++_3134)
          {
            {
              _ptr__3133[_3134] = _ptr__3128[_3134];
            }
          }
          _ptr__3133[_3129] = (int)((_3126)->size(0));
          return _3133;
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _3135 = _3128;
          _checked_ptr_1<int> _ptr__3135(_3135 ? _3135->raw() : nullptr,_3135 ? _3135->size(0) : 0);
          int _8315 = (int)1;
          int _8316 = (int)((_3126)->size(0));
          for (int _3136 = _8315; _3136 < _8316; ++_3136)
          {
            {
              _ptr__3135[_3125] += ((*((*_3126)(_3136)))(_3125));
            }
          }
          return _3135;
        }
      }
    }
  }
}
std::string mosek::fusion::ExprStack :: toString() { return mosek::fusion::p_ExprStack::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprStack::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _3137 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprStack(dim="))->__mosek_2fusion_2Utils_2StringBuffer__a(dim)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",["))->__mosek_2fusion_2Utils_2StringBuffer__a(((*exprs)((int)0))->toString());
  int _8317 = (int)1;
  int _8318 = (int)((exprs)->size(0));
  for (int _3138 = _8317; _3138 < _8318; ++_3138)
  {
    {
      _3137->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*exprs)(_3138))->toString());
    }
  }
  _3137->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("])"));
  return _3137->toString();
}
void mosek::fusion::p_ExprStack::destroy(){exprs.reset();}void mosek::fusion::ExprStack::destroy() { mosek::fusion::p_ExprStack::_get_impl(this)->destroy(); }mosek::fusion::ExprInner::ExprInner(mosek::fusion::p_ExprInner *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprInner()" << this << std::endl; */ }mosek::fusion::ExprInner::~ExprInner() {  /* std::cout << "~ExprInner()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprInner::p_ExprInner  (::mosek::fusion::ExprInner * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprInner::t mosek::fusion::p_ExprInner::_new_ExprInner  (monty::rc_ptr< ::mosek::fusion::Expression > _3139,    std::shared_ptr< monty::ndarray< long long,1 > > _3140,    std::shared_ptr< monty::ndarray< double,1 > > _3141){ return new mosek::fusion::ExprInner(_3139,_3140,_3141); }mosek::fusion::ExprInner::ExprInner  (monty::rc_ptr< ::mosek::fusion::Expression > _3139,    std::shared_ptr< monty::ndarray< long long,1 > > _3140,    std::shared_ptr< monty::ndarray< double,1 > > _3141) :    ExprInner(new mosek::fusion::p_ExprInner(this)){ mosek::fusion::p_ExprInner::_get_impl(this)->_initialize(_3139,_3140,_3141); }void mosek::fusion::p_ExprInner::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _3139,    std::shared_ptr< monty::ndarray< long long,1 > > _3140,    std::shared_ptr< monty::ndarray< double,1 > > _3141){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__3140(_3140 ? _3140->raw() : nullptr, _3140 ? _3140->size(0) : 0);
    _checked_ptr_1<double> _ptr__3141(_3141 ? _3141->raw() : nullptr, _3141 ? _3141->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))));
    mosek::fusion::p_ExprInner::_get_impl(::mosek::fusion::ExprInner::t(_pubthis))->expr = _3139;
    mosek::fusion::p_ExprInner::_get_impl(::mosek::fusion::ExprInner::t(_pubthis))->vsub = _3140;
    mosek::fusion::p_ExprInner::_get_impl(::mosek::fusion::ExprInner::t(_pubthis))->vcof = _3141;
    if (((int)((_3140)->size(0)) != (int)((_3141)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Mismatching lengths of vcof and vsub"));
      }
    }
    {}
    std::shared_ptr< monty::ndarray< int,1 > > _3142 = _3139->getShape();
    _checked_ptr_1<int> _ptr__3142(_3142 ? _3142->raw() : nullptr,_3142 ? _3142->size(0) : 0);
    long long _3143 = ::mosek::fusion::p_Set::size(_3142);
    bool _3144 = false;
    bool _3145 = false;
    {
      int _8319 = (int)1;
      int _8320 = (int)((_3140)->size(0));
      for (int _3146 = _8319; _3146 < _8320; ++_3146)
      {
        {
          if ((_ptr__3140[_3146] <= _ptr__3140[(_3146 - (int)1)]))
          {
            {
              _3144 = true;
            }
          }
          {}
        }
      }
      if (((int)((_3140)->size(0)) > (int)0))
      {
        {
          if (((_ptr__3140[(int)0] < (int)0) || (_ptr__3140[((int)((_3140)->size(0)) - (int)1)] > _3143)))
          {
            {
              _3145 = true;
            }
          }
          {}
        }
      }
      {}
    }
    if (_3144)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Unordered coefficcient subscripts"));
      }
    }
    {}
    if (_3145)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Coefficient subscript out of bounds"));
      }
    }
    {}
  }
}mosek::fusion::ExprInner::t mosek::fusion::p_ExprInner::_new_ExprInner  (monty::rc_ptr< ::mosek::fusion::Expression > _3147,    std::shared_ptr< monty::ndarray< double,1 > > _3148){ return new mosek::fusion::ExprInner(_3147,_3148); }mosek::fusion::ExprInner::ExprInner  (monty::rc_ptr< ::mosek::fusion::Expression > _3147,    std::shared_ptr< monty::ndarray< double,1 > > _3148) :    ExprInner(new mosek::fusion::p_ExprInner(this)){ mosek::fusion::p_ExprInner::_get_impl(this)->_initialize(_3147,_3148); }void mosek::fusion::p_ExprInner::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _3147,    std::shared_ptr< monty::ndarray< double,1 > > _3148){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__3148(_3148 ? _3148->raw() : nullptr, _3148 ? _3148->size(0) : 0);
    mosek::fusion::p_ExprInner::_initialize(_3147,::mosek::fusion::p_ExprInner::range((int)((_3148)->size(0))),_3148);
    std::shared_ptr< monty::ndarray< int,1 > > _3149 = _3147->getShape();
    _checked_ptr_1<int> _ptr__3149(_3149 ? _3149->raw() : nullptr,_3149 ? _3149->size(0) : 0);
    if ((((int)((_3149)->size(0)) != (int)1) || (_ptr__3149[(int)0] != (int)((_3148)->size(0)))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions of operands"));
      }
    }
    {}
  }
}mosek::fusion::ExprInner::t mosek::fusion::p_ExprInner::_new_ExprInner  (monty::rc_ptr< ::mosek::fusion::Expression > _3150,    std::shared_ptr< monty::ndarray< int,2 > > _3151,    std::shared_ptr< monty::ndarray< double,1 > > _3152){ return new mosek::fusion::ExprInner(_3150,_3151,_3152); }mosek::fusion::ExprInner::ExprInner  (monty::rc_ptr< ::mosek::fusion::Expression > _3150,    std::shared_ptr< monty::ndarray< int,2 > > _3151,    std::shared_ptr< monty::ndarray< double,1 > > _3152) :    ExprInner(new mosek::fusion::p_ExprInner(this)){ mosek::fusion::p_ExprInner::_get_impl(this)->_initialize(_3150,_3151,_3152); }void mosek::fusion::p_ExprInner::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _3150,    std::shared_ptr< monty::ndarray< int,2 > > _3151,    std::shared_ptr< monty::ndarray< double,1 > > _3152){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__3152(_3152 ? _3152->raw() : nullptr, _3152 ? _3152->size(0) : 0);
    mosek::fusion::p_ExprInner::_initialize(_3150,::mosek::fusion::p_ExprInner::convert(_3150->getShape(),_3151),_3152);
  }
}void mosek::fusion::ExprInner :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3153,monty::rc_ptr< ::mosek::fusion::WorkStack > _3154,monty::rc_ptr< ::mosek::fusion::WorkStack > _3155) { mosek::fusion::p_ExprInner::_get_impl(this)->eval(_3153,_3154,_3155); }void mosek::fusion::p_ExprInner::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3153,monty::rc_ptr< ::mosek::fusion::WorkStack > _3154,monty::rc_ptr< ::mosek::fusion::WorkStack > _3155){
  expr->eval(_3154,_3153,_3155);
  int _3156 = _3154->popi32();
  std::shared_ptr< monty::ndarray< int,1 > > _3157 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3156)));
  _checked_ptr_1<int> _ptr__3157(_3157 ? _3157->raw() : nullptr,_3157 ? _3157->size(0) : 0);
  _3154->popi32(_3156,_3157,(int)0);
  int _3158 = _3154->popi32();
  int _3159 = _3154->popi32();
  bool _3160 = (_3154->popi32() != (int)0);
  int _3161 = _3154->popi32(safe_add( _3158,(int)1 ));
  int _8321;
  bool _8322 = _3160;
  if (_8322)
  {
    _8321 = _3154->popi64(_3158);
  }
  else
  {
    _8321 = (int)0;
  }
  int _3162 = _8321;
  int _3163 = _3154->popi64(_3159);
  int _3164 = _3154->popf64(_3158);
  int _3165 = _3154->popf64(_3159);
  std::shared_ptr< monty::ndarray< int,1 > > _3166 = mosek::fusion::p_WorkStack::_get_impl(_3154)->i32;
  _checked_ptr_1<int> _ptr__3166(_3166 ? _3166->raw() : nullptr,_3166 ? _3166->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3167 = mosek::fusion::p_WorkStack::_get_impl(_3154)->i64;
  _checked_ptr_1<long long> _ptr__3167(_3167 ? _3167->raw() : nullptr,_3167 ? _3167->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3168 = mosek::fusion::p_WorkStack::_get_impl(_3154)->f64;
  _checked_ptr_1<double> _ptr__3168(_3168 ? _3168->raw() : nullptr,_3168 ? _3168->size(0) : 0);
  int _3169 = (int)0;
  if (_3160)
  {
    {
      int _3170 = (int)0;
      int _3171 = (int)0;
      while ( ((_3171 < (int)((vsub)->size(0))) && (_3170 < _3158)) )
      {
        {
          if ((_ptr__3167[safe_add( _3162,_3170 )] < ((*vsub)(_3171))))
          {
            {
              ++ _3170;
            }
          }
          else if((_ptr__3167[safe_add( _3162,_3170 )] > ((*vsub)(_3171))))
          {
            {
              ++ _3171;
            }
          }
          else
          {
            {
              _3169 += (_ptr__3166[safe_add( safe_add( _3161,_3170 ),(int)1 )] - _ptr__3166[safe_add( _3161,_3170 )]);
              ++ _3171;
              ++ _3170;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int _8323 = (int)0;
      int _8324 = (int)((vsub)->size(0));
      for (int _3172 = _8323; _3172 < _8324; ++_3172)
      {
        {
          _3169 += (_ptr__3166[safe_add( safe_add( _3161,((*vsub)(_3172)) ),(int)1 )] - _ptr__3166[safe_add( _3161,((*vsub)(_3172)) )]);
        }
      }
    }
  }
  int _3173 = _3153->alloci32((int)2);
  int _3174 = _3153->alloci64(_3169);
  int _3175 = _3153->allocf64(_3169);
  int _3176 = _3153->allocf64((int)1);
  _3153->pushi32((int)0);
  _3153->pushi32(_3169);
  _3153->pushi32((int)1);
  _3153->pushi32((int)0);
  std::shared_ptr< monty::ndarray< int,1 > > _3177 = mosek::fusion::p_WorkStack::_get_impl(_3153)->i32;
  _checked_ptr_1<int> _ptr__3177(_3177 ? _3177->raw() : nullptr,_3177 ? _3177->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3178 = mosek::fusion::p_WorkStack::_get_impl(_3153)->i64;
  _checked_ptr_1<long long> _ptr__3178(_3178 ? _3178->raw() : nullptr,_3178 ? _3178->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3179 = mosek::fusion::p_WorkStack::_get_impl(_3153)->f64;
  _checked_ptr_1<double> _ptr__3179(_3179 ? _3179->raw() : nullptr,_3179 ? _3179->size(0) : 0);
  _ptr__3177[_3173] = (int)0;
  _ptr__3177[safe_add( _3173,(int)1 )] = _3169;
  int _3180 = (int)0;
  double _3181 = 0.0;
  if (_3160)
  {
    {
      int _3182 = (int)0;
      int _3183 = (int)0;
      while ( ((_3183 < (int)((vsub)->size(0))) && (_3182 < _3158)) )
      {
        {
          if ((_ptr__3167[safe_add( _3162,_3182 )] < ((*vsub)(_3183))))
          {
            {
              ++ _3182;
            }
          }
          else if((_ptr__3167[safe_add( _3162,_3182 )] > ((*vsub)(_3183))))
          {
            {
              ++ _3183;
            }
          }
          else
          {
            {
              int _3184 = _ptr__3166[safe_add( _3161,_3182 )];
              int _3185 = _ptr__3166[safe_add( safe_add( _3161,_3182 ),(int)1 )];
              int _8325 = _3184;
              int _8326 = _3185;
              for (int _3186 = _8325; _3186 < _8326; ++_3186)
              {
                {
                  _ptr__3178[safe_add( _3174,_3180 )] = _ptr__3167[safe_add( _3163,_3186 )];
                  _ptr__3179[safe_add( _3175,_3180 )] = (((*vcof)(_3183)) * _ptr__3168[safe_add( _3165,_3186 )]);
                  ++ _3180;
                }
              }
              _3181 += (((*vcof)(_3183)) * _ptr__3168[safe_add( _3164,_3182 )]);
              ++ _3183;
              ++ _3182;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int _8327 = (int)0;
      int _8328 = (int)((vsub)->size(0));
      for (int _3187 = _8327; _3187 < _8328; ++_3187)
      {
        {
          int _3188 = _ptr__3166[safe_add( _3161,((*vsub)(_3187)) )];
          int _3189 = _ptr__3166[safe_add( safe_add( _3161,((*vsub)(_3187)) ),(int)1 )];
          int _8329 = _3188;
          int _8330 = _3189;
          for (int _3190 = _8329; _3190 < _8330; ++_3190)
          {
            {
              _ptr__3178[safe_add( _3174,_3180 )] = _ptr__3167[safe_add( _3163,_3190 )];
              _ptr__3179[safe_add( _3175,_3180 )] = (((*vcof)(_3187)) * _ptr__3168[safe_add( _3165,_3190 )]);
              ++ _3180;
            }
          }
          _3181 += (((*vcof)(_3187)) * _ptr__3168[safe_add( _3164,((*vsub)(_3187)) )]);
        }
      }
    }
  }
  _ptr__3179[_3176] = _3181;
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_ExprInner::range(int _3191){
  std::vector<long long> _8331;
  for (int _3192 = (int)0, _8332 = _3191; _3192 < _8332 ; ++_3192)
  {
    _8331.push_back(_3192);
  }
  auto _8333 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8331.size()),_8331.begin(),_8331.end()));
  return _8333;
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_ExprInner::convert(std::shared_ptr< monty::ndarray< int,1 > > _3193,std::shared_ptr< monty::ndarray< int,2 > > _3194){
  _checked_ptr_1<int> _ptr__3193(_3193 ? _3193->raw() : nullptr, _3193 ? _3193->size(0) : 0);
  int _3195 = (int)((_3193)->size(0));
  std::shared_ptr< monty::ndarray< long long,1 > > _3196 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_3195)));
  _checked_ptr_1<long long> _ptr__3196(_3196 ? _3196->raw() : nullptr,_3196 ? _3196->size(0) : 0);
  _ptr__3196[(_3195 - (int)1)] = (int)1;
  int _8334 = (int)1;
  int _8335 = _3195;
  for (int _3197 = _8334; _3197 < _8335; ++_3197)
  {
    {
      _ptr__3196[((_3195 - _3197) - (int)1)] = safe_mul( _ptr__3196[(_3195 - _3197)],_ptr__3193[(_3195 - _3197)] );
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _3198 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_3194)->size(0)))));
  _checked_ptr_1<long long> _ptr__3198(_3198 ? _3198->raw() : nullptr,_3198 ? _3198->size(0) : 0);
  int _8336 = (int)0;
  int _8337 = (int)((_3194)->size(0));
  for (int _3199 = _8336; _3199 < _8337; ++_3199)
  {
    {
      int _8338 = (int)0;
      int _8339 = _3195;
      for (int _3200 = _8338; _3200 < _8339; ++_3200)
      {
        {
          _ptr__3198[_3199] += safe_mul( _ptr__3196[_3200],((*_3194)(_3199,_3200)) );
        }
      }
    }
  }
  return _3198;
}
std::string mosek::fusion::ExprInner :: toString() { return mosek::fusion::p_ExprInner::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprInner::toString(){
  return std::string ("ExprInner()");
}
void mosek::fusion::p_ExprInner::destroy(){vcof.reset();vsub.reset();expr.reset();}void mosek::fusion::ExprInner::destroy() { mosek::fusion::p_ExprInner::_get_impl(this)->destroy(); }mosek::fusion::ExprMulDiagRight::ExprMulDiagRight(mosek::fusion::p_ExprMulDiagRight *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulDiagRight()" << this << std::endl; */ }mosek::fusion::ExprMulDiagRight::~ExprMulDiagRight() {  /* std::cout << "~ExprMulDiagRight()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulDiagRight::p_ExprMulDiagRight  (::mosek::fusion::ExprMulDiagRight * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulDiagRight::t mosek::fusion::p_ExprMulDiagRight::_new_ExprMulDiagRight  (int _3201,    int _3202,    std::shared_ptr< monty::ndarray< int,1 > > _3203,    std::shared_ptr< monty::ndarray< int,1 > > _3204,    std::shared_ptr< monty::ndarray< double,1 > > _3205,    monty::rc_ptr< ::mosek::fusion::Expression > _3206,    int _3207){ return new mosek::fusion::ExprMulDiagRight(_3201,_3202,_3203,_3204,_3205,_3206,_3207); }mosek::fusion::ExprMulDiagRight::ExprMulDiagRight  (int _3201,    int _3202,    std::shared_ptr< monty::ndarray< int,1 > > _3203,    std::shared_ptr< monty::ndarray< int,1 > > _3204,    std::shared_ptr< monty::ndarray< double,1 > > _3205,    monty::rc_ptr< ::mosek::fusion::Expression > _3206,    int _3207) :    ExprMulDiagRight(new mosek::fusion::p_ExprMulDiagRight(this)){ mosek::fusion::p_ExprMulDiagRight::_get_impl(this)->_initialize(_3201,_3202,_3203,_3204,_3205,_3206,_3207); }void mosek::fusion::p_ExprMulDiagRight::_initialize  (int _3201,    int _3202,    std::shared_ptr< monty::ndarray< int,1 > > _3203,    std::shared_ptr< monty::ndarray< int,1 > > _3204,    std::shared_ptr< monty::ndarray< double,1 > > _3205,    monty::rc_ptr< ::mosek::fusion::Expression > _3206,    int _3207){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__3203(_3203 ? _3203->raw() : nullptr, _3203 ? _3203->size(0) : 0);
    _checked_ptr_1<int> _ptr__3204(_3204 ? _3204->raw() : nullptr, _3204 ? _3204->size(0) : 0);
    _checked_ptr_1<double> _ptr__3205(_3205 ? _3205->raw() : nullptr, _3205 ? _3205->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3202)}));
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->mdim0 = _3201;
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->mdim1 = _3202;
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->msubi = _3203;
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->msubj = _3204;
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->mval = _3205;
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->expr = _3206;
  }
}mosek::fusion::ExprMulDiagRight::t mosek::fusion::p_ExprMulDiagRight::_new_ExprMulDiagRight  (int _3208,    int _3209,    std::shared_ptr< monty::ndarray< int,1 > > _3210,    std::shared_ptr< monty::ndarray< int,1 > > _3211,    std::shared_ptr< monty::ndarray< double,1 > > _3212,    monty::rc_ptr< ::mosek::fusion::Expression > _3213){ return new mosek::fusion::ExprMulDiagRight(_3208,_3209,_3210,_3211,_3212,_3213); }mosek::fusion::ExprMulDiagRight::ExprMulDiagRight  (int _3208,    int _3209,    std::shared_ptr< monty::ndarray< int,1 > > _3210,    std::shared_ptr< monty::ndarray< int,1 > > _3211,    std::shared_ptr< monty::ndarray< double,1 > > _3212,    monty::rc_ptr< ::mosek::fusion::Expression > _3213) :    ExprMulDiagRight(new mosek::fusion::p_ExprMulDiagRight(this)){ mosek::fusion::p_ExprMulDiagRight::_get_impl(this)->_initialize(_3208,_3209,_3210,_3211,_3212,_3213); }void mosek::fusion::p_ExprMulDiagRight::_initialize  (int _3208,    int _3209,    std::shared_ptr< monty::ndarray< int,1 > > _3210,    std::shared_ptr< monty::ndarray< int,1 > > _3211,    std::shared_ptr< monty::ndarray< double,1 > > _3212,    monty::rc_ptr< ::mosek::fusion::Expression > _3213){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__3210(_3210 ? _3210->raw() : nullptr, _3210 ? _3210->size(0) : 0);
    _checked_ptr_1<int> _ptr__3211(_3211 ? _3211->raw() : nullptr, _3211 ? _3211->size(0) : 0);
    _checked_ptr_1<double> _ptr__3212(_3212 ? _3212->raw() : nullptr, _3212 ? _3212->size(0) : 0);
    mosek::fusion::p_ExprMulDiagRight::_initialize(_3208,_3209,_3210,_3211,_3212,_3213,::mosek::fusion::p_ExprMulDiagRight::validate(_3208,_3209,_3210,_3211,_3212,_3213));
  }
}void mosek::fusion::ExprMulDiagRight :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3214,monty::rc_ptr< ::mosek::fusion::WorkStack > _3215,monty::rc_ptr< ::mosek::fusion::WorkStack > _3216) { mosek::fusion::p_ExprMulDiagRight::_get_impl(this)->eval(_3214,_3215,_3216); }void mosek::fusion::p_ExprMulDiagRight::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3214,monty::rc_ptr< ::mosek::fusion::WorkStack > _3215,monty::rc_ptr< ::mosek::fusion::WorkStack > _3216){
  mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->expr->eval(_3215,_3214,_3216);
  int _3217 = (int)0;
  int _3218 = (int)99999;
  int _3219 = (int)0;
  bool _3220 = (_3215->peeki32((int)5) != (int)0);
  if (_3220)
  {
    {
      _3219 = _3215->peeki32((int)2);
      _3218 = _3215->alloci32(safe_add( _3219,(int)1 ));
      _3217 += safe_add( _3219,(int)1 );
    }
  }
  {}
  int _3221 = (int)((mval)->size(0));
  int _3222 = _3215->alloci32(_3221);
  int _3223 = _3215->alloci32(safe_add( mdim1,(int)1 ));
  _3217 += safe_add( safe_add( _3221,mdim1 ),(int)1 );
  {
    std::shared_ptr< monty::ndarray< int,1 > > _3224 = mosek::fusion::p_WorkStack::_get_impl(_3215)->i32;
    _checked_ptr_1<int> _ptr__3224(_3224 ? _3224->raw() : nullptr,_3224 ? _3224->size(0) : 0);
    std::shared_ptr< monty::ndarray< int,1 > > _3225 = mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->msubj;
    _checked_ptr_1<int> _ptr__3225(_3225 ? _3225->raw() : nullptr,_3225 ? _3225->size(0) : 0);
    {
      int _8340 = (int)0;
      int _8341 = safe_add( mdim1,(int)1 );
      for (int _3226 = _8340; _3226 < _8341; ++_3226)
      {
        {
          _ptr__3224[safe_add( _3223,_3226 )] = (int)0;
        }
      }
      int _8342 = (int)0;
      int _8343 = _3221;
      for (int _3227 = _8342; _3227 < _8343; ++_3227)
      {
        {
          ++ _ptr__3224[safe_add( safe_add( _3223,_ptr__3225[_3227] ),(int)1 )];
        }
      }
      int _8344 = (int)0;
      int _8345 = mdim1;
      for (int _3228 = _8344; _3228 < _8345; ++_3228)
      {
        {
          _ptr__3224[safe_add( safe_add( _3223,_3228 ),(int)1 )] += _ptr__3224[safe_add( _3223,_3228 )];
        }
      }
      int _8346 = (int)0;
      int _8347 = _3221;
      for (int _3229 = _8346; _3229 < _8347; ++_3229)
      {
        {
          _ptr__3224[safe_add( _3222,_ptr__3224[safe_add( _3223,_ptr__3225[_3229] )] )] = _3229;
          ++ _ptr__3224[safe_add( _3223,_ptr__3225[_3229] )];
        }
      }
      int _8348 = (int)0;
      int _8349 = mdim1;
      for (int _3230 = _8348; _3230 < _8349; ++_3230)
      {
        {
          _ptr__3224[(safe_add( _3223,mdim1 ) - _3230)] = _ptr__3224[((safe_add( _3223,mdim1 ) - _3230) - (int)1)];
        }
      }
      _ptr__3224[_3223] = (int)0;
    }
  }
  _3215->popi32(_3217);
  int _3231 = _3215->popi32();
  if ((_3231 != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operator shape for multiplication"));
    }
  }
  {}
  int _3232 = _3215->popi32();
  int _3233 = _3215->popi32();
  int _3234 = _3215->popi32();
  int _3235 = _3215->popi32();
  bool _3236 = (_3215->popi32() != (int)0);
  int _3237 = _3215->popi32(safe_add( _3234,(int)1 ));
  int _8350;
  bool _8351 = _3236;
  if (_8351)
  {
    _8350 = _3215->popi64(_3234);
  }
  else
  {
    _8350 = (int)9999;
  }
  int _3238 = _8350;
  int _3239 = _3215->popi64(_3235);
  int _3240 = _3215->popf64(_3234);
  int _3241 = _3215->popf64(_3235);
  std::shared_ptr< monty::ndarray< int,1 > > _3242 = mosek::fusion::p_WorkStack::_get_impl(_3215)->i32;
  _checked_ptr_1<int> _ptr__3242(_3242 ? _3242->raw() : nullptr,_3242 ? _3242->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3243 = mosek::fusion::p_WorkStack::_get_impl(_3215)->i64;
  _checked_ptr_1<long long> _ptr__3243(_3243 ? _3243->raw() : nullptr,_3243 ? _3243->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3244 = mosek::fusion::p_WorkStack::_get_impl(_3215)->f64;
  _checked_ptr_1<double> _ptr__3244(_3244 ? _3244->raw() : nullptr,_3244 ? _3244->size(0) : 0);
  if (_3236)
  {
    {
      int _8352 = (int)0;
      int _8353 = safe_add( _3233,(int)1 );
      for (int _3245 = _8352; _3245 < _8353; ++_3245)
      {
        {
          _ptr__3242[safe_add( _3218,_3245 )] = (int)0;
        }
      }
      int _8354 = (int)0;
      int _8355 = _3234;
      for (int _3246 = _8354; _3246 < _8355; ++_3246)
      {
        {
          ++ _ptr__3242[safe_add( safe_add( _3218,(_ptr__3243[safe_add( _3238,_3246 )] / _3232) ),(int)1 )];
        }
      }
      int _8356 = (int)0;
      int _8357 = _3233;
      for (int _3247 = _8356; _3247 < _8357; ++_3247)
      {
        {
          _ptr__3242[safe_add( safe_add( _3218,_3247 ),(int)1 )] += _ptr__3242[safe_add( _3218,_3247 )];
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _3248 = mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->msubi;
      _checked_ptr_1<int> _ptr__3248(_3248 ? _3248->raw() : nullptr,_3248 ? _3248->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3249 = mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->mval;
      _checked_ptr_1<double> _ptr__3249(_3249 ? _3249->raw() : nullptr,_3249 ? _3249->size(0) : 0);
      int _3250 = (int)0;
      int _3251 = (int)0;
      {
        int _8358 = (int)0;
        int _8359 = _3233;
        for (int _3252 = _8358; _3252 < _8359; ++_3252)
        {
          {
            int _3253 = _ptr__3242[safe_add( safe_add( _3223,_3252 ),(int)1 )];
            int _3254 = _ptr__3242[safe_add( _3223,_3252 )];
            int _3255 = _ptr__3242[safe_add( safe_add( _3218,_3252 ),(int)1 )];
            int _3256 = _ptr__3242[safe_add( _3218,_3252 )];
            bool _3257 = false;
            while ( ((_3256 < _3255) && (_3254 < _3253)) )
            {
              {
                int _3258 = _ptr__3242[safe_add( _3222,_3254 )];
                long long _3259 = (_ptr__3243[safe_add( _3238,_3256 )] % _3232);
                if ((_ptr__3248[_3258] < _3259))
                {
                  {
                    ++ _3254;
                  }
                }
                else if((_ptr__3248[_3258] > _3259))
                {
                  {
                    ++ _3256;
                  }
                }
                else
                {
                  {
                    _3257 = true;
                    _3250 += (_ptr__3242[safe_add( safe_add( _3237,_3256 ),(int)1 )] - _ptr__3242[safe_add( _3237,_3256 )]);
                    ++ _3256;
                    ++ _3254;
                  }
                }
              }
            }
            if (_3257)
            {
              {
                ++ _3251;
              }
            }
            {}
          }
        }
      }
      bool _3260 = (_3251 < _3233);
      int _3261 = _3214->alloci32(safe_add( _3251,(int)1 ));
      int _3262 = _3214->alloci64(_3250);
      int _3263 = _3214->alloci64(_3251);
      int _3264 = _3214->allocf64(_3250);
      int _3265 = _3214->allocf64(_3251);
      int _8360;
      bool _8361 = _3260;
      if (_8361)
      {
        _8360 = (int)1;
      }
      else
      {
        _8360 = (int)0;
      }
      _3214->pushi32(_8360);
      _3214->pushi32(_3250);
      _3214->pushi32(_3251);
      _3214->pushi32(_3233);
      _3214->pushi32((int)1);
      std::shared_ptr< monty::ndarray< int,1 > > _3266 = mosek::fusion::p_WorkStack::_get_impl(_3214)->i32;
      _checked_ptr_1<int> _ptr__3266(_3266 ? _3266->raw() : nullptr,_3266 ? _3266->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _3267 = mosek::fusion::p_WorkStack::_get_impl(_3214)->i64;
      _checked_ptr_1<long long> _ptr__3267(_3267 ? _3267->raw() : nullptr,_3267 ? _3267->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3268 = mosek::fusion::p_WorkStack::_get_impl(_3214)->f64;
      _checked_ptr_1<double> _ptr__3268(_3268 ? _3268->raw() : nullptr,_3268 ? _3268->size(0) : 0);
      {
        int _3269 = (int)0;
        int _3270 = (int)0;
        _ptr__3266[_3261] = (int)0;
        int _8362 = (int)0;
        int _8363 = _3233;
        for (int _3271 = _8362; _3271 < _8363; ++_3271)
        {
          {
            int _3272 = _ptr__3242[safe_add( safe_add( _3223,_3271 ),(int)1 )];
            int _3273 = _ptr__3242[safe_add( _3223,_3271 )];
            int _3274 = _ptr__3242[safe_add( safe_add( _3218,_3271 ),(int)1 )];
            int _3275 = _ptr__3242[safe_add( _3218,_3271 )];
            bool _3276 = false;
            double _3277 = 0.0;
            while ( ((_3275 < _3274) && (_3273 < _3272)) )
            {
              {
                int _3278 = _ptr__3242[safe_add( _3222,_3273 )];
                long long _3279 = (_ptr__3243[safe_add( _3238,_3275 )] % _3232);
                if ((_ptr__3248[_3278] < _3279))
                {
                  {
                    ++ _3273;
                  }
                }
                else if((_ptr__3248[_3278] > _3279))
                {
                  {
                    ++ _3275;
                  }
                }
                else
                {
                  {
                    _3276 = true;
                    int _8364 = _ptr__3242[safe_add( _3237,_3275 )];
                    int _8365 = _ptr__3242[safe_add( safe_add( _3237,_3275 ),(int)1 )];
                    for (int _3280 = _8364; _3280 < _8365; ++_3280)
                    {
                      {
                        _ptr__3267[safe_add( _3262,_3270 )] = _ptr__3243[safe_add( _3239,_3280 )];
                        _ptr__3268[safe_add( _3264,_3270 )] = (_ptr__3244[safe_add( _3241,_3280 )] * _ptr__3249[_3278]);
                        ++ _3270;
                      }
                    }
                    _3277 += (_ptr__3244[safe_add( _3240,_3275 )] * _ptr__3249[_3278]);
                    ++ _3275;
                    ++ _3273;
                  }
                }
              }
            }
            if (_3276)
            {
              {
                _ptr__3266[safe_add( safe_add( _3261,_3269 ),(int)1 )] = _3270;
                _ptr__3267[safe_add( _3263,_3269 )] = _3271;
                _ptr__3268[safe_add( _3265,_3269 )] = _3277;
                ++ _3269;
              }
            }
            {}
          }
        }
      }
      if ((!_3260))
      {
        {
          _3214->popi64(_3251);
        }
      }
      {}
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _3281 = mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->msubi;
      _checked_ptr_1<int> _ptr__3281(_3281 ? _3281->raw() : nullptr,_3281 ? _3281->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3282 = mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->mval;
      _checked_ptr_1<double> _ptr__3282(_3282 ? _3282->raw() : nullptr,_3282 ? _3282->size(0) : 0);
      int _3283 = (int)0;
      int _3284 = (int)0;
      {
        int _8366 = (int)0;
        int _8367 = _3233;
        for (int _3285 = _8366; _3285 < _8367; ++_3285)
        {
          {
            bool _3286 = false;
            int _8368 = _ptr__3242[safe_add( _3223,_3285 )];
            int _8369 = _ptr__3242[safe_add( safe_add( _3223,_3285 ),(int)1 )];
            for (int _3287 = _8368; _3287 < _8369; ++_3287)
            {
              {
                int _3288 = _ptr__3242[safe_add( _3222,_3287 )];
                int _3289 = safe_add( safe_mul( _3285,_3232 ),_ptr__3281[_3288] );
                _3284 += (_ptr__3242[safe_add( safe_add( _3237,_3289 ),(int)1 )] - _ptr__3242[safe_add( _3237,_3289 )]);
                if ((_ptr__3242[safe_add( safe_add( _3237,_3289 ),(int)1 )] > _ptr__3242[safe_add( _3237,_3289 )]))
                {
                  {
                    _3286 = true;
                  }
                }
                {}
              }
            }
            if (_3286)
            {
              {
                ++ _3283;
              }
            }
            {}
          }
        }
      }
      bool _3290 = (_3283 < _3233);
      int _3291 = _3214->alloci32(safe_add( _3283,(int)1 ));
      int _3292 = _3214->alloci64(_3284);
      int _3293 = _3214->alloci64(_3283);
      int _3294 = _3214->allocf64(_3284);
      int _3295 = _3214->allocf64(_3283);
      int _8370;
      bool _8371 = _3290;
      if (_8371)
      {
        _8370 = (int)1;
      }
      else
      {
        _8370 = (int)0;
      }
      _3214->pushi32(_8370);
      _3214->pushi32(_3284);
      _3214->pushi32(_3283);
      _3214->pushi32(_3233);
      _3214->pushi32((int)1);
      std::shared_ptr< monty::ndarray< int,1 > > _3296 = mosek::fusion::p_WorkStack::_get_impl(_3214)->i32;
      _checked_ptr_1<int> _ptr__3296(_3296 ? _3296->raw() : nullptr,_3296 ? _3296->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _3297 = mosek::fusion::p_WorkStack::_get_impl(_3214)->i64;
      _checked_ptr_1<long long> _ptr__3297(_3297 ? _3297->raw() : nullptr,_3297 ? _3297->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3298 = mosek::fusion::p_WorkStack::_get_impl(_3214)->f64;
      _checked_ptr_1<double> _ptr__3298(_3298 ? _3298->raw() : nullptr,_3298 ? _3298->size(0) : 0);
      {
        int _3299 = (int)0;
        int _3300 = (int)0;
        _ptr__3296[_3291] = (int)0;
        int _8372 = (int)0;
        int _8373 = _3233;
        for (int _3301 = _8372; _3301 < _8373; ++_3301)
        {
          {
            bool _3302 = false;
            double _3303 = 0.0;
            int _8374 = _ptr__3242[safe_add( _3223,_3301 )];
            int _8375 = _ptr__3242[safe_add( safe_add( _3223,_3301 ),(int)1 )];
            for (int _3304 = _8374; _3304 < _8375; ++_3304)
            {
              {
                int _3305 = _ptr__3242[safe_add( _3222,_3304 )];
                int _3306 = safe_add( safe_mul( _3301,_3232 ),_ptr__3281[_3305] );
                int _8376 = _ptr__3242[safe_add( _3237,_3306 )];
                int _8377 = _ptr__3242[safe_add( safe_add( _3237,_3306 ),(int)1 )];
                for (int _3307 = _8376; _3307 < _8377; ++_3307)
                {
                  {
                    _3302 = true;
                    _ptr__3297[safe_add( _3292,_3300 )] = _ptr__3243[safe_add( _3239,_3307 )];
                    _ptr__3298[safe_add( _3294,_3300 )] = (_ptr__3244[safe_add( _3241,_3307 )] * _ptr__3282[_3305]);
                    ++ _3300;
                  }
                }
                _3303 += (_ptr__3244[safe_add( _3240,_3306 )] * _ptr__3282[_3305]);
              }
            }
            if (_3302)
            {
              {
                _ptr__3298[safe_add( _3295,_3299 )] = _3303;
                _ptr__3297[safe_add( _3293,_3299 )] = _3301;
                _ptr__3296[safe_add( safe_add( _3291,_3299 ),(int)1 )] = _3300;
                ++ _3299;
              }
            }
            {}
          }
        }
      }
      if ((!_3290))
      {
        {
          _3214->popi64(_3283);
        }
      }
      {}
    }
  }
}
int mosek::fusion::p_ExprMulDiagRight::validate(int _3308,int _3309,std::shared_ptr< monty::ndarray< int,1 > > _3310,std::shared_ptr< monty::ndarray< int,1 > > _3311,std::shared_ptr< monty::ndarray< double,1 > > _3312,monty::rc_ptr< ::mosek::fusion::Expression > _3313){
  _checked_ptr_1<int> _ptr__3310(_3310 ? _3310->raw() : nullptr, _3310 ? _3310->size(0) : 0);
  _checked_ptr_1<int> _ptr__3311(_3311 ? _3311->raw() : nullptr, _3311 ? _3311->size(0) : 0);
  _checked_ptr_1<double> _ptr__3312(_3312 ? _3312->raw() : nullptr, _3312 ? _3312->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3314 = _3313->getShape();
  _checked_ptr_1<int> _ptr__3314(_3314 ? _3314->raw() : nullptr,_3314 ? _3314->size(0) : 0);
  if (((int)((_3314)->size(0)) > (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  int _3315 = _ptr__3314[(int)0];
  int _3316 = _ptr__3314[(int)1];
  if (((_3308 < (int)0) || ((_3309 < (int)0) || ((_3315 < (int)0) || (_3316 < (int)0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if (((_3308 != _3316) || (_3309 != _3315)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  if ((((int)((_3310)->size(0)) != (int)((_3311)->size(0))) || ((int)((_3310)->size(0)) != (int)((_3312)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  int _3317 = (int)((_3310)->size(0));
  bool _3318 = false;
  bool _3319 = false;
  {
    int _8378 = (int)0;
    int _8379 = _3317;
    for (int _3320 = _8378; _3320 < _8379; ++_3320)
    {
      {
        if (((_ptr__3310[_3320] < (int)0) || ((_ptr__3310[_3320] >= _3308) || ((_ptr__3311[_3320] < (int)0) || (_ptr__3311[_3320] >= _3309)))))
        {
          {
            _3318 = true;
          }
        }
        {}
      }
    }
    int _8380 = (int)0;
    int _8381 = (_3317 - (int)1);
    for (int _3321 = _8380; _3321 < _8381; ++_3321)
    {
      {
        if (((_ptr__3310[_3321] > _ptr__3310[safe_add( _3321,(int)1 )]) || ((_ptr__3310[_3321] == _ptr__3310[safe_add( _3321,(int)1 )]) && (_ptr__3311[_3321] >= _ptr__3311[safe_add( _3321,(int)1 )]))))
        {
          {
            _3319 = true;
          }
        }
        {}
      }
    }
  }
  if (_3318)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  if (_3319)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Unsorted matrix data"));
    }
  }
  {}
  return (int)1;
}
std::string mosek::fusion::ExprMulDiagRight :: toString() { return mosek::fusion::p_ExprMulDiagRight::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulDiagRight::toString(){
  return std::string ("ExprMulDiagRight()");
}
void mosek::fusion::p_ExprMulDiagRight::destroy(){expr.reset();mval.reset();msubj.reset();msubi.reset();}void mosek::fusion::ExprMulDiagRight::destroy() { mosek::fusion::p_ExprMulDiagRight::_get_impl(this)->destroy(); }mosek::fusion::ExprMulDiagLeft::ExprMulDiagLeft(mosek::fusion::p_ExprMulDiagLeft *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulDiagLeft()" << this << std::endl; */ }mosek::fusion::ExprMulDiagLeft::~ExprMulDiagLeft() {  /* std::cout << "~ExprMulDiagLeft()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulDiagLeft::p_ExprMulDiagLeft  (::mosek::fusion::ExprMulDiagLeft * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulDiagLeft::t mosek::fusion::p_ExprMulDiagLeft::_new_ExprMulDiagLeft  (int _3322,    int _3323,    std::shared_ptr< monty::ndarray< int,1 > > _3324,    std::shared_ptr< monty::ndarray< int,1 > > _3325,    std::shared_ptr< monty::ndarray< double,1 > > _3326,    monty::rc_ptr< ::mosek::fusion::Expression > _3327,    int _3328){ return new mosek::fusion::ExprMulDiagLeft(_3322,_3323,_3324,_3325,_3326,_3327,_3328); }mosek::fusion::ExprMulDiagLeft::ExprMulDiagLeft  (int _3322,    int _3323,    std::shared_ptr< monty::ndarray< int,1 > > _3324,    std::shared_ptr< monty::ndarray< int,1 > > _3325,    std::shared_ptr< monty::ndarray< double,1 > > _3326,    monty::rc_ptr< ::mosek::fusion::Expression > _3327,    int _3328) :    ExprMulDiagLeft(new mosek::fusion::p_ExprMulDiagLeft(this)){ mosek::fusion::p_ExprMulDiagLeft::_get_impl(this)->_initialize(_3322,_3323,_3324,_3325,_3326,_3327,_3328); }void mosek::fusion::p_ExprMulDiagLeft::_initialize  (int _3322,    int _3323,    std::shared_ptr< monty::ndarray< int,1 > > _3324,    std::shared_ptr< monty::ndarray< int,1 > > _3325,    std::shared_ptr< monty::ndarray< double,1 > > _3326,    monty::rc_ptr< ::mosek::fusion::Expression > _3327,    int _3328){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__3324(_3324 ? _3324->raw() : nullptr, _3324 ? _3324->size(0) : 0);
    _checked_ptr_1<int> _ptr__3325(_3325 ? _3325->raw() : nullptr, _3325 ? _3325->size(0) : 0);
    _checked_ptr_1<double> _ptr__3326(_3326 ? _3326->raw() : nullptr, _3326 ? _3326->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3322)}));
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->mdim0 = _3322;
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->mdim1 = _3323;
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->msubi = _3324;
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->msubj = _3325;
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->mval = _3326;
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->expr = _3327;
  }
}mosek::fusion::ExprMulDiagLeft::t mosek::fusion::p_ExprMulDiagLeft::_new_ExprMulDiagLeft  (int _3329,    int _3330,    std::shared_ptr< monty::ndarray< int,1 > > _3331,    std::shared_ptr< monty::ndarray< int,1 > > _3332,    std::shared_ptr< monty::ndarray< double,1 > > _3333,    monty::rc_ptr< ::mosek::fusion::Expression > _3334){ return new mosek::fusion::ExprMulDiagLeft(_3329,_3330,_3331,_3332,_3333,_3334); }mosek::fusion::ExprMulDiagLeft::ExprMulDiagLeft  (int _3329,    int _3330,    std::shared_ptr< monty::ndarray< int,1 > > _3331,    std::shared_ptr< monty::ndarray< int,1 > > _3332,    std::shared_ptr< monty::ndarray< double,1 > > _3333,    monty::rc_ptr< ::mosek::fusion::Expression > _3334) :    ExprMulDiagLeft(new mosek::fusion::p_ExprMulDiagLeft(this)){ mosek::fusion::p_ExprMulDiagLeft::_get_impl(this)->_initialize(_3329,_3330,_3331,_3332,_3333,_3334); }void mosek::fusion::p_ExprMulDiagLeft::_initialize  (int _3329,    int _3330,    std::shared_ptr< monty::ndarray< int,1 > > _3331,    std::shared_ptr< monty::ndarray< int,1 > > _3332,    std::shared_ptr< monty::ndarray< double,1 > > _3333,    monty::rc_ptr< ::mosek::fusion::Expression > _3334){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__3331(_3331 ? _3331->raw() : nullptr, _3331 ? _3331->size(0) : 0);
    _checked_ptr_1<int> _ptr__3332(_3332 ? _3332->raw() : nullptr, _3332 ? _3332->size(0) : 0);
    _checked_ptr_1<double> _ptr__3333(_3333 ? _3333->raw() : nullptr, _3333 ? _3333->size(0) : 0);
    mosek::fusion::p_ExprMulDiagLeft::_initialize(_3329,_3330,_3331,_3332,_3333,_3334,::mosek::fusion::p_ExprMulDiagLeft::validate(_3329,_3330,_3331,_3332,_3333,_3334));
  }
}void mosek::fusion::ExprMulDiagLeft :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3335,monty::rc_ptr< ::mosek::fusion::WorkStack > _3336,monty::rc_ptr< ::mosek::fusion::WorkStack > _3337) { mosek::fusion::p_ExprMulDiagLeft::_get_impl(this)->eval(_3335,_3336,_3337); }void mosek::fusion::p_ExprMulDiagLeft::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3335,monty::rc_ptr< ::mosek::fusion::WorkStack > _3336,monty::rc_ptr< ::mosek::fusion::WorkStack > _3337){
  mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->expr->eval(_3336,_3335,_3337);
  if ((_3336->peeki32() != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operator shape for multiplication"));
    }
  }
  {}
  int _3338 = (int)((msubi)->size(0));
  int _3339 = (int)9999;
  int _3340 = (int)9999;
  int _3341 = (int)0;
  int _3342 = _3336->peeki32((int)5);
  if ((_3342 != (int)0))
  {
    {
      int _3343 = _3336->peeki32((int)1);
      int _3344 = _3336->peeki32((int)3);
      _3339 = _3336->alloci32(safe_add( _3343,(int)1 ));
      _3340 = _3336->alloci32(_3344);
      _3341 += safe_add( safe_add( _3344,_3343 ),(int)1 );
    }
  }
  {}
  int _3345 = _3336->alloci32(safe_add( mdim0,(int)1 ));
  _3341 += safe_add( mdim0,(int)1 );
  _3336->popi32(_3341);
  std::shared_ptr< monty::ndarray< int,1 > > _3346 = mosek::fusion::p_WorkStack::_get_impl(_3336)->i32;
  _checked_ptr_1<int> _ptr__3346(_3346 ? _3346->raw() : nullptr,_3346 ? _3346->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3347 = mosek::fusion::p_WorkStack::_get_impl(_3336)->i64;
  _checked_ptr_1<long long> _ptr__3347(_3347 ? _3347->raw() : nullptr,_3347 ? _3347->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3348 = mosek::fusion::p_WorkStack::_get_impl(_3336)->f64;
  _checked_ptr_1<double> _ptr__3348(_3348 ? _3348->raw() : nullptr,_3348 ? _3348->size(0) : 0);
  int _8382 = (int)0;
  int _8383 = safe_add( mdim0,(int)1 );
  for (int _3349 = _8382; _3349 < _8383; ++_3349)
  {
    {
      _ptr__3346[safe_add( _3345,_3349 )] = (int)0;
    }
  }
  int _8384 = (int)0;
  int _8385 = _3338;
  for (int _3350 = _8384; _3350 < _8385; ++_3350)
  {
    {
      ++ _ptr__3346[safe_add( safe_add( _3345,((*msubi)(_3350)) ),(int)1 )];
    }
  }
  int _8386 = (int)0;
  int _8387 = mdim0;
  for (int _3351 = _8386; _3351 < _8387; ++_3351)
  {
    {
      _ptr__3346[safe_add( safe_add( _3345,_3351 ),(int)1 )] += _ptr__3346[safe_add( _3345,_3351 )];
    }
  }
  int _3352 = _3336->popi32();
  int _3353 = _3336->popi32();
  int _3354 = _3336->popi32();
  int _3355 = _3336->popi32();
  int _3356 = _3336->popi32();
  bool _3357 = (_3336->popi32() != (int)0);
  int _3358 = _3336->popi32(safe_add( _3355,(int)1 ));
  int _8388;
  bool _8389 = _3357;
  if (_8389)
  {
    _8388 = _3336->popi64(_3355);
  }
  else
  {
    _8388 = (int)9999;
  }
  int _3359 = _8388;
  int _3360 = _3336->popi64(_3356);
  int _3361 = _3336->popf64(_3355);
  int _3362 = _3336->popf64(_3356);
  if ((!_3357))
  {
    {
      int _3363 = (int)((msubi)->size(0));
      int _3364 = (int)0;
      int _8390 = (int)0;
      int _8391 = mdim0;
      for (int _3365 = _8390; _3365 < _8391; ++_3365)
      {
        {
          if ((_ptr__3346[safe_add( _3345,_3365 )] < _ptr__3346[safe_add( safe_add( _3345,_3365 ),(int)1 )]))
          {
            {
              ++ _3364;
            }
          }
          {}
        }
      }
      bool _3366 = (_3364 < mdim0);
      _3335->alloc_expr((int)1,_3364,_3363,_3366);
      int _3367 = mosek::fusion::p_WorkStack::_get_impl(_3335)->ptr_base;
      int _3368 = mosek::fusion::p_WorkStack::_get_impl(_3335)->nidxs_base;
      int _8392;
      bool _8393 = _3366;
      if (_8393)
      {
        _8392 = mosek::fusion::p_WorkStack::_get_impl(_3335)->sp_base;
      }
      else
      {
        _8392 = _3335->alloci64(_3364);
      }
      int _3369 = _8392;
      int _3370 = mosek::fusion::p_WorkStack::_get_impl(_3335)->cof_base;
      int _3371 = mosek::fusion::p_WorkStack::_get_impl(_3335)->bfix_base;
      ((*mosek::fusion::p_WorkStack::_get_impl(_3335)->i32)(mosek::fusion::p_WorkStack::_get_impl(_3335)->shape_base)) = mdim0;
      std::shared_ptr< monty::ndarray< int,1 > > _3372 = mosek::fusion::p_WorkStack::_get_impl(_3335)->i32;
      _checked_ptr_1<int> _ptr__3372(_3372 ? _3372->raw() : nullptr,_3372 ? _3372->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _3373 = mosek::fusion::p_WorkStack::_get_impl(_3335)->i64;
      _checked_ptr_1<long long> _ptr__3373(_3373 ? _3373->raw() : nullptr,_3373 ? _3373->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3374 = mosek::fusion::p_WorkStack::_get_impl(_3335)->f64;
      _checked_ptr_1<double> _ptr__3374(_3374 ? _3374->raw() : nullptr,_3374 ? _3374->size(0) : 0);
      {
        _ptr__3372[_3367] = (int)0;
        int _3375 = (int)0;
        int _3376 = (int)0;
        int _8394 = (int)0;
        int _8395 = mdim0;
        for (int _3377 = _8394; _3377 < _8395; ++_3377)
        {
          {
            if ((_ptr__3346[safe_add( _3345,_3377 )] < _ptr__3346[safe_add( safe_add( _3345,_3377 ),(int)1 )]))
            {
              {
                int _3378 = (int)0;
                int _8396 = _ptr__3346[safe_add( _3345,_3377 )];
                int _8397 = _ptr__3346[safe_add( safe_add( _3345,_3377 ),(int)1 )];
                for (int _3379 = _8396; _3379 < _8397; ++_3379)
                {
                  {
                    int _3380 = ((*msubj)(_3379));
                    int _3381 = safe_add( safe_mul( _3380,_3353 ),_3377 );
                    int _8398 = _ptr__3346[safe_add( _3358,_3381 )];
                    int _8399 = _ptr__3346[safe_add( safe_add( _3358,_3381 ),(int)1 )];
                    for (int _3382 = _8398; _3382 < _8399; ++_3382)
                    {
                      {
                        _ptr__3373[safe_add( _3368,_3376 )] = _ptr__3347[safe_add( _3360,_3382 )];
                        _ptr__3374[safe_add( _3370,_3376 )] = (_ptr__3348[safe_add( _3362,_3382 )] * ((*mval)(_3379)));
                        ++ _3376;
                      }
                    }
                  }
                }
                _ptr__3374[safe_add( _3371,_3375 )] = _3378;
                _ptr__3373[safe_add( _3369,_3375 )] = _3377;
                _ptr__3372[safe_add( safe_add( _3367,_3375 ),(int)1 )] = _3376;
                ++ _3375;
              }
            }
            {}
          }
        }
      }
      if ((!_3366))
      {
        {
          _3335->popi64(_3364);
        }
      }
      {}
    }
  }
  else
  {
    {
      int _8400 = (int)0;
      int _8401 = safe_add( _3353,(int)1 );
      for (int _3383 = _8400; _3383 < _8401; ++_3383)
      {
        {
          _ptr__3346[safe_add( _3339,_3383 )] = (int)0;
        }
      }
      int _8402 = (int)0;
      int _8403 = _3355;
      for (int _3384 = _8402; _3384 < _8403; ++_3384)
      {
        {
          ++ _ptr__3346[safe_add( safe_add( _3339,(_ptr__3347[safe_add( _3359,_3384 )] % _3353) ),(int)1 )];
        }
      }
      int _8404 = (int)0;
      int _8405 = _3353;
      for (int _3385 = _8404; _3385 < _8405; ++_3385)
      {
        {
          _ptr__3346[safe_add( safe_add( _3339,_3385 ),(int)1 )] += _ptr__3346[safe_add( _3339,_3385 )];
        }
      }
      int _8406 = (int)0;
      int _8407 = _3355;
      for (int _3386 = _8406; _3386 < _8407; ++_3386)
      {
        {
          long long _3387 = (_ptr__3347[safe_add( _3359,_3386 )] % _3353);
          _ptr__3346[safe_add( _3340,_ptr__3346[safe_add( _3339,_3387 )] )] = _3386;
          ++ _ptr__3346[safe_add( _3339,_3387 )];
        }
      }
      int _8408 = (int)0;
      int _8409 = _3353;
      for (int _3388 = _8408; _3388 < _8409; ++_3388)
      {
        {
          _ptr__3346[(safe_add( _3339,_3353 ) - _3388)] = _ptr__3346[((safe_add( _3339,_3353 ) - _3388) - (int)1)];
        }
      }
      _ptr__3346[_3339] = (int)0;
      int _3389 = (int)0;
      int _3390 = (int)0;
      {
        int _8410 = (int)0;
        int _8411 = mdim0;
        for (int _3391 = _8410; _3391 < _8411; ++_3391)
        {
          {
            int _3392 = _ptr__3346[safe_add( safe_add( _3339,_3391 ),(int)1 )];
            int _3393 = _ptr__3346[safe_add( _3339,_3391 )];
            int _3394 = _ptr__3346[safe_add( safe_add( _3345,_3391 ),(int)1 )];
            int _3395 = _ptr__3346[safe_add( _3345,_3391 )];
            bool _3396 = false;
            while ( ((_3395 < _3394) && (_3393 < _3392)) )
            {
              {
                int _3397 = _ptr__3346[safe_add( _3340,_3393 )];
                long long _3398 = (_ptr__3347[safe_add( _3359,_3397 )] / _3353);
                if ((((*msubj)(_3395)) < _3398))
                {
                  {
                    ++ _3395;
                  }
                }
                else if((((*msubj)(_3395)) > _3398))
                {
                  {
                    ++ _3393;
                  }
                }
                else
                {
                  {
                    _3396 = true;
                    _3390 += (_ptr__3346[safe_add( safe_add( _3358,_3397 ),(int)1 )] - _ptr__3346[safe_add( _3358,_3397 )]);
                    ++ _3395;
                    ++ _3393;
                  }
                }
              }
            }
            if (_3396)
            {
              {
                ++ _3389;
              }
            }
            {}
          }
        }
      }
      int _3399 = _3389;
      int _3400 = _3390;
      bool _3401 = (_3399 < mdim0);
      int _3402 = _3335->alloci32(safe_add( _3399,(int)1 ));
      int _3403 = _3335->alloci64(_3400);
      int _3404 = _3335->alloci64(_3399);
      int _3405 = _3335->allocf64(_3400);
      int _3406 = _3335->allocf64(_3399);
      int _8412;
      bool _8413 = _3401;
      if (_8413)
      {
        _8412 = (int)1;
      }
      else
      {
        _8412 = (int)0;
      }
      _3335->pushi32(_8412);
      _3335->pushi32(_3400);
      _3335->pushi32(_3399);
      _3335->pushi32(mdim0);
      _3335->pushi32((int)1);
      std::shared_ptr< monty::ndarray< int,1 > > _3407 = mosek::fusion::p_WorkStack::_get_impl(_3335)->i32;
      _checked_ptr_1<int> _ptr__3407(_3407 ? _3407->raw() : nullptr,_3407 ? _3407->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _3408 = mosek::fusion::p_WorkStack::_get_impl(_3335)->i64;
      _checked_ptr_1<long long> _ptr__3408(_3408 ? _3408->raw() : nullptr,_3408 ? _3408->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3409 = mosek::fusion::p_WorkStack::_get_impl(_3335)->f64;
      _checked_ptr_1<double> _ptr__3409(_3409 ? _3409->raw() : nullptr,_3409 ? _3409->size(0) : 0);
      {
        _ptr__3407[_3402] = (int)0;
        int _3410 = (int)0;
        int _3411 = (int)0;
        int _8414 = (int)0;
        int _8415 = mdim0;
        for (int _3412 = _8414; _3412 < _8415; ++_3412)
        {
          {
            int _3413 = _ptr__3346[safe_add( safe_add( _3339,_3412 ),(int)1 )];
            int _3414 = _ptr__3346[safe_add( _3339,_3412 )];
            int _3415 = _ptr__3346[safe_add( safe_add( _3345,_3412 ),(int)1 )];
            int _3416 = _ptr__3346[safe_add( _3345,_3412 )];
            bool _3417 = false;
            double _3418 = 0.0;
            while ( ((_3416 < _3415) && (_3414 < _3413)) )
            {
              {
                int _3419 = _ptr__3346[safe_add( _3340,_3414 )];
                long long _3420 = (_ptr__3347[safe_add( _3359,_3419 )] / _3353);
                if ((((*msubj)(_3416)) < _3420))
                {
                  {
                    ++ _3416;
                  }
                }
                else if((((*msubj)(_3416)) > _3420))
                {
                  {
                    ++ _3414;
                  }
                }
                else
                {
                  {
                    _3417 = true;
                    int _8416 = _ptr__3346[safe_add( _3358,_3419 )];
                    int _8417 = _ptr__3346[safe_add( safe_add( _3358,_3419 ),(int)1 )];
                    for (int _3421 = _8416; _3421 < _8417; ++_3421)
                    {
                      {
                        _ptr__3408[safe_add( _3403,_3411 )] = _ptr__3347[safe_add( _3360,_3421 )];
                        _ptr__3409[safe_add( _3405,_3411 )] = (_ptr__3348[safe_add( _3362,_3421 )] * ((*mval)(_3416)));
                        ++ _3411;
                      }
                    }
                    _3418 += _ptr__3348[safe_add( _3361,_3419 )];
                    ++ _3416;
                    ++ _3414;
                  }
                }
              }
            }
            if (_3417)
            {
              {
                _ptr__3408[safe_add( _3404,_3410 )] = _3412;
                _ptr__3409[safe_add( _3406,_3410 )] = (_3418 * ((*mval)(_3416)));
                _ptr__3407[safe_add( safe_add( _3402,_3410 ),(int)1 )] = _3411;
                ++ _3410;
              }
            }
            {}
          }
        }
      }
      if ((!_3401))
      {
        {
          _3335->popi64(_3399);
        }
      }
      {}
    }
  }
}
int mosek::fusion::p_ExprMulDiagLeft::validate(int _3422,int _3423,std::shared_ptr< monty::ndarray< int,1 > > _3424,std::shared_ptr< monty::ndarray< int,1 > > _3425,std::shared_ptr< monty::ndarray< double,1 > > _3426,monty::rc_ptr< ::mosek::fusion::Expression > _3427){
  _checked_ptr_1<int> _ptr__3424(_3424 ? _3424->raw() : nullptr, _3424 ? _3424->size(0) : 0);
  _checked_ptr_1<int> _ptr__3425(_3425 ? _3425->raw() : nullptr, _3425 ? _3425->size(0) : 0);
  _checked_ptr_1<double> _ptr__3426(_3426 ? _3426->raw() : nullptr, _3426 ? _3426->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3428 = _3427->getShape();
  _checked_ptr_1<int> _ptr__3428(_3428 ? _3428->raw() : nullptr,_3428 ? _3428->size(0) : 0);
  if (((int)((_3428)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  int _3429 = _ptr__3428[(int)0];
  int _3430 = _ptr__3428[(int)1];
  if (((_3422 < (int)0) || (_3423 < (int)0)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if (((_3423 != _3429) || (_3422 != _3430)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  if ((((int)((_3424)->size(0)) != (int)((_3425)->size(0))) || ((int)((_3424)->size(0)) != (int)((_3426)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  int _3431 = (int)((_3424)->size(0));
  bool _3432 = false;
  bool _3433 = false;
  {
    int _8418 = (int)0;
    int _8419 = _3431;
    for (int _3434 = _8418; _3434 < _8419; ++_3434)
    {
      {
        if (((_ptr__3424[_3434] < (int)0) || ((_ptr__3424[_3434] >= _3422) || ((_ptr__3425[_3434] < (int)0) || (_ptr__3425[_3434] >= _3423)))))
        {
          {
            _3432 = true;
          }
        }
        {}
      }
    }
    int _8420 = (int)0;
    int _8421 = (_3431 - (int)1);
    for (int _3435 = _8420; _3435 < _8421; ++_3435)
    {
      {
        if (((_ptr__3424[_3435] > _ptr__3424[safe_add( _3435,(int)1 )]) || ((_ptr__3424[_3435] == _ptr__3424[safe_add( _3435,(int)1 )]) && (_ptr__3425[_3435] >= _ptr__3425[safe_add( _3435,(int)1 )]))))
        {
          {
            _3433 = true;
          }
        }
        {}
      }
    }
  }
  if (_3432)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  if (_3433)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Unsorted matrix data"));
    }
  }
  {}
  return (int)1;
}
std::string mosek::fusion::ExprMulDiagLeft :: toString() { return mosek::fusion::p_ExprMulDiagLeft::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulDiagLeft::toString(){
  return std::string ("ExprMulDiagLeft()");
}
void mosek::fusion::p_ExprMulDiagLeft::destroy(){expr.reset();mval.reset();msubj.reset();msubi.reset();}void mosek::fusion::ExprMulDiagLeft::destroy() { mosek::fusion::p_ExprMulDiagLeft::_get_impl(this)->destroy(); }mosek::fusion::ExprMulElement::ExprMulElement(mosek::fusion::p_ExprMulElement *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulElement()" << this << std::endl; */ }mosek::fusion::ExprMulElement::~ExprMulElement() {  /* std::cout << "~ExprMulElement()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulElement::p_ExprMulElement  (::mosek::fusion::ExprMulElement * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulElement::t mosek::fusion::p_ExprMulElement::_new_ExprMulElement  (std::shared_ptr< monty::ndarray< double,1 > > _3436,    std::shared_ptr< monty::ndarray< long long,1 > > _3437,    monty::rc_ptr< ::mosek::fusion::Expression > _3438){ return new mosek::fusion::ExprMulElement(_3436,_3437,_3438); }mosek::fusion::ExprMulElement::ExprMulElement  (std::shared_ptr< monty::ndarray< double,1 > > _3436,    std::shared_ptr< monty::ndarray< long long,1 > > _3437,    monty::rc_ptr< ::mosek::fusion::Expression > _3438) :    ExprMulElement(new mosek::fusion::p_ExprMulElement(this)){ mosek::fusion::p_ExprMulElement::_get_impl(this)->_initialize(_3436,_3437,_3438); }void mosek::fusion::p_ExprMulElement::_initialize  (std::shared_ptr< monty::ndarray< double,1 > > _3436,    std::shared_ptr< monty::ndarray< long long,1 > > _3437,    monty::rc_ptr< ::mosek::fusion::Expression > _3438){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__3436(_3436 ? _3436->raw() : nullptr, _3436 ? _3436->size(0) : 0);
    _checked_ptr_1<long long> _ptr__3437(_3437 ? _3437->raw() : nullptr, _3437 ? _3437->size(0) : 0);
    mosek::fusion::p_ExprMulElement::_initialize(_3436,_3437,_3438,(int)1);
    std::shared_ptr< monty::ndarray< int,1 > > _3439 = _3438->getShape();
    _checked_ptr_1<int> _ptr__3439(_3439 ? _3439->raw() : nullptr,_3439 ? _3439->size(0) : 0);
    if (((int)((_3436)->size(0)) != (int)((_3437)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Invalid matrix specification"));
      }
    }
    {}
    long long _3440 = ::mosek::fusion::p_Set::size(_3439);
    bool _3441 = false;
    bool _3442 = false;
    {
      int _8422 = (int)0;
      int _8423 = (int)((_3437)->size(0));
      for (int _3443 = _8422; _3443 < _8423; ++_3443)
      {
        {
          if (((_ptr__3437[_3443] < (int)0) || (_ptr__3437[_3443] >= _3440)))
          {
            {
              _3441 = true;
            }
          }
          {}
        }
      }
      int _8424 = (int)0;
      int _8425 = ((int)((_3437)->size(0)) - (int)1);
      for (int _3444 = _8424; _3444 < _8425; ++_3444)
      {
        {
          if ((_ptr__3437[_3444] >= _ptr__3437[safe_add( _3444,(int)1 )]))
          {
            {
              _3442 = true;
            }
          }
          {}
        }
      }
    }
    if (_3441)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Invalid matrix data"));
      }
    }
    {}
    if (_3442)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Matrix data not sorted"));
      }
    }
    {}
  }
}mosek::fusion::ExprMulElement::t mosek::fusion::p_ExprMulElement::_new_ExprMulElement  (std::shared_ptr< monty::ndarray< double,1 > > _3445,    std::shared_ptr< monty::ndarray< long long,1 > > _3446,    monty::rc_ptr< ::mosek::fusion::Expression > _3447,    int _3448){ return new mosek::fusion::ExprMulElement(_3445,_3446,_3447,_3448); }mosek::fusion::ExprMulElement::ExprMulElement  (std::shared_ptr< monty::ndarray< double,1 > > _3445,    std::shared_ptr< monty::ndarray< long long,1 > > _3446,    monty::rc_ptr< ::mosek::fusion::Expression > _3447,    int _3448) :    ExprMulElement(new mosek::fusion::p_ExprMulElement(this)){ mosek::fusion::p_ExprMulElement::_get_impl(this)->_initialize(_3445,_3446,_3447,_3448); }void mosek::fusion::p_ExprMulElement::_initialize  (std::shared_ptr< monty::ndarray< double,1 > > _3445,    std::shared_ptr< monty::ndarray< long long,1 > > _3446,    monty::rc_ptr< ::mosek::fusion::Expression > _3447,    int _3448){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__3445(_3445 ? _3445->raw() : nullptr, _3445 ? _3445->size(0) : 0);
    _checked_ptr_1<long long> _ptr__3446(_3446 ? _3446->raw() : nullptr, _3446 ? _3446->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(_3447->getShape());
    mosek::fusion::p_ExprMulElement::_get_impl(::mosek::fusion::ExprMulElement::t(_pubthis))->expr = _3447;
    mosek::fusion::p_ExprMulElement::_get_impl(::mosek::fusion::ExprMulElement::t(_pubthis))->mcof = _3445;
    mosek::fusion::p_ExprMulElement::_get_impl(::mosek::fusion::ExprMulElement::t(_pubthis))->msp = _3446;
  }
}void mosek::fusion::ExprMulElement :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3449,monty::rc_ptr< ::mosek::fusion::WorkStack > _3450,monty::rc_ptr< ::mosek::fusion::WorkStack > _3451) { mosek::fusion::p_ExprMulElement::_get_impl(this)->eval(_3449,_3450,_3451); }void mosek::fusion::p_ExprMulElement::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3449,monty::rc_ptr< ::mosek::fusion::WorkStack > _3450,monty::rc_ptr< ::mosek::fusion::WorkStack > _3451){
  expr->eval(_3450,_3449,_3451);
  int _3452 = _3450->popi32();
  int _3453 = _3450->popi32(_3452);
  int _3454 = _3450->popi32();
  int _3455 = _3450->popi32();
  bool _3456 = (_3450->popi32() != (int)0);
  int _3457 = _3450->popi32(safe_add( _3454,(int)1 ));
  int _8426;
  bool _8427 = _3456;
  if (_8427)
  {
    _8426 = _3450->popi64(_3454);
  }
  else
  {
    _8426 = (-(int)1);
  }
  int _3458 = _8426;
  int _3459 = _3450->popi64(_3455);
  int _3460 = _3450->popf64(_3454);
  int _3461 = _3450->popf64(_3455);
  std::shared_ptr< monty::ndarray< int,1 > > _3462 = mosek::fusion::p_WorkStack::_get_impl(_3450)->i32;
  _checked_ptr_1<int> _ptr__3462(_3462 ? _3462->raw() : nullptr,_3462 ? _3462->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3463 = mosek::fusion::p_WorkStack::_get_impl(_3450)->i64;
  _checked_ptr_1<long long> _ptr__3463(_3463 ? _3463->raw() : nullptr,_3463 ? _3463->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3464 = mosek::fusion::p_WorkStack::_get_impl(_3450)->f64;
  _checked_ptr_1<double> _ptr__3464(_3464 ? _3464->raw() : nullptr,_3464 ? _3464->size(0) : 0);
  int _3465 = (int)0;
  int _3466 = (int)0;
  if ((!_3456))
  {
    {
      _3466 = (int)((msp)->size(0));
      int _8428 = (int)0;
      int _8429 = (int)((msp)->size(0));
      for (int _3467 = _8428; _3467 < _8429; ++_3467)
      {
        {
          _3465 += (_ptr__3462[safe_add( safe_add( _3457,((*msp)(_3467)) ),(int)1 )] - _ptr__3462[safe_add( _3457,((*msp)(_3467)) )]);
        }
      }
    }
  }
  else
  {
    {
      int _3468 = (int)((msp)->size(0));
      int _3469 = (int)0;
      int _3470 = _3454;
      int _3471 = (int)0;
      while ( ((_3469 < _3468) && (_3471 < _3470)) )
      {
        {
          if ((((*msp)(_3469)) < _ptr__3463[safe_add( _3458,_3471 )]))
          {
            {
              ++ _3469;
            }
          }
          else if((((*msp)(_3469)) > _ptr__3463[safe_add( _3458,_3471 )]))
          {
            {
              ++ _3471;
            }
          }
          else
          {
            {
              _3465 += (_ptr__3462[safe_add( safe_add( _3457,_3471 ),(int)1 )] - _ptr__3462[safe_add( _3457,_3471 )]);
              ++ _3469;
              ++ _3471;
              ++ _3466;
            }
          }
        }
      }
    }
  }
  int _3472 = _3449->alloci32(safe_add( _3466,(int)1 ));
  int _3473 = _3449->alloci64(_3465);
  int _3474 = _3449->alloci64(_3466);
  int _3475 = _3449->allocf64(_3465);
  int _3476 = _3449->allocf64(_3466);
  int _3477 = (int)1;
  int _8430 = (int)0;
  int _8431 = _3452;
  for (int _3478 = _8430; _3478 < _8431; ++_3478)
  {
    {
      _3477 *= _ptr__3462[safe_add( _3453,_3478 )];
    }
  }
  bool _3479 = (_3466 < _3477);
  int _8432;
  bool _8433 = _3479;
  if (_8433)
  {
    _8432 = (int)1;
  }
  else
  {
    _8432 = (int)0;
  }
  _3449->pushi32(_8432);
  _3449->pushi32(_3465);
  _3449->pushi32(_3466);
  int _3480 = _3449->alloci32(_3452);
  _3449->pushi32(_3452);
  std::shared_ptr< monty::ndarray< int,1 > > _3481 = mosek::fusion::p_WorkStack::_get_impl(_3449)->i32;
  _checked_ptr_1<int> _ptr__3481(_3481 ? _3481->raw() : nullptr,_3481 ? _3481->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3482 = mosek::fusion::p_WorkStack::_get_impl(_3449)->i64;
  _checked_ptr_1<long long> _ptr__3482(_3482 ? _3482->raw() : nullptr,_3482 ? _3482->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3483 = mosek::fusion::p_WorkStack::_get_impl(_3449)->f64;
  _checked_ptr_1<double> _ptr__3483(_3483 ? _3483->raw() : nullptr,_3483 ? _3483->size(0) : 0);
  {
    int _3484 = (int)0;
    int _3485 = (int)0;
    _ptr__3481[_3472] = (int)0;
    int _8434 = (int)0;
    int _8435 = _3452;
    for (int _3486 = _8434; _3486 < _8435; ++_3486)
    {
      {
        _ptr__3481[safe_add( _3480,_3486 )] = _ptr__3462[safe_add( _3453,_3486 )];
      }
    }
    if ((!_3456))
    {
      {
        int _8436 = (int)0;
        int _8437 = (int)((msp)->size(0));
        for (int _3487 = _8436; _3487 < _8437; ++_3487)
        {
          {
            int _3488 = _ptr__3462[safe_add( _3457,((*msp)(_3487)) )];
            int _3489 = _ptr__3462[safe_add( safe_add( _3457,((*msp)(_3487)) ),(int)1 )];
            int _8438 = _3488;
            int _8439 = _3489;
            for (int _3490 = _8438; _3490 < _8439; ++_3490)
            {
              {
                _ptr__3482[safe_add( _3473,_3485 )] = _ptr__3463[safe_add( _3459,_3490 )];
                _ptr__3483[safe_add( _3475,_3485 )] = (_ptr__3464[safe_add( _3461,_3490 )] * ((*mcof)(_3487)));
                ++ _3485;
              }
            }
            _ptr__3481[safe_add( safe_add( _3472,_3487 ),(int)1 )] = _3485;
            _ptr__3483[safe_add( _3476,_3487 )] = (_ptr__3464[safe_add( _3460,((*msp)(_3487)) )] * ((*mcof)(_3487)));
            _ptr__3482[safe_add( _3474,_3487 )] = ((*msp)(_3487));
          }
        }
      }
    }
    else
    {
      {
        int _3491 = (int)((msp)->size(0));
        int _3492 = (int)0;
        int _3493 = _3454;
        int _3494 = (int)0;
        while ( ((_3492 < _3491) && (_3494 < _3493)) )
        {
          {
            if ((((*msp)(_3492)) < _ptr__3463[safe_add( _3458,_3494 )]))
            {
              {
                ++ _3492;
              }
            }
            else if((((*msp)(_3492)) > _ptr__3463[safe_add( _3458,_3494 )]))
            {
              {
                ++ _3494;
              }
            }
            else
            {
              {
                int _3495 = _ptr__3462[safe_add( _3457,_3494 )];
                int _3496 = _ptr__3462[safe_add( safe_add( _3457,_3494 ),(int)1 )];
                int _8440 = _3495;
                int _8441 = _3496;
                for (int _3497 = _8440; _3497 < _8441; ++_3497)
                {
                  {
                    _ptr__3482[safe_add( _3473,_3485 )] = _ptr__3463[safe_add( _3459,_3497 )];
                    _ptr__3483[safe_add( _3473,_3485 )] = (_ptr__3464[safe_add( _3459,_3497 )] * ((*mcof)(_3492)));
                    ++ _3485;
                  }
                }
                _ptr__3481[safe_add( safe_add( _3472,_3484 ),(int)1 )] = _3485;
                _ptr__3483[safe_add( _3476,_3484 )] = (_ptr__3464[safe_add( _3460,_3494 )] * ((*mcof)(_3492)));
                _ptr__3482[safe_add( _3474,_3484 )] = ((*msp)(_3492));
                ++ _3484;
                ++ _3492;
                ++ _3494;
              }
            }
          }
        }
      }
    }
  }
  if ((!_3479))
  {
    {
      _3449->popi64(_3466);
    }
  }
  {}
}
std::string mosek::fusion::ExprMulElement :: toString() { return mosek::fusion::p_ExprMulElement::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulElement::toString(){
  return std::string ("ExprMulElement()");
}
void mosek::fusion::p_ExprMulElement::destroy(){expr.reset();msp.reset();mcof.reset();}void mosek::fusion::ExprMulElement::destroy() { mosek::fusion::p_ExprMulElement::_get_impl(this)->destroy(); }mosek::fusion::ExprMulScalarConst::ExprMulScalarConst(mosek::fusion::p_ExprMulScalarConst *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulScalarConst()" << this << std::endl; */ }mosek::fusion::ExprMulScalarConst::~ExprMulScalarConst() {  /* std::cout << "~ExprMulScalarConst()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulScalarConst::p_ExprMulScalarConst  (::mosek::fusion::ExprMulScalarConst * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulScalarConst::t mosek::fusion::p_ExprMulScalarConst::_new_ExprMulScalarConst  (double _3498,    monty::rc_ptr< ::mosek::fusion::Expression > _3499){ return new mosek::fusion::ExprMulScalarConst(_3498,_3499); }mosek::fusion::ExprMulScalarConst::ExprMulScalarConst  (double _3498,    monty::rc_ptr< ::mosek::fusion::Expression > _3499) :    ExprMulScalarConst(new mosek::fusion::p_ExprMulScalarConst(this)){ mosek::fusion::p_ExprMulScalarConst::_get_impl(this)->_initialize(_3498,_3499); }void mosek::fusion::p_ExprMulScalarConst::_initialize  (double _3498,    monty::rc_ptr< ::mosek::fusion::Expression > _3499){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_3499->getShape());
    mosek::fusion::p_ExprMulScalarConst::_get_impl(::mosek::fusion::ExprMulScalarConst::t(_pubthis))->c = _3498;
    mosek::fusion::p_ExprMulScalarConst::_get_impl(::mosek::fusion::ExprMulScalarConst::t(_pubthis))->expr = _3499;
  }
}void mosek::fusion::ExprMulScalarConst :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3500,monty::rc_ptr< ::mosek::fusion::WorkStack > _3501,monty::rc_ptr< ::mosek::fusion::WorkStack > _3502) { mosek::fusion::p_ExprMulScalarConst::_get_impl(this)->eval(_3500,_3501,_3502); }void mosek::fusion::p_ExprMulScalarConst::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3500,monty::rc_ptr< ::mosek::fusion::WorkStack > _3501,monty::rc_ptr< ::mosek::fusion::WorkStack > _3502){
  expr->eval(_3500,_3501,_3502);
  int _3503 = _3500->peeki32((int)0);
  int _3504 = _3500->peeki32(safe_add( _3503,(int)1 ));
  int _3505 = _3500->peeki32(safe_add( _3503,(int)2 ));
  int _3506 = (mosek::fusion::p_WorkStack::_get_impl(_3500)->pf64 - _3504);
  int _3507 = (_3506 - _3505);
  std::shared_ptr< monty::ndarray< double,1 > > _3508 = mosek::fusion::p_WorkStack::_get_impl(_3500)->f64;
  _checked_ptr_1<double> _ptr__3508(_3508 ? _3508->raw() : nullptr,_3508 ? _3508->size(0) : 0);
  int _8442 = (int)0;
  int _8443 = safe_add( _3505,_3504 );
  for (int _3509 = _8442; _3509 < _8443; ++_3509)
  {
    {
      _ptr__3508[safe_add( _3507,_3509 )] *= c;
    }
  }
}
std::string mosek::fusion::ExprMulScalarConst :: toString() { return mosek::fusion::p_ExprMulScalarConst::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulScalarConst::toString(){
  return std::string ("ExprMulScalarConst()");
}
void mosek::fusion::p_ExprMulScalarConst::destroy(){expr.reset();}void mosek::fusion::ExprMulScalarConst::destroy() { mosek::fusion::p_ExprMulScalarConst::_get_impl(this)->destroy(); }mosek::fusion::ExprScalarMul::ExprScalarMul(mosek::fusion::p_ExprScalarMul *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprScalarMul()" << this << std::endl; */ }mosek::fusion::ExprScalarMul::~ExprScalarMul() {  /* std::cout << "~ExprScalarMul()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprScalarMul::p_ExprScalarMul  (::mosek::fusion::ExprScalarMul * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprScalarMul::t mosek::fusion::p_ExprScalarMul::_new_ExprScalarMul  (int _3510,    int _3511,    std::shared_ptr< monty::ndarray< int,1 > > _3512,    std::shared_ptr< monty::ndarray< int,1 > > _3513,    std::shared_ptr< monty::ndarray< double,1 > > _3514,    monty::rc_ptr< ::mosek::fusion::Expression > _3515,    int _3516){ return new mosek::fusion::ExprScalarMul(_3510,_3511,_3512,_3513,_3514,_3515,_3516); }mosek::fusion::ExprScalarMul::ExprScalarMul  (int _3510,    int _3511,    std::shared_ptr< monty::ndarray< int,1 > > _3512,    std::shared_ptr< monty::ndarray< int,1 > > _3513,    std::shared_ptr< monty::ndarray< double,1 > > _3514,    monty::rc_ptr< ::mosek::fusion::Expression > _3515,    int _3516) :    ExprScalarMul(new mosek::fusion::p_ExprScalarMul(this)){ mosek::fusion::p_ExprScalarMul::_get_impl(this)->_initialize(_3510,_3511,_3512,_3513,_3514,_3515,_3516); }void mosek::fusion::p_ExprScalarMul::_initialize  (int _3510,    int _3511,    std::shared_ptr< monty::ndarray< int,1 > > _3512,    std::shared_ptr< monty::ndarray< int,1 > > _3513,    std::shared_ptr< monty::ndarray< double,1 > > _3514,    monty::rc_ptr< ::mosek::fusion::Expression > _3515,    int _3516){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__3512(_3512 ? _3512->raw() : nullptr, _3512 ? _3512->size(0) : 0);
    _checked_ptr_1<int> _ptr__3513(_3513 ? _3513->raw() : nullptr, _3513 ? _3513->size(0) : 0);
    _checked_ptr_1<double> _ptr__3514(_3514 ? _3514->raw() : nullptr, _3514 ? _3514->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3510),(int)(_3511)}));
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->mdim0 = _3510;
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->mdim1 = _3511;
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->msubi = _3512;
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->msubj = _3513;
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->mval = _3514;
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->expr = _3515;
  }
}mosek::fusion::ExprScalarMul::t mosek::fusion::p_ExprScalarMul::_new_ExprScalarMul  (int _3517,    int _3518,    std::shared_ptr< monty::ndarray< int,1 > > _3519,    std::shared_ptr< monty::ndarray< int,1 > > _3520,    std::shared_ptr< monty::ndarray< double,1 > > _3521,    monty::rc_ptr< ::mosek::fusion::Expression > _3522){ return new mosek::fusion::ExprScalarMul(_3517,_3518,_3519,_3520,_3521,_3522); }mosek::fusion::ExprScalarMul::ExprScalarMul  (int _3517,    int _3518,    std::shared_ptr< monty::ndarray< int,1 > > _3519,    std::shared_ptr< monty::ndarray< int,1 > > _3520,    std::shared_ptr< monty::ndarray< double,1 > > _3521,    monty::rc_ptr< ::mosek::fusion::Expression > _3522) :    ExprScalarMul(new mosek::fusion::p_ExprScalarMul(this)){ mosek::fusion::p_ExprScalarMul::_get_impl(this)->_initialize(_3517,_3518,_3519,_3520,_3521,_3522); }void mosek::fusion::p_ExprScalarMul::_initialize  (int _3517,    int _3518,    std::shared_ptr< monty::ndarray< int,1 > > _3519,    std::shared_ptr< monty::ndarray< int,1 > > _3520,    std::shared_ptr< monty::ndarray< double,1 > > _3521,    monty::rc_ptr< ::mosek::fusion::Expression > _3522){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__3519(_3519 ? _3519->raw() : nullptr, _3519 ? _3519->size(0) : 0);
    _checked_ptr_1<int> _ptr__3520(_3520 ? _3520->raw() : nullptr, _3520 ? _3520->size(0) : 0);
    _checked_ptr_1<double> _ptr__3521(_3521 ? _3521->raw() : nullptr, _3521 ? _3521->size(0) : 0);
    mosek::fusion::p_ExprScalarMul::_initialize(_3517,_3518,_3519,_3520,_3521,_3522,::mosek::fusion::p_ExprScalarMul::validate(_3517,_3518,_3519,_3520,_3521,_3522));
  }
}void mosek::fusion::ExprScalarMul :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3523,monty::rc_ptr< ::mosek::fusion::WorkStack > _3524,monty::rc_ptr< ::mosek::fusion::WorkStack > _3525) { mosek::fusion::p_ExprScalarMul::_get_impl(this)->eval(_3523,_3524,_3525); }void mosek::fusion::p_ExprScalarMul::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3523,monty::rc_ptr< ::mosek::fusion::WorkStack > _3524,monty::rc_ptr< ::mosek::fusion::WorkStack > _3525){
  mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->expr->eval(_3524,_3523,_3525);
  _3524->pop_expr();
  int _3526 = mosek::fusion::p_WorkStack::_get_impl(_3524)->nd;
  int _3527 = mosek::fusion::p_WorkStack::_get_impl(_3524)->nelem;
  int _3528 = mosek::fusion::p_WorkStack::_get_impl(_3524)->nnz;
  bool _3529 = mosek::fusion::p_WorkStack::_get_impl(_3524)->hassp;
  int _3530 = mosek::fusion::p_WorkStack::_get_impl(_3524)->ptr_base;
  int _3531 = mosek::fusion::p_WorkStack::_get_impl(_3524)->sp_base;
  int _3532 = mosek::fusion::p_WorkStack::_get_impl(_3524)->nidxs_base;
  int _3533 = mosek::fusion::p_WorkStack::_get_impl(_3524)->bfix_base;
  int _3534 = mosek::fusion::p_WorkStack::_get_impl(_3524)->cof_base;
  std::shared_ptr< monty::ndarray< long long,1 > > _3535 = mosek::fusion::p_WorkStack::_get_impl(_3524)->i64;
  _checked_ptr_1<long long> _ptr__3535(_3535 ? _3535->raw() : nullptr,_3535 ? _3535->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3536 = mosek::fusion::p_WorkStack::_get_impl(_3524)->f64;
  _checked_ptr_1<double> _ptr__3536(_3536 ? _3536->raw() : nullptr,_3536 ? _3536->size(0) : 0);
  int _3537 = (int)((mval)->size(0));
  if ((_3526 != (int)0))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid expression shape"));
    }
  }
  {}
  if ((_3527 == (int)0))
  {
    {
      _3523->alloc_expr((int)2,(int)0,(int)0,true);
      ((*mosek::fusion::p_WorkStack::_get_impl(_3523)->i32)(mosek::fusion::p_WorkStack::_get_impl(_3523)->shape_base)) = mdim0;
      ((*mosek::fusion::p_WorkStack::_get_impl(_3523)->i32)(safe_add( mosek::fusion::p_WorkStack::_get_impl(_3523)->shape_base,(int)1 ))) = mdim1;
    }
  }
  else
  {
    {
      _3523->alloc_expr((int)2,_3537,safe_mul( _3537,_3528 ),true);
      int _3538 = mosek::fusion::p_WorkStack::_get_impl(_3523)->ptr_base;
      int _3539 = mosek::fusion::p_WorkStack::_get_impl(_3523)->nidxs_base;
      int _3540 = mosek::fusion::p_WorkStack::_get_impl(_3523)->sp_base;
      int _3541 = mosek::fusion::p_WorkStack::_get_impl(_3523)->cof_base;
      int _3542 = mosek::fusion::p_WorkStack::_get_impl(_3523)->bfix_base;
      int _3543 = mosek::fusion::p_WorkStack::_get_impl(_3523)->shape_base;
      std::shared_ptr< monty::ndarray< int,1 > > _3544 = mosek::fusion::p_WorkStack::_get_impl(_3523)->i32;
      _checked_ptr_1<int> _ptr__3544(_3544 ? _3544->raw() : nullptr,_3544 ? _3544->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _3545 = mosek::fusion::p_WorkStack::_get_impl(_3523)->i64;
      _checked_ptr_1<long long> _ptr__3545(_3545 ? _3545->raw() : nullptr,_3545 ? _3545->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3546 = mosek::fusion::p_WorkStack::_get_impl(_3523)->f64;
      _checked_ptr_1<double> _ptr__3546(_3546 ? _3546->raw() : nullptr,_3546 ? _3546->size(0) : 0);
      _ptr__3544[_3543] = mdim0;
      _ptr__3544[safe_add( _3543,(int)1 )] = mdim1;
      int _3547 = (int)0;
      _ptr__3544[_3538] = (int)0;
      int _8444 = (int)0;
      int _8445 = _3537;
      for (int _3548 = _8444; _3548 < _8445; ++_3548)
      {
        {
          int _8446 = (int)0;
          int _8447 = _3528;
          for (int _3549 = _8446; _3549 < _8447; ++_3549)
          {
            {
              _ptr__3545[safe_add( _3539,_3547 )] = _ptr__3535[safe_add( _3532,_3549 )];
              _ptr__3546[safe_add( _3541,_3547 )] = (_ptr__3536[safe_add( _3534,_3549 )] * ((*mval)(_3548)));
              ++ _3547;
            }
          }
          _ptr__3545[safe_add( _3540,_3548 )] = safe_add( safe_mul( ((*msubi)(_3548)),mdim1 ),((*msubj)(_3548)) );
          _ptr__3546[safe_add( _3542,_3548 )] = (((*mval)(_3548)) * _ptr__3536[_3533]);
          _ptr__3544[safe_add( safe_add( _3538,_3548 ),(int)1 )] = _3547;
        }
      }
    }
  }
}
int mosek::fusion::p_ExprScalarMul::validate(int _3550,int _3551,std::shared_ptr< monty::ndarray< int,1 > > _3552,std::shared_ptr< monty::ndarray< int,1 > > _3553,std::shared_ptr< monty::ndarray< double,1 > > _3554,monty::rc_ptr< ::mosek::fusion::Expression > _3555){
  _checked_ptr_1<int> _ptr__3552(_3552 ? _3552->raw() : nullptr, _3552 ? _3552->size(0) : 0);
  _checked_ptr_1<int> _ptr__3553(_3553 ? _3553->raw() : nullptr, _3553 ? _3553->size(0) : 0);
  _checked_ptr_1<double> _ptr__3554(_3554 ? _3554->raw() : nullptr, _3554 ? _3554->size(0) : 0);
  int _3556 = _3555->getND();
  if ((_3556 != (int)0))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if (((_3550 < (int)0) || (_3551 < (int)0)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if ((((int)((_3552)->size(0)) != (int)((_3553)->size(0))) || ((int)((_3552)->size(0)) != (int)((_3554)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  int _3557 = (int)((_3552)->size(0));
  bool _3558 = false;
  bool _3559 = false;
  {
    int _8448 = (int)0;
    int _8449 = _3557;
    for (int _3560 = _8448; _3560 < _8449; ++_3560)
    {
      {
        if (((_ptr__3552[_3560] < (int)0) || ((_ptr__3552[_3560] >= _3550) || ((_ptr__3553[_3560] < (int)0) || (_ptr__3553[_3560] >= _3551)))))
        {
          {
            _3558 = true;
          }
        }
        {}
      }
    }
    int _8450 = (int)0;
    int _8451 = (_3557 - (int)1);
    for (int _3561 = _8450; _3561 < _8451; ++_3561)
    {
      {
        if (((_ptr__3552[_3561] > _ptr__3552[safe_add( _3561,(int)1 )]) || ((_ptr__3552[_3561] == _ptr__3552[safe_add( _3561,(int)1 )]) && (_ptr__3553[_3561] >= _ptr__3553[safe_add( _3561,(int)1 )]))))
        {
          {
            _3559 = true;
          }
        }
        {}
      }
    }
  }
  if (_3558)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  if (_3559)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Unsorted matrix data"));
    }
  }
  {}
  return (int)1;
}
std::string mosek::fusion::ExprScalarMul :: toString() { return mosek::fusion::p_ExprScalarMul::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprScalarMul::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprScalarMul(M,"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprScalarMul::destroy(){expr.reset();mval.reset();msubj.reset();msubi.reset();}void mosek::fusion::ExprScalarMul::destroy() { mosek::fusion::p_ExprScalarMul::_get_impl(this)->destroy(); }mosek::fusion::ExprMulRight::ExprMulRight(mosek::fusion::p_ExprMulRight *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulRight()" << this << std::endl; */ }mosek::fusion::ExprMulRight::~ExprMulRight() {  /* std::cout << "~ExprMulRight()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulRight::p_ExprMulRight  (::mosek::fusion::ExprMulRight * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulRight::t mosek::fusion::p_ExprMulRight::_new_ExprMulRight  (int _3562,    int _3563,    std::shared_ptr< monty::ndarray< int,1 > > _3564,    std::shared_ptr< monty::ndarray< int,1 > > _3565,    std::shared_ptr< monty::ndarray< double,1 > > _3566,    monty::rc_ptr< ::mosek::fusion::Expression > _3567,    int _3568){ return new mosek::fusion::ExprMulRight(_3562,_3563,_3564,_3565,_3566,_3567,_3568); }mosek::fusion::ExprMulRight::ExprMulRight  (int _3562,    int _3563,    std::shared_ptr< monty::ndarray< int,1 > > _3564,    std::shared_ptr< monty::ndarray< int,1 > > _3565,    std::shared_ptr< monty::ndarray< double,1 > > _3566,    monty::rc_ptr< ::mosek::fusion::Expression > _3567,    int _3568) :    ExprMulRight(new mosek::fusion::p_ExprMulRight(this)){ mosek::fusion::p_ExprMulRight::_get_impl(this)->_initialize(_3562,_3563,_3564,_3565,_3566,_3567,_3568); }void mosek::fusion::p_ExprMulRight::_initialize  (int _3562,    int _3563,    std::shared_ptr< monty::ndarray< int,1 > > _3564,    std::shared_ptr< monty::ndarray< int,1 > > _3565,    std::shared_ptr< monty::ndarray< double,1 > > _3566,    monty::rc_ptr< ::mosek::fusion::Expression > _3567,    int _3568){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__3564(_3564 ? _3564->raw() : nullptr, _3564 ? _3564->size(0) : 0);
    _checked_ptr_1<int> _ptr__3565(_3565 ? _3565->raw() : nullptr, _3565 ? _3565->size(0) : 0);
    _checked_ptr_1<double> _ptr__3566(_3566 ? _3566->raw() : nullptr, _3566 ? _3566->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprMulRight::computeshape(_3563,_3567->getShape()));
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->mdim0 = _3562;
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->mdim1 = _3563;
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->msubi = _3564;
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->msubj = _3565;
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->mval = _3566;
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->expr = _3567;
  }
}mosek::fusion::ExprMulRight::t mosek::fusion::p_ExprMulRight::_new_ExprMulRight  (int _3569,    int _3570,    std::shared_ptr< monty::ndarray< int,1 > > _3571,    std::shared_ptr< monty::ndarray< int,1 > > _3572,    std::shared_ptr< monty::ndarray< double,1 > > _3573,    monty::rc_ptr< ::mosek::fusion::Expression > _3574){ return new mosek::fusion::ExprMulRight(_3569,_3570,_3571,_3572,_3573,_3574); }mosek::fusion::ExprMulRight::ExprMulRight  (int _3569,    int _3570,    std::shared_ptr< monty::ndarray< int,1 > > _3571,    std::shared_ptr< monty::ndarray< int,1 > > _3572,    std::shared_ptr< monty::ndarray< double,1 > > _3573,    monty::rc_ptr< ::mosek::fusion::Expression > _3574) :    ExprMulRight(new mosek::fusion::p_ExprMulRight(this)){ mosek::fusion::p_ExprMulRight::_get_impl(this)->_initialize(_3569,_3570,_3571,_3572,_3573,_3574); }void mosek::fusion::p_ExprMulRight::_initialize  (int _3569,    int _3570,    std::shared_ptr< monty::ndarray< int,1 > > _3571,    std::shared_ptr< monty::ndarray< int,1 > > _3572,    std::shared_ptr< monty::ndarray< double,1 > > _3573,    monty::rc_ptr< ::mosek::fusion::Expression > _3574){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__3571(_3571 ? _3571->raw() : nullptr, _3571 ? _3571->size(0) : 0);
    _checked_ptr_1<int> _ptr__3572(_3572 ? _3572->raw() : nullptr, _3572 ? _3572->size(0) : 0);
    _checked_ptr_1<double> _ptr__3573(_3573 ? _3573->raw() : nullptr, _3573 ? _3573->size(0) : 0);
    mosek::fusion::p_ExprMulRight::_initialize(_3569,_3570,_3571,_3572,_3573,_3574,::mosek::fusion::p_ExprMulRight::validate(_3569,_3570,_3571,_3572,_3573,_3574));
  }
}void mosek::fusion::ExprMulRight :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3575,monty::rc_ptr< ::mosek::fusion::WorkStack > _3576,monty::rc_ptr< ::mosek::fusion::WorkStack > _3577) { mosek::fusion::p_ExprMulRight::_get_impl(this)->eval(_3575,_3576,_3577); }void mosek::fusion::p_ExprMulRight::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3575,monty::rc_ptr< ::mosek::fusion::WorkStack > _3576,monty::rc_ptr< ::mosek::fusion::WorkStack > _3577){
  mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->expr->eval(_3576,_3575,_3577);
  _3576->peek_expr();
  int _3578 = mosek::fusion::p_WorkStack::_get_impl(_3576)->nd;
  bool _3579 = mosek::fusion::p_WorkStack::_get_impl(_3576)->hassp;
  int _3580 = (int)((mval)->size(0));
  bool _3581 = (_3580 < safe_mul( (long long)mdim0,(long long)mdim1 ));
  int _3582 = ((*mosek::fusion::p_WorkStack::_get_impl(_3576)->i32)(mosek::fusion::p_WorkStack::_get_impl(_3576)->shape_base));
  if (_3581)
  {
    {
      int _3583 = _3577->alloci32(safe_add( mdim1,(int)1 ));
      int _3584 = _3577->alloci32(_3580);
      int _3585 = _3577->alloci32(safe_add( _3582,(int)1 ));
      std::shared_ptr< monty::ndarray< int,1 > > _3586 = mosek::fusion::p_WorkStack::_get_impl(_3577)->i32;
      _checked_ptr_1<int> _ptr__3586(_3586 ? _3586->raw() : nullptr,_3586 ? _3586->size(0) : 0);
      int _8452 = (int)0;
      int _8453 = safe_add( mdim1,(int)1 );
      for (int _3587 = _8452; _3587 < _8453; ++_3587)
      {
        {
          _ptr__3586[safe_add( _3583,_3587 )] = (int)0;
        }
      }
      int _8454 = (int)0;
      int _8455 = _3580;
      for (int _3588 = _8454; _3588 < _8455; ++_3588)
      {
        {
          ++ _ptr__3586[safe_add( safe_add( _3583,((*msubj)(_3588)) ),(int)1 )];
        }
      }
      int _8456 = (int)0;
      int _8457 = mdim1;
      for (int _3589 = _8456; _3589 < _8457; ++_3589)
      {
        {
          _ptr__3586[safe_add( safe_add( _3583,_3589 ),(int)1 )] += _ptr__3586[safe_add( _3583,_3589 )];
        }
      }
      int _8458 = (int)0;
      int _8459 = _3580;
      for (int _3590 = _8458; _3590 < _8459; ++_3590)
      {
        {
          _ptr__3586[safe_add( _3584,_3590 )] = _ptr__3586[safe_add( _3583,((*msubj)(_3590)) )];
          ++ _ptr__3586[safe_add( _3583,((*msubj)(_3590)) )];
        }
      }
      int _8460 = (int)0;
      int _8461 = mdim1;
      for (int _3591 = _8460; _3591 < _8461; ++_3591)
      {
        {
          _ptr__3586[(safe_add( _3583,mdim1 ) - _3591)] = _ptr__3586[((safe_add( _3583,mdim1 ) - _3591) - (int)1)];
        }
      }
      _ptr__3586[_3583] = (int)0;
      int _8462 = (int)0;
      int _8463 = safe_add( _3582,(int)1 );
      for (int _3592 = _8462; _3592 < _8463; ++_3592)
      {
        {
          _ptr__3586[safe_add( _3585,_3592 )] = (int)0;
        }
      }
      _3576->pop_expr();
      std::shared_ptr< monty::ndarray< int,1 > > _3593 = mosek::fusion::p_WorkStack::_get_impl(_3576)->i32;
      _checked_ptr_1<int> _ptr__3593(_3593 ? _3593->raw() : nullptr,_3593 ? _3593->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _3594 = mosek::fusion::p_WorkStack::_get_impl(_3576)->i64;
      _checked_ptr_1<long long> _ptr__3594(_3594 ? _3594->raw() : nullptr,_3594 ? _3594->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3595 = mosek::fusion::p_WorkStack::_get_impl(_3576)->f64;
      _checked_ptr_1<double> _ptr__3595(_3595 ? _3595->raw() : nullptr,_3595 ? _3595->size(0) : 0);
      int _3596 = mosek::fusion::p_WorkStack::_get_impl(_3576)->nd;
      if ((_3596 != (int)2))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid operator shape for multiplication"));
        }
      }
      {}
      int _3597 = ((*mosek::fusion::p_WorkStack::_get_impl(_3576)->i32)(mosek::fusion::p_WorkStack::_get_impl(_3576)->shape_base));
      int _3598 = ((*mosek::fusion::p_WorkStack::_get_impl(_3576)->i32)(safe_add( mosek::fusion::p_WorkStack::_get_impl(_3576)->shape_base,(int)1 )));
      int _3599 = mosek::fusion::p_WorkStack::_get_impl(_3576)->nelem;
      int _3600 = mosek::fusion::p_WorkStack::_get_impl(_3576)->nnz;
      int _3601 = mosek::fusion::p_WorkStack::_get_impl(_3576)->ptr_base;
      int _3602 = mosek::fusion::p_WorkStack::_get_impl(_3576)->sp_base;
      int _3603 = mosek::fusion::p_WorkStack::_get_impl(_3576)->nidxs_base;
      int _3604 = mosek::fusion::p_WorkStack::_get_impl(_3576)->bfix_base;
      int _3605 = mosek::fusion::p_WorkStack::_get_impl(_3576)->cof_base;
      if (_3579)
      {
        {
          int _8464 = (int)0;
          int _8465 = _3599;
          for (int _3606 = _8464; _3606 < _8465; ++_3606)
          {
            {
              ++ _ptr__3586[safe_add( safe_add( _3585,(_ptr__3594[safe_add( _3602,_3606 )] / _3598) ),(int)1 )];
            }
          }
          int _8466 = (int)0;
          int _8467 = _3597;
          for (int _3607 = _8466; _3607 < _8467; ++_3607)
          {
            {
              _ptr__3586[safe_add( safe_add( _3585,_3607 ),(int)1 )] += _ptr__3586[safe_add( _3585,_3607 )];
            }
          }
          int _3608 = (int)0;
          long long _3609 = (long long)0;
          int _8468 = (int)0;
          int _8469 = _3597;
          for (int _3610 = _8468; _3610 < _8469; ++_3610)
          {
            {
              int _8470 = (int)0;
              int _8471 = mdim1;
              for (int _3611 = _8470; _3611 < _8471; ++_3611)
              {
                {
                  bool _3612 = false;
                  int _3613 = _ptr__3586[safe_add( safe_add( _3585,_3610 ),(int)1 )];
                  int _3614 = _ptr__3586[safe_add( _3585,_3610 )];
                  int _3615 = _ptr__3586[safe_add( safe_add( _3583,_3611 ),(int)1 )];
                  int _3616 = _ptr__3586[safe_add( _3583,_3611 )];
                  while ( ((_3614 < _3613) && (_3616 < _3615)) )
                  {
                    {
                      int _3617 = _ptr__3586[safe_add( _3584,_3616 )];
                      if (((_ptr__3594[safe_add( _3602,_3614 )] % _3598) < ((*msubi)(_3617))))
                      {
                        {
                          ++ _3614;
                        }
                      }
                      else if(((_ptr__3594[safe_add( _3602,_3614 )] % _3598) > ((*msubi)(_3617))))
                      {
                        {
                          ++ _3616;
                        }
                      }
                      else
                      {
                        {
                          _3609 += (_ptr__3593[safe_add( safe_add( _3601,_3614 ),(int)1 )] - _ptr__3593[safe_add( _3601,_3614 )]);
                          ++ _3614;
                          ++ _3616;
                          _3612 = true;
                        }
                      }
                    }
                  }
                  if (_3612)
                  {
                    {
                      ++ _3608;
                    }
                  }
                  {}
                }
              }
            }
          }
          bool _3618 = (_3608 < safe_mul( _3597,mdim1 ));
          _3575->alloc_expr((int)2,_3608,(int)_3609,_3618);
          int _3619 = mosek::fusion::p_WorkStack::_get_impl(_3575)->ptr_base;
          int _3620 = mosek::fusion::p_WorkStack::_get_impl(_3575)->nidxs_base;
          int _8472;
          bool _8473 = _3618;
          if (_8473)
          {
            _8472 = mosek::fusion::p_WorkStack::_get_impl(_3575)->sp_base;
          }
          else
          {
            _8472 = _3575->alloci64(_3608);
          }
          int _3621 = _8472;
          int _3622 = mosek::fusion::p_WorkStack::_get_impl(_3575)->cof_base;
          int _3623 = mosek::fusion::p_WorkStack::_get_impl(_3575)->bfix_base;
          int _3624 = mosek::fusion::p_WorkStack::_get_impl(_3575)->shape_base;
          std::shared_ptr< monty::ndarray< int,1 > > _3625 = mosek::fusion::p_WorkStack::_get_impl(_3575)->i32;
          _checked_ptr_1<int> _ptr__3625(_3625 ? _3625->raw() : nullptr,_3625 ? _3625->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _3626 = mosek::fusion::p_WorkStack::_get_impl(_3575)->i64;
          _checked_ptr_1<long long> _ptr__3626(_3626 ? _3626->raw() : nullptr,_3626 ? _3626->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _3627 = mosek::fusion::p_WorkStack::_get_impl(_3575)->f64;
          _checked_ptr_1<double> _ptr__3627(_3627 ? _3627->raw() : nullptr,_3627 ? _3627->size(0) : 0);
          _ptr__3625[_3624] = _3597;
          _ptr__3625[safe_add( _3624,(int)1 )] = mdim1;
          int _3628 = (int)0;
          int _3629 = (int)0;
          _ptr__3625[_3619] = (int)0;
          int _8474 = (int)0;
          int _8475 = _3597;
          for (int _3630 = _8474; _3630 < _8475; ++_3630)
          {
            {
              int _8476 = (int)0;
              int _8477 = mdim1;
              for (int _3631 = _8476; _3631 < _8477; ++_3631)
              {
                {
                  double _3632 = 0.0;
                  int _3633 = (int)0;
                  int _3634 = _ptr__3586[safe_add( safe_add( _3585,_3630 ),(int)1 )];
                  int _3635 = _ptr__3586[safe_add( _3585,_3630 )];
                  int _3636 = _ptr__3586[safe_add( safe_add( _3583,_3631 ),(int)1 )];
                  int _3637 = _ptr__3586[safe_add( _3583,_3631 )];
                  while ( ((_3635 < _3634) && (_3637 < _3636)) )
                  {
                    {
                      int _3638 = _ptr__3586[safe_add( _3584,_3637 )];
                      if (((_ptr__3594[safe_add( _3602,_3635 )] % _3598) < ((*msubi)(_3638))))
                      {
                        {
                          ++ _3635;
                        }
                      }
                      else if(((_ptr__3594[safe_add( _3602,_3635 )] % _3598) > ((*msubi)(_3638))))
                      {
                        {
                          ++ _3637;
                        }
                      }
                      else
                      {
                        {
                          int _3639 = (_ptr__3593[safe_add( safe_add( _3601,_3635 ),(int)1 )] - _ptr__3593[safe_add( _3601,_3635 )]);
                          _3632 += (((*mval)(_3638)) * _ptr__3595[safe_add( _3604,_3635 )]);
                          int _8478 = (int)0;
                          int _8479 = _3639;
                          for (int _3640 = _8478; _3640 < _8479; ++_3640)
                          {
                            {
                              _ptr__3626[safe_add( safe_add( _3620,_3629 ),_3640 )] = _ptr__3594[safe_add( safe_add( _3603,_ptr__3593[safe_add( _3601,_3635 )] ),_3640 )];
                            }
                          }
                          int _8480 = (int)0;
                          int _8481 = _3639;
                          for (int _3641 = _8480; _3641 < _8481; ++_3641)
                          {
                            {
                              _ptr__3627[safe_add( safe_add( _3622,_3629 ),_3641 )] = (_ptr__3595[safe_add( safe_add( _3605,_ptr__3593[safe_add( _3601,_3635 )] ),_3641 )] * ((*mval)(_3638)));
                            }
                          }
                          _3633 += _3639;
                          ++ _3635;
                          ++ _3637;
                        }
                      }
                    }
                  }
                  if ((_3633 > (int)0))
                  {
                    {
                      _3629 += _3633;
                      _ptr__3625[safe_add( safe_add( _3619,_3628 ),(int)1 )] = _3629;
                      _ptr__3627[safe_add( _3623,_3628 )] = _3632;
                      _ptr__3626[safe_add( _3621,_3628 )] = safe_add( safe_mul( _3630,mdim1 ),_3631 );
                      ++ _3628;
                    }
                  }
                  {}
                }
              }
            }
          }
          if ((!_3618))
          {
            {
              _3575->popi64(_3608);
            }
          }
          {}
        }
      }
      else
      {
        {
          int _3642 = safe_mul( _3597,mdim1 );
          int _3643 = (int)0;
          int _8482 = (int)0;
          int _8483 = _3597;
          for (int _3644 = _8482; _3644 < _8483; ++_3644)
          {
            {
              int _8484 = (int)0;
              int _8485 = mdim1;
              for (int _3645 = _8484; _3645 < _8485; ++_3645)
              {
                {
                  int _8486 = _ptr__3586[safe_add( _3583,_3645 )];
                  int _8487 = _ptr__3586[safe_add( safe_add( _3583,_3645 ),(int)1 )];
                  for (int _3646 = _8486; _3646 < _8487; ++_3646)
                  {
                    {
                      int _3647 = _ptr__3586[safe_add( _3584,_3646 )];
                      int _3648 = safe_add( safe_mul( _3644,_3598 ),((*msubi)(_3647)) );
                      _3643 += (_ptr__3593[safe_add( safe_add( _3601,_3648 ),(int)1 )] - _ptr__3593[safe_add( _3601,_3648 )]);
                    }
                  }
                }
              }
            }
          }
          bool _3649 = (_3642 < safe_mul( _3597,mdim1 ));
          if ((!(_3643 <= (int)0x7fffffff)))
          {
            {
              throw ::mosek::fusion::LengthError(std::string ("Maximum number of nonzeros exceede in multiplication"));
            }
          }
          {}
          _3575->alloc_expr((int)2,_3642,(int)_3643,_3649);
          int _3650 = mosek::fusion::p_WorkStack::_get_impl(_3575)->ptr_base;
          int _3651 = mosek::fusion::p_WorkStack::_get_impl(_3575)->nidxs_base;
          int _8488;
          bool _8489 = _3649;
          if (_8489)
          {
            _8488 = mosek::fusion::p_WorkStack::_get_impl(_3575)->sp_base;
          }
          else
          {
            _8488 = _3575->alloci64(_3642);
          }
          int _3652 = _8488;
          int _3653 = mosek::fusion::p_WorkStack::_get_impl(_3575)->cof_base;
          int _3654 = mosek::fusion::p_WorkStack::_get_impl(_3575)->bfix_base;
          std::shared_ptr< monty::ndarray< int,1 > > _3655 = mosek::fusion::p_WorkStack::_get_impl(_3575)->i32;
          _checked_ptr_1<int> _ptr__3655(_3655 ? _3655->raw() : nullptr,_3655 ? _3655->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _3656 = mosek::fusion::p_WorkStack::_get_impl(_3575)->i64;
          _checked_ptr_1<long long> _ptr__3656(_3656 ? _3656->raw() : nullptr,_3656 ? _3656->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _3657 = mosek::fusion::p_WorkStack::_get_impl(_3575)->f64;
          _checked_ptr_1<double> _ptr__3657(_3657 ? _3657->raw() : nullptr,_3657 ? _3657->size(0) : 0);
          int _3658 = (int)0;
          int _3659 = (int)0;
          _ptr__3655[_3650] = (int)0;
          int _8490 = (int)0;
          int _8491 = _3597;
          for (int _3660 = _8490; _3660 < _8491; ++_3660)
          {
            {
              int _8492 = (int)0;
              int _8493 = mdim1;
              for (int _3661 = _8492; _3661 < _8493; ++_3661)
              {
                {
                  int _3662 = safe_mul( _3660,_3598 );
                  double _3663 = 0.0;
                  int _8494 = _ptr__3586[safe_add( _3583,_3661 )];
                  int _8495 = _ptr__3586[safe_add( safe_add( _3583,_3661 ),(int)1 )];
                  for (int _3664 = _8494; _3664 < _8495; ++_3664)
                  {
                    {
                      int _3665 = _ptr__3586[safe_add( _3584,_3664 )];
                      int _3666 = safe_add( _3662,((*msubi)(_3665)) );
                      int _3667 = _ptr__3593[safe_add( _3601,_3666 )];
                      int _3668 = (_ptr__3593[safe_add( safe_add( _3601,_3666 ),(int)1 )] - _ptr__3593[safe_add( _3601,_3666 )]);
                      int _8496 = (int)0;
                      int _8497 = _3668;
                      for (int _3669 = _8496; _3669 < _8497; ++_3669)
                      {
                        {
                          _ptr__3656[safe_add( safe_add( _3651,_3659 ),_3669 )] = _ptr__3594[safe_add( safe_add( _3603,_3667 ),_3669 )];
                        }
                      }
                      int _8498 = (int)0;
                      int _8499 = _3668;
                      for (int _3670 = _8498; _3670 < _8499; ++_3670)
                      {
                        {
                          _ptr__3657[safe_add( safe_add( _3653,_3659 ),_3670 )] = (_ptr__3595[safe_add( safe_add( _3605,_3667 ),_3670 )] * ((*mval)(_3665)));
                        }
                      }
                      _3663 += (_ptr__3595[safe_add( safe_add( _3604,_3662 ),((*msubi)(_3665)) )] * ((*mval)(_3665)));
                      _3659 += _3668;
                    }
                  }
                  _ptr__3655[safe_add( safe_add( _3650,_3658 ),(int)1 )] = _3659;
                  _ptr__3657[safe_add( _3654,_3658 )] = _3663;
                  _ptr__3656[safe_add( _3652,_3658 )] = safe_add( safe_mul( _3660,mdim1 ),_3661 );
                  ++ _3658;
                }
              }
            }
          }
          if ((!_3649))
          {
            {
              _3575->popi64(_3642);
            }
          }
          {}
        }
      }
      _3577->clear();
    }
  }
  else
  {
    {
      int _3671 = _3577->alloci32(safe_add( _3582,(int)1 ));
      std::shared_ptr< monty::ndarray< int,1 > > _3672 = mosek::fusion::p_WorkStack::_get_impl(_3577)->i32;
      _checked_ptr_1<int> _ptr__3672(_3672 ? _3672->raw() : nullptr,_3672 ? _3672->size(0) : 0);
      int _8500 = (int)0;
      int _8501 = safe_add( _3582,(int)1 );
      for (int _3673 = _8500; _3673 < _8501; ++_3673)
      {
        {
          _ptr__3672[safe_add( _3671,_3673 )] = (int)0;
        }
      }
      _3576->pop_expr();
      std::shared_ptr< monty::ndarray< int,1 > > _3674 = mosek::fusion::p_WorkStack::_get_impl(_3576)->i32;
      _checked_ptr_1<int> _ptr__3674(_3674 ? _3674->raw() : nullptr,_3674 ? _3674->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _3675 = mosek::fusion::p_WorkStack::_get_impl(_3576)->i64;
      _checked_ptr_1<long long> _ptr__3675(_3675 ? _3675->raw() : nullptr,_3675 ? _3675->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3676 = mosek::fusion::p_WorkStack::_get_impl(_3576)->f64;
      _checked_ptr_1<double> _ptr__3676(_3676 ? _3676->raw() : nullptr,_3676 ? _3676->size(0) : 0);
      int _3677 = mosek::fusion::p_WorkStack::_get_impl(_3576)->nd;
      int _3678 = mosek::fusion::p_WorkStack::_get_impl(_3576)->nelem;
      int _3679 = mosek::fusion::p_WorkStack::_get_impl(_3576)->nnz;
      bool _3680 = mosek::fusion::p_WorkStack::_get_impl(_3576)->hassp;
      int _3681 = _3679;
      int _3682 = _3678;
      int _3683 = mosek::fusion::p_WorkStack::_get_impl(_3576)->shape_base;
      int _3684 = mosek::fusion::p_WorkStack::_get_impl(_3576)->ptr_base;
      int _3685 = mosek::fusion::p_WorkStack::_get_impl(_3576)->sp_base;
      int _3686 = mosek::fusion::p_WorkStack::_get_impl(_3576)->nidxs_base;
      int _3687 = mosek::fusion::p_WorkStack::_get_impl(_3576)->bfix_base;
      int _3688 = mosek::fusion::p_WorkStack::_get_impl(_3576)->cof_base;
      int _3689 = _ptr__3674[_3683];
      int _3690 = _ptr__3674[safe_add( _3683,(int)1 )];
      if ((_3677 != (int)2))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid operator shape for multiplication"));
        }
      }
      {}
      std::shared_ptr< monty::ndarray< int,1 > > _3691 = mosek::fusion::p_WorkStack::_get_impl(_3576)->i32;
      _checked_ptr_1<int> _ptr__3691(_3691 ? _3691->raw() : nullptr,_3691 ? _3691->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _3692 = mosek::fusion::p_WorkStack::_get_impl(_3576)->i64;
      _checked_ptr_1<long long> _ptr__3692(_3692 ? _3692->raw() : nullptr,_3692 ? _3692->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3693 = mosek::fusion::p_WorkStack::_get_impl(_3576)->f64;
      _checked_ptr_1<double> _ptr__3693(_3693 ? _3693->raw() : nullptr,_3693 ? _3693->size(0) : 0);
      int _3694 = safe_mul( _3689,mdim1 );
      long long _3695 = safe_mul( (long long)_3679,mdim1 );
      bool _3696 = false;
      int _3697 = (int)2;
      if ((!(_3695 <= (int)0x7fffffff)))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Maximum number of nonzeros exceede in multiplication"));
        }
      }
      {}
      _3575->alloc_expr(_3697,_3694,(int)_3695,_3696);
      std::shared_ptr< monty::ndarray< int,1 > > _3698 = mosek::fusion::p_WorkStack::_get_impl(_3575)->i32;
      _checked_ptr_1<int> _ptr__3698(_3698 ? _3698->raw() : nullptr,_3698 ? _3698->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _3699 = mosek::fusion::p_WorkStack::_get_impl(_3575)->i64;
      _checked_ptr_1<long long> _ptr__3699(_3699 ? _3699->raw() : nullptr,_3699 ? _3699->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3700 = mosek::fusion::p_WorkStack::_get_impl(_3575)->f64;
      _checked_ptr_1<double> _ptr__3700(_3700 ? _3700->raw() : nullptr,_3700 ? _3700->size(0) : 0);
      int _3701 = mosek::fusion::p_WorkStack::_get_impl(_3575)->shape_base;
      int _3702 = mosek::fusion::p_WorkStack::_get_impl(_3575)->ptr_base;
      int _3703 = mosek::fusion::p_WorkStack::_get_impl(_3575)->nidxs_base;
      int _3704 = mosek::fusion::p_WorkStack::_get_impl(_3575)->sp_base;
      int _3705 = mosek::fusion::p_WorkStack::_get_impl(_3575)->cof_base;
      int _3706 = mosek::fusion::p_WorkStack::_get_impl(_3575)->bfix_base;
      _ptr__3698[_3701] = _3689;
      _ptr__3698[safe_add( _3701,(int)1 )] = mdim1;
      int _3707 = (int)0;
      int _3708 = (int)0;
      _ptr__3698[_3702] = (int)0;
      if (_3680)
      {
        {
          int _8502 = (int)0;
          int _8503 = _3678;
          for (int _3709 = _8502; _3709 < _8503; ++_3709)
          {
            {
              ++ _ptr__3672[safe_add( safe_add( _3671,(_ptr__3692[safe_add( _3685,_3709 )] / _3690) ),(int)1 )];
            }
          }
          int _8504 = (int)0;
          int _8505 = _3689;
          for (int _3710 = _8504; _3710 < _8505; ++_3710)
          {
            {
              _ptr__3672[safe_add( safe_add( _3671,_3710 ),(int)1 )] += _ptr__3672[safe_add( _3671,_3710 )];
            }
          }
          int _8506 = (int)0;
          int _8507 = _3689;
          for (int _3711 = _8506; _3711 < _8507; ++_3711)
          {
            {
              int _8508 = (int)0;
              int _8509 = mdim1;
              for (int _3712 = _8508; _3712 < _8509; ++_3712)
              {
                {
                  double _3713 = 0.0;
                  int _3714 = (int)0;
                  int _8510 = _ptr__3672[safe_add( _3671,_3711 )];
                  int _8511 = _ptr__3672[safe_add( safe_add( _3671,_3711 ),(int)1 )];
                  for (int _3715 = _8510; _3715 < _8511; ++_3715)
                  {
                    {
                      long long _3716 = safe_add( _3712,safe_mul( (_ptr__3692[safe_add( _3685,_3715 )] % _3690),mdim1 ) );
                      _3713 += (_ptr__3693[safe_add( _3687,_3715 )] * ((*mval)(_3716)));
                      int _8512 = _ptr__3691[safe_add( _3684,_3715 )];
                      int _8513 = _ptr__3691[safe_add( safe_add( _3684,_3715 ),(int)1 )];
                      for (int _3717 = _8512; _3717 < _8513; ++_3717)
                      {
                        {
                          _ptr__3699[safe_add( safe_add( _3703,_3707 ),_3714 )] = _ptr__3692[safe_add( _3686,_3717 )];
                          _ptr__3700[safe_add( safe_add( _3705,_3707 ),_3714 )] = (_ptr__3693[safe_add( _3688,_3717 )] * ((*mval)(_3716)));
                          ++ _3714;
                        }
                      }
                    }
                  }
                  _3707 += _3714;
                  _ptr__3698[safe_add( safe_add( _3702,_3708 ),(int)1 )] = _3707;
                  _ptr__3700[safe_add( _3706,_3708 )] = _3713;
                  ++ _3708;
                }
              }
            }
          }
        }
      }
      else
      {
        {
          int _8514 = (int)0;
          int _8515 = _3689;
          for (int _3718 = _8514; _3718 < _8515; ++_3718)
          {
            {
              int _8516 = (int)0;
              int _8517 = mdim1;
              for (int _3719 = _8516; _3719 < _8517; ++_3719)
              {
                {
                  double _3720 = 0.0;
                  int _3721 = (int)0;
                  int _8518 = (int)0;
                  int _8519 = _3690;
                  for (int _3722 = _8518; _3722 < _8519; ++_3722)
                  {
                    {
                      int _3723 = safe_add( safe_mul( _3718,_3690 ),_3722 );
                      int _3724 = safe_add( _3719,safe_mul( _3722,mdim1 ) );
                      _3720 += (_ptr__3693[safe_add( _3687,_3723 )] * ((*mval)(_3724)));
                      int _8520 = _ptr__3691[safe_add( _3684,_3723 )];
                      int _8521 = _ptr__3691[safe_add( safe_add( _3684,_3723 ),(int)1 )];
                      for (int _3725 = _8520; _3725 < _8521; ++_3725)
                      {
                        {
                          _ptr__3699[safe_add( safe_add( _3703,_3707 ),_3721 )] = _ptr__3692[safe_add( _3686,_3725 )];
                          _ptr__3700[safe_add( safe_add( _3705,_3707 ),_3721 )] = (_ptr__3693[safe_add( _3688,_3725 )] * ((*mval)(_3724)));
                          ++ _3721;
                        }
                      }
                    }
                  }
                  _3707 += _3721;
                  _ptr__3698[safe_add( safe_add( _3702,_3708 ),(int)1 )] = _3707;
                  _ptr__3700[safe_add( _3706,_3708 )] = _3720;
                  ++ _3708;
                }
              }
            }
          }
        }
      }
      _3577->clear();
    }
  }
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprMulRight::computeshape(int _3726,std::shared_ptr< monty::ndarray< int,1 > > _3727){
  _checked_ptr_1<int> _ptr__3727(_3727 ? _3727->raw() : nullptr, _3727 ? _3727->size(0) : 0);
  if (((int)((_3727)->size(0)) == (int)1))
  {
    {
      return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(_3726)});
    }
  }
  else
  {
    {
      return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__3727[(int)0]),(int)(_3726)});
    }
  }
}
int mosek::fusion::p_ExprMulRight::validate(int _3728,int _3729,std::shared_ptr< monty::ndarray< int,1 > > _3730,std::shared_ptr< monty::ndarray< int,1 > > _3731,std::shared_ptr< monty::ndarray< double,1 > > _3732,monty::rc_ptr< ::mosek::fusion::Expression > _3733){
  _checked_ptr_1<int> _ptr__3730(_3730 ? _3730->raw() : nullptr, _3730 ? _3730->size(0) : 0);
  _checked_ptr_1<int> _ptr__3731(_3731 ? _3731->raw() : nullptr, _3731 ? _3731->size(0) : 0);
  _checked_ptr_1<double> _ptr__3732(_3732 ? _3732->raw() : nullptr, _3732 ? _3732->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3734 = _3733->getShape();
  _checked_ptr_1<int> _ptr__3734(_3734 ? _3734->raw() : nullptr,_3734 ? _3734->size(0) : 0);
  if (((int)((_3734)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  int _3735 = _ptr__3734[(int)0];
  int _3736 = _ptr__3734[(int)1];
  if (((_3728 < (int)0) || ((_3729 < (int)0) || ((_3735 < (int)0) || (_3736 < (int)0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if ((_3728 != _3736))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  if ((((int)((_3730)->size(0)) != (int)((_3731)->size(0))) || ((int)((_3730)->size(0)) != (int)((_3732)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  int _3737 = (int)((_3730)->size(0));
  {
    bool _3738 = false;
    int _8522 = (int)0;
    int _8523 = _3737;
    for (int _3739 = _8522; _3739 < _8523; ++_3739)
    {
      {
        _3738 = (_3738 || ((_ptr__3730[_3739] < (int)0) || ((_ptr__3730[_3739] >= _3728) || ((_ptr__3731[_3739] < (int)0) || (_ptr__3731[_3739] >= _3729)))));
      }
    }
    if (_3738)
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
      }
    }
    {}
  }
  {
    bool _3740 = false;
    int _8524 = (int)0;
    int _8525 = (_3737 - (int)1);
    for (int _3741 = _8524; _3741 < _8525; ++_3741)
    {
      {
        _3740 = (_3740 || ((_ptr__3730[_3741] > _ptr__3730[safe_add( _3741,(int)1 )]) || ((_ptr__3730[_3741] == _ptr__3730[safe_add( _3741,(int)1 )]) && (_ptr__3731[_3741] >= _ptr__3731[safe_add( _3741,(int)1 )]))));
      }
    }
    if (_3740)
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Unsorted matrix data"));
      }
    }
    {}
  }
  return (int)1;
}
std::string mosek::fusion::ExprMulRight :: toString() { return mosek::fusion::p_ExprMulRight::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulRight::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulRight(M,"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulRight::destroy(){expr.reset();mval.reset();msubj.reset();msubi.reset();}void mosek::fusion::ExprMulRight::destroy() { mosek::fusion::p_ExprMulRight::_get_impl(this)->destroy(); }mosek::fusion::ExprMulLeft::ExprMulLeft(mosek::fusion::p_ExprMulLeft *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulLeft()" << this << std::endl; */ }mosek::fusion::ExprMulLeft::~ExprMulLeft() {  /* std::cout << "~ExprMulLeft()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulLeft::p_ExprMulLeft  (::mosek::fusion::ExprMulLeft * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulLeft::t mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft  (int _3742,    int _3743,    std::shared_ptr< monty::ndarray< int,1 > > _3744,    std::shared_ptr< monty::ndarray< int,1 > > _3745,    std::shared_ptr< monty::ndarray< double,1 > > _3746,    monty::rc_ptr< ::mosek::fusion::Expression > _3747,    int _3748){ return new mosek::fusion::ExprMulLeft(_3742,_3743,_3744,_3745,_3746,_3747,_3748); }mosek::fusion::ExprMulLeft::ExprMulLeft  (int _3742,    int _3743,    std::shared_ptr< monty::ndarray< int,1 > > _3744,    std::shared_ptr< monty::ndarray< int,1 > > _3745,    std::shared_ptr< monty::ndarray< double,1 > > _3746,    monty::rc_ptr< ::mosek::fusion::Expression > _3747,    int _3748) :    ExprMulLeft(new mosek::fusion::p_ExprMulLeft(this)){ mosek::fusion::p_ExprMulLeft::_get_impl(this)->_initialize(_3742,_3743,_3744,_3745,_3746,_3747,_3748); }void mosek::fusion::p_ExprMulLeft::_initialize  (int _3742,    int _3743,    std::shared_ptr< monty::ndarray< int,1 > > _3744,    std::shared_ptr< monty::ndarray< int,1 > > _3745,    std::shared_ptr< monty::ndarray< double,1 > > _3746,    monty::rc_ptr< ::mosek::fusion::Expression > _3747,    int _3748){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__3744(_3744 ? _3744->raw() : nullptr, _3744 ? _3744->size(0) : 0);
    _checked_ptr_1<int> _ptr__3745(_3745 ? _3745->raw() : nullptr, _3745 ? _3745->size(0) : 0);
    _checked_ptr_1<double> _ptr__3746(_3746 ? _3746->raw() : nullptr, _3746 ? _3746->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprMulLeft::computeshape(_3742,_3743,_3747->getShape()));
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->mdim0 = _3742;
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->mdim1 = _3743;
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->msubi = _3744;
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->msubj = _3745;
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->mval = _3746;
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->expr = _3747;
  }
}mosek::fusion::ExprMulLeft::t mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft  (int _3749,    int _3750,    std::shared_ptr< monty::ndarray< int,1 > > _3751,    std::shared_ptr< monty::ndarray< int,1 > > _3752,    std::shared_ptr< monty::ndarray< double,1 > > _3753,    monty::rc_ptr< ::mosek::fusion::Expression > _3754){ return new mosek::fusion::ExprMulLeft(_3749,_3750,_3751,_3752,_3753,_3754); }mosek::fusion::ExprMulLeft::ExprMulLeft  (int _3749,    int _3750,    std::shared_ptr< monty::ndarray< int,1 > > _3751,    std::shared_ptr< monty::ndarray< int,1 > > _3752,    std::shared_ptr< monty::ndarray< double,1 > > _3753,    monty::rc_ptr< ::mosek::fusion::Expression > _3754) :    ExprMulLeft(new mosek::fusion::p_ExprMulLeft(this)){ mosek::fusion::p_ExprMulLeft::_get_impl(this)->_initialize(_3749,_3750,_3751,_3752,_3753,_3754); }void mosek::fusion::p_ExprMulLeft::_initialize  (int _3749,    int _3750,    std::shared_ptr< monty::ndarray< int,1 > > _3751,    std::shared_ptr< monty::ndarray< int,1 > > _3752,    std::shared_ptr< monty::ndarray< double,1 > > _3753,    monty::rc_ptr< ::mosek::fusion::Expression > _3754){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__3751(_3751 ? _3751->raw() : nullptr, _3751 ? _3751->size(0) : 0);
    _checked_ptr_1<int> _ptr__3752(_3752 ? _3752->raw() : nullptr, _3752 ? _3752->size(0) : 0);
    _checked_ptr_1<double> _ptr__3753(_3753 ? _3753->raw() : nullptr, _3753 ? _3753->size(0) : 0);
    mosek::fusion::p_ExprMulLeft::_initialize(_3749,_3750,_3751,_3752,_3753,_3754,::mosek::fusion::p_ExprMulLeft::validate(_3749,_3750,_3751,_3752,_3753,_3754));
  }
}void mosek::fusion::ExprMulLeft :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3755,monty::rc_ptr< ::mosek::fusion::WorkStack > _3756,monty::rc_ptr< ::mosek::fusion::WorkStack > _3757) { mosek::fusion::p_ExprMulLeft::_get_impl(this)->eval(_3755,_3756,_3757); }void mosek::fusion::p_ExprMulLeft::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3755,monty::rc_ptr< ::mosek::fusion::WorkStack > _3756,monty::rc_ptr< ::mosek::fusion::WorkStack > _3757){
  mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->expr->eval(_3756,_3755,_3757);
  _3756->pop_expr();
  int _3758 = mosek::fusion::p_WorkStack::_get_impl(_3756)->nd;
  int _3759 = mosek::fusion::p_WorkStack::_get_impl(_3756)->nnz;
  int _3760 = mosek::fusion::p_WorkStack::_get_impl(_3756)->nelem;
  bool _3761 = mosek::fusion::p_WorkStack::_get_impl(_3756)->hassp;
  int _3762 = mosek::fusion::p_WorkStack::_get_impl(_3756)->shape_base;
  int _3763 = mosek::fusion::p_WorkStack::_get_impl(_3756)->ptr_base;
  int _3764 = mosek::fusion::p_WorkStack::_get_impl(_3756)->sp_base;
  int _3765 = mosek::fusion::p_WorkStack::_get_impl(_3756)->nidxs_base;
  int _3766 = mosek::fusion::p_WorkStack::_get_impl(_3756)->bfix_base;
  int _3767 = mosek::fusion::p_WorkStack::_get_impl(_3756)->cof_base;
  std::shared_ptr< monty::ndarray< int,1 > > _3768 = mosek::fusion::p_WorkStack::_get_impl(_3756)->i32;
  _checked_ptr_1<int> _ptr__3768(_3768 ? _3768->raw() : nullptr,_3768 ? _3768->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3769 = mosek::fusion::p_WorkStack::_get_impl(_3756)->i64;
  _checked_ptr_1<long long> _ptr__3769(_3769 ? _3769->raw() : nullptr,_3769 ? _3769->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3770 = mosek::fusion::p_WorkStack::_get_impl(_3756)->f64;
  _checked_ptr_1<double> _ptr__3770(_3770 ? _3770->raw() : nullptr,_3770 ? _3770->size(0) : 0);
  if ((_3758 != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operator shape for multiplication"));
    }
  }
  {}
  int _3771 = (int)9999;
  int _3772 = (int)9999;
  int _3773 = (int)9999;
  int _3774 = _ptr__3768[_3762];
  int _3775 = _ptr__3768[safe_add( _3762,(int)1 )];
  int _3776 = (int)((msubi)->size(0));
  bool _3777 = (_3776 < safe_mul( (long long)mdim0,(long long)mdim1 ));
  bool _3778 = false;
  int _3779 = (int)0;
  long long _3780 = (long long)0;
  if (_3761)
  {
    {
      _3771 = _3757->alloci32(_3760);
      _3772 = _3757->alloci32(_3760);
      _3773 = _3757->alloci32(safe_add( _3775,(int)1 ));
      std::shared_ptr< monty::ndarray< int,1 > > _3781 = mosek::fusion::p_WorkStack::_get_impl(_3757)->i32;
      _checked_ptr_1<int> _ptr__3781(_3781 ? _3781->raw() : nullptr,_3781 ? _3781->size(0) : 0);
      int _8526 = (int)0;
      int _8527 = safe_add( _3775,(int)1 );
      for (int _3782 = _8526; _3782 < _8527; ++_3782)
      {
        {
          _ptr__3781[safe_add( _3773,_3782 )] = (int)0;
        }
      }
      int _8528 = (int)0;
      int _8529 = _3760;
      for (int _3783 = _8528; _3783 < _8529; ++_3783)
      {
        {
          ++ _ptr__3781[safe_add( safe_add( _3773,(_ptr__3769[safe_add( _3764,_3783 )] % _3775) ),(int)1 )];
        }
      }
      int _8530 = (int)0;
      int _8531 = _3775;
      for (int _3784 = _8530; _3784 < _8531; ++_3784)
      {
        {
          _ptr__3781[safe_add( safe_add( _3773,_3784 ),(int)1 )] += _ptr__3781[safe_add( _3773,_3784 )];
        }
      }
      int _8532 = (int)0;
      int _8533 = _3760;
      for (int _3785 = _8532; _3785 < _8533; ++_3785)
      {
        {
          long long _3786 = (_ptr__3769[safe_add( _3764,_3785 )] % _3775);
          _ptr__3781[safe_add( _3771,_ptr__3781[safe_add( _3773,_3786 )] )] = _3785;
          ++ _ptr__3781[safe_add( _3773,_3786 )];
        }
      }
      int _8534 = (int)0;
      int _8535 = _3775;
      for (int _3787 = _8534; _3787 < _8535; ++_3787)
      {
        {
          _ptr__3781[(safe_add( _3773,_3775 ) - _3787)] = _ptr__3781[((safe_add( _3773,_3775 ) - _3787) - (int)1)];
        }
      }
      _ptr__3781[_3773] = (int)0;
      if (_3777)
      {
        {
          int _3788 = (int)0;
          while ( (_3788 < _3776) )
          {
            {
              int _3789 = ((*msubi)(_3788));
              int _3790 = safe_add( _3788,(int)1 );
              while ( ((_3790 < _3776) && (((*msubi)(_3790)) == ((*msubi)(_3788)))) )
              {
                {
                  ++ _3790;
                }
              }
              int _8536 = (int)0;
              int _8537 = _3775;
              for (int _3791 = _8536; _3791 < _8537; ++_3791)
              {
                {
                  bool _3792 = false;
                  int _3793 = _3790;
                  int _3794 = _3788;
                  int _3795 = _ptr__3781[safe_add( safe_add( _3773,_3791 ),(int)1 )];
                  int _3796 = _ptr__3781[safe_add( _3773,_3791 )];
                  while ( ((_3794 < _3793) && (_3796 < _3795)) )
                  {
                    {
                      int _3797 = _ptr__3781[safe_add( _3771,_3796 )];
                      if ((((*msubj)(_3794)) < (_ptr__3769[safe_add( _3764,_3797 )] / _3775)))
                      {
                        {
                          ++ _3794;
                        }
                      }
                      else if((((*msubj)(_3794)) > (_ptr__3769[safe_add( _3764,_3797 )] / _3775)))
                      {
                        {
                          ++ _3796;
                        }
                      }
                      else
                      {
                        {
                          _3792 = true;
                          _3780 += (_ptr__3768[safe_add( safe_add( _3763,_3797 ),(int)1 )] - _ptr__3768[safe_add( _3763,_3797 )]);
                          ++ _3796;
                          ++ _3794;
                        }
                      }
                    }
                  }
                  if (_3792)
                  {
                    {
                      ++ _3779;
                    }
                  }
                  {}
                }
              }
              _3788 = _3790;
            }
          }
        }
      }
      else
      {
        {
          _3779 = safe_mul( mdim0,_3775 );
          _3780 = safe_mul( (long long)_3759,mdim0 );
        }
      }
    }
  }
  else
  {
    {
      if (_3777)
      {
        {
          int _3798 = (int)0;
          while ( (_3798 < _3776) )
          {
            {
              int _3799 = safe_add( _3798,(int)1 );
              while ( ((_3799 < _3776) && (((*msubi)(_3798)) == ((*msubi)(_3799)))) )
              {
                {
                  ++ _3799;
                }
              }
              int _3800 = ((*msubi)(_3798));
              int _8538 = (int)0;
              int _8539 = _3775;
              for (int _3801 = _8538; _3801 < _8539; ++_3801)
              {
                {
                  bool _3802 = false;
                  int _8540 = _3798;
                  int _8541 = _3799;
                  for (int _3803 = _8540; _3803 < _8541; ++_3803)
                  {
                    {
                      int _3804 = safe_add( safe_mul( ((*msubj)(_3803)),_3775 ),_3801 );
                      _3780 += (_ptr__3768[safe_add( safe_add( _3763,_3804 ),(int)1 )] - _ptr__3768[safe_add( _3763,_3804 )]);
                      _3802 = true;
                    }
                  }
                  if (_3802)
                  {
                    {
                      ++ _3779;
                    }
                  }
                  {}
                }
              }
              _3798 = _3799;
            }
          }
        }
      }
      else
      {
        {
          _3780 = safe_mul( (long long)_3759,mdim0 );
          _3779 = safe_mul( mdim0,_3775 );
        }
      }
    }
  }
  if ((!(_3780 <= (int)0x7fffffff)))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Maximum number of nonzeros exceede in multiplication"));
    }
  }
  {}
  _3778 = (_3779 < safe_mul( mdim0,_3775 ));
  int _3805 = (int)2;
  _3755->alloc_expr(_3805,_3779,(int)_3780,_3778);
  int _3806 = mosek::fusion::p_WorkStack::_get_impl(_3755)->ptr_base;
  int _3807 = mosek::fusion::p_WorkStack::_get_impl(_3755)->nidxs_base;
  int _8542;
  bool _8543 = _3778;
  if (_8543)
  {
    _8542 = mosek::fusion::p_WorkStack::_get_impl(_3755)->sp_base;
  }
  else
  {
    _8542 = _3755->alloci64(_3779);
  }
  int _3808 = _8542;
  int _3809 = mosek::fusion::p_WorkStack::_get_impl(_3755)->cof_base;
  int _3810 = mosek::fusion::p_WorkStack::_get_impl(_3755)->bfix_base;
  int _3811 = mosek::fusion::p_WorkStack::_get_impl(_3755)->shape_base;
  std::shared_ptr< monty::ndarray< long long,1 > > _3812 = mosek::fusion::p_WorkStack::_get_impl(_3755)->i64;
  _checked_ptr_1<long long> _ptr__3812(_3812 ? _3812->raw() : nullptr,_3812 ? _3812->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3813 = mosek::fusion::p_WorkStack::_get_impl(_3755)->f64;
  _checked_ptr_1<double> _ptr__3813(_3813 ? _3813->raw() : nullptr,_3813 ? _3813->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3814 = mosek::fusion::p_WorkStack::_get_impl(_3755)->i32;
  _checked_ptr_1<int> _ptr__3814(_3814 ? _3814->raw() : nullptr,_3814 ? _3814->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3815 = mosek::fusion::p_WorkStack::_get_impl(_3757)->i32;
  _checked_ptr_1<int> _ptr__3815(_3815 ? _3815->raw() : nullptr,_3815 ? _3815->size(0) : 0);
  _ptr__3814[_3811] = mdim0;
  _ptr__3814[safe_add( _3811,(int)1 )] = _3775;
  if (_3761)
  {
    {
      _ptr__3814[_3806] = (int)0;
      if (_3777)
      {
        {
          int _3816 = (int)0;
          int _3817 = (int)0;
          int _3818 = (int)0;
          while ( (_3818 < _3776) )
          {
            {
              int _3819 = ((*msubi)(_3818));
              int _3820 = safe_add( _3818,(int)1 );
              while ( ((_3820 < _3776) && (((*msubi)(_3820)) == ((*msubi)(_3818)))) )
              {
                {
                  ++ _3820;
                }
              }
              int _8544 = (int)0;
              int _8545 = _3775;
              for (int _3821 = _8544; _3821 < _8545; ++_3821)
              {
                {
                  bool _3822 = false;
                  double _3823 = 0.0;
                  int _3824 = _3820;
                  int _3825 = _3818;
                  int _3826 = _ptr__3815[safe_add( safe_add( _3773,_3821 ),(int)1 )];
                  int _3827 = _ptr__3815[safe_add( _3773,_3821 )];
                  while ( ((_3825 < _3824) && (_3827 < _3826)) )
                  {
                    {
                      int _3828 = _ptr__3815[safe_add( _3771,_3827 )];
                      if ((((*msubj)(_3825)) < (_ptr__3769[safe_add( _3764,_3828 )] / _3775)))
                      {
                        {
                          ++ _3825;
                        }
                      }
                      else if((((*msubj)(_3825)) > (_ptr__3769[safe_add( _3764,_3828 )] / _3775)))
                      {
                        {
                          ++ _3827;
                        }
                      }
                      else
                      {
                        {
                          _3822 = true;
                          _3823 += (_ptr__3770[safe_add( _3766,_3828 )] * ((*mval)(_3825)));
                          int _3829 = (_ptr__3768[safe_add( safe_add( _3763,_3828 ),(int)1 )] - _ptr__3768[safe_add( _3763,_3828 )]);
                          int _8546 = (int)0;
                          int _8547 = _3829;
                          for (int _3830 = _8546; _3830 < _8547; ++_3830)
                          {
                            {
                              _ptr__3812[safe_add( safe_add( _3807,_3817 ),_3830 )] = _ptr__3769[safe_add( safe_add( _3765,_ptr__3768[safe_add( _3763,_3828 )] ),_3830 )];
                            }
                          }
                          int _8548 = (int)0;
                          int _8549 = _3829;
                          for (int _3831 = _8548; _3831 < _8549; ++_3831)
                          {
                            {
                              _ptr__3813[safe_add( safe_add( _3809,_3817 ),_3831 )] = (_ptr__3770[safe_add( safe_add( _3767,_ptr__3768[safe_add( _3763,_3828 )] ),_3831 )] * ((*mval)(_3825)));
                            }
                          }
                          ++ _3825;
                          ++ _3827;
                          _3817 += _3829;
                        }
                      }
                    }
                  }
                  if (_3822)
                  {
                    {
                      _ptr__3814[safe_add( safe_add( _3806,_3816 ),(int)1 )] = _3817;
                      _ptr__3812[safe_add( _3808,_3816 )] = safe_add( safe_mul( _3819,_3775 ),_3821 );
                      _ptr__3813[safe_add( _3810,_3816 )] = _3823;
                      ++ _3816;
                    }
                  }
                  {}
                }
              }
              _3818 = _3820;
            }
          }
        }
      }
      else
      {
        {
          int _3832 = (int)0;
          int _3833 = (int)0;
          int _8550 = (int)0;
          int _8551 = mdim0;
          for (int _3834 = _8550; _3834 < _8551; ++_3834)
          {
            {
              int _8552 = (int)0;
              int _8553 = _3775;
              for (int _3835 = _8552; _3835 < _8553; ++_3835)
              {
                {
                  double _3836 = 0.0;
                  int _8554 = _ptr__3815[safe_add( _3773,_3835 )];
                  int _8555 = _ptr__3815[safe_add( safe_add( _3773,_3835 ),(int)1 )];
                  for (int _3837 = _8554; _3837 < _8555; ++_3837)
                  {
                    {
                      int _3838 = _ptr__3815[safe_add( _3771,_3837 )];
                      long long _3839 = safe_add( safe_mul( _3834,mdim1 ),(_ptr__3769[safe_add( _3764,_3838 )] / _3775) );
                      _3836 += (_ptr__3770[safe_add( _3766,_3838 )] * ((*mval)(_3839)));
                      int _3840 = (_ptr__3768[safe_add( safe_add( _3763,_3838 ),(int)1 )] - _ptr__3768[safe_add( _3763,_3838 )]);
                      int _8556 = (int)0;
                      int _8557 = _3840;
                      for (int _3841 = _8556; _3841 < _8557; ++_3841)
                      {
                        {
                          _ptr__3812[safe_add( safe_add( _3807,_3833 ),_3841 )] = _ptr__3769[safe_add( safe_add( _3765,_ptr__3768[safe_add( _3763,_3838 )] ),_3841 )];
                          _ptr__3813[safe_add( safe_add( _3809,_3833 ),_3841 )] = (_ptr__3770[safe_add( safe_add( _3767,_ptr__3768[safe_add( _3763,_3838 )] ),_3841 )] * ((*mval)(_3839)));
                        }
                      }
                      _3833 += _3840;
                    }
                  }
                  _ptr__3814[safe_add( safe_add( _3806,_3832 ),(int)1 )] = _3833;
                  _ptr__3813[safe_add( _3810,_3832 )] = _3836;
                  ++ _3832;
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    {
      _ptr__3814[_3806] = (int)0;
      int _3842 = (int)0;
      int _3843 = (int)0;
      int _3844 = (int)0;
      while ( (_3842 < _3776) )
      {
        {
          int _3845 = safe_add( _3842,(int)1 );
          while ( ((_3845 < _3776) && (((*msubi)(_3842)) == ((*msubi)(_3845)))) )
          {
            {
              ++ _3845;
            }
          }
          int _3846 = ((*msubi)(_3842));
          int _8558 = (int)0;
          int _8559 = _3775;
          for (int _3847 = _8558; _3847 < _8559; ++_3847)
          {
            {
              double _3848 = 0.0;
              bool _3849 = false;
              int _8560 = _3842;
              int _8561 = _3845;
              for (int _3850 = _8560; _3850 < _8561; ++_3850)
              {
                {
                  int _3851 = safe_add( safe_mul( ((*msubj)(_3850)),_3775 ),_3847 );
                  int _3852 = (_ptr__3768[safe_add( safe_add( _3763,_3851 ),(int)1 )] - _ptr__3768[safe_add( _3763,_3851 )]);
                  int _8562 = (int)0;
                  int _8563 = _3852;
                  for (int _3853 = _8562; _3853 < _8563; ++_3853)
                  {
                    {
                      _ptr__3812[safe_add( safe_add( _3807,_3844 ),_3853 )] = _ptr__3769[safe_add( safe_add( _3765,_ptr__3768[safe_add( _3763,_3851 )] ),_3853 )];
                    }
                  }
                  int _8564 = (int)0;
                  int _8565 = _3852;
                  for (int _3854 = _8564; _3854 < _8565; ++_3854)
                  {
                    {
                      _ptr__3813[safe_add( safe_add( _3809,_3844 ),_3854 )] = (_ptr__3770[safe_add( safe_add( _3767,_ptr__3768[safe_add( _3763,_3851 )] ),_3854 )] * ((*mval)(_3850)));
                    }
                  }
                  _3848 += (_ptr__3770[safe_add( _3766,_3851 )] * ((*mval)(_3850)));
                  _3849 = true;
                  _3844 += _3852;
                }
              }
              if (_3849)
              {
                {
                  _ptr__3812[safe_add( _3808,_3843 )] = safe_add( safe_mul( _3846,_3775 ),_3847 );
                  _ptr__3813[safe_add( _3810,_3843 )] = _3848;
                  _ptr__3814[safe_add( safe_add( _3806,_3843 ),(int)1 )] = _3844;
                  ++ _3843;
                }
              }
              {}
            }
          }
          _3842 = _3845;
        }
      }
    }
  }
  if ((!_3778))
  {
    {
      _3755->popi64(_3779);
    }
  }
  {}
  _3757->clear();
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprMulLeft::computeshape(int _3855,int _3856,std::shared_ptr< monty::ndarray< int,1 > > _3857){
  _checked_ptr_1<int> _ptr__3857(_3857 ? _3857->raw() : nullptr, _3857 ? _3857->size(0) : 0);
  if (((int)((_3857)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions"));
    }
  }
  else if((_3856 != _ptr__3857[(int)0]))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions"));
    }
  }
  {}
  return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3855),(int)(_ptr__3857[(int)1])});
}
int mosek::fusion::p_ExprMulLeft::validate(int _3858,int _3859,std::shared_ptr< monty::ndarray< int,1 > > _3860,std::shared_ptr< monty::ndarray< int,1 > > _3861,std::shared_ptr< monty::ndarray< double,1 > > _3862,monty::rc_ptr< ::mosek::fusion::Expression > _3863){
  _checked_ptr_1<int> _ptr__3860(_3860 ? _3860->raw() : nullptr, _3860 ? _3860->size(0) : 0);
  _checked_ptr_1<int> _ptr__3861(_3861 ? _3861->raw() : nullptr, _3861 ? _3861->size(0) : 0);
  _checked_ptr_1<double> _ptr__3862(_3862 ? _3862->raw() : nullptr, _3862 ? _3862->size(0) : 0);
  if ((_3863->getND() != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  int _3864 = _3863->getDim((int)0);
  int _3865 = _3863->getDim((int)0);
  if (((_3858 < (int)0) || (_3859 < (int)0)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if ((_3859 != _3864))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  if ((((int)((_3860)->size(0)) != (int)((_3861)->size(0))) || ((int)((_3860)->size(0)) != (int)((_3862)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  int _3866 = (int)((_3860)->size(0));
  bool _3867 = false;
  bool _3868 = false;
  {
    int _8566 = (int)0;
    int _8567 = _3866;
    for (int _3869 = _8566; _3869 < _8567; ++_3869)
    {
      {
        _3867 = (_3867 || ((_ptr__3860[_3869] < (int)0) || ((_ptr__3860[_3869] >= _3858) || ((_ptr__3861[_3869] < (int)0) || (_ptr__3861[_3869] >= _3859)))));
      }
    }
    if ((!_3867))
    {
      {
        int _8568 = (int)0;
        int _8569 = (_3866 - (int)1);
        for (int _3870 = _8568; _3870 < _8569; ++_3870)
        {
          {
            _3868 = (_3868 || ((_ptr__3860[_3870] > _ptr__3860[safe_add( _3870,(int)1 )]) || ((_ptr__3860[_3870] == _ptr__3860[safe_add( _3870,(int)1 )]) && (_ptr__3861[_3870] >= _ptr__3861[safe_add( _3870,(int)1 )]))));
          }
        }
      }
    }
    {}
  }
  if (_3867)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  if (_3868)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Unsorted matrix data"));
    }
  }
  {}
  return (int)1;
}
std::string mosek::fusion::ExprMulLeft :: toString() { return mosek::fusion::p_ExprMulLeft::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulLeft::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulLeft(M("))->__mosek_2fusion_2Utils_2StringBuffer__a(mdim0)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(mdim1)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("),"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulLeft::destroy(){expr.reset();mval.reset();msubj.reset();msubi.reset();}void mosek::fusion::ExprMulLeft::destroy() { mosek::fusion::p_ExprMulLeft::_get_impl(this)->destroy(); }mosek::fusion::ExprMulVar::ExprMulVar(mosek::fusion::p_ExprMulVar *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulVar()" << this << std::endl; */ }mosek::fusion::ExprMulVar::~ExprMulVar() {  /* std::cout << "~ExprMulVar()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulVar::p_ExprMulVar  (::mosek::fusion::ExprMulVar * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulVar::t mosek::fusion::p_ExprMulVar::_new_ExprMulVar  (bool _3871,    int _3872,    int _3873,    std::shared_ptr< monty::ndarray< int,1 > > _3874,    std::shared_ptr< monty::ndarray< int,1 > > _3875,    std::shared_ptr< monty::ndarray< double,1 > > _3876,    monty::rc_ptr< ::mosek::fusion::Variable > _3877){ return new mosek::fusion::ExprMulVar(_3871,_3872,_3873,_3874,_3875,_3876,_3877); }mosek::fusion::ExprMulVar::ExprMulVar  (bool _3871,    int _3872,    int _3873,    std::shared_ptr< monty::ndarray< int,1 > > _3874,    std::shared_ptr< monty::ndarray< int,1 > > _3875,    std::shared_ptr< monty::ndarray< double,1 > > _3876,    monty::rc_ptr< ::mosek::fusion::Variable > _3877) :    ExprMulVar(new mosek::fusion::p_ExprMulVar(this)){ mosek::fusion::p_ExprMulVar::_get_impl(this)->_initialize(_3871,_3872,_3873,_3874,_3875,_3876,_3877); }void mosek::fusion::p_ExprMulVar::_initialize  (bool _3871,    int _3872,    int _3873,    std::shared_ptr< monty::ndarray< int,1 > > _3874,    std::shared_ptr< monty::ndarray< int,1 > > _3875,    std::shared_ptr< monty::ndarray< double,1 > > _3876,    monty::rc_ptr< ::mosek::fusion::Variable > _3877){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__3874(_3874 ? _3874->raw() : nullptr, _3874 ? _3874->size(0) : 0);
    _checked_ptr_1<int> _ptr__3875(_3875 ? _3875->raw() : nullptr, _3875 ? _3875->size(0) : 0);
    _checked_ptr_1<double> _ptr__3876(_3876 ? _3876->raw() : nullptr, _3876 ? _3876->size(0) : 0);
    mosek::fusion::p_ExprMulVar::_initialize(_3871,_3872,_3873,_3874,_3875,_3876,_3877,(int)1);
    std::shared_ptr< monty::ndarray< int,1 > > _3878 = _3877->getShape();
    _checked_ptr_1<int> _ptr__3878(_3878 ? _3878->raw() : nullptr,_3878 ? _3878->size(0) : 0);
    int _3879 = (int)((_3878)->size(0));
    if ((_3879 != (int)2))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    else if((_3871 && (_ptr__3878[(int)0] != _3873)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    else if(((!_3871) && (_ptr__3878[(int)1] != _3872)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    {}
    if ((((int)((_3874)->size(0)) != (int)((_3875)->size(0))) || ((int)((_3874)->size(0)) != (int)((_3876)->size(0)))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Mismatching matrix data lengths"));
      }
    }
    {}
    validate(_3872,_3873,_3874,_3875,_3876);
  }
}mosek::fusion::ExprMulVar::t mosek::fusion::p_ExprMulVar::_new_ExprMulVar  (bool _3880,    int _3881,    int _3882,    std::shared_ptr< monty::ndarray< int,1 > > _3883,    std::shared_ptr< monty::ndarray< int,1 > > _3884,    std::shared_ptr< monty::ndarray< double,1 > > _3885,    monty::rc_ptr< ::mosek::fusion::Variable > _3886,    int _3887){ return new mosek::fusion::ExprMulVar(_3880,_3881,_3882,_3883,_3884,_3885,_3886,_3887); }mosek::fusion::ExprMulVar::ExprMulVar  (bool _3880,    int _3881,    int _3882,    std::shared_ptr< monty::ndarray< int,1 > > _3883,    std::shared_ptr< monty::ndarray< int,1 > > _3884,    std::shared_ptr< monty::ndarray< double,1 > > _3885,    monty::rc_ptr< ::mosek::fusion::Variable > _3886,    int _3887) :    ExprMulVar(new mosek::fusion::p_ExprMulVar(this)){ mosek::fusion::p_ExprMulVar::_get_impl(this)->_initialize(_3880,_3881,_3882,_3883,_3884,_3885,_3886,_3887); }void mosek::fusion::p_ExprMulVar::_initialize  (bool _3880,    int _3881,    int _3882,    std::shared_ptr< monty::ndarray< int,1 > > _3883,    std::shared_ptr< monty::ndarray< int,1 > > _3884,    std::shared_ptr< monty::ndarray< double,1 > > _3885,    monty::rc_ptr< ::mosek::fusion::Variable > _3886,    int _3887){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__3883(_3883 ? _3883->raw() : nullptr, _3883 ? _3883->size(0) : 0);
    _checked_ptr_1<int> _ptr__3884(_3884 ? _3884->raw() : nullptr, _3884 ? _3884->size(0) : 0);
    _checked_ptr_1<double> _ptr__3885(_3885 ? _3885->raw() : nullptr, _3885 ? _3885->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprMulVar::resshape(_3881,_3882,_3886->getShape(),_3880));
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->left = _3880;
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->x = _3886;
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimi = _3881;
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimj = _3882;
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubi = ::mosek::fusion::Utils::Tools::arraycopy(_3883);
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubj = ::mosek::fusion::Utils::Tools::arraycopy(_3884);
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mcof = ::mosek::fusion::Utils::Tools::arraycopy(_3885);
  }
}void mosek::fusion::ExprMulVar :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3888,monty::rc_ptr< ::mosek::fusion::WorkStack > _3889,monty::rc_ptr< ::mosek::fusion::WorkStack > _3890) { mosek::fusion::p_ExprMulVar::_get_impl(this)->eval(_3888,_3889,_3890); }void mosek::fusion::p_ExprMulVar::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3888,monty::rc_ptr< ::mosek::fusion::WorkStack > _3889,monty::rc_ptr< ::mosek::fusion::WorkStack > _3890){
  if (left)
  {
    {
      _pubthis->eval_left(_3888,_3889,_3890);
    }
  }
  else
  {
    {
      _pubthis->eval_right(_3888,_3889,_3890);
    }
  }
}
void mosek::fusion::ExprMulVar :: eval_right(monty::rc_ptr< ::mosek::fusion::WorkStack > _3891,monty::rc_ptr< ::mosek::fusion::WorkStack > _3892,monty::rc_ptr< ::mosek::fusion::WorkStack > _3893) { mosek::fusion::p_ExprMulVar::_get_impl(this)->eval_right(_3891,_3892,_3893); }void mosek::fusion::p_ExprMulVar::eval_right(monty::rc_ptr< ::mosek::fusion::WorkStack > _3891,monty::rc_ptr< ::mosek::fusion::WorkStack > _3892,monty::rc_ptr< ::mosek::fusion::WorkStack > _3893){
  int _3894 = mosek::fusion::p_WorkStack::_get_impl(_3892)->pi32;
  int _3895 = mosek::fusion::p_WorkStack::_get_impl(_3892)->pi64;
  int _3896 = x->numInst();
  int _3897 = _3892->alloci64(_3896);
  int _3898 = _3892->alloci64(_3896);
  int _3899 = _3892->alloci32(_3896);
  int _3900 = _3892->alloci32(_3896);
  std::shared_ptr< monty::ndarray< int,1 > > _3901 = x->getShape();
  _checked_ptr_1<int> _ptr__3901(_3901 ? _3901->raw() : nullptr,_3901 ? _3901->size(0) : 0);
  int _3902 = (int)((_3901)->size(0));
  long long _3903 = safe_mul( _ptr__3901[(int)0],_ptr__3901[(int)1] );
  int _3904 = _ptr__3901[(int)1];
  int _3905 = _ptr__3901[(int)0];
  int _3906 = _3892->alloci32(safe_add( _3905,(int)1 ));
  int _3907 = (int)((mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubi)->size(0));
  std::shared_ptr< monty::ndarray< int,1 > > _3908 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubi;
  _checked_ptr_1<int> _ptr__3908(_3908 ? _3908->raw() : nullptr,_3908 ? _3908->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3909 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubj;
  _checked_ptr_1<int> _ptr__3909(_3909 ? _3909->raw() : nullptr,_3909 ? _3909->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3910 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mcof;
  _checked_ptr_1<double> _ptr__3910(_3910 ? _3910->raw() : nullptr,_3910 ? _3910->size(0) : 0);
  int _3911 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimi;
  int _3912 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimj;
  bool _3913 = ((_3907 / _3911) == _3912);
  int _3914 = _3892->alloci32(_3907);
  int _3915 = _3892->alloci32(safe_add( mdimj,(int)1 ));
  std::shared_ptr< monty::ndarray< int,1 > > _3916 = mosek::fusion::p_WorkStack::_get_impl(_3892)->i32;
  _checked_ptr_1<int> _ptr__3916(_3916 ? _3916->raw() : nullptr,_3916 ? _3916->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3917 = mosek::fusion::p_WorkStack::_get_impl(_3892)->i64;
  _checked_ptr_1<long long> _ptr__3917(_3917 ? _3917->raw() : nullptr,_3917 ? _3917->size(0) : 0);
  int _3918 = (int)0;
  int _3919 = (int)0;
  x->inst(_3898,_3917,_3897,_3917);
  if (_3913)
  {
    {
      int _3920 = (int)0;
      if ((_3896 > (int)0))
      {
        {
          _3920 = (int)1;
          if ((_3905 > (int)1))
          {
            {
              if ((_3904 == (int)1))
              {
                {
                  int _8570 = (int)1;
                  int _8571 = _3896;
                  for (int _3921 = _8570; _3921 < _8571; ++_3921)
                  {
                    {
                      if ((_ptr__3917[safe_add( _3898,_3921 )] > _ptr__3917[(safe_add( _3898,_3921 ) - (int)1)]))
                      {
                        {
                          ++ _3920;
                        }
                      }
                      {}
                    }
                  }
                }
              }
              else
              {
                {
                  int _8572 = (int)1;
                  int _8573 = _3896;
                  for (int _3922 = _8572; _3922 < _8573; ++_3922)
                  {
                    {
                      if (((_ptr__3917[safe_add( _3898,_3922 )] / _3904) > (_ptr__3917[(safe_add( _3898,_3922 ) - (int)1)] / _3904)))
                      {
                        {
                          ++ _3920;
                        }
                      }
                      {}
                    }
                  }
                }
              }
            }
          }
          {}
        }
      }
      {}
      _3919 = safe_mul( _3920,_3912 );
      _3918 = safe_mul( _3896,_3912 );
      bool _3923 = (_3920 < _3905);
      int _3924 = _3891->alloci32(safe_add( _3919,(int)1 ));
      int _8574;
      bool _8575 = _3923;
      if (_8575)
      {
        _8574 = (int)1;
      }
      else
      {
        _8574 = (int)0;
      }
      _3891->pushi32(_8574);
      _3891->pushi32(_3918);
      _3891->pushi32(_3919);
      _3891->pushi32(_3905);
      _3891->pushi32(_3912);
      _3891->pushi32((int)2);
      int _3925 = _3891->alloci64(_3918);
      int _3926 = _3891->alloci64(_3919);
      int _3927 = _3891->allocf64(_3918);
      int _3928 = _3891->allocf64(_3919);
      std::shared_ptr< monty::ndarray< int,1 > > _3929 = mosek::fusion::p_WorkStack::_get_impl(_3891)->i32;
      _checked_ptr_1<int> _ptr__3929(_3929 ? _3929->raw() : nullptr,_3929 ? _3929->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _3930 = mosek::fusion::p_WorkStack::_get_impl(_3891)->i64;
      _checked_ptr_1<long long> _ptr__3930(_3930 ? _3930->raw() : nullptr,_3930 ? _3930->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3931 = mosek::fusion::p_WorkStack::_get_impl(_3891)->f64;
      _checked_ptr_1<double> _ptr__3931(_3931 ? _3931->raw() : nullptr,_3931 ? _3931->size(0) : 0);
      {
        int _3932 = (int)0;
        int _3933 = (int)0;
        int _3934 = (int)0;
        _ptr__3929[_3924] = (int)0;
        while ( (_3932 < _3896) )
        {
          {
            int _3935 = _3932;
            ++ _3932;
            while ( ((_3932 < _3896) && ((_ptr__3917[safe_add( _3898,_3932 )] / _3904) == (_ptr__3917[safe_add( _3898,_3935 )] / _3904))) )
            {
              {
                ++ _3932;
              }
            }
            long long _3936 = (_ptr__3917[safe_add( _3898,_3935 )] / _3904);
            int _8576 = (int)0;
            int _8577 = _3912;
            for (int _3937 = _8576; _3937 < _8577; ++_3937)
            {
              {
                int _8578 = _3935;
                int _8579 = _3932;
                for (int _3938 = _8578; _3938 < _8579; ++_3938)
                {
                  {
                    long long _3939 = (_ptr__3917[safe_add( _3898,_3938 )] % _3904);
                    _ptr__3930[safe_add( _3925,_3934 )] = _ptr__3917[safe_add( _3897,_3938 )];
                    _ptr__3931[safe_add( _3927,_3934 )] = _ptr__3910[safe_add( safe_mul( _3939,_3912 ),_3937 )];
                    ++ _3934;
                  }
                }
                _ptr__3929[safe_add( safe_add( _3924,_3933 ),(int)1 )] = _3934;
                _ptr__3931[safe_add( _3928,_3933 )] = 0.0;
                _ptr__3930[safe_add( _3926,_3933 )] = safe_add( safe_mul( _3936,_3912 ),_3937 );
                ++ _3933;
              }
            }
          }
        }
      }
      if ((!_3923))
      {
        {
          _3891->popi64(_3919);
        }
      }
      {}
    }
  }
  else
  {
    {
      {
        if ((_3912 == (int)1))
        {
          {
            int _8580 = (int)0;
            int _8581 = _3907;
            for (int _3940 = _8580; _3940 < _8581; ++_3940)
            {
              {
                _ptr__3916[safe_add( _3914,_3940 )] = _3940;
              }
            }
            _ptr__3916[_3915] = (int)0;
            _ptr__3916[safe_add( _3915,(int)1 )] = _3907;
          }
        }
        else
        {
          {
            _ptr__3916[_3915] = (int)0;
            int _8582 = (int)0;
            int _8583 = safe_add( _3912,(int)1 );
            for (int _3941 = _8582; _3941 < _8583; ++_3941)
            {
              {
                _ptr__3916[safe_add( _3915,_3941 )] = (int)0;
              }
            }
            int _8584 = (int)0;
            int _8585 = _3907;
            for (int _3942 = _8584; _3942 < _8585; ++_3942)
            {
              {
                ++ _ptr__3916[safe_add( safe_add( _3915,_ptr__3909[_3942] ),(int)1 )];
              }
            }
            int _8586 = (int)0;
            int _8587 = mdimj;
            for (int _3943 = _8586; _3943 < _8587; ++_3943)
            {
              {
                _ptr__3916[safe_add( safe_add( _3915,_3943 ),(int)1 )] += _ptr__3916[safe_add( _3915,_3943 )];
              }
            }
            int _8588 = (int)0;
            int _8589 = _3907;
            for (int _3944 = _8588; _3944 < _8589; ++_3944)
            {
              {
                _ptr__3916[safe_add( _3914,_ptr__3916[safe_add( _3915,_ptr__3909[_3944] )] )] = _3944;
                ++ _ptr__3916[safe_add( _3915,_ptr__3909[_3944] )];
              }
            }
            int _8590 = (int)0;
            int _8591 = _3912;
            for (int _3945 = _8590; _3945 < _8591; ++_3945)
            {
              {
                _ptr__3916[(safe_add( _3915,_3912 ) - _3945)] = _ptr__3916[((safe_add( _3915,_3912 ) - _3945) - (int)1)];
              }
            }
            _ptr__3916[_3915] = (int)0;
          }
        }
      }
      if (((_3896 / _3905) == _3904))
      {
        {
          int _3946 = (int)0;
          {
            int _3947 = (int)0;
            while ( (_3947 < _3907) )
            {
              {
                ++ _3947;
                while ( ((_3947 < _3907) && (_ptr__3909[_ptr__3916[(safe_add( _3914,_3947 ) - (int)1)]] == _ptr__3909[_ptr__3916[safe_add( _3914,_3947 )]])) )
                {
                  {
                    ++ _3947;
                  }
                }
                ++ _3946;
              }
            }
          }
          _3919 = safe_mul( _3946,_3905 );
          _3918 = safe_mul( _3907,_3905 );
          bool _3948 = (_3946 < _3912);
          int _3949 = _3891->alloci32(safe_add( _3919,(int)1 ));
          int _8592;
          bool _8593 = _3948;
          if (_8593)
          {
            _8592 = (int)1;
          }
          else
          {
            _8592 = (int)0;
          }
          _3891->pushi32(_8592);
          _3891->pushi32(_3918);
          _3891->pushi32(_3919);
          _3891->pushi32(_3905);
          _3891->pushi32(_3912);
          _3891->pushi32((int)2);
          int _3950 = _3891->alloci64(_3918);
          int _3951 = _3891->alloci64(_3919);
          int _3952 = _3891->allocf64(_3918);
          int _3953 = _3891->allocf64(_3919);
          std::shared_ptr< monty::ndarray< int,1 > > _3954 = mosek::fusion::p_WorkStack::_get_impl(_3891)->i32;
          _checked_ptr_1<int> _ptr__3954(_3954 ? _3954->raw() : nullptr,_3954 ? _3954->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _3955 = mosek::fusion::p_WorkStack::_get_impl(_3891)->i64;
          _checked_ptr_1<long long> _ptr__3955(_3955 ? _3955->raw() : nullptr,_3955 ? _3955->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _3956 = mosek::fusion::p_WorkStack::_get_impl(_3891)->f64;
          _checked_ptr_1<double> _ptr__3956(_3956 ? _3956->raw() : nullptr,_3956 ? _3956->size(0) : 0);
          _ptr__3954[_3949] = (int)0;
          int _3957 = (int)0;
          int _3958 = (int)0;
          int _8594 = (int)0;
          int _8595 = _3905;
          for (int _3959 = _8594; _3959 < _8595; ++_3959)
          {
            {
              int _3960 = (int)0;
              while ( (_3960 < _3907) )
              {
                {
                  int _3961 = _3960;
                  ++ _3960;
                  while ( ((_3960 < _3907) && (_ptr__3909[_ptr__3916[safe_add( _3914,_3961 )]] == _ptr__3909[_ptr__3916[safe_add( _3914,_3960 )]])) )
                  {
                    {
                      ++ _3960;
                    }
                  }
                  int _3962 = _ptr__3909[_ptr__3916[safe_add( _3914,_3961 )]];
                  int _8596 = _3961;
                  int _8597 = _3960;
                  for (int _3963 = _8596; _3963 < _8597; ++_3963)
                  {
                    {
                      int _3964 = _ptr__3908[_ptr__3916[safe_add( _3914,_3963 )]];
                      _ptr__3955[safe_add( _3950,_3958 )] = _ptr__3917[safe_add( safe_add( _3897,safe_mul( _3959,_3904 ) ),_3964 )];
                      _ptr__3956[safe_add( _3952,_3958 )] = _ptr__3910[_ptr__3916[safe_add( _3914,_3963 )]];
                      ++ _3958;
                    }
                  }
                  _ptr__3956[safe_add( _3953,_3957 )] = 0.0;
                  _ptr__3955[safe_add( _3951,_3957 )] = safe_add( safe_mul( _3959,_3912 ),_3962 );
                  _ptr__3954[safe_add( safe_add( _3949,_3957 ),(int)1 )] = _3958;
                  ++ _3957;
                }
              }
            }
          }
          if ((!_3948))
          {
            {
              _3891->popi64(_3919);
            }
          }
          {}
        }
      }
      else
      {
        {
          int _8598 = (int)0;
          int _8599 = safe_add( _3905,(int)1 );
          for (int _3965 = _8598; _3965 < _8599; ++_3965)
          {
            {
              _ptr__3916[safe_add( _3906,_3965 )] = (int)0;
            }
          }
          if ((_3902 == (int)1))
          {
            {
              int _8600 = (int)0;
              int _8601 = _3896;
              for (int _3966 = _8600; _3966 < _8601; ++_3966)
              {
                {
                  _ptr__3916[safe_add( _3899,_3966 )] = (int)0;
                }
              }
              int _8602 = (int)0;
              int _8603 = _3896;
              for (int _3967 = _8602; _3967 < _8603; ++_3967)
              {
                {
                  _ptr__3916[safe_add( _3900,_3967 )] = (int)_ptr__3917[safe_add( _3898,_3967 )];
                }
              }
              _ptr__3916[_3906] = (int)0;
              _ptr__3916[safe_add( _3906,(int)1 )] = _3896;
            }
          }
          else
          {
            {
              int _8604 = (int)0;
              int _8605 = _3896;
              for (int _3968 = _8604; _3968 < _8605; ++_3968)
              {
                {
                  _ptr__3916[safe_add( _3899,_3968 )] = (int)(_ptr__3917[safe_add( _3898,_3968 )] / _ptr__3901[(int)1]);
                }
              }
              int _8606 = (int)0;
              int _8607 = _3896;
              for (int _3969 = _8606; _3969 < _8607; ++_3969)
              {
                {
                  _ptr__3916[safe_add( _3900,_3969 )] = (int)(_ptr__3917[safe_add( _3898,_3969 )] % _ptr__3901[(int)1]);
                }
              }
              _ptr__3916[_3906] = (int)0;
              int _8608 = (int)0;
              int _8609 = _3896;
              for (int _3970 = _8608; _3970 < _8609; ++_3970)
              {
                {
                  ++ _ptr__3916[safe_add( safe_add( _3906,_ptr__3916[safe_add( _3899,_3970 )] ),(int)1 )];
                }
              }
              int _8610 = (int)0;
              int _8611 = _3905;
              for (int _3971 = _8610; _3971 < _8611; ++_3971)
              {
                {
                  _ptr__3916[safe_add( safe_add( _3906,_3971 ),(int)1 )] += _ptr__3916[safe_add( _3906,_3971 )];
                }
              }
            }
          }
          int _8612 = (int)0;
          int _8613 = _3905;
          for (int _3972 = _8612; _3972 < _8613; ++_3972)
          {
            {
              int _8614 = (int)0;
              int _8615 = mdimj;
              for (int _3973 = _8614; _3973 < _8615; ++_3973)
              {
                {
                  int _3974 = (int)0;
                  int _3975 = _ptr__3916[safe_add( safe_add( _3906,_3972 ),(int)1 )];
                  int _3976 = _ptr__3916[safe_add( safe_add( _3915,_3973 ),(int)1 )];
                  int _3977 = _ptr__3916[safe_add( _3906,_3972 )];
                  int _3978 = _ptr__3916[safe_add( _3915,_3973 )];
                  while ( ((_3978 < _3976) && (_3977 < _3975)) )
                  {
                    {
                      if ((_ptr__3908[_ptr__3916[safe_add( _3914,_3978 )]] < _ptr__3916[safe_add( _3900,_3977 )]))
                      {
                        {
                          ++ _3978;
                        }
                      }
                      else if((_ptr__3908[_ptr__3916[safe_add( _3914,_3978 )]] > _ptr__3916[safe_add( _3900,_3977 )]))
                      {
                        {
                          ++ _3977;
                        }
                      }
                      else
                      {
                        {
                          ++ _3974;
                          ++ _3978;
                          ++ _3977;
                        }
                      }
                    }
                  }
                  if ((_3974 > (int)0))
                  {
                    {
                      _3918 += _3974;
                      ++ _3919;
                    }
                  }
                  {}
                }
              }
            }
          }
          int _3979 = _3891->alloci32(safe_add( _3919,(int)1 ));
          bool _8616;
          bool _8617 = (_3919 < safe_mul( _3904,mdimi ));
          if (_8617)
          {
            _8616 = true;
          }
          else
          {
            _8616 = false;
          }
          bool _3980 = _8616;
          int _8618;
          bool _8619 = _3980;
          if (_8619)
          {
            _8618 = (int)1;
          }
          else
          {
            _8618 = (int)0;
          }
          _3891->pushi32(_8618);
          _3891->pushi32(_3918);
          _3891->pushi32(_3919);
          _3891->pushi32(_3905);
          _3891->pushi32(mdimj);
          _3891->pushi32((int)2);
          int _3981 = _3891->alloci64(_3918);
          int _3982 = _3891->alloci64(_3919);
          int _3983 = _3891->allocf64(_3918);
          int _3984 = _3891->allocf64(_3919);
          std::shared_ptr< monty::ndarray< int,1 > > _3985 = mosek::fusion::p_WorkStack::_get_impl(_3891)->i32;
          _checked_ptr_1<int> _ptr__3985(_3985 ? _3985->raw() : nullptr,_3985 ? _3985->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _3986 = mosek::fusion::p_WorkStack::_get_impl(_3891)->i64;
          _checked_ptr_1<long long> _ptr__3986(_3986 ? _3986->raw() : nullptr,_3986 ? _3986->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _3987 = mosek::fusion::p_WorkStack::_get_impl(_3891)->f64;
          _checked_ptr_1<double> _ptr__3987(_3987 ? _3987->raw() : nullptr,_3987 ? _3987->size(0) : 0);
          {
            int _3988 = (int)0;
            int _3989 = (int)0;
            int _3990 = (int)0;
            _ptr__3985[_3979] = (int)0;
            int _8620 = (int)0;
            int _8621 = _3919;
            for (int _3991 = _8620; _3991 < _8621; ++_3991)
            {
              {
                _ptr__3987[safe_add( _3984,_3991 )] = 0.0;
              }
            }
            int _8622 = (int)0;
            int _8623 = _3905;
            for (int _3992 = _8622; _3992 < _8623; ++_3992)
            {
              {
                int _8624 = (int)0;
                int _8625 = mdimj;
                for (int _3993 = _8624; _3993 < _8625; ++_3993)
                {
                  {
                    int _3994 = (int)0;
                    int _3995 = _ptr__3916[safe_add( safe_add( _3906,_3992 ),(int)1 )];
                    int _3996 = _ptr__3916[safe_add( safe_add( _3915,_3993 ),(int)1 )];
                    int _3997 = _ptr__3916[safe_add( _3906,_3992 )];
                    int _3998 = _ptr__3916[safe_add( _3915,_3993 )];
                    while ( ((_3998 < _3996) && (_3997 < _3995)) )
                    {
                      {
                        if ((_ptr__3908[_ptr__3916[safe_add( _3914,_3998 )]] < _ptr__3916[safe_add( _3900,_3997 )]))
                        {
                          {
                            ++ _3998;
                          }
                        }
                        else if((_ptr__3908[_ptr__3916[safe_add( _3914,_3998 )]] > _ptr__3916[safe_add( _3900,_3997 )]))
                        {
                          {
                            ++ _3997;
                          }
                        }
                        else
                        {
                          {
                            _ptr__3986[safe_add( _3981,_3990 )] = _ptr__3917[safe_add( _3897,_3997 )];
                            _ptr__3987[safe_add( _3983,_3990 )] = _ptr__3910[_ptr__3916[safe_add( _3914,_3998 )]];
                            ++ _3994;
                            ++ _3990;
                            ++ _3998;
                            ++ _3997;
                          }
                        }
                      }
                    }
                    if ((_3994 > (int)0))
                    {
                      {
                        _ptr__3985[safe_add( safe_add( _3979,_3989 ),(int)1 )] = _3990;
                        _ptr__3986[safe_add( _3982,_3989 )] = _3988;
                        ++ _3989;
                      }
                    }
                    {}
                    ++ _3988;
                  }
                }
              }
            }
          }
          if ((!_3980))
          {
            {
              _3891->popi64(_3919);
            }
          }
          {}
        }
      }
    }
  }
  mosek::fusion::p_WorkStack::_get_impl(_3892)->pi32 = _3894;
  mosek::fusion::p_WorkStack::_get_impl(_3892)->pi64 = _3895;
}
void mosek::fusion::ExprMulVar :: eval_left(monty::rc_ptr< ::mosek::fusion::WorkStack > _3999,monty::rc_ptr< ::mosek::fusion::WorkStack > _4000,monty::rc_ptr< ::mosek::fusion::WorkStack > _4001) { mosek::fusion::p_ExprMulVar::_get_impl(this)->eval_left(_3999,_4000,_4001); }void mosek::fusion::p_ExprMulVar::eval_left(monty::rc_ptr< ::mosek::fusion::WorkStack > _3999,monty::rc_ptr< ::mosek::fusion::WorkStack > _4000,monty::rc_ptr< ::mosek::fusion::WorkStack > _4001){
  int _4002 = x->numInst();
  std::shared_ptr< monty::ndarray< int,1 > > _4003 = x->getShape();
  _checked_ptr_1<int> _ptr__4003(_4003 ? _4003->raw() : nullptr,_4003 ? _4003->size(0) : 0);
  int _4004 = (int)((_4003)->size(0));
  int _4005 = _4001->alloci64(_4002);
  int _4006 = _4001->alloci64(_4002);
  int _4007 = _4001->alloci32(_4002);
  int _4008 = _4001->alloci32(_4002);
  int _4009 = _4001->alloci32(_4002);
  int _4010 = _4001->alloci32(safe_add( mdimi,(int)1 ));
  std::shared_ptr< monty::ndarray< int,1 > > _4011 = x->getShape();
  _checked_ptr_1<int> _ptr__4011(_4011 ? _4011->raw() : nullptr,_4011 ? _4011->size(0) : 0);
  int _4012 = (int)((_4011)->size(0));
  int _8626;
  bool _8627 = (_4012 == (int)1);
  if (_8627)
  {
    _8626 = (int)1;
  }
  else
  {
    _8626 = _ptr__4011[(int)1];
  }
  int _4013 = _8626;
  int _4014 = _ptr__4011[(int)0];
  int _4015 = _4001->alloci32(safe_add( _4013,(int)1 ));
  std::shared_ptr< monty::ndarray< int,1 > > _4016 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubi;
  _checked_ptr_1<int> _ptr__4016(_4016 ? _4016->raw() : nullptr,_4016 ? _4016->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _4017 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubj;
  _checked_ptr_1<int> _ptr__4017(_4017 ? _4017->raw() : nullptr,_4017 ? _4017->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4018 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mcof;
  _checked_ptr_1<double> _ptr__4018(_4018 ? _4018->raw() : nullptr,_4018 ? _4018->size(0) : 0);
  int _4019 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimi;
  int _4020 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimj;
  int _4021 = (int)0;
  int _4022 = (int)0;
  std::shared_ptr< monty::ndarray< int,1 > > _4023 = mosek::fusion::p_WorkStack::_get_impl(_4001)->i32;
  _checked_ptr_1<int> _ptr__4023(_4023 ? _4023->raw() : nullptr,_4023 ? _4023->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4024 = mosek::fusion::p_WorkStack::_get_impl(_4001)->i64;
  _checked_ptr_1<long long> _ptr__4024(_4024 ? _4024->raw() : nullptr,_4024 ? _4024->size(0) : 0);
  int _4025 = (int)((_4018)->size(0));
  x->inst(_4006,_4024,_4005,_4024);
  if ((x->numInst() < x->getSize()))
  {
    {
      {
        int _8628 = (int)0;
        int _8629 = safe_add( _4019,(int)1 );
        for (int _4026 = _8628; _4026 < _8629; ++_4026)
        {
          {
            _ptr__4023[safe_add( _4010,_4026 )] = (int)0;
          }
        }
        int _8630 = (int)0;
        int _8631 = (int)((_4016)->size(0));
        for (int _4027 = _8630; _4027 < _8631; ++_4027)
        {
          {
            ++ _ptr__4023[safe_add( safe_add( _4010,_ptr__4016[_4027] ),(int)1 )];
          }
        }
        int _8632 = (int)0;
        int _8633 = _4019;
        for (int _4028 = _8632; _4028 < _8633; ++_4028)
        {
          {
            _ptr__4023[safe_add( safe_add( _4010,_4028 ),(int)1 )] += _ptr__4023[safe_add( _4010,_4028 )];
          }
        }
        if ((_4012 == (int)1))
        {
          {
            int _8634 = (int)0;
            int _8635 = _4002;
            for (int _4029 = _8634; _4029 < _8635; ++_4029)
            {
              {
                _ptr__4023[safe_add( _4007,_4029 )] = (int)_ptr__4024[safe_add( _4006,_4029 )];
              }
            }
            int _8636 = (int)0;
            int _8637 = _4002;
            for (int _4030 = _8636; _4030 < _8637; ++_4030)
            {
              {
                _ptr__4023[safe_add( _4008,_4030 )] = (int)0;
              }
            }
          }
        }
        else
        {
          {
            int _8638 = (int)0;
            int _8639 = _4002;
            for (int _4031 = _8638; _4031 < _8639; ++_4031)
            {
              {
                _ptr__4023[safe_add( _4007,_4031 )] = (int)(_ptr__4024[safe_add( _4006,_4031 )] / _4013);
              }
            }
            int _8640 = (int)0;
            int _8641 = _4002;
            for (int _4032 = _8640; _4032 < _8641; ++_4032)
            {
              {
                _ptr__4023[safe_add( _4008,_4032 )] = (int)(_ptr__4024[safe_add( _4006,_4032 )] % _4013);
              }
            }
          }
        }
        if ((_4012 > (int)1))
        {
          {
            int _8642 = (int)0;
            int _8643 = safe_add( _4013,(int)1 );
            for (int _4033 = _8642; _4033 < _8643; ++_4033)
            {
              {
                _ptr__4023[safe_add( _4015,_4033 )] = (int)0;
              }
            }
            int _8644 = (int)0;
            int _8645 = _4002;
            for (int _4034 = _8644; _4034 < _8645; ++_4034)
            {
              {
                ++ _ptr__4023[safe_add( safe_add( _4015,_ptr__4023[safe_add( _4008,_4034 )] ),(int)1 )];
              }
            }
            int _8646 = (int)0;
            int _8647 = _4013;
            for (int _4035 = _8646; _4035 < _8647; ++_4035)
            {
              {
                _ptr__4023[safe_add( safe_add( _4015,_4035 ),(int)1 )] += _ptr__4023[safe_add( _4015,_4035 )];
              }
            }
            int _8648 = (int)0;
            int _8649 = _4002;
            for (int _4036 = _8648; _4036 < _8649; ++_4036)
            {
              {
                _ptr__4023[safe_add( _4009,_ptr__4023[safe_add( _4015,_ptr__4023[safe_add( _4008,_4036 )] )] )] = _4036;
                ++ _ptr__4023[safe_add( _4015,_ptr__4023[safe_add( _4008,_4036 )] )];
              }
            }
            int _8650 = (int)0;
            int _8651 = _4013;
            for (int _4037 = _8650; _4037 < _8651; ++_4037)
            {
              {
                _ptr__4023[(safe_add( _4015,_4013 ) - _4037)] = _ptr__4023[((safe_add( _4015,_4013 ) - _4037) - (int)1)];
              }
            }
            _ptr__4023[_4015] = (int)0;
          }
        }
        else
        {
          {
            _ptr__4023[_4015] = (int)0;
            _ptr__4023[safe_add( _4015,(int)1 )] = _4002;
            int _8652 = (int)0;
            int _8653 = _4002;
            for (int _4038 = _8652; _4038 < _8653; ++_4038)
            {
              {
                _ptr__4023[safe_add( _4009,_4038 )] = _4038;
              }
            }
          }
        }
        int _8654 = (int)0;
        int _8655 = _4019;
        for (int _4039 = _8654; _4039 < _8655; ++_4039)
        {
          {
            int _8656 = (int)0;
            int _8657 = _4013;
            for (int _4040 = _8656; _4040 < _8657; ++_4040)
            {
              {
                int _4041 = (int)0;
                int _4042 = _ptr__4023[safe_add( safe_add( _4015,_4040 ),(int)1 )];
                int _4043 = _ptr__4023[safe_add( safe_add( _4010,_4039 ),(int)1 )];
                int _4044 = _ptr__4023[safe_add( _4015,_4040 )];
                int _4045 = _ptr__4023[safe_add( _4010,_4039 )];
                while ( ((_4045 < _4043) && (_4044 < _4042)) )
                {
                  {
                    if ((_ptr__4017[_4045] < _ptr__4023[safe_add( _4007,_ptr__4023[safe_add( _4009,_4044 )] )]))
                    {
                      {
                        ++ _4045;
                      }
                    }
                    else if((_ptr__4017[_4045] > _ptr__4023[safe_add( _4007,_ptr__4023[safe_add( _4009,_4044 )] )]))
                    {
                      {
                        ++ _4044;
                      }
                    }
                    else
                    {
                      {
                        ++ _4041;
                        ++ _4045;
                        ++ _4044;
                      }
                    }
                  }
                }
                if ((_4041 > (int)0))
                {
                  {
                    _4021 += _4041;
                    ++ _4022;
                  }
                }
                {}
              }
            }
          }
        }
      }
    }
  }
  else
  {
    {
      _4021 = safe_mul( _4025,_4013 );
      int _4046 = (int)0;
      while ( (_4046 < _4025) )
      {
        {
          int _4047 = safe_add( _4046,(int)1 );
          while ( ((_4047 < _4025) && (_ptr__4016[_4046] == _ptr__4016[_4047])) )
          {
            {
              ++ _4047;
            }
          }
          ++ _4022;
          _4046 = _4047;
        }
      }
      _4022 *= _4013;
    }
  }
  bool _8658;
  bool _8659 = (_4022 < safe_mul( _4013,_4019 ));
  if (_8659)
  {
    _8658 = true;
  }
  else
  {
    _8658 = false;
  }
  bool _4048 = _8658;
  int _4049 = _4012;
  _3999->alloc_expr(_4049,_4022,_4021,_4048);
  int _4050 = mosek::fusion::p_WorkStack::_get_impl(_3999)->ptr_base;
  int _4051 = mosek::fusion::p_WorkStack::_get_impl(_3999)->shape_base;
  int _4052 = mosek::fusion::p_WorkStack::_get_impl(_3999)->nidxs_base;
  int _8660;
  bool _8661 = _4048;
  if (_8661)
  {
    _8660 = mosek::fusion::p_WorkStack::_get_impl(_3999)->sp_base;
  }
  else
  {
    _8660 = _3999->alloci64(_4022);
  }
  int _4053 = _8660;
  int _4054 = mosek::fusion::p_WorkStack::_get_impl(_3999)->cof_base;
  int _4055 = mosek::fusion::p_WorkStack::_get_impl(_3999)->bfix_base;
  std::shared_ptr< monty::ndarray< int,1 > > _4056 = mosek::fusion::p_WorkStack::_get_impl(_3999)->i32;
  _checked_ptr_1<int> _ptr__4056(_4056 ? _4056->raw() : nullptr,_4056 ? _4056->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4057 = mosek::fusion::p_WorkStack::_get_impl(_3999)->i64;
  _checked_ptr_1<long long> _ptr__4057(_4057 ? _4057->raw() : nullptr,_4057 ? _4057->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4058 = mosek::fusion::p_WorkStack::_get_impl(_3999)->f64;
  _checked_ptr_1<double> _ptr__4058(_4058 ? _4058->raw() : nullptr,_4058 ? _4058->size(0) : 0);
  _ptr__4056[_4051] = _4019;
  if ((_4012 > (int)1))
  {
    {
      _ptr__4056[safe_add( _4051,(int)1 )] = _4013;
    }
  }
  {}
  if ((x->numInst() < x->getSize()))
  {
    {
      int _4059 = (int)0;
      int _4060 = (int)0;
      int _4061 = (int)0;
      _ptr__4056[_4050] = (int)0;
      int _8662 = (int)0;
      int _8663 = _4022;
      for (int _4062 = _8662; _4062 < _8663; ++_4062)
      {
        {
          _ptr__4058[safe_add( _4055,_4062 )] = 0.0;
        }
      }
      int _8664 = (int)0;
      int _8665 = _4019;
      for (int _4063 = _8664; _4063 < _8665; ++_4063)
      {
        {
          int _8666 = (int)0;
          int _8667 = _4013;
          for (int _4064 = _8666; _4064 < _8667; ++_4064)
          {
            {
              int _4065 = (int)0;
              int _4066 = _ptr__4023[safe_add( safe_add( _4015,_4064 ),(int)1 )];
              int _4067 = _ptr__4023[safe_add( safe_add( _4010,_4063 ),(int)1 )];
              int _4068 = _ptr__4023[safe_add( _4015,_4064 )];
              int _4069 = _ptr__4023[safe_add( _4010,_4063 )];
              while ( ((_4069 < _4067) && (_4068 < _4066)) )
              {
                {
                  if ((_ptr__4017[_4069] < _ptr__4023[safe_add( _4007,_ptr__4023[safe_add( _4009,_4068 )] )]))
                  {
                    {
                      ++ _4069;
                    }
                  }
                  else if((_ptr__4017[_4069] > _ptr__4023[safe_add( _4007,_ptr__4023[safe_add( _4009,_4068 )] )]))
                  {
                    {
                      ++ _4068;
                    }
                  }
                  else
                  {
                    {
                      _ptr__4057[safe_add( _4052,_4061 )] = _ptr__4024[safe_add( _4005,_ptr__4023[safe_add( _4009,_4068 )] )];
                      _ptr__4058[safe_add( _4054,_4061 )] = _ptr__4018[_4069];
                      ++ _4065;
                      ++ _4061;
                      ++ _4069;
                      ++ _4068;
                    }
                  }
                }
              }
              if ((_4065 > (int)0))
              {
                {
                  _ptr__4056[safe_add( safe_add( _4050,_4060 ),(int)1 )] = _4061;
                  _ptr__4057[safe_add( _4053,_4060 )] = _4059;
                  ++ _4060;
                }
              }
              {}
              ++ _4059;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int _4070 = (int)0;
      int _4071 = (int)0;
      _ptr__4056[_4050] = (int)0;
      int _4072 = (int)0;
      while ( (_4072 < _4025) )
      {
        {
          int _4073 = safe_add( _4072,(int)1 );
          while ( ((_4073 < _4025) && (_ptr__4016[_4073] == _ptr__4016[_4072])) )
          {
            {
              ++ _4073;
            }
          }
          int _8668 = (int)0;
          int _8669 = _4013;
          for (int _4074 = _8668; _4074 < _8669; ++_4074)
          {
            {
              int _8670 = _4072;
              int _8671 = _4073;
              for (int _4075 = _8670; _4075 < _8671; ++_4075)
              {
                {
                  _ptr__4057[safe_add( _4052,_4070 )] = _ptr__4024[safe_add( safe_add( _4005,safe_mul( _ptr__4017[_4075],_4013 ) ),_4074 )];
                  _ptr__4058[safe_add( _4054,_4070 )] = _ptr__4018[_4075];
                  ++ _4070;
                }
              }
              _ptr__4056[safe_add( safe_add( _4050,_4071 ),(int)1 )] = _4070;
              _ptr__4057[safe_add( _4053,_4071 )] = safe_add( safe_mul( _ptr__4016[_4072],_4013 ),_4074 );
              _ptr__4058[safe_add( _4055,_4071 )] = (int)0;
              ++ _4071;
            }
          }
          _4072 = _4073;
        }
      }
    }
  }
  if ((!_4048))
  {
    {
      _3999->popi64(_4022);
    }
  }
  {}
  _4001->clear();
}
void mosek::fusion::p_ExprMulVar::validate(int _4076,int _4077,std::shared_ptr< monty::ndarray< int,1 > > _4078,std::shared_ptr< monty::ndarray< int,1 > > _4079,std::shared_ptr< monty::ndarray< double,1 > > _4080){
  _checked_ptr_1<int> _ptr__4078(_4078 ? _4078->raw() : nullptr, _4078 ? _4078->size(0) : 0);
  _checked_ptr_1<int> _ptr__4079(_4079 ? _4079->raw() : nullptr, _4079 ? _4079->size(0) : 0);
  _checked_ptr_1<double> _ptr__4080(_4080 ? _4080->raw() : nullptr, _4080 ? _4080->size(0) : 0);
  bool _4081 = true;
  {
    int _8672 = (int)0;
    int _8673 = (int)((_4078)->size(0));
    for (int _4082 = _8672; _4082 < _8673; ++_4082)
    {
      {
        if (((_ptr__4078[_4082] < (int)0) || ((_ptr__4078[_4082] >= _4076) || ((_ptr__4079[_4082] < (int)0) || (_ptr__4079[_4082] >= _4077)))))
        {
          {
            _4081 = false;
          }
        }
        {}
      }
    }
    int _8674 = (int)1;
    int _8675 = (int)((_4078)->size(0));
    for (int _4083 = _8674; _4083 < _8675; ++_4083)
    {
      {
        if (((_ptr__4078[(_4083 - (int)1)] > _ptr__4078[_4083]) || ((_ptr__4078[(_4083 - (int)1)] == _ptr__4078[_4083]) && (_ptr__4079[(_4083 - (int)1)] >= _ptr__4079[_4083]))))
        {
          {
            _4081 = false;
          }
        }
        {}
      }
    }
  }
  if ((!_4081))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid matrix data"));
    }
  }
  {}
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprMulVar::resshape(int _4084,int _4085,std::shared_ptr< monty::ndarray< int,1 > > _4086,bool _4087){
  _checked_ptr_1<int> _ptr__4086(_4086 ? _4086->raw() : nullptr, _4086 ? _4086->size(0) : 0);
  if (_4087)
  {
    {
      return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_4084),(int)(_ptr__4086[(int)1])});
    }
  }
  else
  {
    {
      return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__4086[(int)0]),(int)(_4085)});
    }
  }
}
std::string mosek::fusion::ExprMulVar :: toString() { return mosek::fusion::p_ExprMulVar::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulVar::toString(){
  if (left)
  {
    {
      return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulVar(M,"))->__mosek_2fusion_2Utils_2StringBuffer__a(x->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
    }
  }
  else
  {
    {
      return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulVar("))->__mosek_2fusion_2Utils_2StringBuffer__a(x->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",M)"))->toString();
    }
  }
}
void mosek::fusion::p_ExprMulVar::destroy(){x.reset();mcof.reset();msubj.reset();msubi.reset();}void mosek::fusion::ExprMulVar::destroy() { mosek::fusion::p_ExprMulVar::_get_impl(this)->destroy(); }mosek::fusion::ExprMulScalarVar::ExprMulScalarVar(mosek::fusion::p_ExprMulScalarVar *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulScalarVar()" << this << std::endl; */ }mosek::fusion::ExprMulScalarVar::~ExprMulScalarVar() {  /* std::cout << "~ExprMulScalarVar()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulScalarVar::p_ExprMulScalarVar  (::mosek::fusion::ExprMulScalarVar * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulScalarVar::t mosek::fusion::p_ExprMulScalarVar::_new_ExprMulScalarVar  (int _4088,    int _4089,    std::shared_ptr< monty::ndarray< int,1 > > _4090,    std::shared_ptr< monty::ndarray< int,1 > > _4091,    std::shared_ptr< monty::ndarray< double,1 > > _4092,    monty::rc_ptr< ::mosek::fusion::Variable > _4093){ return new mosek::fusion::ExprMulScalarVar(_4088,_4089,_4090,_4091,_4092,_4093); }mosek::fusion::ExprMulScalarVar::ExprMulScalarVar  (int _4088,    int _4089,    std::shared_ptr< monty::ndarray< int,1 > > _4090,    std::shared_ptr< monty::ndarray< int,1 > > _4091,    std::shared_ptr< monty::ndarray< double,1 > > _4092,    monty::rc_ptr< ::mosek::fusion::Variable > _4093) :    ExprMulScalarVar(new mosek::fusion::p_ExprMulScalarVar(this)){ mosek::fusion::p_ExprMulScalarVar::_get_impl(this)->_initialize(_4088,_4089,_4090,_4091,_4092,_4093); }void mosek::fusion::p_ExprMulScalarVar::_initialize  (int _4088,    int _4089,    std::shared_ptr< monty::ndarray< int,1 > > _4090,    std::shared_ptr< monty::ndarray< int,1 > > _4091,    std::shared_ptr< monty::ndarray< double,1 > > _4092,    monty::rc_ptr< ::mosek::fusion::Variable > _4093){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__4090(_4090 ? _4090->raw() : nullptr, _4090 ? _4090->size(0) : 0);
    _checked_ptr_1<int> _ptr__4091(_4091 ? _4091->raw() : nullptr, _4091 ? _4091->size(0) : 0);
    _checked_ptr_1<double> _ptr__4092(_4092 ? _4092->raw() : nullptr, _4092 ? _4092->size(0) : 0);
    mosek::fusion::p_ExprMulScalarVar::_initialize(_4088,_4089,::mosek::fusion::Utils::Tools::arraycopy(_4090),::mosek::fusion::Utils::Tools::arraycopy(_4091),::mosek::fusion::Utils::Tools::arraycopy(_4092),_4093,(int)1);
    if ((_4093->getND() != (int)0))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid Variable size"));
      }
    }
    {}
    if (((_4088 < (int)0) || ((_4089 < (int)0) || (((int)((_4090)->size(0)) != (int)((_4091)->size(0))) || ((int)((_4090)->size(0)) != (int)((_4092)->size(0)))))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Invalid Matrix data"));
      }
    }
    {}
    bool _4094 = false;
    int _8676 = (int)0;
    int _8677 = (int)((_4090)->size(0));
    for (int _4095 = _8676; _4095 < _8677; ++_4095)
    {
      {
        if (((_ptr__4090[_4095] < (int)0) || ((_ptr__4090[_4095] >= _4088) || ((_ptr__4091[_4095] < (int)0) || (_ptr__4091[_4095] >= _4089)))))
        {
          {
            _4094 = true;
          }
        }
        {}
      }
    }
    if (_4094)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Invalid Matrix data"));
      }
    }
    {}
    bool _4096 = false;
    int _8678 = (int)1;
    int _8679 = (int)((_4090)->size(0));
    for (int _4097 = _8678; _4097 < _8679; ++_4097)
    {
      {
        if (((_ptr__4090[_4097] < _ptr__4090[(_4097 - (int)1)]) || ((_ptr__4090[_4097] == _ptr__4090[(_4097 - (int)1)]) && (_ptr__4091[_4097] <= _ptr__4091[(_4097 - (int)1)]))))
        {
          {
            _4096 = true;
          }
        }
        {}
      }
    }
    if (_4096)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Matrix data not correctly sorted"));
      }
    }
    {}
  }
}mosek::fusion::ExprMulScalarVar::t mosek::fusion::p_ExprMulScalarVar::_new_ExprMulScalarVar  (int _4098,    int _4099,    std::shared_ptr< monty::ndarray< int,1 > > _4100,    std::shared_ptr< monty::ndarray< int,1 > > _4101,    std::shared_ptr< monty::ndarray< double,1 > > _4102,    monty::rc_ptr< ::mosek::fusion::Variable > _4103,    int _4104){ return new mosek::fusion::ExprMulScalarVar(_4098,_4099,_4100,_4101,_4102,_4103,_4104); }mosek::fusion::ExprMulScalarVar::ExprMulScalarVar  (int _4098,    int _4099,    std::shared_ptr< monty::ndarray< int,1 > > _4100,    std::shared_ptr< monty::ndarray< int,1 > > _4101,    std::shared_ptr< monty::ndarray< double,1 > > _4102,    monty::rc_ptr< ::mosek::fusion::Variable > _4103,    int _4104) :    ExprMulScalarVar(new mosek::fusion::p_ExprMulScalarVar(this)){ mosek::fusion::p_ExprMulScalarVar::_get_impl(this)->_initialize(_4098,_4099,_4100,_4101,_4102,_4103,_4104); }void mosek::fusion::p_ExprMulScalarVar::_initialize  (int _4098,    int _4099,    std::shared_ptr< monty::ndarray< int,1 > > _4100,    std::shared_ptr< monty::ndarray< int,1 > > _4101,    std::shared_ptr< monty::ndarray< double,1 > > _4102,    monty::rc_ptr< ::mosek::fusion::Variable > _4103,    int _4104){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__4100(_4100 ? _4100->raw() : nullptr, _4100 ? _4100->size(0) : 0);
    _checked_ptr_1<int> _ptr__4101(_4101 ? _4101->raw() : nullptr, _4101 ? _4101->size(0) : 0);
    _checked_ptr_1<double> _ptr__4102(_4102 ? _4102->raw() : nullptr, _4102 ? _4102->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_4098),(int)(_4099)}));
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->mdimi = _4098;
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->mdimj = _4099;
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->msubi = _4100;
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->msubj = _4101;
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->mcof = _4102;
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->x = _4103;
  }
}void mosek::fusion::ExprMulScalarVar :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4105,monty::rc_ptr< ::mosek::fusion::WorkStack > _4106,monty::rc_ptr< ::mosek::fusion::WorkStack > _4107) { mosek::fusion::p_ExprMulScalarVar::_get_impl(this)->eval(_4105,_4106,_4107); }void mosek::fusion::p_ExprMulScalarVar::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4105,monty::rc_ptr< ::mosek::fusion::WorkStack > _4106,monty::rc_ptr< ::mosek::fusion::WorkStack > _4107){
  if ((x->numInst() == (int)0))
  {
    {
      _4105->alloc_expr((int)2,(int)0,(int)0,false);
      ((*mosek::fusion::p_WorkStack::_get_impl(_4105)->i32)(mosek::fusion::p_WorkStack::_get_impl(_4105)->shape_base)) = mdimi;
      ((*mosek::fusion::p_WorkStack::_get_impl(_4105)->i32)(safe_add( mosek::fusion::p_WorkStack::_get_impl(_4105)->shape_base,(int)1 ))) = mdimj;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _4108 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)1)));
      _checked_ptr_1<long long> _ptr__4108(_4108 ? _4108->raw() : nullptr,_4108 ? _4108->size(0) : 0);
      x->inst((int)0,_4108);
      long long _4109 = _ptr__4108[(int)0];
      int _4110 = (int)((msubi)->size(0));
      int _4111 = _4110;
      bool _4112 = (_4110 < safe_mul( mdimi,mdimj ));
      _4105->alloc_expr((int)2,_4110,_4111,_4112);
      int _4113 = mosek::fusion::p_WorkStack::_get_impl(_4105)->ptr_base;
      ((*mosek::fusion::p_WorkStack::_get_impl(_4105)->i32)(mosek::fusion::p_WorkStack::_get_impl(_4105)->shape_base)) = mdimi;
      ((*mosek::fusion::p_WorkStack::_get_impl(_4105)->i32)(safe_add( mosek::fusion::p_WorkStack::_get_impl(_4105)->shape_base,(int)1 ))) = mdimj;
      int _4114 = mosek::fusion::p_WorkStack::_get_impl(_4105)->nidxs_base;
      int _4115 = mosek::fusion::p_WorkStack::_get_impl(_4105)->sp_base;
      int _4116 = mosek::fusion::p_WorkStack::_get_impl(_4105)->cof_base;
      int _4117 = mosek::fusion::p_WorkStack::_get_impl(_4105)->bfix_base;
      std::shared_ptr< monty::ndarray< int,1 > > _4118 = mosek::fusion::p_WorkStack::_get_impl(_4105)->i32;
      _checked_ptr_1<int> _ptr__4118(_4118 ? _4118->raw() : nullptr,_4118 ? _4118->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4119 = mosek::fusion::p_WorkStack::_get_impl(_4105)->i64;
      _checked_ptr_1<long long> _ptr__4119(_4119 ? _4119->raw() : nullptr,_4119 ? _4119->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4120 = mosek::fusion::p_WorkStack::_get_impl(_4105)->f64;
      _checked_ptr_1<double> _ptr__4120(_4120 ? _4120->raw() : nullptr,_4120 ? _4120->size(0) : 0);
      {
        int _8680 = (int)0;
        int _8681 = _4110;
        for (int _4121 = _8680; _4121 < _8681; ++_4121)
        {
          {
            _ptr__4120[safe_add( _4117,_4121 )] = (int)0;
          }
        }
        int _8682 = (int)0;
        int _8683 = _4111;
        for (int _4122 = _8682; _4122 < _8683; ++_4122)
        {
          {
            _ptr__4120[safe_add( _4116,_4122 )] = ((*mcof)(_4122));
          }
        }
        int _8684 = (int)0;
        int _8685 = _4111;
        for (int _4123 = _8684; _4123 < _8685; ++_4123)
        {
          {
            _ptr__4119[safe_add( _4114,_4123 )] = _4109;
          }
        }
        if (_4112)
        {
          {
            int _8686 = (int)0;
            int _8687 = _4110;
            for (int _4124 = _8686; _4124 < _8687; ++_4124)
            {
              {
                _ptr__4119[safe_add( _4115,_4124 )] = safe_add( safe_mul( ((*msubi)(_4124)),mdimj ),((*msubj)(_4124)) );
              }
            }
          }
        }
        {}
        int _8688 = (int)0;
        int _8689 = safe_add( _4110,(int)1 );
        for (int _4125 = _8688; _4125 < _8689; ++_4125)
        {
          {
            _ptr__4118[safe_add( _4113,_4125 )] = _4125;
          }
        }
      }
    }
  }
}
std::string mosek::fusion::ExprMulScalarVar :: toString() { return mosek::fusion::p_ExprMulScalarVar::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulScalarVar::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulScalarVar(M("))->__mosek_2fusion_2Utils_2StringBuffer__a(mdimi)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(mdimj)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("), "))->__mosek_2fusion_2Utils_2StringBuffer__a(x->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulScalarVar::destroy(){x.reset();mcof.reset();msubj.reset();msubi.reset();}void mosek::fusion::ExprMulScalarVar::destroy() { mosek::fusion::p_ExprMulScalarVar::_get_impl(this)->destroy(); }mosek::fusion::ExprMulVarScalarConst::ExprMulVarScalarConst(mosek::fusion::p_ExprMulVarScalarConst *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulVarScalarConst()" << this << std::endl; */ }mosek::fusion::ExprMulVarScalarConst::~ExprMulVarScalarConst() {  /* std::cout << "~ExprMulVarScalarConst()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulVarScalarConst::p_ExprMulVarScalarConst  (::mosek::fusion::ExprMulVarScalarConst * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulVarScalarConst::t mosek::fusion::p_ExprMulVarScalarConst::_new_ExprMulVarScalarConst  (monty::rc_ptr< ::mosek::fusion::Variable > _4126,    double _4127){ return new mosek::fusion::ExprMulVarScalarConst(_4126,_4127); }mosek::fusion::ExprMulVarScalarConst::ExprMulVarScalarConst  (monty::rc_ptr< ::mosek::fusion::Variable > _4126,    double _4127) :    ExprMulVarScalarConst(new mosek::fusion::p_ExprMulVarScalarConst(this)){ mosek::fusion::p_ExprMulVarScalarConst::_get_impl(this)->_initialize(_4126,_4127); }void mosek::fusion::p_ExprMulVarScalarConst::_initialize  (monty::rc_ptr< ::mosek::fusion::Variable > _4126,    double _4127){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_4126->getShape());
    mosek::fusion::p_ExprMulVarScalarConst::_get_impl(::mosek::fusion::ExprMulVarScalarConst::t(_pubthis))->x = _4126;
    mosek::fusion::p_ExprMulVarScalarConst::_get_impl(::mosek::fusion::ExprMulVarScalarConst::t(_pubthis))->c = _4127;
  }
}void mosek::fusion::ExprMulVarScalarConst :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4128,monty::rc_ptr< ::mosek::fusion::WorkStack > _4129,monty::rc_ptr< ::mosek::fusion::WorkStack > _4130) { mosek::fusion::p_ExprMulVarScalarConst::_get_impl(this)->eval(_4128,_4129,_4130); }void mosek::fusion::p_ExprMulVarScalarConst::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4128,monty::rc_ptr< ::mosek::fusion::WorkStack > _4129,monty::rc_ptr< ::mosek::fusion::WorkStack > _4130){
  int _4131 = x->numInst();
  int _4132 = _4131;
  std::shared_ptr< monty::ndarray< int,1 > > _4133 = x->getShape();
  _checked_ptr_1<int> _ptr__4133(_4133 ? _4133->raw() : nullptr,_4133 ? _4133->size(0) : 0);
  int _4134 = (int)((_4133)->size(0));
  int _4135 = _4128->alloci32(safe_add( _4132,(int)1 ));
  int _4136 = _4128->alloci64(_4131);
  bool _4137 = (::mosek::fusion::p_Set::size(_4133) > _4132);
  int _8690;
  bool _8691 = _4137;
  if (_8691)
  {
    _8690 = _4128->alloci64(_4132);
  }
  else
  {
    _8690 = (int)0;
  }
  int _4138 = _8690;
  int _4139 = _4128->allocf64(_4131);
  int _4140 = _4128->allocf64(_4132);
  if (_4137)
  {
    {
      x->inst(_4138,mosek::fusion::p_WorkStack::_get_impl(_4128)->i64,_4136,mosek::fusion::p_WorkStack::_get_impl(_4128)->i64);
    }
  }
  else
  {
    {
      x->inst(_4136,mosek::fusion::p_WorkStack::_get_impl(_4128)->i64);
    }
  }
  int _8692;
  bool _8693 = _4137;
  if (_8693)
  {
    _8692 = (int)1;
  }
  else
  {
    _8692 = (int)0;
  }
  _4128->pushi32(_8692);
  _4128->pushi32(_4132);
  _4128->pushi32(_4131);
  int _8694 = (int)0;
  int _8695 = _4134;
  for (int _4141 = _8694; _4141 < _8695; ++_4141)
  {
    {
      _4128->pushi32(_ptr__4133[_4141]);
    }
  }
  _4128->pushi32(_4134);
  std::shared_ptr< monty::ndarray< int,1 > > _4142 = mosek::fusion::p_WorkStack::_get_impl(_4128)->i32;
  _checked_ptr_1<int> _ptr__4142(_4142 ? _4142->raw() : nullptr,_4142 ? _4142->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4143 = mosek::fusion::p_WorkStack::_get_impl(_4128)->i64;
  _checked_ptr_1<long long> _ptr__4143(_4143 ? _4143->raw() : nullptr,_4143 ? _4143->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4144 = mosek::fusion::p_WorkStack::_get_impl(_4128)->f64;
  _checked_ptr_1<double> _ptr__4144(_4144 ? _4144->raw() : nullptr,_4144 ? _4144->size(0) : 0);
  {
    int _8696 = (int)0;
    int _8697 = safe_add( _4132,(int)1 );
    for (int _4145 = _8696; _4145 < _8697; ++_4145)
    {
      {
        _ptr__4142[safe_add( _4135,_4145 )] = _4145;
      }
    }
    int _8698 = (int)0;
    int _8699 = _4131;
    for (int _4146 = _8698; _4146 < _8699; ++_4146)
    {
      {
        _ptr__4144[safe_add( _4139,_4146 )] = 1.0;
      }
    }
    int _8700 = (int)0;
    int _8701 = _4132;
    for (int _4147 = _8700; _4147 < _8701; ++_4147)
    {
      {
        _ptr__4144[safe_add( _4140,_4147 )] = 0.0;
      }
    }
  }
}
std::string mosek::fusion::ExprMulVarScalarConst :: toString() { return mosek::fusion::p_ExprMulVarScalarConst::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulVarScalarConst::toString(){
  return std::string ("ExprMulVarScalarConst()");
}
void mosek::fusion::p_ExprMulVarScalarConst::destroy(){x.reset();}void mosek::fusion::ExprMulVarScalarConst::destroy() { mosek::fusion::p_ExprMulVarScalarConst::_get_impl(this)->destroy(); }mosek::fusion::ExprAdd::ExprAdd(mosek::fusion::p_ExprAdd *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprAdd()" << this << std::endl; */ }mosek::fusion::ExprAdd::~ExprAdd() {  /* std::cout << "~ExprAdd()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprAdd::p_ExprAdd  (::mosek::fusion::ExprAdd * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprAdd::t mosek::fusion::p_ExprAdd::_new_ExprAdd  (monty::rc_ptr< ::mosek::fusion::Expression > _4148,    monty::rc_ptr< ::mosek::fusion::Expression > _4149,    double _4150,    double _4151){ return new mosek::fusion::ExprAdd(_4148,_4149,_4150,_4151); }mosek::fusion::ExprAdd::ExprAdd  (monty::rc_ptr< ::mosek::fusion::Expression > _4148,    monty::rc_ptr< ::mosek::fusion::Expression > _4149,    double _4150,    double _4151) :    ExprAdd(new mosek::fusion::p_ExprAdd(this)){ mosek::fusion::p_ExprAdd::_get_impl(this)->_initialize(_4148,_4149,_4150,_4151); }void mosek::fusion::p_ExprAdd::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4148,    monty::rc_ptr< ::mosek::fusion::Expression > _4149,    double _4150,    double _4151){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_4148->getShape());
    mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->e1 = _4148;
    mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->e2 = _4149;
    mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m1 = _4150;
    mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m2 = _4151;
    if ((_4148->getND() != _4149->getND()))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
      }
    }
    {}
    int _8702 = (int)0;
    int _8703 = _4148->getND();
    for (int _4152 = _8702; _4152 < _8703; ++_4152)
    {
      {
        if ((_4148->getDim(_4152) != _4149->getDim(_4152)))
        {
          {
            throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
          }
        }
        {}
      }
    }
  }
}void mosek::fusion::ExprAdd :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4153,monty::rc_ptr< ::mosek::fusion::WorkStack > _4154,monty::rc_ptr< ::mosek::fusion::WorkStack > _4155) { mosek::fusion::p_ExprAdd::_get_impl(this)->eval(_4153,_4154,_4155); }void mosek::fusion::p_ExprAdd::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4153,monty::rc_ptr< ::mosek::fusion::WorkStack > _4154,monty::rc_ptr< ::mosek::fusion::WorkStack > _4155){
  e1->eval(_4154,_4153,_4155);
  e2->eval(_4154,_4153,_4155);
  _4154->pop_expr();
  int _4156 = mosek::fusion::p_WorkStack::_get_impl(_4154)->nd;
  int _4157 = mosek::fusion::p_WorkStack::_get_impl(_4154)->shape_base;
  int _4158 = mosek::fusion::p_WorkStack::_get_impl(_4154)->nelem;
  int _4159 = mosek::fusion::p_WorkStack::_get_impl(_4154)->nnz;
  bool _4160 = mosek::fusion::p_WorkStack::_get_impl(_4154)->hassp;
  int _4161 = mosek::fusion::p_WorkStack::_get_impl(_4154)->ptr_base;
  int _4162 = mosek::fusion::p_WorkStack::_get_impl(_4154)->sp_base;
  int _4163 = mosek::fusion::p_WorkStack::_get_impl(_4154)->nidxs_base;
  int _4164 = mosek::fusion::p_WorkStack::_get_impl(_4154)->bfix_base;
  int _4165 = mosek::fusion::p_WorkStack::_get_impl(_4154)->cof_base;
  _4154->pop_expr();
  int _4166 = mosek::fusion::p_WorkStack::_get_impl(_4154)->nd;
  int _4167 = mosek::fusion::p_WorkStack::_get_impl(_4154)->shape_base;
  int _4168 = mosek::fusion::p_WorkStack::_get_impl(_4154)->nelem;
  int _4169 = mosek::fusion::p_WorkStack::_get_impl(_4154)->nnz;
  bool _4170 = mosek::fusion::p_WorkStack::_get_impl(_4154)->hassp;
  int _4171 = mosek::fusion::p_WorkStack::_get_impl(_4154)->ptr_base;
  int _4172 = mosek::fusion::p_WorkStack::_get_impl(_4154)->sp_base;
  int _4173 = mosek::fusion::p_WorkStack::_get_impl(_4154)->nidxs_base;
  int _4174 = mosek::fusion::p_WorkStack::_get_impl(_4154)->bfix_base;
  int _4175 = mosek::fusion::p_WorkStack::_get_impl(_4154)->cof_base;
  std::shared_ptr< monty::ndarray< int,1 > > _4176 = mosek::fusion::p_WorkStack::_get_impl(_4154)->i32;
  _checked_ptr_1<int> _ptr__4176(_4176 ? _4176->raw() : nullptr,_4176 ? _4176->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4177 = mosek::fusion::p_WorkStack::_get_impl(_4154)->i64;
  _checked_ptr_1<long long> _ptr__4177(_4177 ? _4177->raw() : nullptr,_4177 ? _4177->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4178 = mosek::fusion::p_WorkStack::_get_impl(_4154)->f64;
  _checked_ptr_1<double> _ptr__4178(_4178 ? _4178->raw() : nullptr,_4178 ? _4178->size(0) : 0);
  if ((_4166 != _4156))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
    }
  }
  {}
  int _8704 = (int)0;
  int _8705 = _4166;
  for (int _4179 = _8704; _4179 < _8705; ++_4179)
  {
    {
      if ((_ptr__4176[safe_add( _4167,_4179 )] != _ptr__4176[safe_add( _4157,_4179 )]))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
        }
      }
      {}
    }
  }
  if (((!_4170) && (!_4160)))
  {
    {
      int _4180 = _4168;
      int _4181 = safe_add( _4169,_4159 );
      int _4182 = _4166;
      _4153->alloc_expr(_4182,_4180,_4181,false);
      int _4183 = mosek::fusion::p_WorkStack::_get_impl(_4153)->shape_base;
      int _4184 = mosek::fusion::p_WorkStack::_get_impl(_4153)->ptr_base;
      int _4185 = mosek::fusion::p_WorkStack::_get_impl(_4153)->sp_base;
      int _4186 = mosek::fusion::p_WorkStack::_get_impl(_4153)->nidxs_base;
      int _4187 = mosek::fusion::p_WorkStack::_get_impl(_4153)->bfix_base;
      int _4188 = mosek::fusion::p_WorkStack::_get_impl(_4153)->cof_base;
      std::shared_ptr< monty::ndarray< int,1 > > _4189 = mosek::fusion::p_WorkStack::_get_impl(_4153)->i32;
      _checked_ptr_1<int> _ptr__4189(_4189 ? _4189->raw() : nullptr,_4189 ? _4189->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4190 = mosek::fusion::p_WorkStack::_get_impl(_4153)->i64;
      _checked_ptr_1<long long> _ptr__4190(_4190 ? _4190->raw() : nullptr,_4190 ? _4190->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4191 = mosek::fusion::p_WorkStack::_get_impl(_4153)->f64;
      _checked_ptr_1<double> _ptr__4191(_4191 ? _4191->raw() : nullptr,_4191 ? _4191->size(0) : 0);
      int _8706 = (int)0;
      int _8707 = _4182;
      for (int _4192 = _8706; _4192 < _8707; ++_4192)
      {
        {
          _ptr__4189[safe_add( _4183,_4192 )] = _ptr__4176[safe_add( _4167,_4192 )];
        }
      }
      int _4193 = (int)0;
      _ptr__4189[_4184] = (int)0;
      int _8708 = (int)0;
      int _8709 = _4180;
      for (int _4194 = _8708; _4194 < _8709; ++_4194)
      {
        {
          int _8710 = _ptr__4176[safe_add( _4171,_4194 )];
          int _8711 = _ptr__4176[safe_add( safe_add( _4171,_4194 ),(int)1 )];
          for (int _4195 = _8710; _4195 < _8711; ++_4195)
          {
            {
              _ptr__4190[safe_add( _4186,_4193 )] = _ptr__4177[safe_add( _4173,_4195 )];
              _ptr__4191[safe_add( _4188,_4193 )] = (_ptr__4178[safe_add( _4175,_4195 )] * m1);
              ++ _4193;
            }
          }
          int _8712 = _ptr__4176[safe_add( _4161,_4194 )];
          int _8713 = _ptr__4176[safe_add( safe_add( _4161,_4194 ),(int)1 )];
          for (int _4196 = _8712; _4196 < _8713; ++_4196)
          {
            {
              _ptr__4190[safe_add( _4186,_4193 )] = _ptr__4177[safe_add( _4163,_4196 )];
              _ptr__4191[safe_add( _4188,_4193 )] = (_ptr__4178[safe_add( _4165,_4196 )] * m2);
              ++ _4193;
            }
          }
          _ptr__4189[safe_add( safe_add( _4184,_4194 ),(int)1 )] = _4193;
          _ptr__4191[safe_add( _4187,_4194 )] = ((_ptr__4178[safe_add( _4174,_4194 )] * m1) + (_ptr__4178[safe_add( _4164,_4194 )] * m2));
        }
      }
    }
  }
  else if(((!_4170) || (!_4160)))
  {
    {
      if ((!_4160))
      {
        {
          int _4197 = _4158;
          int _4198 = _4159;
          int _4199 = _4161;
          int _4200 = _4162;
          int _4201 = _4163;
          int _4202 = _4164;
          int _4203 = _4165;
          _4158 = _4168;
          _4159 = _4169;
          _4161 = _4171;
          _4162 = _4172;
          _4163 = _4173;
          _4164 = _4174;
          _4165 = _4175;
          _4168 = _4197;
          _4169 = _4198;
          _4171 = _4199;
          _4172 = _4200;
          _4173 = _4201;
          _4174 = _4202;
          _4175 = _4203;
        }
      }
      {}
      double _8714;
      bool _8715 = (!_4170);
      if (_8715)
      {
        _8714 = mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m1;
      }
      else
      {
        _8714 = mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m2;
      }
      double _4204 = _8714;
      double _8716;
      bool _8717 = (!_4170);
      if (_8717)
      {
        _8716 = mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m2;
      }
      else
      {
        _8716 = mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m1;
      }
      double _4205 = _8716;
      int _4206 = _4168;
      int _4207 = safe_add( _4169,_4159 );
      int _4208 = _4166;
      _4153->alloc_expr(_4208,_4206,_4207,false);
      int _4209 = mosek::fusion::p_WorkStack::_get_impl(_4153)->shape_base;
      int _4210 = mosek::fusion::p_WorkStack::_get_impl(_4153)->ptr_base;
      int _4211 = mosek::fusion::p_WorkStack::_get_impl(_4153)->sp_base;
      int _4212 = mosek::fusion::p_WorkStack::_get_impl(_4153)->nidxs_base;
      int _4213 = mosek::fusion::p_WorkStack::_get_impl(_4153)->bfix_base;
      int _4214 = mosek::fusion::p_WorkStack::_get_impl(_4153)->cof_base;
      std::shared_ptr< monty::ndarray< int,1 > > _4215 = mosek::fusion::p_WorkStack::_get_impl(_4153)->i32;
      _checked_ptr_1<int> _ptr__4215(_4215 ? _4215->raw() : nullptr,_4215 ? _4215->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4216 = mosek::fusion::p_WorkStack::_get_impl(_4153)->i64;
      _checked_ptr_1<long long> _ptr__4216(_4216 ? _4216->raw() : nullptr,_4216 ? _4216->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4217 = mosek::fusion::p_WorkStack::_get_impl(_4153)->f64;
      _checked_ptr_1<double> _ptr__4217(_4217 ? _4217->raw() : nullptr,_4217 ? _4217->size(0) : 0);
      {
        int _4218 = (int)0;
        int _8718 = (int)0;
        int _8719 = _4208;
        for (int _4219 = _8718; _4219 < _8719; ++_4219)
        {
          {
            _ptr__4215[safe_add( _4209,_4219 )] = _ptr__4176[safe_add( _4167,_4219 )];
          }
        }
        int _8720 = (int)0;
        int _8721 = safe_add( _4206,(int)1 );
        for (int _4220 = _8720; _4220 < _8721; ++_4220)
        {
          {
            _ptr__4215[safe_add( _4210,_4220 )] = (int)0;
          }
        }
        int _8722 = (int)0;
        int _8723 = _4168;
        for (int _4221 = _8722; _4221 < _8723; ++_4221)
        {
          {
            _ptr__4215[safe_add( safe_add( _4210,_4221 ),(int)1 )] += (_ptr__4176[safe_add( safe_add( _4171,_4221 ),(int)1 )] - _ptr__4176[safe_add( _4171,_4221 )]);
          }
        }
        int _8724 = (int)0;
        int _8725 = _4158;
        for (int _4222 = _8724; _4222 < _8725; ++_4222)
        {
          {
            long long _4223 = _ptr__4177[safe_add( _4162,_4222 )];
            _ptr__4215[safe_add( safe_add( _4210,_4223 ),(int)1 )] += (_ptr__4176[safe_add( safe_add( _4161,_4222 ),(int)1 )] - _ptr__4176[safe_add( _4161,_4222 )]);
          }
        }
        int _8726 = (int)0;
        int _8727 = _4206;
        for (int _4224 = _8726; _4224 < _8727; ++_4224)
        {
          {
            _ptr__4215[safe_add( safe_add( _4210,_4224 ),(int)1 )] += _ptr__4215[safe_add( _4210,_4224 )];
          }
        }
        int _8728 = (int)0;
        int _8729 = _4168;
        for (int _4225 = _8728; _4225 < _8729; ++_4225)
        {
          {
            int _4226 = _ptr__4215[safe_add( _4210,_4225 )];
            int _4227 = _ptr__4176[safe_add( _4171,_4225 )];
            int _4228 = (_ptr__4176[safe_add( safe_add( _4171,_4225 ),(int)1 )] - _ptr__4176[safe_add( _4171,_4225 )]);
            int _8730 = (int)0;
            int _8731 = _4228;
            for (int _4229 = _8730; _4229 < _8731; ++_4229)
            {
              {
                _ptr__4216[safe_add( safe_add( _4212,_4226 ),_4229 )] = _ptr__4177[safe_add( safe_add( _4173,_4227 ),_4229 )];
                _ptr__4217[safe_add( safe_add( _4214,_4226 ),_4229 )] = (_ptr__4178[safe_add( safe_add( _4175,_4227 ),_4229 )] * _4204);
              }
            }
            _ptr__4215[safe_add( _4210,_4225 )] += _4228;
            _ptr__4217[safe_add( _4213,_4225 )] = (_ptr__4178[safe_add( _4174,_4225 )] * _4204);
          }
        }
        int _8732 = (int)0;
        int _8733 = _4158;
        for (int _4230 = _8732; _4230 < _8733; ++_4230)
        {
          {
            long long _4231 = _ptr__4177[safe_add( _4162,_4230 )];
            int _4232 = _ptr__4215[safe_add( _4210,_4231 )];
            int _4233 = _ptr__4176[safe_add( _4161,_4230 )];
            int _4234 = (_ptr__4176[safe_add( safe_add( _4161,_4230 ),(int)1 )] - _ptr__4176[safe_add( _4161,_4230 )]);
            int _8734 = (int)0;
            int _8735 = _4234;
            for (int _4235 = _8734; _4235 < _8735; ++_4235)
            {
              {
                _ptr__4216[safe_add( safe_add( _4212,_4232 ),_4235 )] = _ptr__4177[safe_add( safe_add( _4163,_4233 ),_4235 )];
                _ptr__4217[safe_add( safe_add( _4214,_4232 ),_4235 )] = (_ptr__4178[safe_add( safe_add( _4165,_4233 ),_4235 )] * _4205);
              }
            }
            _ptr__4215[safe_add( _4210,_4231 )] += _4234;
            _ptr__4217[safe_add( _4213,_4231 )] += (_ptr__4178[safe_add( _4164,_4230 )] * _4205);
          }
        }
        int _8736 = (int)0;
        int _8737 = _4206;
        for (int _4236 = _8736; _4236 < _8737; ++_4236)
        {
          {
            _ptr__4215[(safe_add( _4210,_4206 ) - _4236)] = _ptr__4215[((safe_add( _4210,_4206 ) - _4236) - (int)1)];
          }
        }
        _ptr__4215[_4210] = (int)0;
      }
    }
  }
  else
  {
    {
      int _4237 = safe_add( _4169,_4159 );
      int _4238 = (int)0;
      int _4239 = _4166;
      long long _4240 = (long long)1;
      int _8738 = (int)0;
      int _8739 = _4239;
      for (int _4241 = _8738; _4241 < _8739; ++_4241)
      {
        {
          _4240 *= _ptr__4176[safe_add( _4167,_4241 )];
        }
      }
      {
        int _4242 = (int)0;
        int _4243 = (int)0;
        while ( ((_4243 < _4168) && (_4242 < _4158)) )
        {
          {
            if ((_ptr__4177[safe_add( _4172,_4243 )] < _ptr__4177[safe_add( _4162,_4242 )]))
            {
              {
                ++ _4238;
                ++ _4243;
              }
            }
            else if((_ptr__4177[safe_add( _4172,_4243 )] > _ptr__4177[safe_add( _4162,_4242 )]))
            {
              {
                ++ _4238;
                ++ _4242;
              }
            }
            else
            {
              {
                ++ _4238;
                ++ _4243;
                ++ _4242;
              }
            }
          }
        }
        _4238 += (safe_add( (_4168 - _4243),_4158 ) - _4242);
      }
      bool _4244 = (_4238 < _4240);
      _4153->alloc_expr(_4239,_4238,_4237,_4244);
      int _4245 = mosek::fusion::p_WorkStack::_get_impl(_4153)->shape_base;
      int _4246 = mosek::fusion::p_WorkStack::_get_impl(_4153)->ptr_base;
      int _8740;
      bool _8741 = _4244;
      if (_8741)
      {
        _8740 = mosek::fusion::p_WorkStack::_get_impl(_4153)->sp_base;
      }
      else
      {
        _8740 = _4153->alloci64(_4238);
      }
      int _4247 = _8740;
      int _4248 = mosek::fusion::p_WorkStack::_get_impl(_4153)->nidxs_base;
      int _4249 = mosek::fusion::p_WorkStack::_get_impl(_4153)->bfix_base;
      int _4250 = mosek::fusion::p_WorkStack::_get_impl(_4153)->cof_base;
      std::shared_ptr< monty::ndarray< int,1 > > _4251 = mosek::fusion::p_WorkStack::_get_impl(_4153)->i32;
      _checked_ptr_1<int> _ptr__4251(_4251 ? _4251->raw() : nullptr,_4251 ? _4251->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4252 = mosek::fusion::p_WorkStack::_get_impl(_4153)->i64;
      _checked_ptr_1<long long> _ptr__4252(_4252 ? _4252->raw() : nullptr,_4252 ? _4252->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4253 = mosek::fusion::p_WorkStack::_get_impl(_4153)->f64;
      _checked_ptr_1<double> _ptr__4253(_4253 ? _4253->raw() : nullptr,_4253 ? _4253->size(0) : 0);
      int _8742 = (int)0;
      int _8743 = _4239;
      for (int _4254 = _8742; _4254 < _8743; ++_4254)
      {
        {
          _ptr__4251[safe_add( _4245,_4254 )] = _ptr__4176[safe_add( _4167,_4254 )];
        }
      }
      {
        _ptr__4251[_4246] = (int)0;
        int _4255 = (int)0;
        int _4256 = (int)0;
        int _4257 = (int)0;
        int _4258 = (int)0;
        while ( ((_4258 < _4168) && (_4257 < _4158)) )
        {
          {
            if ((_ptr__4177[safe_add( _4172,_4258 )] < _ptr__4177[safe_add( _4162,_4257 )]))
            {
              {
                int _8744 = _ptr__4176[safe_add( _4171,_4258 )];
                int _8745 = _ptr__4176[safe_add( safe_add( _4171,_4258 ),(int)1 )];
                for (int _4259 = _8744; _4259 < _8745; ++_4259)
                {
                  {
                    _ptr__4252[safe_add( _4248,_4256 )] = _ptr__4177[safe_add( _4173,_4259 )];
                    _ptr__4253[safe_add( _4250,_4256 )] = (m1 * _ptr__4178[safe_add( _4175,_4259 )]);
                    ++ _4256;
                  }
                }
                _ptr__4253[safe_add( _4249,_4255 )] = (m1 * _ptr__4178[safe_add( _4174,_4258 )]);
                _ptr__4252[safe_add( _4247,_4255 )] = _ptr__4177[safe_add( _4172,_4258 )];
                _ptr__4251[safe_add( safe_add( _4246,_4255 ),(int)1 )] = _4256;
                ++ _4255;
                ++ _4258;
              }
            }
            else if((_ptr__4177[safe_add( _4162,_4257 )] < _ptr__4177[safe_add( _4172,_4258 )]))
            {
              {
                int _8746 = _ptr__4176[safe_add( _4161,_4257 )];
                int _8747 = _ptr__4176[safe_add( safe_add( _4161,_4257 ),(int)1 )];
                for (int _4260 = _8746; _4260 < _8747; ++_4260)
                {
                  {
                    _ptr__4252[safe_add( _4248,_4256 )] = _ptr__4177[safe_add( _4163,_4260 )];
                    _ptr__4253[safe_add( _4250,_4256 )] = (m2 * _ptr__4178[safe_add( _4165,_4260 )]);
                    ++ _4256;
                  }
                }
                _ptr__4253[safe_add( _4249,_4255 )] = (m1 * _ptr__4178[safe_add( _4164,_4258 )]);
                _ptr__4252[safe_add( _4247,_4255 )] = _ptr__4177[safe_add( _4162,_4257 )];
                _ptr__4251[safe_add( safe_add( _4246,_4255 ),(int)1 )] = _4256;
                ++ _4255;
                ++ _4257;
              }
            }
            else
            {
              {
                int _8748 = _ptr__4176[safe_add( _4171,_4258 )];
                int _8749 = _ptr__4176[safe_add( safe_add( _4171,_4258 ),(int)1 )];
                for (int _4261 = _8748; _4261 < _8749; ++_4261)
                {
                  {
                    _ptr__4252[safe_add( _4248,_4256 )] = _ptr__4177[safe_add( _4173,_4261 )];
                    _ptr__4253[safe_add( _4250,_4256 )] = (m1 * _ptr__4178[safe_add( _4175,_4261 )]);
                    ++ _4256;
                  }
                }
                int _8750 = _ptr__4176[safe_add( _4161,_4257 )];
                int _8751 = _ptr__4176[safe_add( safe_add( _4161,_4257 ),(int)1 )];
                for (int _4262 = _8750; _4262 < _8751; ++_4262)
                {
                  {
                    _ptr__4252[safe_add( _4248,_4256 )] = _ptr__4177[safe_add( _4163,_4262 )];
                    _ptr__4253[safe_add( _4250,_4256 )] = (m2 * _ptr__4178[safe_add( _4165,_4262 )]);
                    ++ _4256;
                  }
                }
                _ptr__4253[safe_add( _4249,_4255 )] = ((m1 * _ptr__4178[safe_add( _4174,_4258 )]) + (m2 * _ptr__4178[safe_add( _4164,_4257 )]));
                _ptr__4252[safe_add( _4247,_4255 )] = _ptr__4177[safe_add( _4172,_4258 )];
                _ptr__4251[safe_add( safe_add( _4246,_4255 ),(int)1 )] = _4256;
                ++ _4255;
                ++ _4258;
                ++ _4257;
              }
            }
          }
        }
        while ( (_4258 < _4168) )
        {
          {
            int _8752 = _ptr__4176[safe_add( _4171,_4258 )];
            int _8753 = _ptr__4176[safe_add( safe_add( _4171,_4258 ),(int)1 )];
            for (int _4263 = _8752; _4263 < _8753; ++_4263)
            {
              {
                _ptr__4252[safe_add( _4248,_4256 )] = _ptr__4177[safe_add( _4173,_4263 )];
                _ptr__4253[safe_add( _4250,_4256 )] = (m1 * _ptr__4178[safe_add( _4175,_4263 )]);
                ++ _4256;
              }
            }
            _ptr__4253[safe_add( _4249,_4255 )] = (m1 * _ptr__4178[safe_add( _4174,_4258 )]);
            _ptr__4252[safe_add( _4247,_4255 )] = _ptr__4177[safe_add( _4172,_4258 )];
            _ptr__4251[safe_add( safe_add( _4246,_4255 ),(int)1 )] = _4256;
            ++ _4255;
            ++ _4258;
          }
        }
        while ( (_4257 < _4158) )
        {
          {
            int _8754 = _ptr__4176[safe_add( _4161,_4257 )];
            int _8755 = _ptr__4176[safe_add( safe_add( _4161,_4257 ),(int)1 )];
            for (int _4264 = _8754; _4264 < _8755; ++_4264)
            {
              {
                _ptr__4252[safe_add( _4248,_4256 )] = _ptr__4177[safe_add( _4163,_4264 )];
                _ptr__4253[safe_add( _4250,_4256 )] = (m2 * _ptr__4178[safe_add( _4165,_4264 )]);
                ++ _4256;
              }
            }
            _ptr__4253[safe_add( _4249,_4255 )] = (m1 * _ptr__4178[safe_add( _4164,_4257 )]);
            _ptr__4252[safe_add( _4247,_4255 )] = _ptr__4177[safe_add( _4162,_4257 )];
            _ptr__4251[safe_add( safe_add( _4246,_4255 ),(int)1 )] = _4256;
            ++ _4255;
            ++ _4257;
          }
        }
      }
      if ((!_4244))
      {
        {
          _4153->popi64(_4238);
        }
      }
      {}
    }
  }
}
std::string mosek::fusion::ExprAdd :: toString() { return mosek::fusion::p_ExprAdd::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprAdd::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprAdd("))->__mosek_2fusion_2Utils_2StringBuffer__a(e1->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(e2->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprAdd::destroy(){e2.reset();e1.reset();}void mosek::fusion::ExprAdd::destroy() { mosek::fusion::p_ExprAdd::_get_impl(this)->destroy(); }mosek::fusion::ExprWSum::ExprWSum(mosek::fusion::p_ExprWSum *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprWSum()" << this << std::endl; */ }mosek::fusion::ExprWSum::~ExprWSum() {  /* std::cout << "~ExprWSum()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprWSum::p_ExprWSum  (::mosek::fusion::ExprWSum * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprWSum::t mosek::fusion::p_ExprWSum::_new_ExprWSum  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _4265,    std::shared_ptr< monty::ndarray< double,1 > > _4266){ return new mosek::fusion::ExprWSum(_4265,_4266); }mosek::fusion::ExprWSum::ExprWSum  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _4265,    std::shared_ptr< monty::ndarray< double,1 > > _4266) :    ExprWSum(new mosek::fusion::p_ExprWSum(this)){ mosek::fusion::p_ExprWSum::_get_impl(this)->_initialize(_4265,_4266); }void mosek::fusion::p_ExprWSum::_initialize  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _4265,    std::shared_ptr< monty::ndarray< double,1 > > _4266){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__4266(_4266 ? _4266->raw() : nullptr, _4266 ? _4266->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(((*_4265)((int)0))->getShape());
    if (((int)((_4266)->size(0)) != (int)((_4265)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Mismatching weights and expressions array lengths"));
      }
    }
    {}
    mosek::fusion::p_ExprWSum::_get_impl(::mosek::fusion::ExprWSum::t(_pubthis))->w = ::mosek::fusion::Utils::Tools::arraycopy(_4266);
    std::shared_ptr< monty::ndarray< int,1 > > _4267 = ((*_4265)((int)0))->getShape();
    _checked_ptr_1<int> _ptr__4267(_4267 ? _4267->raw() : nullptr,_4267 ? _4267->size(0) : 0);
    int _4268 = (int)((_4267)->size(0));
    int _8756 = (int)1;
    int _8757 = (int)((_4265)->size(0));
    for (int _4269 = _8756; _4269 < _8757; ++_4269)
    {
      {
        std::shared_ptr< monty::ndarray< int,1 > > _4270 = ((*_4265)(_4269))->getShape();
        _checked_ptr_1<int> _ptr__4270(_4270 ? _4270->raw() : nullptr,_4270 ? _4270->size(0) : 0);
        if ((_4268 != (int)((_4270)->size(0))))
        {
          {
            throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression shapes"));
          }
        }
        else
        {
          {
            int _8758 = (int)0;
            int _8759 = _4268;
            for (int _4271 = _8758; _4271 < _8759; ++_4271)
            {
              {
                if ((_ptr__4267[_4271] != _ptr__4270[_4271]))
                {
                  {
                    throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression shapes"));
                  }
                }
                {}
              }
            }
          }
        }
      }
    }
    std::vector<monty::rc_ptr< ::mosek::fusion::Expression >> _8760;
    for (int _4272 = (int)0, _8761 = (int)((_4265)->size(0)); _4272 < _8761 ; ++_4272)
    {
      _8760.push_back(((*_4265)(_4272)));
    }
    auto _8762 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_8760.size()),_8760.begin(),_8760.end()));
    mosek::fusion::p_ExprWSum::_get_impl(::mosek::fusion::ExprWSum::t(_pubthis))->es = _8762;
  }
}void mosek::fusion::ExprWSum :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4273,monty::rc_ptr< ::mosek::fusion::WorkStack > _4274,monty::rc_ptr< ::mosek::fusion::WorkStack > _4275) { mosek::fusion::p_ExprWSum::_get_impl(this)->eval(_4273,_4274,_4275); }void mosek::fusion::p_ExprWSum::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4273,monty::rc_ptr< ::mosek::fusion::WorkStack > _4274,monty::rc_ptr< ::mosek::fusion::WorkStack > _4275){
  int _4276 = (int)((es)->size(0));
  int _8763 = (int)0;
  int _8764 = _4276;
  for (int _4277 = _8763; _4277 < _8764; ++_4277)
  {
    {
      ((*es)(_4277))->eval(_4274,_4273,_4275);
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _4278 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4276)));
  _checked_ptr_1<int> _ptr__4278(_4278 ? _4278->raw() : nullptr,_4278 ? _4278->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _4279 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4276)));
  _checked_ptr_1<int> _ptr__4279(_4279 ? _4279->raw() : nullptr,_4279 ? _4279->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _4280 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4276)));
  _checked_ptr_1<int> _ptr__4280(_4280 ? _4280->raw() : nullptr,_4280 ? _4280->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _4281 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4276)));
  _checked_ptr_1<int> _ptr__4281(_4281 ? _4281->raw() : nullptr,_4281 ? _4281->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _4282 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4276)));
  _checked_ptr_1<int> _ptr__4282(_4282 ? _4282->raw() : nullptr,_4282 ? _4282->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _4283 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4276)));
  _checked_ptr_1<int> _ptr__4283(_4283 ? _4283->raw() : nullptr,_4283 ? _4283->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _4284 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4276)));
  _checked_ptr_1<int> _ptr__4284(_4284 ? _4284->raw() : nullptr,_4284 ? _4284->size(0) : 0);
  int _4285 = _4274->popi32();
  std::shared_ptr< monty::ndarray< int,1 > > _4286 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4285)));
  _checked_ptr_1<int> _ptr__4286(_4286 ? _4286->raw() : nullptr,_4286 ? _4286->size(0) : 0);
  _4274->popi32(_4285,_4286,(int)0);
  {
    _ptr__4278[(_4276 - (int)1)] = _4274->popi32();
    _ptr__4279[(_4276 - (int)1)] = _4274->popi32();
    bool _4287 = (_4274->popi32() != (int)0);
    _ptr__4280[(_4276 - (int)1)] = _4274->popi32(safe_add( _ptr__4278[(_4276 - (int)1)],(int)1 ));
    int _8765;
    bool _8766 = _4287;
    if (_8766)
    {
      _8765 = _4274->popi64(_ptr__4278[(_4276 - (int)1)]);
    }
    else
    {
      _8765 = (-(int)1);
    }
    _ptr__4282[(_4276 - (int)1)] = _8765;
    _ptr__4281[(_4276 - (int)1)] = _4274->popi64(_ptr__4279[(_4276 - (int)1)]);
    _ptr__4284[(_4276 - (int)1)] = _4274->popf64(_ptr__4278[(_4276 - (int)1)]);
    _ptr__4283[(_4276 - (int)1)] = _4274->popf64(_ptr__4279[(_4276 - (int)1)]);
  }
  int _8767 = (int)1;
  int _8768 = _4276;
  for (int _4288 = _8767; _4288 < _8768; ++_4288)
  {
    {
      int _4289 = ((_4276 - _4288) - (int)1);
      _4274->popi32();
      _4274->popi32(_4285);
      _ptr__4278[_4289] = _4274->popi32();
      _ptr__4279[_4289] = _4274->popi32();
      bool _4290 = (_4274->popi32() != (int)0);
      _ptr__4280[_4289] = _4274->popi32(safe_add( _ptr__4278[_4289],(int)1 ));
      int _8769;
      bool _8770 = _4290;
      if (_8770)
      {
        _8769 = _4274->popi64(_ptr__4278[_4289]);
      }
      else
      {
        _8769 = (-(int)1);
      }
      _ptr__4282[_4289] = _8769;
      _ptr__4281[_4289] = _4274->popi64(_ptr__4279[_4289]);
      _ptr__4284[_4289] = _4274->popf64(_ptr__4278[_4289]);
      _ptr__4283[_4289] = _4274->popf64(_ptr__4279[_4289]);
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _4291 = mosek::fusion::p_WorkStack::_get_impl(_4274)->i32;
  _checked_ptr_1<int> _ptr__4291(_4291 ? _4291->raw() : nullptr,_4291 ? _4291->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4292 = mosek::fusion::p_WorkStack::_get_impl(_4274)->i64;
  _checked_ptr_1<long long> _ptr__4292(_4292 ? _4292->raw() : nullptr,_4292 ? _4292->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4293 = mosek::fusion::p_WorkStack::_get_impl(_4274)->f64;
  _checked_ptr_1<double> _ptr__4293(_4293 ? _4293->raw() : nullptr,_4293 ? _4293->size(0) : 0);
  bool _4294 = false;
  int _8771 = (int)0;
  int _8772 = _4276;
  for (int _4295 = _8771; _4295 < _8772; ++_4295)
  {
    {
      if ((_ptr__4282[_4295] < (int)0))
      {
        {
          _4294 = true;
        }
      }
      {}
    }
  }
  int _4296 = (int)0;
  int _4297 = (int)0;
  if (_4294)
  {
    {
      _4296 = (int)::mosek::fusion::p_Set::size(_4286);
      int _8773 = (int)0;
      int _8774 = _4276;
      for (int _4298 = _8773; _4298 < _8774; ++_4298)
      {
        {
          _4297 += _ptr__4279[_4298];
        }
      }
    }
  }
  else
  {
    {
      bool _4299 = false;
      std::shared_ptr< monty::ndarray< int,1 > > _4300 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4276)));
      _checked_ptr_1<int> _ptr__4300(_4300 ? _4300->raw() : nullptr,_4300 ? _4300->size(0) : 0);
      int _8775 = (int)0;
      int _8776 = _4276;
      for (int _4301 = _8775; _4301 < _8776; ++_4301)
      {
        {
          _4297 += _ptr__4279[_4301];
        }
      }
      while ( (!_4299) )
      {
        {
          long long _4302 = (-(int)1);
          int _8777 = (int)0;
          int _8778 = _4276;
          for (int _4303 = _8777; _4303 < _8778; ++_4303)
          {
            {
              if (((_ptr__4300[_4303] < _ptr__4278[_4303]) && ((_4302 < (int)0) || (_ptr__4292[safe_add( _ptr__4282[_4303],_ptr__4300[_4303] )] < _4302))))
              {
                {
                  _4302 = _ptr__4292[safe_add( _ptr__4282[_4303],_ptr__4300[_4303] )];
                }
              }
              {}
            }
          }
          if ((_4302 < (int)0))
          {
            {
              _4299 = true;
            }
          }
          else
          {
            {
              int _8779 = (int)0;
              int _8780 = _4276;
              for (int _4304 = _8779; _4304 < _8780; ++_4304)
              {
                {
                  if (((_ptr__4300[_4304] < _ptr__4278[_4304]) && (_4302 == _ptr__4292[safe_add( _ptr__4282[_4304],_ptr__4300[_4304] )])))
                  {
                    {
                      ++ _ptr__4300[_4304];
                    }
                  }
                  {}
                }
              }
              ++ _4296;
            }
          }
        }
      }
    }
  }
  int _4305 = _4273->alloci32(safe_add( _4296,(int)1 ));
  int _4306 = _4273->alloci64(_4297);
  int _8781;
  bool _8782 = (!_4294);
  if (_8782)
  {
    _8781 = _4273->alloci64(_4296);
  }
  else
  {
    _8781 = (-(int)1);
  }
  int _4307 = _8781;
  int _4308 = _4273->allocf64(_4297);
  int _4309 = _4273->allocf64(_4296);
  int _8783;
  bool _8784 = _4294;
  if (_8784)
  {
    _8783 = (int)0;
  }
  else
  {
    _8783 = (int)1;
  }
  _4273->pushi32(_8783);
  _4273->pushi32(_4297);
  _4273->pushi32(_4296);
  int _8785 = (int)0;
  int _8786 = _4285;
  for (int _4310 = _8785; _4310 < _8786; ++_4310)
  {
    {
      _4273->pushi32(_ptr__4286[_4310]);
    }
  }
  _4273->pushi32(_4285);
  std::shared_ptr< monty::ndarray< int,1 > > _4311 = mosek::fusion::p_WorkStack::_get_impl(_4273)->i32;
  _checked_ptr_1<int> _ptr__4311(_4311 ? _4311->raw() : nullptr,_4311 ? _4311->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4312 = mosek::fusion::p_WorkStack::_get_impl(_4273)->i64;
  _checked_ptr_1<long long> _ptr__4312(_4312 ? _4312->raw() : nullptr,_4312 ? _4312->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4313 = mosek::fusion::p_WorkStack::_get_impl(_4273)->f64;
  _checked_ptr_1<double> _ptr__4313(_4313 ? _4313->raw() : nullptr,_4313 ? _4313->size(0) : 0);
  _ptr__4311[_4305] = (int)0;
  int _8787 = (int)0;
  int _8788 = _4296;
  for (int _4314 = _8787; _4314 < _8788; ++_4314)
  {
    {
      _ptr__4313[safe_add( _4309,_4314 )] = 0.0;
    }
  }
  int _8789 = (int)0;
  int _8790 = safe_add( _4296,(int)1 );
  for (int _4315 = _8789; _4315 < _8790; ++_4315)
  {
    {
      _ptr__4311[safe_add( _4305,_4315 )] = (int)0;
    }
  }
  if (_4294)
  {
    {
      int _8791 = (int)0;
      int _8792 = _4276;
      for (int _4316 = _8791; _4316 < _8792; ++_4316)
      {
        {
          if ((_ptr__4282[_4316] >= (int)0))
          {
            {
              int _8793 = (int)0;
              int _8794 = _ptr__4278[_4316];
              for (int _4317 = _8793; _4317 < _8794; ++_4317)
              {
                {
                  _ptr__4311[safe_add( safe_add( _4305,_ptr__4292[safe_add( _ptr__4282[_4316],_4317 )] ),(int)1 )] += (_ptr__4291[safe_add( safe_add( _ptr__4280[_4316],_4317 ),(int)1 )] - _ptr__4291[safe_add( _ptr__4280[_4316],_4317 )]);
                }
              }
            }
          }
          else
          {
            {
              int _8795 = (int)0;
              int _8796 = _ptr__4278[_4316];
              for (int _4318 = _8795; _4318 < _8796; ++_4318)
              {
                {
                  _ptr__4311[safe_add( safe_add( _4305,_4318 ),(int)1 )] += (_ptr__4291[safe_add( safe_add( _ptr__4280[_4316],_4318 ),(int)1 )] - _ptr__4291[safe_add( _ptr__4280[_4316],_4318 )]);
                }
              }
            }
          }
        }
      }
      int _8797 = (int)0;
      int _8798 = _4296;
      for (int _4319 = _8797; _4319 < _8798; ++_4319)
      {
        {
          _ptr__4311[safe_add( safe_add( _4305,_4319 ),(int)1 )] += _ptr__4311[safe_add( _4305,_4319 )];
        }
      }
      int _8799 = (int)0;
      int _8800 = _4276;
      for (int _4320 = _8799; _4320 < _8800; ++_4320)
      {
        {
          if ((_ptr__4282[_4320] >= (int)0))
          {
            {
              int _8801 = (int)0;
              int _8802 = _ptr__4278[_4320];
              for (int _4321 = _8801; _4321 < _8802; ++_4321)
              {
                {
                  int _4322 = _ptr__4291[safe_add( _ptr__4280[_4320],_4321 )];
                  int _4323 = _ptr__4291[safe_add( safe_add( _ptr__4280[_4320],_4321 ),(int)1 )];
                  long long _4324 = _ptr__4292[safe_add( _ptr__4282[_4320],_4321 )];
                  int _4325 = _ptr__4311[safe_add( _4305,_4324 )];
                  int _8803 = _4322;
                  int _8804 = _4323;
                  for (int _4326 = _8803; _4326 < _8804; ++_4326)
                  {
                    {
                      _ptr__4312[safe_add( _4306,_4325 )] = _ptr__4292[safe_add( _ptr__4281[_4320],_4326 )];
                      _ptr__4313[safe_add( _4308,_4325 )] = (((*w)(_4320)) * _ptr__4293[safe_add( _ptr__4283[_4320],_4326 )]);
                      ++ _4325;
                    }
                  }
                  _ptr__4313[safe_add( _4309,_4324 )] += (((*w)(_4320)) * _ptr__4293[safe_add( _ptr__4284[_4320],_4321 )]);
                  _ptr__4311[safe_add( _4305,_4324 )] += (_4323 - _4322);
                }
              }
            }
          }
          else
          {
            {
              int _8805 = (int)0;
              int _8806 = _ptr__4278[_4320];
              for (int _4327 = _8805; _4327 < _8806; ++_4327)
              {
                {
                  int _4328 = _ptr__4291[safe_add( _ptr__4280[_4320],_4327 )];
                  int _4329 = _ptr__4291[safe_add( safe_add( _ptr__4280[_4320],_4327 ),(int)1 )];
                  int _4330 = _4327;
                  int _4331 = _ptr__4311[safe_add( _4305,_4330 )];
                  int _8807 = _4328;
                  int _8808 = _4329;
                  for (int _4332 = _8807; _4332 < _8808; ++_4332)
                  {
                    {
                      _ptr__4312[safe_add( _4306,_4331 )] = _ptr__4292[safe_add( _ptr__4281[_4320],_4332 )];
                      _ptr__4313[safe_add( _4308,_4331 )] = (((*w)(_4320)) * _ptr__4293[safe_add( _ptr__4283[_4320],_4332 )]);
                      ++ _4331;
                    }
                  }
                  _ptr__4313[safe_add( _4309,_4330 )] += (((*w)(_4320)) * _ptr__4293[safe_add( _ptr__4284[_4320],_4327 )]);
                  _ptr__4311[safe_add( _4305,_4330 )] += (_4329 - _4328);
                }
              }
            }
          }
        }
      }
      int _8809 = (int)0;
      int _8810 = _4296;
      for (int _4333 = _8809; _4333 < _8810; ++_4333)
      {
        {
          _ptr__4311[(safe_add( _4305,_4296 ) - _4333)] = _ptr__4311[((safe_add( _4305,_4296 ) - _4333) - (int)1)];
        }
      }
      _ptr__4311[_4305] = (int)0;
    }
  }
  else
  {
    {
      bool _4334 = false;
      std::shared_ptr< monty::ndarray< int,1 > > _4335 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4276)));
      _checked_ptr_1<int> _ptr__4335(_4335 ? _4335->raw() : nullptr,_4335 ? _4335->size(0) : 0);
      int _4336 = (int)0;
      int _4337 = (int)0;
      while ( (!_4334) )
      {
        {
          long long _4338 = (-(int)1);
          int _8811 = (int)0;
          int _8812 = _4276;
          for (int _4339 = _8811; _4339 < _8812; ++_4339)
          {
            {
              if (((_ptr__4335[_4339] < _ptr__4278[_4339]) && ((_4338 < (int)0) || (_ptr__4292[safe_add( _ptr__4282[_4339],_ptr__4335[_4339] )] < _4338))))
              {
                {
                  _4338 = _ptr__4292[safe_add( _ptr__4282[_4339],_ptr__4335[_4339] )];
                }
              }
              {}
            }
          }
          if ((_4338 < (int)0))
          {
            {
              _4334 = true;
            }
          }
          else
          {
            {
              int _8813 = (int)0;
              int _8814 = _4276;
              for (int _4340 = _8813; _4340 < _8814; ++_4340)
              {
                {
                  if (((_ptr__4335[_4340] < _ptr__4278[_4340]) && (_4338 == _ptr__4292[safe_add( _ptr__4282[_4340],_ptr__4335[_4340] )])))
                  {
                    {
                      int _8815 = _ptr__4291[safe_add( _ptr__4280[_4340],_ptr__4335[_4340] )];
                      int _8816 = _ptr__4291[safe_add( safe_add( _ptr__4280[_4340],_ptr__4335[_4340] ),(int)1 )];
                      for (int _4341 = _8815; _4341 < _8816; ++_4341)
                      {
                        {
                          _ptr__4312[safe_add( _4306,_4337 )] = _ptr__4292[safe_add( _ptr__4281[_4340],_4341 )];
                          _ptr__4313[safe_add( _4308,_4337 )] = (((*w)(_4340)) * _ptr__4293[safe_add( _ptr__4283[_4340],_4341 )]);
                          ++ _4337;
                        }
                      }
                      _ptr__4313[safe_add( _4309,_4336 )] += (((*w)(_4340)) * _ptr__4293[safe_add( _ptr__4284[_4340],_ptr__4335[_4340] )]);
                      ++ _ptr__4335[_4340];
                    }
                  }
                  {}
                }
              }
              _ptr__4311[safe_add( safe_add( _4305,_4336 ),(int)1 )] = _4337;
              _ptr__4312[safe_add( _4307,_4336 )] = _4338;
            }
          }
          ++ _4336;
        }
      }
    }
  }
}
std::string mosek::fusion::ExprWSum :: toString() { return mosek::fusion::p_ExprWSum::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprWSum::toString(){
  return std::string ("ExprWSum()");
}
void mosek::fusion::p_ExprWSum::destroy(){w.reset();es.reset();}void mosek::fusion::ExprWSum::destroy() { mosek::fusion::p_ExprWSum::_get_impl(this)->destroy(); }mosek::fusion::ExprSumReduce::ExprSumReduce(mosek::fusion::p_ExprSumReduce *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprSumReduce()" << this << std::endl; */ }mosek::fusion::ExprSumReduce::~ExprSumReduce() {  /* std::cout << "~ExprSumReduce()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprSumReduce::p_ExprSumReduce  (::mosek::fusion::ExprSumReduce * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprSumReduce::t mosek::fusion::p_ExprSumReduce::_new_ExprSumReduce  (int _4342,    monty::rc_ptr< ::mosek::fusion::Expression > _4343){ return new mosek::fusion::ExprSumReduce(_4342,_4343); }mosek::fusion::ExprSumReduce::ExprSumReduce  (int _4342,    monty::rc_ptr< ::mosek::fusion::Expression > _4343) :    ExprSumReduce(new mosek::fusion::p_ExprSumReduce(this)){ mosek::fusion::p_ExprSumReduce::_get_impl(this)->_initialize(_4342,_4343); }void mosek::fusion::p_ExprSumReduce::_initialize  (int _4342,    monty::rc_ptr< ::mosek::fusion::Expression > _4343){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprSumReduce::computeShape(_4342,_4343->getShape()));
    mosek::fusion::p_ExprSumReduce::_get_impl(::mosek::fusion::ExprSumReduce::t(_pubthis))->expr = _4343;
    mosek::fusion::p_ExprSumReduce::_get_impl(::mosek::fusion::ExprSumReduce::t(_pubthis))->dim = _4342;
    std::shared_ptr< monty::ndarray< int,1 > > _4344 = _4343->getShape();
    _checked_ptr_1<int> _ptr__4344(_4344 ? _4344->raw() : nullptr,_4344 ? _4344->size(0) : 0);
    if (((int)((_4344)->size(0)) <= _4342))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid summing dimension"));
      }
    }
    {}
  }
}void mosek::fusion::ExprSumReduce :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4345,monty::rc_ptr< ::mosek::fusion::WorkStack > _4346,monty::rc_ptr< ::mosek::fusion::WorkStack > _4347) { mosek::fusion::p_ExprSumReduce::_get_impl(this)->eval(_4345,_4346,_4347); }void mosek::fusion::p_ExprSumReduce::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4345,monty::rc_ptr< ::mosek::fusion::WorkStack > _4346,monty::rc_ptr< ::mosek::fusion::WorkStack > _4347){
  expr->eval(_4346,_4345,_4347);
  _4346->pop_expr();
  int _4348 = mosek::fusion::p_WorkStack::_get_impl(_4346)->nd;
  int _4349 = mosek::fusion::p_WorkStack::_get_impl(_4346)->shape_base;
  int _4350 = mosek::fusion::p_WorkStack::_get_impl(_4346)->nelem;
  int _4351 = mosek::fusion::p_WorkStack::_get_impl(_4346)->nnz;
  bool _4352 = mosek::fusion::p_WorkStack::_get_impl(_4346)->hassp;
  int _4353 = mosek::fusion::p_WorkStack::_get_impl(_4346)->ptr_base;
  int _4354 = mosek::fusion::p_WorkStack::_get_impl(_4346)->sp_base;
  int _4355 = mosek::fusion::p_WorkStack::_get_impl(_4346)->nidxs_base;
  int _4356 = mosek::fusion::p_WorkStack::_get_impl(_4346)->bfix_base;
  int _4357 = mosek::fusion::p_WorkStack::_get_impl(_4346)->cof_base;
  std::shared_ptr< monty::ndarray< int,1 > > _4358 = mosek::fusion::p_WorkStack::_get_impl(_4346)->i32;
  _checked_ptr_1<int> _ptr__4358(_4358 ? _4358->raw() : nullptr,_4358 ? _4358->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4359 = mosek::fusion::p_WorkStack::_get_impl(_4346)->i64;
  _checked_ptr_1<long long> _ptr__4359(_4359 ? _4359->raw() : nullptr,_4359 ? _4359->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4360 = mosek::fusion::p_WorkStack::_get_impl(_4346)->f64;
  _checked_ptr_1<double> _ptr__4360(_4360 ? _4360->raw() : nullptr,_4360 ? _4360->size(0) : 0);
  int _4361 = (int)99999;
  int _4362 = (int)99999;
  int _4363 = (int)99999;
  if (_4352)
  {
    {
      int _4364 = (int)0;
      int _8817 = (int)0;
      int _8818 = _4348;
      for (int _4365 = _8817; _4365 < _8818; ++_4365)
      {
        {
          if ((_4364 < _ptr__4358[safe_add( _4349,_4365 )]))
          {
            {
              _4364 = _ptr__4358[safe_add( _4349,_4365 )];
            }
          }
          {}
        }
      }
      _4361 = _4347->alloci32(safe_add( _4364,(int)1 ));
      _4362 = _4347->alloci32(_4350);
      _4363 = _4347->alloci32(_4350);
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _4366 = mosek::fusion::p_WorkStack::_get_impl(_4347)->i32;
  _checked_ptr_1<int> _ptr__4366(_4366 ? _4366->raw() : nullptr,_4366 ? _4366->size(0) : 0);
  if (_4352)
  {
    {
      int _4367 = _4362;
      int _4368 = _4363;
      int _8819 = (int)0;
      int _8820 = _4350;
      for (int _4369 = _8819; _4369 < _8820; ++_4369)
      {
        {
          _ptr__4366[safe_add( _4367,_4369 )] = _4369;
        }
      }
      if ((dim < (_4348 - (int)1)))
      {
        {
          std::shared_ptr< monty::ndarray< long long,1 > > _4370 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4348)));
          _checked_ptr_1<long long> _ptr__4370(_4370 ? _4370->raw() : nullptr,_4370 ? _4370->size(0) : 0);
          _ptr__4370[(_4348 - (int)1)] = (int)1;
          int _8821 = (int)1;
          int _8822 = _4348;
          for (int _4371 = _8821; _4371 < _8822; ++_4371)
          {
            {
              _ptr__4370[((_4348 - _4371) - (int)1)] = safe_mul( _ptr__4370[(_4348 - _4371)],_ptr__4358[(safe_add( _4349,_4348 ) - _4371)] );
            }
          }
          std::shared_ptr< monty::ndarray< int,1 > > _4372 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((_4348 - (int)1))));
          _checked_ptr_1<int> _ptr__4372(_4372 ? _4372->raw() : nullptr,_4372 ? _4372->size(0) : 0);
          int _8823 = (int)0;
          int _8824 = dim;
          for (int _4373 = _8823; _4373 < _8824; ++_4373)
          {
            {
              _ptr__4372[((_4348 - _4373) - (int)2)] = _4373;
            }
          }
          int _8825 = safe_add( dim,(int)1 );
          int _8826 = _4348;
          for (int _4374 = _8825; _4374 < _8826; ++_4374)
          {
            {
              _ptr__4372[((_4348 - _4374) - (int)1)] = _4374;
            }
          }
          int _8827 = (int)0;
          int _8828 = (_4348 - (int)1);
          for (int _4375 = _8827; _4375 < _8828; ++_4375)
          {
            {
              int _4376 = _ptr__4372[_4375];
              int _4377 = _ptr__4358[safe_add( _4349,_4376 )];
              int _8829 = (int)0;
              int _8830 = safe_add( _4377,(int)1 );
              for (int _4378 = _8829; _4378 < _8830; ++_4378)
              {
                {
                  _ptr__4366[safe_add( _4361,_4378 )] = (int)0;
                }
              }
              int _8831 = (int)0;
              int _8832 = _4350;
              for (int _4379 = _8831; _4379 < _8832; ++_4379)
              {
                {
                  ++ _ptr__4366[safe_add( safe_add( _4361,(int)1 ),((_ptr__4359[safe_add( _4354,_4379 )] / _ptr__4370[_4376]) % _4377) )];
                }
              }
              int _8833 = (int)0;
              int _8834 = _4377;
              for (int _4380 = _8833; _4380 < _8834; ++_4380)
              {
                {
                  _ptr__4366[safe_add( safe_add( _4361,_4380 ),(int)1 )] += _ptr__4366[safe_add( _4361,_4380 )];
                }
              }
              int _8835 = (int)0;
              int _8836 = _4350;
              for (int _4381 = _8835; _4381 < _8836; ++_4381)
              {
                {
                  int _4382 = _ptr__4366[safe_add( _4367,_4381 )];
                  long long _4383 = ((_ptr__4359[safe_add( _4354,_4382 )] / _ptr__4370[_4376]) % _4377);
                  _ptr__4366[safe_add( _4368,_ptr__4366[safe_add( _4361,_4383 )] )] = _4382;
                  ++ _ptr__4366[safe_add( _4361,_4383 )];
                }
              }
              int _4384 = _4368;
              _4368 = _4367;
              _4367 = _4384;
            }
          }
        }
      }
      {}
      int _4385 = (int)1;
      int _8837 = (int)0;
      int _8838 = dim;
      for (int _4386 = _8837; _4386 < _8838; ++_4386)
      {
        {
          _4385 *= _ptr__4358[safe_add( _4349,_4386 )];
        }
      }
      int _4387 = _ptr__4358[safe_add( _4349,dim )];
      int _4388 = (int)1;
      int _8839 = safe_add( dim,(int)1 );
      int _8840 = _4348;
      for (int _4389 = _8839; _4389 < _8840; ++_4389)
      {
        {
          _4388 *= _ptr__4358[safe_add( _4349,_4389 )];
        }
      }
      int _4390 = safe_mul( _4388,_4387 );
      int _4391 = _4388;
      int _4392 = (int)1;
      int _4393 = (int)0;
      long long _4394 = (-(int)1);
      long long _4395 = (-(int)1);
      int _8841 = (int)0;
      int _8842 = _4350;
      for (int _4396 = _8841; _4396 < _8842; ++_4396)
      {
        {
          int _4397 = _ptr__4366[safe_add( _4367,_4396 )];
          long long _4398 = ((_ptr__4359[safe_add( _4354,_4397 )] / _4390) % _4385);
          long long _4399 = (_ptr__4359[safe_add( _4354,_4397 )] % _4388);
          if (((_4395 != _4398) || (_4394 != _4399)))
          {
            {
              _4395 = _4398;
              _4394 = _4399;
              ++ _4393;
            }
          }
          {}
        }
      }
      int _4400 = (_4348 - (int)1);
      bool _4401 = (_4393 < safe_mul( _4385,_4388 ));
      int _4402 = _4351;
      _4345->alloc_expr(_4400,_4393,_4402,_4401);
      int _4403 = mosek::fusion::p_WorkStack::_get_impl(_4345)->ptr_base;
      int _4404 = mosek::fusion::p_WorkStack::_get_impl(_4345)->nidxs_base;
      int _8843;
      bool _8844 = _4401;
      if (_8844)
      {
        _8843 = mosek::fusion::p_WorkStack::_get_impl(_4345)->sp_base;
      }
      else
      {
        _8843 = _4345->alloci64(_4393);
      }
      int _4405 = _8843;
      int _4406 = mosek::fusion::p_WorkStack::_get_impl(_4345)->cof_base;
      int _4407 = mosek::fusion::p_WorkStack::_get_impl(_4345)->bfix_base;
      int _4408 = mosek::fusion::p_WorkStack::_get_impl(_4345)->shape_base;
      std::shared_ptr< monty::ndarray< int,1 > > _4409 = mosek::fusion::p_WorkStack::_get_impl(_4345)->i32;
      _checked_ptr_1<int> _ptr__4409(_4409 ? _4409->raw() : nullptr,_4409 ? _4409->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4410 = mosek::fusion::p_WorkStack::_get_impl(_4345)->i64;
      _checked_ptr_1<long long> _ptr__4410(_4410 ? _4410->raw() : nullptr,_4410 ? _4410->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4411 = mosek::fusion::p_WorkStack::_get_impl(_4345)->f64;
      _checked_ptr_1<double> _ptr__4411(_4411 ? _4411->raw() : nullptr,_4411 ? _4411->size(0) : 0);
      int _8845 = (int)0;
      int _8846 = dim;
      for (int _4412 = _8845; _4412 < _8846; ++_4412)
      {
        {
          _ptr__4409[safe_add( _4408,_4412 )] = _ptr__4358[safe_add( _4349,_4412 )];
        }
      }
      int _8847 = safe_add( dim,(int)1 );
      int _8848 = _4348;
      for (int _4413 = _8847; _4413 < _8848; ++_4413)
      {
        {
          _ptr__4409[(safe_add( _4408,_4413 ) - (int)1)] = _ptr__4358[safe_add( _4349,_4413 )];
        }
      }
      _ptr__4409[_4403] = (int)0;
      int _4414 = (int)0;
      int _4415 = (int)0;
      int _4416 = (int)0;
      while ( (_4416 < _4350) )
      {
        {
          int _4417 = _4416;
          long long _4418 = ((_ptr__4359[safe_add( _4354,_ptr__4366[safe_add( _4367,_4417 )] )] / _4390) % _4385);
          long long _4419 = (_ptr__4359[safe_add( _4354,_ptr__4366[safe_add( _4367,_4417 )] )] % _4388);
          ++ _4416;
          while ( ((_4416 < _4350) && ((_4418 == ((_ptr__4359[safe_add( _4354,_ptr__4366[safe_add( _4367,_4416 )] )] / _4390) % _4385)) && (_4419 == (_ptr__4359[safe_add( _4354,_ptr__4366[safe_add( _4367,_4416 )] )] % _4388)))) )
          {
            {
              ++ _4416;
            }
          }
          double _4420 = 0.0;
          int _8849 = _4417;
          int _8850 = _4416;
          for (int _4421 = _8849; _4421 < _8850; ++_4421)
          {
            {
              int _4422 = _ptr__4366[safe_add( _4367,_4421 )];
              int _8851 = _ptr__4358[safe_add( _4353,_4422 )];
              int _8852 = _ptr__4358[safe_add( safe_add( _4353,_4422 ),(int)1 )];
              for (int _4423 = _8851; _4423 < _8852; ++_4423)
              {
                {
                  _ptr__4410[safe_add( _4404,_4415 )] = _ptr__4359[safe_add( _4355,_4423 )];
                  _ptr__4411[safe_add( _4406,_4415 )] = _ptr__4360[safe_add( _4357,_4423 )];
                  ++ _4415;
                }
              }
              _4420 += _ptr__4360[safe_add( _4356,_4422 )];
            }
          }
          _ptr__4410[safe_add( _4405,_4414 )] = safe_add( safe_mul( _4418,_4388 ),_4419 );
          _ptr__4409[safe_add( safe_add( _4403,_4414 ),(int)1 )] = _4415;
          _ptr__4411[safe_add( _4407,_4414 )] = _4420;
          ++ _4414;
        }
      }
      if ((!_4401))
      {
        {
          _4345->popi64(_4393);
        }
      }
      {}
    }
  }
  else
  {
    {
      int _4424 = (int)1;
      int _8853 = (int)0;
      int _8854 = dim;
      for (int _4425 = _8853; _4425 < _8854; ++_4425)
      {
        {
          _4424 *= _ptr__4358[safe_add( _4349,_4425 )];
        }
      }
      int _4426 = _ptr__4358[safe_add( _4349,dim )];
      int _4427 = (int)1;
      int _8855 = safe_add( dim,(int)1 );
      int _8856 = _4348;
      for (int _4428 = _8855; _4428 < _8856; ++_4428)
      {
        {
          _4427 *= _ptr__4358[safe_add( _4349,_4428 )];
        }
      }
      int _4429 = safe_mul( _4427,_4426 );
      int _4430 = _4427;
      int _4431 = (int)1;
      int _4432 = safe_mul( _4424,_4427 );
      int _4433 = _4345->alloci32(safe_add( _4432,(int)1 ));
      int _4434 = _4345->alloci64(_4351);
      int _4435 = _4345->allocf64(_4351);
      int _4436 = _4345->allocf64(_4432);
      _4345->pushi32((int)0);
      _4345->pushi32(_4351);
      _4345->pushi32(_4432);
      int _4437 = _4345->alloci32((_4348 - (int)1));
      _4345->pushi32((_4348 - (int)1));
      std::shared_ptr< monty::ndarray< int,1 > > _4438 = mosek::fusion::p_WorkStack::_get_impl(_4345)->i32;
      _checked_ptr_1<int> _ptr__4438(_4438 ? _4438->raw() : nullptr,_4438 ? _4438->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4439 = mosek::fusion::p_WorkStack::_get_impl(_4345)->i64;
      _checked_ptr_1<long long> _ptr__4439(_4439 ? _4439->raw() : nullptr,_4439 ? _4439->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4440 = mosek::fusion::p_WorkStack::_get_impl(_4345)->f64;
      _checked_ptr_1<double> _ptr__4440(_4440 ? _4440->raw() : nullptr,_4440 ? _4440->size(0) : 0);
      int _8857 = (int)0;
      int _8858 = dim;
      for (int _4441 = _8857; _4441 < _8858; ++_4441)
      {
        {
          _ptr__4438[safe_add( _4437,_4441 )] = _ptr__4358[safe_add( _4349,_4441 )];
        }
      }
      int _8859 = safe_add( dim,(int)1 );
      int _8860 = _4348;
      for (int _4442 = _8859; _4442 < _8860; ++_4442)
      {
        {
          _ptr__4438[(safe_add( _4437,_4442 ) - (int)1)] = _ptr__4358[safe_add( _4349,_4442 )];
        }
      }
      int _4443 = (int)0;
      int _4444 = (int)0;
      _ptr__4438[_4433] = (int)0;
      int _8861 = (int)0;
      int _8862 = _4424;
      for (int _4445 = _8861; _4445 < _8862; ++_4445)
      {
        {
          int _8863 = (int)0;
          int _8864 = _4427;
          for (int _4446 = _8863; _4446 < _8864; ++_4446)
          {
            {
              double _4447 = 0.0;
              int _8865 = (int)0;
              int _8866 = _4426;
              for (int _4448 = _8865; _4448 < _8866; ++_4448)
              {
                {
                  int _4449 = safe_add( safe_add( safe_mul( _4445,_4429 ),safe_mul( _4448,_4430 ) ),_4446 );
                  int _8867 = _ptr__4358[safe_add( _4353,_4449 )];
                  int _8868 = _ptr__4358[safe_add( safe_add( _4353,_4449 ),(int)1 )];
                  for (int _4450 = _8867; _4450 < _8868; ++_4450)
                  {
                    {
                      _ptr__4439[safe_add( _4434,_4444 )] = _ptr__4359[safe_add( _4355,_4450 )];
                      _ptr__4440[safe_add( _4435,_4444 )] = _ptr__4360[safe_add( _4357,_4450 )];
                      ++ _4444;
                    }
                  }
                  _4447 += _ptr__4360[safe_add( _4356,_4449 )];
                }
              }
              _ptr__4438[safe_add( safe_add( _4433,_4443 ),(int)1 )] = _4444;
              _ptr__4440[safe_add( _4436,_4443 )] = _4447;
              ++ _4443;
            }
          }
        }
      }
    }
  }
  _4347->clear();
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprSumReduce::computeShape(int _4451,std::shared_ptr< monty::ndarray< int,1 > > _4452){
  _checked_ptr_1<int> _ptr__4452(_4452 ? _4452->raw() : nullptr, _4452 ? _4452->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _4453 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(((int)((_4452)->size(0)) - (int)1))));
  _checked_ptr_1<int> _ptr__4453(_4453 ? _4453->raw() : nullptr,_4453 ? _4453->size(0) : 0);
  int _8869 = (int)0;
  int _8870 = _4451;
  for (int _4454 = _8869; _4454 < _8870; ++_4454)
  {
    {
      _ptr__4453[_4454] = _ptr__4452[_4454];
    }
  }
  int _8871 = safe_add( _4451,(int)1 );
  int _8872 = (int)((_4452)->size(0));
  for (int _4455 = _8871; _4455 < _8872; ++_4455)
  {
    {
      _ptr__4453[(_4455 - (int)1)] = _ptr__4452[_4455];
    }
  }
  return _4453;
}
std::string mosek::fusion::ExprSumReduce :: toString() { return mosek::fusion::p_ExprSumReduce::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprSumReduce::toString(){
  return std::string ("ExprSumReduce()");
}
void mosek::fusion::p_ExprSumReduce::destroy(){expr.reset();}void mosek::fusion::ExprSumReduce::destroy() { mosek::fusion::p_ExprSumReduce::_get_impl(this)->destroy(); }mosek::fusion::ExprDenseTril::ExprDenseTril(mosek::fusion::p_ExprDenseTril *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprDenseTril()" << this << std::endl; */ }mosek::fusion::ExprDenseTril::~ExprDenseTril() {  /* std::cout << "~ExprDenseTril()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprDenseTril::p_ExprDenseTril  (::mosek::fusion::ExprDenseTril * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprDenseTril::t mosek::fusion::p_ExprDenseTril::_new_ExprDenseTril  (int _4456,    int _4457,    monty::rc_ptr< ::mosek::fusion::Expression > _4458,    int _4459){ return new mosek::fusion::ExprDenseTril(_4456,_4457,_4458,_4459); }mosek::fusion::ExprDenseTril::ExprDenseTril  (int _4456,    int _4457,    monty::rc_ptr< ::mosek::fusion::Expression > _4458,    int _4459) :    ExprDenseTril(new mosek::fusion::p_ExprDenseTril(this)){ mosek::fusion::p_ExprDenseTril::_get_impl(this)->_initialize(_4456,_4457,_4458,_4459); }void mosek::fusion::p_ExprDenseTril::_initialize  (int _4456,    int _4457,    monty::rc_ptr< ::mosek::fusion::Expression > _4458,    int _4459){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_4458->getShape());
    mosek::fusion::p_ExprDenseTril::_get_impl(::mosek::fusion::ExprDenseTril::t(_pubthis))->expr = _4458;
    mosek::fusion::p_ExprDenseTril::_get_impl(::mosek::fusion::ExprDenseTril::t(_pubthis))->dim0 = _4456;
    mosek::fusion::p_ExprDenseTril::_get_impl(::mosek::fusion::ExprDenseTril::t(_pubthis))->dim1 = _4457;
  }
}mosek::fusion::ExprDenseTril::t mosek::fusion::p_ExprDenseTril::_new_ExprDenseTril  (int _4460,    int _4461,    monty::rc_ptr< ::mosek::fusion::Expression > _4462){ return new mosek::fusion::ExprDenseTril(_4460,_4461,_4462); }mosek::fusion::ExprDenseTril::ExprDenseTril  (int _4460,    int _4461,    monty::rc_ptr< ::mosek::fusion::Expression > _4462) :    ExprDenseTril(new mosek::fusion::p_ExprDenseTril(this)){ mosek::fusion::p_ExprDenseTril::_get_impl(this)->_initialize(_4460,_4461,_4462); }void mosek::fusion::p_ExprDenseTril::_initialize  (int _4460,    int _4461,    monty::rc_ptr< ::mosek::fusion::Expression > _4462){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ExprDenseTril::_initialize(_4460,_4461,_4462,(int)1);
    std::shared_ptr< monty::ndarray< int,1 > > _4463 = _4462->getShape();
    _checked_ptr_1<int> _ptr__4463(_4463 ? _4463->raw() : nullptr,_4463 ? _4463->size(0) : 0);
    if (((dim0 == dim1) || ((dim0 < (int)0) || ((dim0 >= (int)((_4463)->size(0))) || ((dim1 < (int)0) || ((dim1 >= (int)((_4463)->size(0))) || (_ptr__4463[dim0] != _ptr__4463[dim1])))))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid dimension definitions"));
      }
    }
    {}
  }
}void mosek::fusion::ExprDenseTril :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4464,monty::rc_ptr< ::mosek::fusion::WorkStack > _4465,monty::rc_ptr< ::mosek::fusion::WorkStack > _4466) { mosek::fusion::p_ExprDenseTril::_get_impl(this)->eval(_4464,_4465,_4466); }void mosek::fusion::p_ExprDenseTril::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4464,monty::rc_ptr< ::mosek::fusion::WorkStack > _4465,monty::rc_ptr< ::mosek::fusion::WorkStack > _4466){
  expr->eval(_4465,_4464,_4466);
  std::shared_ptr< monty::ndarray< int,1 > > _4467 = mosek::fusion::p_WorkStack::_get_impl(_4465)->i32;
  _checked_ptr_1<int> _ptr__4467(_4467 ? _4467->raw() : nullptr,_4467 ? _4467->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4468 = mosek::fusion::p_WorkStack::_get_impl(_4465)->i64;
  _checked_ptr_1<long long> _ptr__4468(_4468 ? _4468->raw() : nullptr,_4468 ? _4468->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4469 = mosek::fusion::p_WorkStack::_get_impl(_4465)->f64;
  _checked_ptr_1<double> _ptr__4469(_4469 ? _4469->raw() : nullptr,_4469 ? _4469->size(0) : 0);
  int _8873;
  bool _8874 = (dim0 < dim1);
  if (_8874)
  {
    _8873 = dim0;
  }
  else
  {
    _8873 = dim1;
  }
  int _4470 = _8873;
  int _8875;
  bool _8876 = (dim0 > dim1);
  if (_8876)
  {
    _8875 = dim0;
  }
  else
  {
    _8875 = dim1;
  }
  int _4471 = _8875;
  bool _4472 = (dim0 < dim1);
  int _4473 = _4465->popi32();
  int _4474 = _4465->popi32(_4473);
  int _4475 = _4465->popi32();
  int _4476 = _4465->popi32();
  bool _4477 = (_4465->popi32() != (int)0);
  int _4478 = _4465->popi32(safe_add( _4475,(int)1 ));
  int _8877;
  bool _8878 = _4477;
  if (_8878)
  {
    _8877 = _4465->popi64(_4475);
  }
  else
  {
    _8877 = (-(int)1);
  }
  int _4479 = _8877;
  int _4480 = _4465->popi64(_4476);
  int _4481 = _4465->popf64(_4475);
  int _4482 = _4465->popf64(_4476);
  std::vector<int> _8879;
  for (int _4484 = (int)0, _8880 = (int)5; _4484 < _8880 ; ++_4484)
  {
    _8879.push_back((int)1);
  }
  auto _8881 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8879.size()),_8879.begin(),_8879.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _4483 = _8881;
  _checked_ptr_1<int> _ptr__4483(_4483 ? _4483->raw() : nullptr,_4483 ? _4483->size(0) : 0);
  int _8882 = (int)0;
  int _8883 = _4470;
  for (int _4485 = _8882; _4485 < _8883; ++_4485)
  {
    {
      _ptr__4483[(int)0] *= _ptr__4467[safe_add( _4474,_4485 )];
    }
  }
  _ptr__4483[(int)1] = _ptr__4467[safe_add( _4474,_4470 )];
  int _8884 = safe_add( _4470,(int)1 );
  int _8885 = _4471;
  for (int _4486 = _8884; _4486 < _8885; ++_4486)
  {
    {
      _ptr__4483[(int)2] *= _ptr__4467[safe_add( _4474,_4486 )];
    }
  }
  _ptr__4483[(int)3] = _ptr__4467[safe_add( _4474,_4471 )];
  int _8886 = safe_add( _4471,(int)1 );
  int _8887 = _4473;
  for (int _4487 = _8886; _4487 < _8887; ++_4487)
  {
    {
      _ptr__4483[(int)4] *= _ptr__4467[safe_add( _4474,_4487 )];
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _4488 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)5)));
  _checked_ptr_1<int> _ptr__4488(_4488 ? _4488->raw() : nullptr,_4488 ? _4488->size(0) : 0);
  _ptr__4488[(int)4] = (int)1;
  int _8888 = (int)1;
  int _8889 = (int)5;
  for (int _4489 = _8888; _4489 < _8889; ++_4489)
  {
    {
      _ptr__4488[(((int)5 - _4489) - (int)1)] = safe_mul( _ptr__4488[((int)5 - _4489)],_ptr__4483[((int)5 - _4489)] );
    }
  }
  int _4490 = (int)0;
  int _4491 = (int)0;
  {
    if (_4477)
    {
      {
        if (_4472)
        {
          {
            int _8890 = (int)0;
            int _8891 = _4475;
            for (int _4492 = _8890; _4492 < _8891; ++_4492)
            {
              {
                long long _4493 = ((_ptr__4468[safe_add( _4479,_4492 )] / _ptr__4488[(int)1]) % _ptr__4483[(int)1]);
                long long _4494 = ((_ptr__4468[safe_add( _4479,_4492 )] / _ptr__4488[(int)3]) % _ptr__4483[(int)3]);
                if ((_4493 >= _4494))
                {
                  {
                    _4490 += (_ptr__4467[safe_add( safe_add( _4478,_4492 ),(int)1 )] - _ptr__4467[safe_add( _4478,_4492 )]);
                    ++ _4491;
                  }
                }
                {}
              }
            }
          }
        }
        else
        {
          {
            int _8892 = (int)0;
            int _8893 = _4475;
            for (int _4495 = _8892; _4495 < _8893; ++_4495)
            {
              {
                long long _4496 = ((_ptr__4468[safe_add( _4479,_4495 )] / _ptr__4488[(int)1]) % _ptr__4483[(int)1]);
                long long _4497 = ((_ptr__4468[safe_add( _4479,_4495 )] / _ptr__4488[(int)3]) % _ptr__4483[(int)3]);
                if ((_4496 <= _4497))
                {
                  {
                    _4490 += (_ptr__4467[safe_add( safe_add( _4478,_4495 ),(int)1 )] - _ptr__4467[safe_add( _4478,_4495 )]);
                    ++ _4491;
                  }
                }
                {}
              }
            }
          }
        }
      }
    }
    else
    {
      {
        _4491 = safe_mul( safe_mul( safe_mul( _ptr__4483[(int)0],_ptr__4483[(int)2] ),_ptr__4483[(int)4] ),(safe_mul( _ptr__4483[(int)1],safe_add( _ptr__4483[(int)1],(int)1 ) ) / (int)2) );
        if (_4472)
        {
          {
            int _8894 = (int)0;
            int _8895 = _ptr__4483[(int)0];
            for (int _4498 = _8894; _4498 < _8895; ++_4498)
            {
              {
                int _8896 = (int)0;
                int _8897 = _ptr__4483[(int)1];
                for (int _4499 = _8896; _4499 < _8897; ++_4499)
                {
                  {
                    int _8898 = (int)0;
                    int _8899 = _ptr__4483[(int)2];
                    for (int _4500 = _8898; _4500 < _8899; ++_4500)
                    {
                      {
                        int _8900 = (int)0;
                        int _8901 = safe_add( _4499,(int)1 );
                        for (int _4501 = _8900; _4501 < _8901; ++_4501)
                        {
                          {
                            int _8902 = (int)0;
                            int _8903 = _ptr__4483[(int)4];
                            for (int _4502 = _8902; _4502 < _8903; ++_4502)
                            {
                              {
                                int _4503 = safe_add( safe_add( safe_add( safe_add( safe_mul( _4498,_ptr__4488[(int)0] ),safe_mul( _4499,_ptr__4488[(int)1] ) ),safe_mul( _4500,_ptr__4488[(int)2] ) ),safe_mul( _4501,_ptr__4488[(int)3] ) ),safe_mul( _4502,_ptr__4488[(int)4] ) );
                                _4490 += (_ptr__4467[safe_add( safe_add( _4478,_4503 ),(int)1 )] - _ptr__4467[safe_add( _4478,_4503 )]);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        else
        {
          {
            int _8904 = (int)0;
            int _8905 = _ptr__4483[(int)0];
            for (int _4504 = _8904; _4504 < _8905; ++_4504)
            {
              {
                int _8906 = (int)0;
                int _8907 = _ptr__4483[(int)1];
                for (int _4505 = _8906; _4505 < _8907; ++_4505)
                {
                  {
                    int _8908 = (int)0;
                    int _8909 = _ptr__4483[(int)2];
                    for (int _4506 = _8908; _4506 < _8909; ++_4506)
                    {
                      {
                        int _8910 = _4505;
                        int _8911 = _ptr__4483[(int)3];
                        for (int _4507 = _8910; _4507 < _8911; ++_4507)
                        {
                          {
                            int _8912 = (int)0;
                            int _8913 = _ptr__4483[(int)4];
                            for (int _4508 = _8912; _4508 < _8913; ++_4508)
                            {
                              {
                                int _4509 = safe_add( safe_add( safe_add( safe_add( safe_mul( _4504,_ptr__4488[(int)0] ),safe_mul( _4505,_ptr__4488[(int)1] ) ),safe_mul( _4506,_ptr__4488[(int)2] ) ),safe_mul( _4507,_ptr__4488[(int)3] ) ),safe_mul( _4508,_ptr__4488[(int)4] ) );
                                _4490 += (_ptr__4467[safe_add( safe_add( _4478,_4509 ),(int)1 )] - _ptr__4467[safe_add( _4478,_4509 )]);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  int _4510 = (safe_mul( safe_mul( safe_mul( safe_mul( _ptr__4483[(int)0],_ptr__4483[(int)2] ),_ptr__4483[(int)4] ),_ptr__4483[(int)1] ),safe_add( _ptr__4483[(int)1],(int)1 ) ) / (int)2);
  int _4511 = _4464->alloci32(safe_add( _4510,(int)1 ));
  _4464->pushi32((int)1);
  _4464->pushi32(_4490);
  _4464->pushi32(_4510);
  int _8914 = (int)0;
  int _8915 = _4473;
  for (int _4512 = _8914; _4512 < _8915; ++_4512)
  {
    {
      _4464->pushi32(_ptr__4467[safe_add( _4474,_4512 )]);
    }
  }
  _4464->pushi32(_4473);
  int _4513 = _4464->alloci64(_4490);
  int _4514 = _4464->alloci64(_4510);
  int _4515 = _4464->allocf64(_4490);
  int _4516 = _4464->allocf64(_4510);
  std::shared_ptr< monty::ndarray< int,1 > > _4517 = mosek::fusion::p_WorkStack::_get_impl(_4464)->i32;
  _checked_ptr_1<int> _ptr__4517(_4517 ? _4517->raw() : nullptr,_4517 ? _4517->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4518 = mosek::fusion::p_WorkStack::_get_impl(_4464)->i64;
  _checked_ptr_1<long long> _ptr__4518(_4518 ? _4518->raw() : nullptr,_4518 ? _4518->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4519 = mosek::fusion::p_WorkStack::_get_impl(_4464)->f64;
  _checked_ptr_1<double> _ptr__4519(_4519 ? _4519->raw() : nullptr,_4519 ? _4519->size(0) : 0);
  _ptr__4517[_4511] = (int)0;
  if (_4472)
  {
    {
      int _4520 = (int)0;
      int _8916 = (int)0;
      int _8917 = _ptr__4483[(int)0];
      for (int _4521 = _8916; _4521 < _8917; ++_4521)
      {
        {
          int _8918 = (int)0;
          int _8919 = _ptr__4483[(int)1];
          for (int _4522 = _8918; _4522 < _8919; ++_4522)
          {
            {
              int _8920 = (int)0;
              int _8921 = _ptr__4483[(int)2];
              for (int _4523 = _8920; _4523 < _8921; ++_4523)
              {
                {
                  int _8922 = (int)0;
                  int _8923 = safe_add( _4522,(int)1 );
                  for (int _4524 = _8922; _4524 < _8923; ++_4524)
                  {
                    {
                      int _8924 = (int)0;
                      int _8925 = _ptr__4483[(int)4];
                      for (int _4525 = _8924; _4525 < _8925; ++_4525)
                      {
                        {
                          _ptr__4518[safe_add( _4514,_4520 )] = safe_add( safe_add( safe_add( safe_add( safe_mul( _4521,_ptr__4488[(int)0] ),safe_mul( _4522,_ptr__4488[(int)1] ) ),safe_mul( _4523,_ptr__4488[(int)2] ) ),safe_mul( _4524,_ptr__4488[(int)3] ) ),safe_mul( _4525,_ptr__4488[(int)4] ) );
                          ++ _4520;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int _4526 = (int)0;
      int _8926 = (int)0;
      int _8927 = _ptr__4483[(int)0];
      for (int _4527 = _8926; _4527 < _8927; ++_4527)
      {
        {
          int _8928 = (int)0;
          int _8929 = _ptr__4483[(int)1];
          for (int _4528 = _8928; _4528 < _8929; ++_4528)
          {
            {
              int _8930 = (int)0;
              int _8931 = _ptr__4483[(int)2];
              for (int _4529 = _8930; _4529 < _8931; ++_4529)
              {
                {
                  int _8932 = _4528;
                  int _8933 = _ptr__4483[(int)3];
                  for (int _4530 = _8932; _4530 < _8933; ++_4530)
                  {
                    {
                      int _8934 = (int)0;
                      int _8935 = _ptr__4483[(int)4];
                      for (int _4531 = _8934; _4531 < _8935; ++_4531)
                      {
                        {
                          _ptr__4518[safe_add( _4514,_4526 )] = safe_add( safe_add( safe_add( safe_add( safe_mul( _4527,_ptr__4488[(int)0] ),safe_mul( _4528,_ptr__4488[(int)1] ) ),safe_mul( _4529,_ptr__4488[(int)2] ) ),safe_mul( _4530,_ptr__4488[(int)3] ) ),safe_mul( _4531,_ptr__4488[(int)4] ) );
                          ++ _4526;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  {
    int _4532 = (int)0;
    if (_4477)
    {
      {
        int _4533 = (int)0;
        int _4534 = (int)0;
        while ( ((_4534 < _4475) && (_4533 < _4510)) )
        {
          {
            if ((_ptr__4468[safe_add( _4479,_4534 )] < _ptr__4518[safe_add( _4514,_4533 )]))
            {
              {
                ++ _4534;
              }
            }
            else if((_ptr__4468[safe_add( _4479,_4534 )] > _ptr__4518[safe_add( _4514,_4533 )]))
            {
              {
                _ptr__4519[safe_add( _4516,_4533 )] = 0.0;
                _ptr__4517[safe_add( safe_add( _4511,_4533 ),(int)1 )] = _4532;
                ++ _4533;
              }
            }
            else
            {
              {
                int _8936 = _ptr__4467[safe_add( _4478,_4534 )];
                int _8937 = _ptr__4467[safe_add( safe_add( _4478,_4534 ),(int)1 )];
                for (int _4535 = _8936; _4535 < _8937; ++_4535)
                {
                  {
                    _ptr__4518[safe_add( _4513,_4532 )] = _ptr__4468[safe_add( _4480,_4535 )];
                    _ptr__4519[safe_add( _4515,_4532 )] = _ptr__4469[safe_add( _4482,_4535 )];
                    ++ _4532;
                  }
                }
                _ptr__4519[safe_add( _4516,_4533 )] = _ptr__4469[safe_add( _4481,_4534 )];
                _ptr__4517[safe_add( safe_add( _4511,_4533 ),(int)1 )] = _4532;
                ++ _4534;
                ++ _4533;
              }
            }
          }
        }
        while ( (_4533 < _4510) )
        {
          {
            _ptr__4517[safe_add( safe_add( _4511,_4533 ),(int)1 )] = _4532;
            _ptr__4519[safe_add( _4516,_4533 )] = 0.0;
            ++ _4533;
          }
        }
      }
    }
    else
    {
      {
        int _8938 = (int)0;
        int _8939 = _4510;
        for (int _4536 = _8938; _4536 < _8939; ++_4536)
        {
          {
            long long _4537 = _ptr__4518[safe_add( _4514,_4536 )];
            _ptr__4519[safe_add( _4516,_4536 )] = _ptr__4469[safe_add( _4481,_4537 )];
            int _8940 = _ptr__4467[safe_add( _4478,_4537 )];
            int _8941 = _ptr__4467[safe_add( safe_add( _4478,_4537 ),(int)1 )];
            for (int _4538 = _8940; _4538 < _8941; ++_4538)
            {
              {
                _ptr__4518[safe_add( _4513,_4532 )] = _ptr__4468[safe_add( _4480,_4538 )];
                _ptr__4519[safe_add( _4515,_4532 )] = _ptr__4469[safe_add( _4482,_4538 )];
                ++ _4532;
              }
            }
            _ptr__4517[safe_add( safe_add( _4511,_4536 ),(int)1 )] = _4532;
          }
        }
      }
    }
  }
}
void mosek::fusion::p_ExprDenseTril::destroy(){expr.reset();}void mosek::fusion::ExprDenseTril::destroy() { mosek::fusion::p_ExprDenseTril::_get_impl(this)->destroy(); }mosek::fusion::ExprDense::ExprDense(mosek::fusion::p_ExprDense *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprDense()" << this << std::endl; */ }mosek::fusion::ExprDense::~ExprDense() {  /* std::cout << "~ExprDense()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprDense::p_ExprDense  (::mosek::fusion::ExprDense * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprDense::t mosek::fusion::p_ExprDense::_new_ExprDense  (monty::rc_ptr< ::mosek::fusion::Expression > _4539){ return new mosek::fusion::ExprDense(_4539); }mosek::fusion::ExprDense::ExprDense  (monty::rc_ptr< ::mosek::fusion::Expression > _4539) :    ExprDense(new mosek::fusion::p_ExprDense(this)){ mosek::fusion::p_ExprDense::_get_impl(this)->_initialize(_4539); }void mosek::fusion::p_ExprDense::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4539){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_4539->getShape());
    mosek::fusion::p_ExprDense::_get_impl(::mosek::fusion::ExprDense::t(_pubthis))->expr = _4539;
  }
}void mosek::fusion::ExprDense :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4540,monty::rc_ptr< ::mosek::fusion::WorkStack > _4541,monty::rc_ptr< ::mosek::fusion::WorkStack > _4542) { mosek::fusion::p_ExprDense::_get_impl(this)->eval(_4540,_4541,_4542); }void mosek::fusion::p_ExprDense::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4540,monty::rc_ptr< ::mosek::fusion::WorkStack > _4541,monty::rc_ptr< ::mosek::fusion::WorkStack > _4542){
  expr->eval(_4540,_4541,_4542);
  _4540->peek_expr();
  if (mosek::fusion::p_WorkStack::_get_impl(_4540)->hassp)
  {
    {
      int _4543 = mosek::fusion::p_WorkStack::_get_impl(_4540)->nd;
      int _4544 = mosek::fusion::p_WorkStack::_get_impl(_4540)->nnz;
      int _4545 = mosek::fusion::p_WorkStack::_get_impl(_4540)->nelem;
      int _4546 = mosek::fusion::p_WorkStack::_get_impl(_4540)->sp_base;
      std::vector<int> _8942;
      for (int _4548 = (int)0, _8943 = _4543; _4548 < _8943 ; ++_4548)
      {
        _8942.push_back(((*mosek::fusion::p_WorkStack::_get_impl(_4540)->i32)(safe_add( mosek::fusion::p_WorkStack::_get_impl(_4540)->shape_base,_4548 ))));
      }
      auto _8944 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8942.size()),_8942.begin(),_8942.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _4547 = _8944;
      _checked_ptr_1<int> _ptr__4547(_4547 ? _4547->raw() : nullptr,_4547 ? _4547->size(0) : 0);
      int _4549 = (int)::mosek::fusion::p_Set::size(_4547);
      _4540->popi32(safe_add( (int)4,_4543 ));
      if ((_4549 == _4545))
      {
        {
          _4540->popi64(_4545);
          _4540->pushi32((int)0);
          _4540->pushi32(_4544);
          _4540->pushi32(_4545);
          int _4550 = _4540->alloci32(_4543);
          int _8945 = (int)0;
          int _8946 = _4543;
          for (int _4551 = _8945; _4551 < _8946; ++_4551)
          {
            {
              ((*mosek::fusion::p_WorkStack::_get_impl(_4540)->i32)(safe_add( _4550,_4551 ))) = _ptr__4547[_4551];
            }
          }
          _4540->pushi32(_4543);
          _4540->peek_expr();
        }
      }
      else
      {
        {
          int _4552 = _4542->alloci32(safe_add( _4549,(int)1 ));
          int _4553 = _4542->allocf64(_4549);
          std::shared_ptr< monty::ndarray< int,1 > > _4554 = mosek::fusion::p_WorkStack::_get_impl(_4542)->i32;
          _checked_ptr_1<int> _ptr__4554(_4554 ? _4554->raw() : nullptr,_4554 ? _4554->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _4555 = mosek::fusion::p_WorkStack::_get_impl(_4542)->f64;
          _checked_ptr_1<double> _ptr__4555(_4555 ? _4555->raw() : nullptr,_4555 ? _4555->size(0) : 0);
          ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_WorkStack::_get_impl(_4540)->f64,mosek::fusion::p_WorkStack::_get_impl(_4540)->bfix_base,_4555,_4553,_4545);
          ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_WorkStack::_get_impl(_4540)->i32,mosek::fusion::p_WorkStack::_get_impl(_4540)->ptr_base,_4554,_4552,safe_add( _4545,(int)1 ));
          _4540->popi32(safe_add( _4545,(int)1 ));
          _4540->popf64(_4545);
          int _4556 = _4540->alloci32(safe_add( _4549,(int)1 ));
          int _4557 = _4540->allocf64(_4549);
          {
            std::shared_ptr< monty::ndarray< int,1 > > _4558 = mosek::fusion::p_WorkStack::_get_impl(_4540)->i32;
            _checked_ptr_1<int> _ptr__4558(_4558 ? _4558->raw() : nullptr,_4558 ? _4558->size(0) : 0);
            std::shared_ptr< monty::ndarray< long long,1 > > _4559 = mosek::fusion::p_WorkStack::_get_impl(_4540)->i64;
            _checked_ptr_1<long long> _ptr__4559(_4559 ? _4559->raw() : nullptr,_4559 ? _4559->size(0) : 0);
            std::shared_ptr< monty::ndarray< double,1 > > _4560 = mosek::fusion::p_WorkStack::_get_impl(_4540)->f64;
            _checked_ptr_1<double> _ptr__4560(_4560 ? _4560->raw() : nullptr,_4560 ? _4560->size(0) : 0);
            _ptr__4558[_4556] = (int)0;
            int _4561 = (int)0;
            if ((_4545 > (int)0))
            {
              {
                int _8947 = (int)0;
                int _8948 = _4549;
                for (int _4562 = _8947; _4562 < _8948; ++_4562)
                {
                  {
                    if (((_4561 < _4545) && (_ptr__4559[safe_add( _4546,_4561 )] == _4562)))
                    {
                      {
                        _ptr__4560[safe_add( _4557,_4562 )] = _ptr__4555[safe_add( _4553,_4561 )];
                        ++ _4561;
                      }
                    }
                    else
                    {
                      {
                        _ptr__4560[safe_add( _4557,_4562 )] = (int)0;
                      }
                    }
                    _ptr__4558[safe_add( safe_add( _4556,_4562 ),(int)1 )] = _ptr__4554[safe_add( _4552,_4561 )];
                  }
                }
              }
            }
            else
            {
              {
                int _8949 = (int)0;
                int _8950 = _4549;
                for (int _4563 = _8949; _4563 < _8950; ++_4563)
                {
                  {
                    _ptr__4560[safe_add( _4557,_4563 )] = (int)0;
                    _ptr__4558[safe_add( safe_add( _4556,_4563 ),(int)1 )] = (int)0;
                  }
                }
              }
            }
          }
          _4540->popi64(_4545);
          _4540->pushi32((int)0);
          _4540->pushi32(_4544);
          _4540->pushi32(_4549);
          int _8951 = (int)0;
          int _8952 = _4543;
          for (int _4564 = _8951; _4564 < _8952; ++_4564)
          {
            {
              _4540->pushi32(_ptr__4547[_4564]);
            }
          }
          _4540->pushi32(_4543);
          if ((((*mosek::fusion::p_WorkStack::_get_impl(_4540)->i32)(safe_add( _4556,_4549 ))) != _4544))
          {
            {
              throw ::mosek::fusion::FatalError(std::string ("Internal: Mismatching ptr and nnz"));
            }
          }
          {}
        }
      }
      _4540->peek_expr();
    }
  }
  {}
  _4542->clear();
}
std::string mosek::fusion::ExprDense :: toString() { return mosek::fusion::p_ExprDense::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprDense::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprDense("))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprDense::destroy(){expr.reset();}void mosek::fusion::ExprDense::destroy() { mosek::fusion::p_ExprDense::_get_impl(this)->destroy(); }mosek::fusion::ExprSymmetrize::ExprSymmetrize(mosek::fusion::p_ExprSymmetrize *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprSymmetrize()" << this << std::endl; */ }mosek::fusion::ExprSymmetrize::~ExprSymmetrize() {  /* std::cout << "~ExprSymmetrize()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprSymmetrize::p_ExprSymmetrize  (::mosek::fusion::ExprSymmetrize * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprSymmetrize::t mosek::fusion::p_ExprSymmetrize::_new_ExprSymmetrize  (int _4565,    int _4566,    monty::rc_ptr< ::mosek::fusion::Expression > _4567,    int _4568){ return new mosek::fusion::ExprSymmetrize(_4565,_4566,_4567,_4568); }mosek::fusion::ExprSymmetrize::ExprSymmetrize  (int _4565,    int _4566,    monty::rc_ptr< ::mosek::fusion::Expression > _4567,    int _4568) :    ExprSymmetrize(new mosek::fusion::p_ExprSymmetrize(this)){ mosek::fusion::p_ExprSymmetrize::_get_impl(this)->_initialize(_4565,_4566,_4567,_4568); }void mosek::fusion::p_ExprSymmetrize::_initialize  (int _4565,    int _4566,    monty::rc_ptr< ::mosek::fusion::Expression > _4567,    int _4568){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_4567->getShape());
    mosek::fusion::p_ExprSymmetrize::_get_impl(::mosek::fusion::ExprSymmetrize::t(_pubthis))->expr = _4567;
    if ((_4565 < _4566))
    {
      {
        mosek::fusion::p_ExprSymmetrize::_get_impl(::mosek::fusion::ExprSymmetrize::t(_pubthis))->dim0 = _4565;
        mosek::fusion::p_ExprSymmetrize::_get_impl(::mosek::fusion::ExprSymmetrize::t(_pubthis))->dim1 = _4566;
      }
    }
    else
    {
      {
        mosek::fusion::p_ExprSymmetrize::_get_impl(::mosek::fusion::ExprSymmetrize::t(_pubthis))->dim0 = _4566;
        mosek::fusion::p_ExprSymmetrize::_get_impl(::mosek::fusion::ExprSymmetrize::t(_pubthis))->dim1 = _4565;
      }
    }
  }
}mosek::fusion::ExprSymmetrize::t mosek::fusion::p_ExprSymmetrize::_new_ExprSymmetrize  (int _4569,    int _4570,    monty::rc_ptr< ::mosek::fusion::Expression > _4571){ return new mosek::fusion::ExprSymmetrize(_4569,_4570,_4571); }mosek::fusion::ExprSymmetrize::ExprSymmetrize  (int _4569,    int _4570,    monty::rc_ptr< ::mosek::fusion::Expression > _4571) :    ExprSymmetrize(new mosek::fusion::p_ExprSymmetrize(this)){ mosek::fusion::p_ExprSymmetrize::_get_impl(this)->_initialize(_4569,_4570,_4571); }void mosek::fusion::p_ExprSymmetrize::_initialize  (int _4569,    int _4570,    monty::rc_ptr< ::mosek::fusion::Expression > _4571){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ExprSymmetrize::_initialize(_4569,_4570,_4571,(int)1);
    std::shared_ptr< monty::ndarray< int,1 > > _4572 = _4571->getShape();
    _checked_ptr_1<int> _ptr__4572(_4572 ? _4572->raw() : nullptr,_4572 ? _4572->size(0) : 0);
    if (((dim0 < (int)0) || ((dim0 == dim1) || ((dim1 >= (int)((_4572)->size(0))) || (_ptr__4572[dim0] != _ptr__4572[dim1])))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid dimension definitions"));
      }
    }
    {}
  }
}void mosek::fusion::ExprSymmetrize :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4573,monty::rc_ptr< ::mosek::fusion::WorkStack > _4574,monty::rc_ptr< ::mosek::fusion::WorkStack > _4575) { mosek::fusion::p_ExprSymmetrize::_get_impl(this)->eval(_4573,_4574,_4575); }void mosek::fusion::p_ExprSymmetrize::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4573,monty::rc_ptr< ::mosek::fusion::WorkStack > _4574,monty::rc_ptr< ::mosek::fusion::WorkStack > _4575){
  expr->eval(_4574,_4573,_4575);
  int _4576 = (int)0;
  int _4577 = _4574->peeki32();
  int _4578 = _4574->peeki32(safe_add( _4577,(int)3 ));
  int _4579 = _4574->peeki32(safe_add( _4577,(int)2 ));
  int _8953 = (int)0;
  int _8954 = _4577;
  for (int _4580 = _8953; _4580 < _8954; ++_4580)
  {
    {
      int _4581 = _4574->peeki32(safe_add( _4580,(int)1 ));
      if ((_4581 > _4576))
      {
        {
          _4581 = _4576;
        }
      }
      {}
    }
  }
  int _4582 = _4574->alloci32(_4579);
  int _4583 = _4574->alloci32(_4579);
  int _4584 = _4574->alloci32(safe_add( _4576,(int)1 ));
  int _4585 = _4574->alloci64(_4579);
  _4574->popi32(safe_add( safe_add( safe_mul( (int)2,_4579 ),_4576 ),(int)1 ));
  _4574->popi64(_4579);
  int _4586 = _4574->popi32();
  int _4587 = _4574->popi32(_4586);
  int _4588 = _4574->popi32();
  int _4589 = _4574->popi32();
  bool _4590 = (_4574->popi32() != (int)0);
  int _4591 = _4574->popi32(safe_add( _4588,(int)1 ));
  int _8955;
  bool _8956 = _4590;
  if (_8956)
  {
    _8955 = _4574->popi64(_4588);
  }
  else
  {
    _8955 = (-(int)1);
  }
  int _4592 = _8955;
  int _4593 = _4574->popi64(_4589);
  int _4594 = _4574->popf64(_4588);
  int _4595 = _4574->popf64(_4589);
  int _4596 = (int)0;
  int _4597 = (int)0;
  std::vector<int> _8957;
  for (int _4599 = (int)0, _8958 = (int)5; _4599 < _8958 ; ++_4599)
  {
    _8957.push_back((int)1);
  }
  auto _8959 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8957.size()),_8957.begin(),_8957.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _4598 = _8959;
  _checked_ptr_1<int> _ptr__4598(_4598 ? _4598->raw() : nullptr,_4598 ? _4598->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4600 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)5)));
  _checked_ptr_1<long long> _ptr__4600(_4600 ? _4600->raw() : nullptr,_4600 ? _4600->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _4601 = mosek::fusion::p_WorkStack::_get_impl(_4574)->i32;
  _checked_ptr_1<int> _ptr__4601(_4601 ? _4601->raw() : nullptr,_4601 ? _4601->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4602 = mosek::fusion::p_WorkStack::_get_impl(_4574)->i64;
  _checked_ptr_1<long long> _ptr__4602(_4602 ? _4602->raw() : nullptr,_4602 ? _4602->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4603 = mosek::fusion::p_WorkStack::_get_impl(_4574)->f64;
  _checked_ptr_1<double> _ptr__4603(_4603 ? _4603->raw() : nullptr,_4603 ? _4603->size(0) : 0);
  int _8960 = (int)0;
  int _8961 = dim0;
  for (int _4604 = _8960; _4604 < _8961; ++_4604)
  {
    {
      _ptr__4598[(int)0] *= _ptr__4601[safe_add( _4587,_4604 )];
    }
  }
  _ptr__4598[(int)1] = _ptr__4601[safe_add( _4587,dim0 )];
  int _8962 = safe_add( dim0,(int)1 );
  int _8963 = dim1;
  for (int _4605 = _8962; _4605 < _8963; ++_4605)
  {
    {
      _ptr__4598[(int)2] *= _ptr__4601[safe_add( _4587,_4605 )];
    }
  }
  _ptr__4598[(int)3] = _ptr__4601[safe_add( _4587,dim1 )];
  int _8964 = safe_add( dim1,(int)1 );
  int _8965 = _4586;
  for (int _4606 = _8964; _4606 < _8965; ++_4606)
  {
    {
      _ptr__4598[(int)4] *= _ptr__4601[safe_add( _4587,_4606 )];
    }
  }
  _ptr__4600[(int)4] = (int)1;
  int _8966 = (int)1;
  int _8967 = (int)5;
  for (int _4607 = _8966; _4607 < _8967; ++_4607)
  {
    {
      _ptr__4600[(((int)5 - _4607) - (int)1)] = safe_mul( _ptr__4600[((int)5 - _4607)],_ptr__4598[((int)5 - _4607)] );
    }
  }
  if (_4590)
  {
    {
      int _4608 = _4582;
      int _8968 = (int)0;
      int _8969 = _4588;
      for (int _4609 = _8968; _4609 < _8969; ++_4609)
      {
        {
          _ptr__4601[safe_add( _4608,_4609 )] = _4609;
        }
      }
      int _4610 = _4583;
      std::shared_ptr< monty::ndarray< int,1 > > _4611 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((int)2),(int)((int)3),(int)((int)0)});
      _checked_ptr_1<int> _ptr__4611(_4611 ? _4611->raw() : nullptr,_4611 ? _4611->size(0) : 0);
      int _8970 = (int)0;
      int _8971 = (int)4;
      for (int _4612 = _8970; _4612 < _8971; ++_4612)
      {
        {
          long long _4613 = _ptr__4600[_ptr__4611[_4612]];
          int _4614 = _ptr__4598[_ptr__4611[_4612]];
          if ((_4614 > (int)1))
          {
            {
              int _8972 = (int)0;
              int _8973 = safe_add( _4614,(int)1 );
              for (int _4615 = _8972; _4615 < _8973; ++_4615)
              {
                {
                  _ptr__4601[safe_add( _4584,_4615 )] = (int)0;
                }
              }
              int _8974 = (int)0;
              int _8975 = _4588;
              for (int _4616 = _8974; _4616 < _8975; ++_4616)
              {
                {
                  ++ _ptr__4601[safe_add( safe_add( _4584,((_ptr__4602[safe_add( _4592,_ptr__4601[safe_add( _4608,_4616 )] )] / _4613) % _4614) ),(int)1 )];
                }
              }
              int _8976 = (int)0;
              int _8977 = _ptr__4598[(int)3];
              for (int _4617 = _8976; _4617 < _8977; ++_4617)
              {
                {
                  _ptr__4601[safe_add( safe_add( _4584,_4617 ),(int)1 )] += _ptr__4601[safe_add( _4584,_4617 )];
                }
              }
              int _8978 = (int)0;
              int _8979 = _4588;
              for (int _4618 = _8978; _4618 < _8979; ++_4618)
              {
                {
                  int _4619 = _ptr__4601[safe_add( _4608,_4618 )];
                  long long _4620 = ((_ptr__4602[safe_add( _4592,_4619 )] / _4613) % _4614);
                  _ptr__4601[safe_add( _4610,_ptr__4601[safe_add( _4584,_4620 )] )] = _4619;
                  ++ _ptr__4601[safe_add( _4584,_4620 )];
                }
              }
              int _4621 = _4608;
              _4608 = _4610;
              _4610 = _4621;
            }
          }
          {}
        }
      }
      int _8980 = (int)0;
      int _8981 = _4588;
      for (int _4622 = _8980; _4622 < _8981; ++_4622)
      {
        {
          _ptr__4602[safe_add( _4585,_4622 )] = safe_add( safe_add( safe_add( safe_add( safe_mul( ((_ptr__4602[safe_add( _4592,_4622 )] / _ptr__4600[(int)0]) % _ptr__4598[(int)0]),_ptr__4600[(int)0] ),safe_mul( ((_ptr__4602[safe_add( _4592,_4622 )] / _ptr__4600[(int)1]) % _ptr__4598[(int)1]),_ptr__4600[(int)3] ) ),safe_mul( ((_ptr__4602[safe_add( _4592,_4622 )] / _ptr__4600[(int)2]) % _ptr__4598[(int)2]),_ptr__4600[(int)2] ) ),safe_mul( ((_ptr__4602[safe_add( _4592,_4622 )] / _ptr__4600[(int)3]) % _ptr__4598[(int)3]),_ptr__4600[(int)1] ) ),safe_mul( ((_ptr__4602[safe_add( _4592,_4622 )] / _ptr__4600[(int)4]) % _ptr__4598[(int)4]),_ptr__4600[(int)4] ) );
        }
      }
      {
        int _4623 = (int)0;
        int _4624 = (int)0;
        while ( ((_4624 < _4588) && (_4623 < _4588)) )
        {
          {
            int _4625 = _ptr__4601[safe_add( _4608,_4623 )];
            if ((_ptr__4602[safe_add( _4592,_4624 )] < _ptr__4602[safe_add( _4585,_4625 )]))
            {
              {
                _4597 += (_ptr__4601[safe_add( safe_add( _4591,_4624 ),(int)1 )] - _ptr__4601[safe_add( _4591,_4624 )]);
                ++ _4596;
                ++ _4624;
              }
            }
            else if((_ptr__4602[safe_add( _4592,_4624 )] > _ptr__4602[safe_add( _4585,_4625 )]))
            {
              {
                _4597 += (_ptr__4601[safe_add( safe_add( _4591,_4625 ),(int)1 )] - _ptr__4601[safe_add( _4591,_4625 )]);
                ++ _4596;
                ++ _4623;
              }
            }
            else if((_ptr__4602[safe_add( _4592,_4624 )] != _ptr__4602[safe_add( _4592,_4625 )]))
            {
              {
                _4597 += (_ptr__4601[safe_add( safe_add( _4591,_4624 ),(int)1 )] - _ptr__4601[safe_add( _4591,_4624 )]);
                _4597 += (_ptr__4601[safe_add( safe_add( _4591,_4625 ),(int)1 )] - _ptr__4601[safe_add( _4591,_4625 )]);
                ++ _4596;
                ++ _4623;
                ++ _4624;
              }
            }
            else
            {
              {
                _4597 += (_ptr__4601[safe_add( safe_add( _4591,_4624 ),(int)1 )] - _ptr__4601[safe_add( _4591,_4624 )]);
                ++ _4596;
                ++ _4623;
                ++ _4624;
              }
            }
          }
        }
        while ( (_4624 < _4588) )
        {
          {
            _4597 += (_ptr__4601[safe_add( safe_add( _4591,_4624 ),(int)1 )] - _ptr__4601[safe_add( _4591,_4624 )]);
            ++ _4596;
            ++ _4624;
          }
        }
        while ( (_4623 < _4588) )
        {
          {
            int _4626 = _ptr__4601[safe_add( _4608,_4623 )];
            _4597 += (_ptr__4601[safe_add( safe_add( _4591,_4626 ),(int)1 )] - _ptr__4601[safe_add( _4591,_4626 )]);
            ++ _4596;
            ++ _4623;
          }
        }
      }
      int _4627 = _4573->alloci32(safe_add( _4596,(int)1 ));
      _4573->pushi32((int)1);
      _4573->pushi32(_4597);
      _4573->pushi32(_4596);
      int _8982 = (int)0;
      int _8983 = _4586;
      for (int _4628 = _8982; _4628 < _8983; ++_4628)
      {
        {
          _4573->pushi32(_ptr__4601[safe_add( _4587,_4628 )]);
        }
      }
      _4573->pushi32(_4586);
      int _4629 = _4573->alloci64(_4597);
      int _4630 = _4573->alloci64(_4596);
      int _4631 = _4573->allocf64(_4597);
      int _4632 = _4573->allocf64(_4596);
      std::shared_ptr< monty::ndarray< int,1 > > _4633 = mosek::fusion::p_WorkStack::_get_impl(_4573)->i32;
      _checked_ptr_1<int> _ptr__4633(_4633 ? _4633->raw() : nullptr,_4633 ? _4633->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4634 = mosek::fusion::p_WorkStack::_get_impl(_4573)->i64;
      _checked_ptr_1<long long> _ptr__4634(_4634 ? _4634->raw() : nullptr,_4634 ? _4634->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4635 = mosek::fusion::p_WorkStack::_get_impl(_4573)->f64;
      _checked_ptr_1<double> _ptr__4635(_4635 ? _4635->raw() : nullptr,_4635 ? _4635->size(0) : 0);
      _ptr__4633[_4627] = (int)0;
      {
        int _4636 = (int)0;
        int _4637 = (int)0;
        int _4638 = (int)0;
        int _4639 = (int)0;
        _ptr__4601[_4627] = (int)0;
        while ( ((_4639 < _4588) && (_4638 < _4588)) )
        {
          {
            int _4640 = _ptr__4601[safe_add( _4608,_4638 )];
            if ((_ptr__4602[safe_add( _4592,_4639 )] < _ptr__4602[safe_add( _4585,_4640 )]))
            {
              {
                int _8984 = _ptr__4601[safe_add( _4591,_4639 )];
                int _8985 = _ptr__4601[safe_add( safe_add( _4591,_4639 ),(int)1 )];
                for (int _4641 = _8984; _4641 < _8985; ++_4641)
                {
                  {
                    _ptr__4634[safe_add( _4629,_4636 )] = _ptr__4602[safe_add( _4593,_4641 )];
                    _ptr__4635[safe_add( _4631,_4636 )] = (_ptr__4603[safe_add( _4595,_4641 )] * 0.5);
                    ++ _4636;
                  }
                }
                _ptr__4635[safe_add( _4632,_4637 )] = (_ptr__4603[safe_add( _4594,_4639 )] * 0.5);
                _ptr__4634[safe_add( _4630,_4637 )] = _ptr__4602[safe_add( _4592,_4639 )];
                _ptr__4633[safe_add( safe_add( _4627,_4637 ),(int)1 )] = _4636;
                ++ _4637;
                ++ _4639;
              }
            }
            else if((_ptr__4602[safe_add( _4592,_4639 )] > _ptr__4602[safe_add( _4585,_4640 )]))
            {
              {
                int _8986 = _ptr__4601[safe_add( _4591,_4640 )];
                int _8987 = _ptr__4601[safe_add( safe_add( _4591,_4640 ),(int)1 )];
                for (int _4642 = _8986; _4642 < _8987; ++_4642)
                {
                  {
                    _ptr__4634[safe_add( _4629,_4636 )] = _ptr__4602[safe_add( _4593,_4642 )];
                    _ptr__4635[safe_add( _4631,_4636 )] = (_ptr__4603[safe_add( _4595,_4642 )] * 0.5);
                    ++ _4636;
                  }
                }
                _ptr__4635[safe_add( _4632,_4637 )] = (_ptr__4603[safe_add( _4594,_4640 )] * 0.5);
                _ptr__4634[safe_add( _4630,_4637 )] = _ptr__4602[safe_add( _4585,_4640 )];
                _ptr__4633[safe_add( safe_add( _4627,_4637 ),(int)1 )] = _4636;
                ++ _4637;
                ++ _4638;
              }
            }
            else if((_ptr__4602[safe_add( _4592,_4639 )] != _ptr__4602[safe_add( _4592,_4640 )]))
            {
              {
                int _8988 = _ptr__4601[safe_add( _4591,_4639 )];
                int _8989 = _ptr__4601[safe_add( safe_add( _4591,_4639 ),(int)1 )];
                for (int _4643 = _8988; _4643 < _8989; ++_4643)
                {
                  {
                    _ptr__4634[safe_add( _4629,_4636 )] = _ptr__4602[safe_add( _4593,_4643 )];
                    _ptr__4635[safe_add( _4631,_4636 )] = (_ptr__4603[safe_add( _4595,_4643 )] * 0.5);
                    ++ _4636;
                  }
                }
                int _8990 = _ptr__4601[safe_add( _4591,_4640 )];
                int _8991 = _ptr__4601[safe_add( safe_add( _4591,_4640 ),(int)1 )];
                for (int _4644 = _8990; _4644 < _8991; ++_4644)
                {
                  {
                    _ptr__4634[safe_add( _4629,_4636 )] = _ptr__4602[safe_add( _4593,_4644 )];
                    _ptr__4635[safe_add( _4631,_4636 )] = (_ptr__4603[safe_add( _4595,_4644 )] * 0.5);
                    ++ _4636;
                  }
                }
                _ptr__4635[safe_add( _4632,_4637 )] = (0.5 * (_ptr__4603[safe_add( _4594,_4639 )] + _ptr__4603[safe_add( _4594,_4640 )]));
                _ptr__4634[safe_add( _4630,_4637 )] = _ptr__4602[safe_add( _4592,_4639 )];
                _ptr__4633[safe_add( safe_add( _4627,_4637 ),(int)1 )] = _4636;
                ++ _4637;
                ++ _4638;
                ++ _4639;
              }
            }
            else
            {
              {
                int _8992 = _ptr__4601[safe_add( _4591,_4639 )];
                int _8993 = _ptr__4601[safe_add( safe_add( _4591,_4639 ),(int)1 )];
                for (int _4645 = _8992; _4645 < _8993; ++_4645)
                {
                  {
                    _ptr__4634[safe_add( _4629,_4636 )] = _ptr__4602[safe_add( _4593,_4645 )];
                    _ptr__4635[safe_add( _4631,_4636 )] = _ptr__4603[safe_add( _4595,_4645 )];
                    ++ _4636;
                  }
                }
                _ptr__4635[safe_add( _4632,_4637 )] = _ptr__4603[safe_add( _4594,_4639 )];
                _ptr__4634[safe_add( _4630,_4637 )] = _ptr__4602[safe_add( _4592,_4639 )];
                _ptr__4633[safe_add( safe_add( _4627,_4637 ),(int)1 )] = _4636;
                ++ _4637;
                ++ _4638;
                ++ _4639;
              }
            }
          }
        }
        while ( (_4639 < _4588) )
        {
          {
            int _8994 = _ptr__4601[safe_add( _4591,_4639 )];
            int _8995 = _ptr__4601[safe_add( safe_add( _4591,_4639 ),(int)1 )];
            for (int _4646 = _8994; _4646 < _8995; ++_4646)
            {
              {
                _ptr__4634[safe_add( _4629,_4636 )] = _ptr__4602[safe_add( _4593,_4646 )];
                _ptr__4635[safe_add( _4631,_4636 )] = (_ptr__4603[safe_add( _4595,_4646 )] * 0.5);
                ++ _4636;
              }
            }
            _ptr__4635[safe_add( _4632,_4637 )] = (_ptr__4603[safe_add( _4594,_4639 )] * 0.5);
            _ptr__4634[safe_add( _4630,_4637 )] = _ptr__4602[safe_add( _4592,_4639 )];
            _ptr__4633[safe_add( safe_add( _4627,_4637 ),(int)1 )] = _4636;
            ++ _4637;
            ++ _4639;
          }
        }
        while ( (_4638 < _4588) )
        {
          {
            int _4647 = _ptr__4601[safe_add( _4608,_4638 )];
            int _8996 = _ptr__4601[safe_add( _4591,_4647 )];
            int _8997 = _ptr__4601[safe_add( safe_add( _4591,_4647 ),(int)1 )];
            for (int _4648 = _8996; _4648 < _8997; ++_4648)
            {
              {
                _ptr__4634[safe_add( _4629,_4636 )] = _ptr__4602[safe_add( _4593,_4648 )];
                _ptr__4635[safe_add( _4631,_4636 )] = (_ptr__4603[safe_add( _4595,_4648 )] * 0.5);
                ++ _4636;
              }
            }
            _ptr__4635[safe_add( _4632,_4637 )] = (_ptr__4603[safe_add( _4594,_4647 )] * 0.5);
            _ptr__4634[safe_add( _4630,_4637 )] = _ptr__4602[safe_add( _4585,_4647 )];
            _ptr__4633[safe_add( safe_add( _4627,_4637 ),(int)1 )] = _4636;
            ++ _4637;
            ++ _4638;
          }
        }
      }
    }
  }
  else
  {
    {
      _4596 = _4588;
      _4597 = safe_mul( _4589,(int)2 );
      int _8998 = (int)0;
      int _8999 = _ptr__4598[(int)0];
      for (int _4649 = _8998; _4649 < _8999; ++_4649)
      {
        {
          int _9000 = (int)0;
          int _9001 = _ptr__4598[(int)2];
          for (int _4650 = _9000; _4650 < _9001; ++_4650)
          {
            {
              int _9002 = (int)0;
              int _9003 = _ptr__4598[(int)4];
              for (int _4651 = _9002; _4651 < _9003; ++_4651)
              {
                {
                  int _9004 = (int)0;
                  int _9005 = _ptr__4598[(int)1];
                  for (int _4652 = _9004; _4652 < _9005; ++_4652)
                  {
                    {
                      long long _4653 = safe_add( safe_add( safe_add( safe_add( safe_mul( _ptr__4600[(int)0],_4649 ),safe_mul( _ptr__4600[(int)1],_4652 ) ),safe_mul( _ptr__4600[(int)2],_4650 ) ),safe_mul( _ptr__4600[(int)3],_4652 ) ),safe_mul( _ptr__4600[(int)4],_4651 ) );
                      _4597 -= (_ptr__4601[safe_add( safe_add( _4591,_4653 ),(int)1 )] - _ptr__4601[safe_add( _4591,_4653 )]);
                    }
                  }
                }
              }
            }
          }
        }
      }
      int _4654 = _4573->alloci32(safe_add( _4596,(int)1 ));
      _4573->pushi32((int)0);
      _4573->pushi32(_4597);
      _4573->pushi32(_4596);
      int _9006 = (int)0;
      int _9007 = _4586;
      for (int _4655 = _9006; _4655 < _9007; ++_4655)
      {
        {
          _4573->pushi32(_ptr__4601[safe_add( _4587,_4655 )]);
        }
      }
      _4573->pushi32(_4586);
      int _4656 = _4573->alloci64(_4597);
      int _4657 = _4573->allocf64(_4597);
      int _4658 = _4573->allocf64(_4596);
      std::shared_ptr< monty::ndarray< int,1 > > _4659 = mosek::fusion::p_WorkStack::_get_impl(_4573)->i32;
      _checked_ptr_1<int> _ptr__4659(_4659 ? _4659->raw() : nullptr,_4659 ? _4659->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4660 = mosek::fusion::p_WorkStack::_get_impl(_4573)->i64;
      _checked_ptr_1<long long> _ptr__4660(_4660 ? _4660->raw() : nullptr,_4660 ? _4660->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4661 = mosek::fusion::p_WorkStack::_get_impl(_4573)->f64;
      _checked_ptr_1<double> _ptr__4661(_4661 ? _4661->raw() : nullptr,_4661 ? _4661->size(0) : 0);
      int _4662 = (int)0;
      int _4663 = (int)0;
      _ptr__4659[_4654] = (int)0;
      int _4664 = (int)0;
      int _9008 = (int)0;
      int _9009 = _ptr__4598[(int)0];
      for (int _4665 = _9008; _4665 < _9009; ++_4665)
      {
        {
          int _9010 = (int)0;
          int _9011 = _ptr__4598[(int)1];
          for (int _4666 = _9010; _4666 < _9011; ++_4666)
          {
            {
              int _9012 = (int)0;
              int _9013 = _ptr__4598[(int)2];
              for (int _4667 = _9012; _4667 < _9013; ++_4667)
              {
                {
                  int _9014 = (int)0;
                  int _9015 = _ptr__4598[(int)3];
                  for (int _4668 = _9014; _4668 < _9015; ++_4668)
                  {
                    {
                      int _9016 = (int)0;
                      int _9017 = _ptr__4598[(int)4];
                      for (int _4669 = _9016; _4669 < _9017; ++_4669)
                      {
                        {
                          if ((_4666 == _4668))
                          {
                            {
                              int _9018 = _ptr__4601[safe_add( _4591,_4664 )];
                              int _9019 = _ptr__4601[safe_add( safe_add( _4591,_4664 ),(int)1 )];
                              for (int _4670 = _9018; _4670 < _9019; ++_4670)
                              {
                                {
                                  _ptr__4660[safe_add( _4656,_4662 )] = _ptr__4602[safe_add( _4593,_4670 )];
                                  _ptr__4661[safe_add( _4657,_4662 )] = _ptr__4603[safe_add( _4595,_4670 )];
                                  ++ _4662;
                                }
                              }
                              _ptr__4661[safe_add( _4658,_4663 )] = _ptr__4603[safe_add( _4594,_4665 )];
                              _ptr__4659[safe_add( safe_add( _4654,_4663 ),(int)1 )] = _4662;
                              ++ _4664;
                            }
                          }
                          else
                          {
                            {
                              long long _4671 = safe_add( safe_add( safe_add( safe_add( safe_mul( _4665,_ptr__4600[(int)0] ),safe_mul( _4668,_ptr__4600[(int)1] ) ),safe_mul( _4667,_ptr__4600[(int)2] ) ),safe_mul( _4666,_ptr__4600[(int)3] ) ),_4669 );
                              int _9020 = _ptr__4601[safe_add( _4591,_4664 )];
                              int _9021 = _ptr__4601[safe_add( safe_add( _4591,_4664 ),(int)1 )];
                              for (int _4672 = _9020; _4672 < _9021; ++_4672)
                              {
                                {
                                  _ptr__4660[safe_add( _4656,_4662 )] = _ptr__4602[safe_add( _4593,_4672 )];
                                  _ptr__4661[safe_add( _4657,_4662 )] = (_ptr__4603[safe_add( _4595,_4672 )] * 0.5);
                                  ++ _4662;
                                }
                              }
                              int _9022 = _ptr__4601[safe_add( _4591,_4671 )];
                              int _9023 = _ptr__4601[safe_add( safe_add( _4591,_4671 ),(int)1 )];
                              for (int _4673 = _9022; _4673 < _9023; ++_4673)
                              {
                                {
                                  _ptr__4660[safe_add( _4656,_4662 )] = _ptr__4602[safe_add( _4593,_4673 )];
                                  _ptr__4661[safe_add( _4657,_4662 )] = (_ptr__4603[safe_add( _4595,_4673 )] * 0.5);
                                  ++ _4662;
                                }
                              }
                              _ptr__4661[safe_add( _4658,_4663 )] = (0.5 * (_ptr__4603[safe_add( _4594,_4664 )] + _ptr__4603[safe_add( _4594,_4671 )]));
                              _ptr__4659[safe_add( safe_add( _4654,_4663 ),(int)1 )] = _4662;
                              ++ _4664;
                            }
                          }
                          ++ _4663;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
void mosek::fusion::p_ExprSymmetrize::destroy(){expr.reset();}void mosek::fusion::ExprSymmetrize::destroy() { mosek::fusion::p_ExprSymmetrize::_get_impl(this)->destroy(); }mosek::fusion::ExprCompress::ExprCompress(mosek::fusion::p_ExprCompress *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprCompress()" << this << std::endl; */ }mosek::fusion::ExprCompress::~ExprCompress() {  /* std::cout << "~ExprCompress()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprCompress::p_ExprCompress  (::mosek::fusion::ExprCompress * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprCompress::t mosek::fusion::p_ExprCompress::_new_ExprCompress  (monty::rc_ptr< ::mosek::fusion::Expression > _4674){ return new mosek::fusion::ExprCompress(_4674); }mosek::fusion::ExprCompress::ExprCompress  (monty::rc_ptr< ::mosek::fusion::Expression > _4674) :    ExprCompress(new mosek::fusion::p_ExprCompress(this)){ mosek::fusion::p_ExprCompress::_get_impl(this)->_initialize(_4674); }void mosek::fusion::p_ExprCompress::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4674){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_4674->getShape());
    eps = 0.0;
    mosek::fusion::p_ExprCompress::_get_impl(::mosek::fusion::ExprCompress::t(_pubthis))->expr = _4674;
  }
}mosek::fusion::ExprCompress::t mosek::fusion::p_ExprCompress::_new_ExprCompress  (monty::rc_ptr< ::mosek::fusion::Expression > _4675,    double _4676){ return new mosek::fusion::ExprCompress(_4675,_4676); }mosek::fusion::ExprCompress::ExprCompress  (monty::rc_ptr< ::mosek::fusion::Expression > _4675,    double _4676) :    ExprCompress(new mosek::fusion::p_ExprCompress(this)){ mosek::fusion::p_ExprCompress::_get_impl(this)->_initialize(_4675,_4676); }void mosek::fusion::p_ExprCompress::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4675,    double _4676){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_4675->getShape());
    eps = _4676;
    mosek::fusion::p_ExprCompress::_get_impl(::mosek::fusion::ExprCompress::t(_pubthis))->expr = _4675;
  }
}void mosek::fusion::ExprCompress :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4677,monty::rc_ptr< ::mosek::fusion::WorkStack > _4678,monty::rc_ptr< ::mosek::fusion::WorkStack > _4679) { mosek::fusion::p_ExprCompress::_get_impl(this)->eval(_4677,_4678,_4679); }void mosek::fusion::p_ExprCompress::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4677,monty::rc_ptr< ::mosek::fusion::WorkStack > _4678,monty::rc_ptr< ::mosek::fusion::WorkStack > _4679){
  expr->eval(_4678,_4677,_4679);
  _4678->pop_expr();
  int _4680 = mosek::fusion::p_WorkStack::_get_impl(_4678)->nd;
  int _4681 = mosek::fusion::p_WorkStack::_get_impl(_4678)->shape_base;
  int _4682 = mosek::fusion::p_WorkStack::_get_impl(_4678)->nelem;
  int _4683 = mosek::fusion::p_WorkStack::_get_impl(_4678)->nnz;
  bool _4684 = mosek::fusion::p_WorkStack::_get_impl(_4678)->hassp;
  int _4685 = mosek::fusion::p_WorkStack::_get_impl(_4678)->ptr_base;
  int _4686 = mosek::fusion::p_WorkStack::_get_impl(_4678)->sp_base;
  int _4687 = mosek::fusion::p_WorkStack::_get_impl(_4678)->nidxs_base;
  int _4688 = mosek::fusion::p_WorkStack::_get_impl(_4678)->bfix_base;
  int _4689 = mosek::fusion::p_WorkStack::_get_impl(_4678)->cof_base;
  std::shared_ptr< monty::ndarray< int,1 > > _4690 = mosek::fusion::p_WorkStack::_get_impl(_4678)->i32;
  _checked_ptr_1<int> _ptr__4690(_4690 ? _4690->raw() : nullptr,_4690 ? _4690->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4691 = mosek::fusion::p_WorkStack::_get_impl(_4678)->i64;
  _checked_ptr_1<long long> _ptr__4691(_4691 ? _4691->raw() : nullptr,_4691 ? _4691->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4692 = mosek::fusion::p_WorkStack::_get_impl(_4678)->f64;
  _checked_ptr_1<double> _ptr__4692(_4692 ? _4692->raw() : nullptr,_4692 ? _4692->size(0) : 0);
  std::vector<int> _9024;
  for (int _4694 = (int)0, _9025 = _4680; _4694 < _9025 ; ++_4694)
  {
    _9024.push_back(_ptr__4690[safe_add( _4681,_4694 )]);
  }
  auto _9026 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9024.size()),_9024.begin(),_9024.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _4693 = _9026;
  _checked_ptr_1<int> _ptr__4693(_4693 ? _4693->raw() : nullptr,_4693 ? _4693->size(0) : 0);
  bool _4695 = true;
  {
    int _9027 = (int)0;
    int _9028 = _4682;
    for (int _4696 = _9027; _4696 < _9028; ++_4696)
    {
      {
        int _9029 = safe_add( _ptr__4690[safe_add( _4685,_4696 )],(int)1 );
        int _9030 = _ptr__4690[safe_add( safe_add( _4685,_4696 ),(int)1 )];
        for (int _4697 = _9029; _4697 < _9030; ++_4697)
        {
          {
            _4695 = (_4695 && (_ptr__4691[(safe_add( _4687,_4697 ) - (int)1)] < _ptr__4691[safe_add( _4687,_4697 )]));
          }
        }
      }
    }
    if (_4695)
    {
      {
        int _9031 = (int)0;
        int _9032 = _4683;
        for (int _4698 = _9031; _4698 < _9032; ++_4698)
        {
          {
            _4695 = (_4695 && ((_ptr__4692[safe_add( _4689,_4698 )] <= (0.0 - eps)) || ((0.0 + eps) <= _ptr__4692[safe_add( _4689,_4698 )])));
          }
        }
      }
    }
    {}
  }
  if (_4695)
  {
    {
      _4677->alloc_expr(_4680,_4682,_4683,_4684);
      int _4699 = mosek::fusion::p_WorkStack::_get_impl(_4677)->ptr_base;
      int _4700 = mosek::fusion::p_WorkStack::_get_impl(_4677)->nidxs_base;
      int _4701 = mosek::fusion::p_WorkStack::_get_impl(_4677)->sp_base;
      int _4702 = mosek::fusion::p_WorkStack::_get_impl(_4677)->cof_base;
      int _4703 = mosek::fusion::p_WorkStack::_get_impl(_4677)->bfix_base;
      int _4704 = mosek::fusion::p_WorkStack::_get_impl(_4677)->shape_base;
      std::shared_ptr< monty::ndarray< int,1 > > _4705 = mosek::fusion::p_WorkStack::_get_impl(_4677)->i32;
      _checked_ptr_1<int> _ptr__4705(_4705 ? _4705->raw() : nullptr,_4705 ? _4705->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4706 = mosek::fusion::p_WorkStack::_get_impl(_4677)->i64;
      _checked_ptr_1<long long> _ptr__4706(_4706 ? _4706->raw() : nullptr,_4706 ? _4706->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4707 = mosek::fusion::p_WorkStack::_get_impl(_4677)->f64;
      _checked_ptr_1<double> _ptr__4707(_4707 ? _4707->raw() : nullptr,_4707 ? _4707->size(0) : 0);
      {
        int _9033 = (int)0;
        int _9034 = _4680;
        for (int _4708 = _9033; _4708 < _9034; ++_4708)
        {
          {
            _ptr__4705[safe_add( _4704,_4708 )] = _ptr__4693[_4708];
          }
        }
        int _9035 = (int)0;
        int _9036 = safe_add( _4682,(int)1 );
        for (int _4709 = _9035; _4709 < _9036; ++_4709)
        {
          {
            _ptr__4705[safe_add( _4699,_4709 )] = _ptr__4690[safe_add( _4685,_4709 )];
          }
        }
        if (_4684)
        {
          {
            int _9037 = (int)0;
            int _9038 = _4682;
            for (int _4710 = _9037; _4710 < _9038; ++_4710)
            {
              {
                _ptr__4706[safe_add( _4701,_4710 )] = _ptr__4691[safe_add( _4686,_4710 )];
              }
            }
          }
        }
        {}
        int _9039 = (int)0;
        int _9040 = _4682;
        for (int _4711 = _9039; _4711 < _9040; ++_4711)
        {
          {
            _ptr__4707[safe_add( _4703,_4711 )] = _ptr__4692[safe_add( _4688,_4711 )];
          }
        }
        int _9041 = (int)0;
        int _9042 = _4683;
        for (int _4712 = _9041; _4712 < _9042; ++_4712)
        {
          {
            _ptr__4706[safe_add( _4700,_4712 )] = _ptr__4691[safe_add( _4687,_4712 )];
          }
        }
        int _9043 = (int)0;
        int _9044 = _4683;
        for (int _4713 = _9043; _4713 < _9044; ++_4713)
        {
          {
            _ptr__4707[safe_add( _4702,_4713 )] = _ptr__4692[safe_add( _4689,_4713 )];
          }
        }
      }
    }
  }
  else
  {
    {
      int _4714 = _4679->alloci32(_4683);
      ::mosek::fusion::p_ExprCompress::arg_sort(_4678,_4679,_4714,_4682,_4683,_4685,_4687);
      std::shared_ptr< monty::ndarray< int,1 > > _4715 = mosek::fusion::p_WorkStack::_get_impl(_4679)->i32;
      _checked_ptr_1<int> _ptr__4715(_4715 ? _4715->raw() : nullptr,_4715 ? _4715->size(0) : 0);
      int _4716 = (int)0;
      {
        std::shared_ptr< monty::ndarray< int,1 > > _4717 = mosek::fusion::p_WorkStack::_get_impl(_4677)->i32;
        _checked_ptr_1<int> _ptr__4717(_4717 ? _4717->raw() : nullptr,_4717 ? _4717->size(0) : 0);
        {
          int _9045 = (int)0;
          int _9046 = _4682;
          for (int _4718 = _9045; _4718 < _9046; ++_4718)
          {
            {
              int _4719 = _ptr__4690[safe_add( safe_add( _4685,_4718 ),(int)1 )];
              int _4720 = _ptr__4690[safe_add( _4685,_4718 )];
              if ((_4720 < _4719))
              {
                {
                  int _4721 = _4720;
                  while ( (_4721 < _4719) )
                  {
                    {
                      double _4722 = 0.0;
                      long long _4723 = _ptr__4691[safe_add( _4687,_ptr__4715[safe_add( _4714,_4721 )] )];
                      while ( ((_4721 < _4719) && (_ptr__4691[safe_add( _4687,_ptr__4715[safe_add( _4714,_4721 )] )] == _4723)) )
                      {
                        {
                          _4722 += _ptr__4692[safe_add( _4689,_ptr__4715[safe_add( _4714,_4721 )] )];
                          ++ _4721;
                        }
                      }
                      {
                      }
                      if (((_4723 != (int)0) && ((_4722 < (-eps)) || (eps < _4722))))
                      {
                        {
                          ++ _4716;
                        }
                      }
                      {}
                    }
                  }
                }
              }
              {}
            }
          }
        }
      }
      _4677->alloc_expr(_4680,_4682,_4716,_4684);
      int _4724 = mosek::fusion::p_WorkStack::_get_impl(_4677)->nidxs_base;
      int _4725 = mosek::fusion::p_WorkStack::_get_impl(_4677)->shape_base;
      int _4726 = mosek::fusion::p_WorkStack::_get_impl(_4677)->sp_base;
      int _4727 = mosek::fusion::p_WorkStack::_get_impl(_4677)->cof_base;
      int _4728 = mosek::fusion::p_WorkStack::_get_impl(_4677)->bfix_base;
      int _4729 = mosek::fusion::p_WorkStack::_get_impl(_4677)->ptr_base;
      std::shared_ptr< monty::ndarray< int,1 > > _4730 = mosek::fusion::p_WorkStack::_get_impl(_4677)->i32;
      _checked_ptr_1<int> _ptr__4730(_4730 ? _4730->raw() : nullptr,_4730 ? _4730->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4731 = mosek::fusion::p_WorkStack::_get_impl(_4677)->i64;
      _checked_ptr_1<long long> _ptr__4731(_4731 ? _4731->raw() : nullptr,_4731 ? _4731->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4732 = mosek::fusion::p_WorkStack::_get_impl(_4677)->f64;
      _checked_ptr_1<double> _ptr__4732(_4732 ? _4732->raw() : nullptr,_4732 ? _4732->size(0) : 0);
      {
        int _9047 = (int)0;
        int _9048 = _4680;
        for (int _4733 = _9047; _4733 < _9048; ++_4733)
        {
          {
            _ptr__4730[safe_add( _4725,_4733 )] = _ptr__4693[_4733];
          }
        }
        int _9049 = (int)0;
        int _9050 = _4682;
        for (int _4734 = _9049; _4734 < _9050; ++_4734)
        {
          {
            _ptr__4732[safe_add( _4727,_4734 )] = 0.0;
          }
        }
        int _9051 = (int)0;
        int _9052 = _4682;
        for (int _4735 = _9051; _4735 < _9052; ++_4735)
        {
          {
            _ptr__4732[safe_add( _4728,_4735 )] = _ptr__4692[safe_add( _4688,_4735 )];
          }
        }
        if (_4684)
        {
          {
            int _9053 = (int)0;
            int _9054 = _4682;
            for (int _4736 = _9053; _4736 < _9054; ++_4736)
            {
              {
                _ptr__4731[safe_add( _4726,_4736 )] = _ptr__4691[safe_add( _4726,_4736 )];
              }
            }
          }
        }
        {}
        int _4737 = (int)0;
        {
          int _4738 = (_4727 - _4724);
          _ptr__4730[_4729] = (int)0;
          int _9055 = (int)0;
          int _9056 = _4682;
          for (int _4739 = _9055; _4739 < _9056; ++_4739)
          {
            {
              int _4740 = _ptr__4690[safe_add( safe_add( _4685,_4739 ),(int)1 )];
              int _4741 = _ptr__4690[safe_add( _4685,_4739 )];
              if ((_4741 < _4740))
              {
                {
                  int _4742 = _4741;
                  while ( (_4742 < _4740) )
                  {
                    {
                      double _4743 = 0.0;
                      long long _4744 = _ptr__4691[safe_add( _4687,_ptr__4715[safe_add( _4714,_4742 )] )];
                      while ( ((_4742 < _4740) && (_ptr__4691[safe_add( _4687,_ptr__4715[safe_add( _4714,_4742 )] )] == _4744)) )
                      {
                        {
                          _4743 += _ptr__4692[safe_add( _4689,_ptr__4715[safe_add( _4714,_4742 )] )];
                          ++ _4742;
                        }
                      }
                      {
                      }
                      if (((_4744 != (int)0) && ((_4743 < (-eps)) || (eps < _4743))))
                      {
                        {
                          _ptr__4731[safe_add( _4724,_4737 )] = _4744;
                          _ptr__4732[safe_add( _4727,_4737 )] = _4743;
                          ++ _4737;
                        }
                      }
                      {}
                    }
                  }
                }
              }
              {}
              _ptr__4730[safe_add( safe_add( _4729,_4739 ),(int)1 )] = _4737;
            }
          }
        }
      }
    }
  }
  _4679->clear();
}
void mosek::fusion::ExprCompress::arg_sort  ( monty::rc_ptr< ::mosek::fusion::WorkStack > _4745,    monty::rc_ptr< ::mosek::fusion::WorkStack > _4746,    int _4747,    int _4748,    int _4749,    int _4750,    int _4751) { mosek::fusion::p_ExprCompress::arg_sort(_4745,_4746,_4747,_4748,_4749,_4750,_4751); }void mosek::fusion::p_ExprCompress::arg_sort(monty::rc_ptr< ::mosek::fusion::WorkStack > _4745,monty::rc_ptr< ::mosek::fusion::WorkStack > _4746,int _4747,int _4748,int _4749,int _4750,int _4751){
  int _4752 = (int)0;
  std::shared_ptr< monty::ndarray< int,1 > > _4753 = mosek::fusion::p_WorkStack::_get_impl(_4745)->i32;
  _checked_ptr_1<int> _ptr__4753(_4753 ? _4753->raw() : nullptr,_4753 ? _4753->size(0) : 0);
  int _9057 = (int)0;
  int _9058 = _4748;
  for (int _4754 = _9057; _4754 < _9058; ++_4754)
  {
    {
      if (((_ptr__4753[safe_add( safe_add( _4750,_4754 ),(int)1 )] - _ptr__4753[safe_add( _4750,_4754 )]) > _4752))
      {
        {
          _4752 = (_ptr__4753[safe_add( safe_add( _4750,_4754 ),(int)1 )] - _ptr__4753[safe_add( _4750,_4754 )]);
        }
      }
      {}
    }
  }
  int _9059;
  bool _9060 = (_4752 > (int)2);
  if (_9060)
  {
    _9059 = _4746->alloci32(safe_mul( _4752,(int)2 ));
  }
  else
  {
    _9059 = (int)99999;
  }
  int _4755 = _9059;
  std::shared_ptr< monty::ndarray< int,1 > > _4756 = mosek::fusion::p_WorkStack::_get_impl(_4746)->i32;
  _checked_ptr_1<int> _ptr__4756(_4756 ? _4756->raw() : nullptr,_4756 ? _4756->size(0) : 0);
  _4753 = mosek::fusion::p_WorkStack::_get_impl(_4745)->i32;
  _ptr__4753.update(_4753 ? _4753->raw() : nullptr, _4753 ? _4753->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4757 = mosek::fusion::p_WorkStack::_get_impl(_4745)->i64;
  _checked_ptr_1<long long> _ptr__4757(_4757 ? _4757->raw() : nullptr,_4757 ? _4757->size(0) : 0);
  int _9061 = (int)0;
  int _9062 = _4748;
  for (int _4758 = _9061; _4758 < _9062; ++_4758)
  {
    {
      int _4759 = _ptr__4753[safe_add( _4750,_4758 )];
      int _4760 = _ptr__4753[safe_add( safe_add( _4750,_4758 ),(int)1 )];
      int _4761 = (_4760 - _4759);
      if ((_4761 == (int)0))
      {
        {
        }
      }
      else if((_4761 == (int)1))
      {
        {
          _ptr__4756[safe_add( _4747,_4759 )] = _4759;
        }
      }
      else if((_4761 == (int)2))
      {
        {
          if ((_ptr__4757[safe_add( _4751,_4759 )] <= _ptr__4757[safe_add( safe_add( _4751,_4759 ),(int)1 )]))
          {
            {
              _ptr__4756[safe_add( _4747,_4759 )] = _4759;
              _ptr__4756[safe_add( safe_add( _4747,_4759 ),(int)1 )] = safe_add( _4759,(int)1 );
            }
          }
          else
          {
            {
              _ptr__4756[safe_add( _4747,_4759 )] = safe_add( _4759,(int)1 );
              _ptr__4756[safe_add( safe_add( _4747,_4759 ),(int)1 )] = _4759;
            }
          }
        }
      }
      else
      {
        {
          long long _4762 = _ptr__4757[safe_add( _4751,_4759 )];
          long long _4763 = _ptr__4757[safe_add( _4751,_4759 )];
          bool _4764 = false;
          int _9063 = safe_add( _4759,(int)1 );
          int _9064 = _4760;
          for (int _4765 = _9063; _4765 < _9064; ++_4765)
          {
            {
              _4764 = (_4764 && (_ptr__4757[(safe_add( _4751,_4765 ) - (int)1)] <= _ptr__4757[safe_add( _4751,_4765 )]));
              if ((_4762 > _ptr__4757[safe_add( _4751,_4765 )]))
              {
                {
                  _4762 = _ptr__4757[safe_add( _4751,_4765 )];
                }
              }
              {}
              if ((_4763 < _ptr__4757[safe_add( _4751,_4765 )]))
              {
                {
                  _4763 = _ptr__4757[safe_add( _4751,_4765 )];
                }
              }
              {}
            }
          }
          if (_4764)
          {
            {
              int _9065 = _4759;
              int _9066 = _4760;
              for (int _4766 = _9065; _4766 < _9066; ++_4766)
              {
                {
                  _ptr__4756[safe_add( _4747,_4766 )] = _4766;
                }
              }
            }
          }
          else if((safe_add( (_4763 - _4762),(int)1 ) <= _4761))
          {
            {
              long long _4767 = safe_add( (_4763 - _4762),(int)1 );
              int _9067 = (int)0;
              long long _9068 = safe_add( _4767,(int)1 );
              for (long long _4768 = _9067; _4768 < _9068; ++_4768)
              {
                {
                  _ptr__4756[safe_add( _4755,_4768 )] = (int)0;
                }
              }
              int _9069 = _4759;
              int _9070 = _4760;
              for (int _4769 = _9069; _4769 < _9070; ++_4769)
              {
                {
                  ++ _ptr__4756[safe_add( (safe_add( _4755,_ptr__4757[safe_add( _4751,_4769 )] ) - _4762),(int)1 )];
                }
              }
              int _9071 = (int)0;
              long long _9072 = _4767;
              for (long long _4770 = _9071; _4770 < _9072; ++_4770)
              {
                {
                  _ptr__4756[safe_add( safe_add( _4755,_4770 ),(int)1 )] += _ptr__4756[safe_add( _4755,_4770 )];
                }
              }
              int _9073 = _4759;
              int _9074 = _4760;
              for (int _4771 = _9073; _4771 < _9074; ++_4771)
              {
                {
                  _ptr__4756[safe_add( safe_add( _4747,_4759 ),_ptr__4756[(safe_add( _4755,_ptr__4757[safe_add( _4751,_4771 )] ) - _4762)] )] = _4771;
                  ++ _ptr__4756[(safe_add( _4755,_ptr__4757[safe_add( _4751,_4771 )] ) - _4762)];
                }
              }
            }
          }
          else
          {
            {
              int _4772 = (int)1;
              int _4773 = _4755;
              int _4774 = safe_add( _4755,_4761 );
              int _9075 = (int)0;
              int _9076 = _4761;
              for (int _4775 = _9075; _4775 < _9076; ++_4775)
              {
                {
                  _ptr__4756[safe_add( _4773,_4775 )] = _4775;
                }
              }
              while ( (_4772 < _4761) )
              {
                {
                  int _4776 = safe_mul( _4772,(int)2 );
                  int _4777 = (_4761 / _4776);
                  if ((safe_add( safe_mul( _4777,_4776 ),_4772 ) < _4761))
                  {
                    {
                      ++ _4777;
                    }
                  }
                  {}
                  int _4778 = (int)0;
                  int _9077 = (int)0;
                  int _9078 = _4777;
                  for (int _4779 = _9077; _4779 < _9078; ++_4779)
                  {
                    {
                      int _4780 = safe_mul( _4779,_4776 );
                      int _4781 = safe_add( _4780,_4772 );
                      int _4782 = _4781;
                      int _4783 = safe_add( _4782,_4772 );
                      if ((_4783 > _4761))
                      {
                        {
                          _4783 = _4761;
                        }
                      }
                      {}
                      while ( ((_4780 < _4781) && (_4782 < _4783)) )
                      {
                        {
                          if ((_ptr__4757[safe_add( safe_add( _4751,_ptr__4756[safe_add( _4773,_4780 )] ),_4759 )] <= _ptr__4757[safe_add( safe_add( _4751,_ptr__4756[safe_add( _4773,_4782 )] ),_4759 )]))
                          {
                            {
                              _ptr__4756[safe_add( _4774,_4778 )] = _ptr__4756[safe_add( _4773,_4780 )];
                              ++ _4778;
                              ++ _4780;
                            }
                          }
                          else
                          {
                            {
                              _ptr__4756[safe_add( _4774,_4778 )] = _ptr__4756[safe_add( _4773,_4782 )];
                              ++ _4778;
                              ++ _4782;
                            }
                          }
                        }
                      }
                      while ( (_4780 < _4781) )
                      {
                        {
                          _ptr__4756[safe_add( _4774,_4778 )] = _ptr__4756[safe_add( _4773,_4780 )];
                          ++ _4778;
                          ++ _4780;
                        }
                      }
                      while ( (_4782 < _4783) )
                      {
                        {
                          _ptr__4756[safe_add( _4774,_4778 )] = _ptr__4756[safe_add( _4773,_4782 )];
                          ++ _4778;
                          ++ _4782;
                        }
                      }
                    }
                  }
                  if ((safe_mul( _4777,_4776 ) < _4761))
                  {
                    {
                      int _4784 = safe_mul( _4777,_4776 );
                      while ( (_4784 < _4761) )
                      {
                        {
                          _ptr__4756[safe_add( _4774,_4778 )] = _ptr__4756[safe_add( _4773,_4784 )];
                          ++ _4784;
                          ++ _4778;
                        }
                      }
                    }
                  }
                  {}
                  int _4785 = _4773;
                  _4773 = _4774;
                  _4774 = _4785;
                  _4772 *= (int)2;
                }
              }
              int _9079 = (int)0;
              int _9080 = _4761;
              for (int _4786 = _9079; _4786 < _9080; ++_4786)
              {
                {
                  _ptr__4756[safe_add( safe_add( _4747,_4759 ),_4786 )] = safe_add( _ptr__4756[safe_add( _4773,_4786 )],_4759 );
                }
              }
            }
          }
        }
      }
    }
  }
}
void mosek::fusion::ExprCompress::merge_sort  ( int _4787,    int _4788,    int _4789,    int _4790,    int _4791,    int _4792,    std::shared_ptr< monty::ndarray< int,1 > > _4793,    std::shared_ptr< monty::ndarray< long long,1 > > _4794) { mosek::fusion::p_ExprCompress::merge_sort(_4787,_4788,_4789,_4790,_4791,_4792,_4793,_4794); }void mosek::fusion::p_ExprCompress::merge_sort(int _4787,int _4788,int _4789,int _4790,int _4791,int _4792,std::shared_ptr< monty::ndarray< int,1 > > _4793,std::shared_ptr< monty::ndarray< long long,1 > > _4794){
  _checked_ptr_1<int> _ptr__4793(_4793 ? _4793->raw() : nullptr, _4793 ? _4793->size(0) : 0);
  _checked_ptr_1<long long> _ptr__4794(_4794 ? _4794->raw() : nullptr, _4794 ? _4794->size(0) : 0);
  int _4795 = _4787;
  int _4796 = _4788;
  int _9081 = (int)0;
  int _9082 = _4790;
  for (int _4797 = _9081; _4797 < _9082; ++_4797)
  {
    {
      _ptr__4793[safe_add( _4795,_4797 )] = _4797;
    }
  }
  int _9083 = (int)0;
  int _9084 = _4789;
  for (int _4798 = _9083; _4798 < _9084; ++_4798)
  {
    {
      _4795 = _4787;
      _4796 = _4788;
      int _4799 = _ptr__4793[safe_add( safe_add( _4791,_4798 ),(int)1 )];
      int _4800 = _ptr__4793[safe_add( _4791,_4798 )];
      if ((safe_add( _4800,(int)1 ) < _4799))
      {
        {
          int _4801 = (_4799 - _4800);
          int _4802 = (int)0;
          while ( (_4801 > (int)1) )
          {
            {
              ++ _4802;
              _4801 /= (int)2;
            }
          }
          _4801 = (_4799 - _4800);
          int _4803 = (int)1;
          int _9085 = (int)0;
          int _9086 = safe_add( _4802,(int)1 );
          for (int _4804 = _9085; _4804 < _9086; ++_4804)
          {
            {
              int _4805 = ((safe_add( _4801,_4803 ) - (int)1) / _4803);
              int _4806 = (_4805 / (int)2);
              int _4807 = _4800;
              int _9087 = (int)0;
              int _9088 = _4806;
              for (int _4808 = _9087; _4808 < _9088; ++_4808)
              {
                {
                  int _4809 = safe_mul( safe_mul( _4808,_4803 ),(int)2 );
                  int _9089;
                  bool _9090 = (safe_add( safe_add( _4800,_4809 ),safe_mul( (int)2,_4803 ) ) < _4799);
                  if (_9090)
                  {
                    _9089 = safe_add( safe_add( _4800,_4809 ),safe_mul( (int)2,_4803 ) );
                  }
                  else
                  {
                    _9089 = _4799;
                  }
                  int _4810 = _9089;
                  int _4811 = safe_add( safe_add( _4800,_4809 ),_4803 );
                  int _4812 = safe_add( safe_add( _4800,_4809 ),_4803 );
                  int _4813 = safe_add( _4800,_4809 );
                  while ( ((_4813 < _4812) && (_4811 < _4810)) )
                  {
                    {
                      if ((_ptr__4794[safe_add( _4792,_ptr__4793[safe_add( _4795,_4813 )] )] <= _ptr__4794[safe_add( _4792,_ptr__4793[safe_add( _4795,_4811 )] )]))
                      {
                        {
                          _ptr__4793[safe_add( _4796,_4807 )] = _ptr__4793[safe_add( _4795,_4813 )];
                          ++ _4807;
                          ++ _4813;
                        }
                      }
                      else
                      {
                        {
                          _ptr__4793[safe_add( _4796,_4807 )] = _ptr__4793[safe_add( _4795,_4811 )];
                          ++ _4807;
                          ++ _4811;
                        }
                      }
                    }
                  }
                  while ( (_4813 < _4812) )
                  {
                    {
                      _ptr__4793[safe_add( _4796,_4807 )] = _ptr__4793[safe_add( _4795,_4813 )];
                      ++ _4807;
                      ++ _4813;
                    }
                  }
                  while ( (_4811 < _4810) )
                  {
                    {
                      _ptr__4793[safe_add( _4796,_4807 )] = _ptr__4793[safe_add( _4795,_4811 )];
                      ++ _4807;
                      ++ _4811;
                    }
                  }
                }
              }
              int _9091 = _4807;
              int _9092 = _4799;
              for (int _4814 = _9091; _4814 < _9092; ++_4814)
              {
                {
                  _ptr__4793[safe_add( _4796,_4814 )] = _ptr__4793[safe_add( _4795,_4814 )];
                }
              }
              int _4815 = _4795;
              _4795 = _4796;
              _4796 = _4815;
              _4803 *= (int)2;
            }
          }
        }
      }
      {}
      int _9093 = _4800;
      int _9094 = _4799;
      for (int _4816 = _9093; _4816 < _9094; ++_4816)
      {
        {
          _ptr__4793[safe_add( _4787,_4816 )] = _ptr__4793[safe_add( _4795,_4816 )];
        }
      }
    }
  }
}
std::string mosek::fusion::ExprCompress :: toString() { return mosek::fusion::p_ExprCompress::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprCompress::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprCompress("))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprCompress::destroy(){expr.reset();}void mosek::fusion::ExprCompress::destroy() { mosek::fusion::p_ExprCompress::_get_impl(this)->destroy(); }mosek::fusion::ExprCondense::ExprCondense(mosek::fusion::p_ExprCondense *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprCondense()" << this << std::endl; */ }mosek::fusion::ExprCondense::~ExprCondense() {  /* std::cout << "~ExprCondense()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprCondense::p_ExprCondense  (::mosek::fusion::ExprCondense * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprCondense::t mosek::fusion::p_ExprCondense::_new_ExprCondense  (monty::rc_ptr< ::mosek::fusion::Expression > _4817){ return new mosek::fusion::ExprCondense(_4817); }mosek::fusion::ExprCondense::ExprCondense  (monty::rc_ptr< ::mosek::fusion::Expression > _4817) :    ExprCondense(new mosek::fusion::p_ExprCondense(this)){ mosek::fusion::p_ExprCondense::_get_impl(this)->_initialize(_4817); }void mosek::fusion::p_ExprCondense::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4817){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_4817->getShape());
    mosek::fusion::p_ExprCondense::_get_impl(::mosek::fusion::ExprCondense::t(_pubthis))->expr = _4817;
  }
}void mosek::fusion::ExprCondense :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4818,monty::rc_ptr< ::mosek::fusion::WorkStack > _4819,monty::rc_ptr< ::mosek::fusion::WorkStack > _4820) { mosek::fusion::p_ExprCondense::_get_impl(this)->eval(_4818,_4819,_4820); }void mosek::fusion::p_ExprCondense::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4818,monty::rc_ptr< ::mosek::fusion::WorkStack > _4819,monty::rc_ptr< ::mosek::fusion::WorkStack > _4820){
  expr->eval(_4818,_4819,_4820);
  int _4821 = _4818->popi32();
  long long _4822 = (int)1;
  int _9095 = (int)0;
  int _9096 = _4821;
  for (int _4823 = _9095; _4823 < _9096; ++_4823)
  {
    {
      _4822 *= _4818->popi32();
    }
  }
  int _4824 = _4818->popi32();
  int _4825 = _4818->popi32();
  bool _4826 = (_4818->popi32() != (int)0);
  if (_4826)
  {
    {
      _4818->popi64(_4824);
    }
  }
  {}
  _4818->pushi32((int)0);
  _4818->pushi32(_4825);
  _4818->pushi32(_4824);
  _4818->pushi32(_4824);
  _4818->pushi32((int)1);
}
void mosek::fusion::p_ExprCondense::destroy(){expr.reset();}void mosek::fusion::ExprCondense::destroy() { mosek::fusion::p_ExprCondense::_get_impl(this)->destroy(); }mosek::fusion::ExprFromVar::ExprFromVar(mosek::fusion::p_ExprFromVar *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprFromVar()" << this << std::endl; */ }mosek::fusion::ExprFromVar::~ExprFromVar() {  /* std::cout << "~ExprFromVar()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprFromVar::p_ExprFromVar  (::mosek::fusion::ExprFromVar * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprFromVar::t mosek::fusion::p_ExprFromVar::_new_ExprFromVar  (monty::rc_ptr< ::mosek::fusion::Variable > _4827){ return new mosek::fusion::ExprFromVar(_4827); }mosek::fusion::ExprFromVar::ExprFromVar  (monty::rc_ptr< ::mosek::fusion::Variable > _4827) :    ExprFromVar(new mosek::fusion::p_ExprFromVar(this)){ mosek::fusion::p_ExprFromVar::_get_impl(this)->_initialize(_4827); }void mosek::fusion::p_ExprFromVar::_initialize  (monty::rc_ptr< ::mosek::fusion::Variable > _4827){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_4827->getShape());
    mosek::fusion::p_ExprFromVar::_get_impl(::mosek::fusion::ExprFromVar::t(_pubthis))->x = _4827;
  }
}void mosek::fusion::ExprFromVar :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4828,monty::rc_ptr< ::mosek::fusion::WorkStack > _4829,monty::rc_ptr< ::mosek::fusion::WorkStack > _4830) { mosek::fusion::p_ExprFromVar::_get_impl(this)->eval(_4828,_4829,_4830); }void mosek::fusion::p_ExprFromVar::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4828,monty::rc_ptr< ::mosek::fusion::WorkStack > _4829,monty::rc_ptr< ::mosek::fusion::WorkStack > _4830){
  std::shared_ptr< monty::ndarray< int,1 > > _4831 = _pubthis->getShape();
  _checked_ptr_1<int> _ptr__4831(_4831 ? _4831->raw() : nullptr,_4831 ? _4831->size(0) : 0);
  long long _4832 = ::mosek::fusion::p_Set::size(_4831);
  int _4833 = x->numInst();
  int _4834 = _4833;
  bool _4835 = (_4832 > _4833);
  int _4836 = _4828->alloci32(safe_add( _4833,(int)1 ));
  int _4837 = _4828->alloci64(_4834);
  int _9097;
  bool _9098 = _4835;
  if (_9098)
  {
    _9097 = _4828->alloci64(_4833);
  }
  else
  {
    _9097 = (-(int)1);
  }
  int _4838 = _9097;
  int _4839 = _4828->allocf64(_4834);
  int _4840 = _4828->allocf64(_4833);
  int _9099;
  bool _9100 = _4835;
  if (_9100)
  {
    _9099 = (int)1;
  }
  else
  {
    _9099 = (int)0;
  }
  _4828->pushi32(_9099);
  _4828->pushi32(_4834);
  _4828->pushi32(_4833);
  int _9101 = (int)0;
  int _9102 = (int)((_4831)->size(0));
  for (int _4841 = _9101; _4841 < _9102; ++_4841)
  {
    {
      _4828->pushi32(_ptr__4831[_4841]);
    }
  }
  _4828->pushi32((int)((_4831)->size(0)));
  std::shared_ptr< monty::ndarray< int,1 > > _4842 = mosek::fusion::p_WorkStack::_get_impl(_4828)->i32;
  _checked_ptr_1<int> _ptr__4842(_4842 ? _4842->raw() : nullptr,_4842 ? _4842->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4843 = mosek::fusion::p_WorkStack::_get_impl(_4828)->i64;
  _checked_ptr_1<long long> _ptr__4843(_4843 ? _4843->raw() : nullptr,_4843 ? _4843->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4844 = mosek::fusion::p_WorkStack::_get_impl(_4828)->f64;
  _checked_ptr_1<double> _ptr__4844(_4844 ? _4844->raw() : nullptr,_4844 ? _4844->size(0) : 0);
  {
    int _9103 = (int)0;
    int _9104 = safe_add( _4833,(int)1 );
    for (int _4845 = _9103; _4845 < _9104; ++_4845)
    {
      {
        _ptr__4842[safe_add( _4836,_4845 )] = _4845;
      }
    }
    int _9105 = (int)0;
    int _9106 = _4833;
    for (int _4846 = _9105; _4846 < _9106; ++_4846)
    {
      {
        _ptr__4844[safe_add( _4840,_4846 )] = 0.0;
      }
    }
    int _9107 = (int)0;
    int _9108 = _4834;
    for (int _4847 = _9107; _4847 < _9108; ++_4847)
    {
      {
        _ptr__4844[safe_add( _4839,_4847 )] = 1.0;
      }
    }
  }
  if (_4835)
  {
    {
      x->inst(_4838,_4843,_4837,_4843);
    }
  }
  else
  {
    {
      x->inst(_4837,_4843);
    }
  }
}
std::string mosek::fusion::ExprFromVar :: toString() { return mosek::fusion::p_ExprFromVar::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprFromVar::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Expr("))->__mosek_2fusion_2Utils_2StringBuffer__a(x->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprFromVar::destroy(){x.reset();}void mosek::fusion::ExprFromVar::destroy() { mosek::fusion::p_ExprFromVar::_get_impl(this)->destroy(); }mosek::fusion::ExprReshape::ExprReshape(mosek::fusion::p_ExprReshape *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprReshape()" << this << std::endl; */ }mosek::fusion::ExprReshape::~ExprReshape() {  /* std::cout << "~ExprReshape()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprReshape::p_ExprReshape  (::mosek::fusion::ExprReshape * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprReshape::t mosek::fusion::p_ExprReshape::_new_ExprReshape  (std::shared_ptr< monty::ndarray< int,1 > > _4848,    monty::rc_ptr< ::mosek::fusion::Expression > _4849){ return new mosek::fusion::ExprReshape(_4848,_4849); }mosek::fusion::ExprReshape::ExprReshape  (std::shared_ptr< monty::ndarray< int,1 > > _4848,    monty::rc_ptr< ::mosek::fusion::Expression > _4849) :    ExprReshape(new mosek::fusion::p_ExprReshape(this)){ mosek::fusion::p_ExprReshape::_get_impl(this)->_initialize(_4848,_4849); }void mosek::fusion::p_ExprReshape::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _4848,    monty::rc_ptr< ::mosek::fusion::Expression > _4849){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__4848(_4848 ? _4848->raw() : nullptr, _4848 ? _4848->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::Utils::Tools::arraycopy(_4848));
    long long _4850 = _4849->getSize();
    if ((::mosek::fusion::p_Set::size(_4848) != _4849->getSize()))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Cannot reshape to mismatching shape"));
      }
    }
    {}
    mosek::fusion::p_ExprReshape::_get_impl(::mosek::fusion::ExprReshape::t(_pubthis))->e = _4849;
  }
}void mosek::fusion::ExprReshape :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4851,monty::rc_ptr< ::mosek::fusion::WorkStack > _4852,monty::rc_ptr< ::mosek::fusion::WorkStack > _4853) { mosek::fusion::p_ExprReshape::_get_impl(this)->eval(_4851,_4852,_4853); }void mosek::fusion::p_ExprReshape::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4851,monty::rc_ptr< ::mosek::fusion::WorkStack > _4852,monty::rc_ptr< ::mosek::fusion::WorkStack > _4853){
  std::shared_ptr< monty::ndarray< int,1 > > _4854 = _pubthis->getShape();
  _checked_ptr_1<int> _ptr__4854(_4854 ? _4854->raw() : nullptr,_4854 ? _4854->size(0) : 0);
  e->eval(_4851,_4852,_4853);
  _4851->peek_expr();
  int _4855 = _4851->popi32();
  long long _4856 = (int)1;
  int _9109 = (int)0;
  int _9110 = _4855;
  for (int _4857 = _9109; _4857 < _9110; ++_4857)
  {
    {
      _4856 *= _4851->popi32();
    }
  }
  if ((_4856 != _pubthis->getSize()))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("The two shapes have different sizes"));
    }
  }
  {}
  int _9111 = (int)0;
  int _9112 = (int)((_4854)->size(0));
  for (int _4858 = _9111; _4858 < _9112; ++_4858)
  {
    {
      _4851->pushi32(_ptr__4854[_4858]);
    }
  }
  _4851->pushi32((int)((_4854)->size(0)));
}
std::string mosek::fusion::ExprReshape :: toString() { return mosek::fusion::p_ExprReshape::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprReshape::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _4859 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprReshape(("));
  if ((_pubthis->getND() > (int)0))
  {
    {
      _4859->__mosek_2fusion_2Utils_2StringBuffer__a(_pubthis->getDim((int)0));
      int _9113 = (int)1;
      int _9114 = _pubthis->getND();
      for (int _4860 = _9113; _4860 < _9114; ++_4860)
      {
        {
          _4859->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(_pubthis->getDim(_4860));
        }
      }
    }
  }
  {}
  _4859->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("),"))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _4859->toString();
}
void mosek::fusion::p_ExprReshape::destroy(){e.reset();}void mosek::fusion::ExprReshape::destroy() { mosek::fusion::p_ExprReshape::_get_impl(this)->destroy(); }mosek::fusion::BaseExpression::BaseExpression(mosek::fusion::p_BaseExpression *_impl) : _impl(_impl) { /*std::cout << "BaseExpression() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::BaseExpression::~BaseExpression() { delete _impl; _impl = nullptr; }mosek::fusion::p_BaseExpression::p_BaseExpression  (::mosek::fusion::BaseExpression * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::p_BaseExpression::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _4861){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__4861(_4861 ? _4861->raw() : nullptr, _4861 ? _4861->size(0) : 0);
    mosek::fusion::p_BaseExpression::_get_impl(::mosek::fusion::BaseExpression::t(_pubthis))->shape = _4861;
  }
}std::string mosek::fusion::BaseExpression :: toString() { return mosek::fusion::p_BaseExpression::_get_impl(this)->toString(); }std::string mosek::fusion::p_BaseExpression::toString(){
  return std::string ("Expression()");
}
monty::rc_ptr< ::mosek::fusion::FlatExpr > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__eval() { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__eval(); }monty::rc_ptr< ::mosek::fusion::FlatExpr > mosek::fusion::BaseExpression::eval() { return __mosek_2fusion_2BaseExpression__eval(); }
monty::rc_ptr< ::mosek::fusion::FlatExpr > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__eval() { return __mosek_2fusion_2BaseExpression__eval(); }monty::rc_ptr< ::mosek::fusion::FlatExpr > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__eval(){
  monty::rc_ptr< ::mosek::fusion::WorkStack > _4862 = ::mosek::fusion::p_WorkStack::_new_WorkStack();
  monty::rc_ptr< ::mosek::fusion::WorkStack > _4863 = ::mosek::fusion::p_WorkStack::_new_WorkStack();
  monty::rc_ptr< ::mosek::fusion::WorkStack > _4864 = ::mosek::fusion::p_WorkStack::_new_WorkStack();
  _pubthis->eval(_4862,_4863,_4864);
  int _4865 = _4862->popi32();
  std::shared_ptr< monty::ndarray< int,1 > > _4866 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4865)));
  _checked_ptr_1<int> _ptr__4866(_4866 ? _4866->raw() : nullptr,_4866 ? _4866->size(0) : 0);
  _4862->popi32(_4865,_4866,(int)0);
  int _4867 = _4862->popi32();
  int _4868 = _4862->popi32();
  int _4869 = (int)1;
  int _9115 = (int)0;
  int _9116 = _4865;
  for (int _4870 = _9115; _4870 < _9116; ++_4870)
  {
    {
      _4869 *= _ptr__4866[_4870];
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _4871 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4868)));
  _checked_ptr_1<long long> _ptr__4871(_4871 ? _4871->raw() : nullptr,_4871 ? _4871->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _4872 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _4867,(int)1 ))));
  _checked_ptr_1<int> _ptr__4872(_4872 ? _4872->raw() : nullptr,_4872 ? _4872->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4873 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4867)));
  _checked_ptr_1<double> _ptr__4873(_4873 ? _4873->raw() : nullptr,_4873 ? _4873->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4874 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4868)));
  _checked_ptr_1<double> _ptr__4874(_4874 ? _4874->raw() : nullptr,_4874 ? _4874->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4875 = nullptr;
  _checked_ptr_1<long long> _ptr__4875(_4875 ? _4875->raw() : nullptr,_4875 ? _4875->size(0) : 0);
  if ((_4869 < _4867))
  {
    {
      _4875 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4867)));
      _ptr__4875.update(_4875 ? _4875->raw() : nullptr, _4875 ? _4875->size(0) : 0);
      _4862->popi64(_4867,_4875,(int)0);
    }
  }
  {}
  _4862->popi32(_4867,_4872,(int)1);
  _4862->popi64(_4868,_4871,(int)0);
  _4862->popf64(_4867,_4873,(int)0);
  _4862->popf64(_4868,_4874,(int)0);
  std::vector<long long> _9117;
  for (int _4876 = (int)0, _9118 = safe_add( _4867,(int)1 ); _4876 < _9118 ; ++_4876)
  {
    _9117.push_back(_ptr__4872[_4876]);
  }
  auto _9119 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9117.size()),_9117.begin(),_9117.end()));
  return ::mosek::fusion::p_FlatExpr::_new_FlatExpr(_4873,_9119,_4871,_4874,_4866,_4875);
}
void mosek::fusion::BaseExpression::storeexpr  ( monty::rc_ptr< ::mosek::fusion::WorkStack > _4877,    std::shared_ptr< monty::ndarray< int,1 > > _4878,    std::shared_ptr< monty::ndarray< int,1 > > _4879,    std::shared_ptr< monty::ndarray< long long,1 > > _4880,    std::shared_ptr< monty::ndarray< long long,1 > > _4881,    std::shared_ptr< monty::ndarray< double,1 > > _4882,    std::shared_ptr< monty::ndarray< double,1 > > _4883) { mosek::fusion::p_BaseExpression::storeexpr(_4877,_4878,_4879,_4880,_4881,_4882,_4883); }void mosek::fusion::p_BaseExpression::storeexpr(monty::rc_ptr< ::mosek::fusion::WorkStack > _4877,std::shared_ptr< monty::ndarray< int,1 > > _4878,std::shared_ptr< monty::ndarray< int,1 > > _4879,std::shared_ptr< monty::ndarray< long long,1 > > _4880,std::shared_ptr< monty::ndarray< long long,1 > > _4881,std::shared_ptr< monty::ndarray< double,1 > > _4882,std::shared_ptr< monty::ndarray< double,1 > > _4883){
  _checked_ptr_1<int> _ptr__4878(_4878 ? _4878->raw() : nullptr, _4878 ? _4878->size(0) : 0);
  _checked_ptr_1<int> _ptr__4879(_4879 ? _4879->raw() : nullptr, _4879 ? _4879->size(0) : 0);
  _checked_ptr_1<long long> _ptr__4880(_4880 ? _4880->raw() : nullptr, _4880 ? _4880->size(0) : 0);
  _checked_ptr_1<long long> _ptr__4881(_4881 ? _4881->raw() : nullptr, _4881 ? _4881->size(0) : 0);
  _checked_ptr_1<double> _ptr__4882(_4882 ? _4882->raw() : nullptr, _4882 ? _4882->size(0) : 0);
  _checked_ptr_1<double> _ptr__4883(_4883 ? _4883->raw() : nullptr, _4883 ? _4883->size(0) : 0);
  int _4884 = _ptr__4879[((int)((_4879)->size(0)) - (int)1)];
  int _4885 = ((int)((_4879)->size(0)) - (int)1);
  int _4886 = (int)((_4878)->size(0));
  {
    int _4887 = _4877->alloci32(safe_add( _4885,(int)1 ));
    ::mosek::fusion::Utils::Tools::arraycopy(_4879,(int)0,mosek::fusion::p_WorkStack::_get_impl(_4877)->i32,_4887,safe_add( _4885,(int)1 ));
  }
  int _9120;
  bool _9121 = (NULL != _4880.get());
  if (_9121)
  {
    _9120 = (int)1;
  }
  else
  {
    _9120 = (int)0;
  }
  _4877->pushi32(_9120);
  _4877->pushi32(_4884);
  _4877->pushi32(_4885);
  {
    int _4888 = _4877->alloci32(_4886);
    ::mosek::fusion::Utils::Tools::arraycopy(_4878,(int)0,mosek::fusion::p_WorkStack::_get_impl(_4877)->i32,_4888,_4886);
  }
  _4877->pushi32(_4886);
  {
    int _4889 = _4877->alloci64(_4884);
    ::mosek::fusion::Utils::Tools::arraycopy(_4881,(int)0,mosek::fusion::p_WorkStack::_get_impl(_4877)->i64,_4889,_4884);
  }
  if ((NULL != _4880.get()))
  {
    {
      int _4890 = _4877->alloci64(_4885);
      ::mosek::fusion::Utils::Tools::arraycopy(_4880,(int)0,mosek::fusion::p_WorkStack::_get_impl(_4877)->i64,_4890,_4885);
    }
  }
  {}
  {
    int _4891 = _4877->allocf64(_4884);
    ::mosek::fusion::Utils::Tools::arraycopy(_4882,(int)0,mosek::fusion::p_WorkStack::_get_impl(_4877)->f64,_4891,_4884);
  }
  {
    int _4892 = _4877->allocf64(_4885);
    if ((NULL != _4883.get()))
    {
      {
        ::mosek::fusion::Utils::Tools::arraycopy(_4883,(int)0,mosek::fusion::p_WorkStack::_get_impl(_4877)->f64,_4892,_4885);
      }
    }
    else
    {
      {
        int _9122 = (int)0;
        int _9123 = _4885;
        for (int _4893 = _9122; _4893 < _9123; ++_4893)
        {
          {
            ((*mosek::fusion::p_WorkStack::_get_impl(_4877)->f64)(safe_add( _4892,_4893 ))) = (int)0;
          }
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__pick(std::shared_ptr< monty::ndarray< int,2 > > _4897) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__pick(_4897); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::pick(std::shared_ptr< monty::ndarray< int,2 > > _4897) { return __mosek_2fusion_2BaseExpression__pick(_4897); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int,2 > > _4897) { return __mosek_2fusion_2BaseExpression__pick(_4897); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__pick(std::shared_ptr< monty::ndarray< int,2 > > _4897){
  return (::mosek::fusion::p_ExprPick::_new_ExprPick((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),_4897)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__pick(std::shared_ptr< monty::ndarray< int,1 > > _4898) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__pick(_4898); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::pick(std::shared_ptr< monty::ndarray< int,1 > > _4898) { return __mosek_2fusion_2BaseExpression__pick(_4898); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int,1 > > _4898) { return __mosek_2fusion_2BaseExpression__pick(_4898); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__pick(std::shared_ptr< monty::ndarray< int,1 > > _4898){
  _checked_ptr_1<int> _ptr__4898(_4898 ? _4898->raw() : nullptr, _4898 ? _4898->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,2 > > _4899 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_4898)->size(0)),(int)1)));
  int _9124 = (int)0;
  int _9125 = (int)((_4898)->size(0));
  for (int _4900 = _9124; _4900 < _9125; ++_4900)
  {
    {
      ((*_4899)(_4900,(int)0)) = _ptr__4898[_4900];
    }
  }
  return (::mosek::fusion::p_ExprPick::_new_ExprPick((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),_4899)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__index(std::shared_ptr< monty::ndarray< int,1 > > _4901) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__index(_4901); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::index(std::shared_ptr< monty::ndarray< int,1 > > _4901) { return __mosek_2fusion_2BaseExpression__index(_4901); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__index(std::shared_ptr< monty::ndarray< int,1 > > _4901) { return __mosek_2fusion_2BaseExpression__index(_4901); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__index(std::shared_ptr< monty::ndarray< int,1 > > _4901){
  _checked_ptr_1<int> _ptr__4901(_4901 ? _4901->raw() : nullptr, _4901 ? _4901->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,2 > > _4902 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)1,(int)((_4901)->size(0)))));
  int _9126 = (int)0;
  int _9127 = (int)((_4901)->size(0));
  for (int _4903 = _9126; _4903 < _9127; ++_4903)
  {
    {
      ((*_4902)((int)0,_4903)) = _ptr__4901[_4903];
    }
  }
  return (::mosek::fusion::p_ExprPick::_new_ExprPick((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),_4902)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__index(int _4904) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__index(_4904); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::index(int _4904) { return __mosek_2fusion_2BaseExpression__index(_4904); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__index(int _4904) { return __mosek_2fusion_2BaseExpression__index(_4904); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__index(int _4904){
  std::shared_ptr< monty::ndarray< int,2 > > _4905 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)1,(int)1)));
  ((*_4905)((int)0,(int)0)) = _4904;
  return (::mosek::fusion::p_ExprPick::_new_ExprPick((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),_4905)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__slice(std::shared_ptr< monty::ndarray< int,1 > > _4906,std::shared_ptr< monty::ndarray< int,1 > > _4907) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__slice(_4906,_4907); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::slice(std::shared_ptr< monty::ndarray< int,1 > > _4906,std::shared_ptr< monty::ndarray< int,1 > > _4907) { return __mosek_2fusion_2BaseExpression__slice(_4906,_4907); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__slice(std::shared_ptr< monty::ndarray< int,1 > > _4906,std::shared_ptr< monty::ndarray< int,1 > > _4907) { return __mosek_2fusion_2BaseExpression__slice(_4906,_4907); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__slice(std::shared_ptr< monty::ndarray< int,1 > > _4906,std::shared_ptr< monty::ndarray< int,1 > > _4907){
  _checked_ptr_1<int> _ptr__4906(_4906 ? _4906->raw() : nullptr, _4906 ? _4906->size(0) : 0);
  _checked_ptr_1<int> _ptr__4907(_4907 ? _4907->raw() : nullptr, _4907 ? _4907->size(0) : 0);
  return (::mosek::fusion::p_ExprSlice::_new_ExprSlice((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),_4906,_4907)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__slice(int _4908,int _4909) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__slice(_4908,_4909); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::slice(int _4908,int _4909) { return __mosek_2fusion_2BaseExpression__slice(_4908,_4909); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__slice(int _4908,int _4909) { return __mosek_2fusion_2BaseExpression__slice(_4908,_4909); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__slice(int _4908,int _4909){
  return (::mosek::fusion::p_ExprSlice::_new_ExprSlice((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_4908)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_4909)}))).as<::mosek::fusion::Expression>();
}
long long mosek::fusion::BaseExpression :: getSize() { return mosek::fusion::p_BaseExpression::_get_impl(this)->getSize(); }long long mosek::fusion::p_BaseExpression::getSize(){
  return ::mosek::fusion::p_Set::size(shape);
}
int mosek::fusion::BaseExpression :: getND() { return mosek::fusion::p_BaseExpression::_get_impl(this)->getND(); }int mosek::fusion::p_BaseExpression::getND(){
  return (int)((shape)->size(0));
}
int mosek::fusion::BaseExpression :: getDim(int _4910) { return mosek::fusion::p_BaseExpression::_get_impl(this)->getDim(_4910); }int mosek::fusion::p_BaseExpression::getDim(int _4910){
  return ((*shape)(_4910));
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::BaseExpression :: getShape() { return mosek::fusion::p_BaseExpression::_get_impl(this)->getShape(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_BaseExpression::getShape(){
  return ::mosek::fusion::Utils::Tools::arraycopy(shape);
}
void mosek::fusion::p_BaseExpression::destroy(){shape.reset();}void mosek::fusion::BaseExpression::destroy() { mosek::fusion::p_BaseExpression::_get_impl(this)->destroy(); }mosek::fusion::WorkStack::WorkStack(mosek::fusion::p_WorkStack *_impl) : _impl(_impl) { /*std::cout << "WorkStack() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::WorkStack::~WorkStack() { delete _impl; _impl = nullptr; }mosek::fusion::p_WorkStack::p_WorkStack  (::mosek::fusion::WorkStack * _pubthis) :     _pubthis(_pubthis){}int mosek::fusion::WorkStack::get_cof_base() { return _impl->cof_base; }
void mosek::fusion::WorkStack::set_cof_base(int _val) { _impl->cof_base = _val; }
int mosek::fusion::WorkStack::get_bfix_base() { return _impl->bfix_base; }
void mosek::fusion::WorkStack::set_bfix_base(int _val) { _impl->bfix_base = _val; }
int mosek::fusion::WorkStack::get_nidxs_base() { return _impl->nidxs_base; }
void mosek::fusion::WorkStack::set_nidxs_base(int _val) { _impl->nidxs_base = _val; }
int mosek::fusion::WorkStack::get_sp_base() { return _impl->sp_base; }
void mosek::fusion::WorkStack::set_sp_base(int _val) { _impl->sp_base = _val; }
int mosek::fusion::WorkStack::get_shape_base() { return _impl->shape_base; }
void mosek::fusion::WorkStack::set_shape_base(int _val) { _impl->shape_base = _val; }
int mosek::fusion::WorkStack::get_ptr_base() { return _impl->ptr_base; }
void mosek::fusion::WorkStack::set_ptr_base(int _val) { _impl->ptr_base = _val; }
bool mosek::fusion::WorkStack::get_hassp() { return _impl->hassp; }
void mosek::fusion::WorkStack::set_hassp(bool _val) { _impl->hassp = _val; }
int mosek::fusion::WorkStack::get_nelem() { return _impl->nelem; }
void mosek::fusion::WorkStack::set_nelem(int _val) { _impl->nelem = _val; }
int mosek::fusion::WorkStack::get_nnz() { return _impl->nnz; }
void mosek::fusion::WorkStack::set_nnz(int _val) { _impl->nnz = _val; }
int mosek::fusion::WorkStack::get_nd() { return _impl->nd; }
void mosek::fusion::WorkStack::set_nd(int _val) { _impl->nd = _val; }
int mosek::fusion::WorkStack::get_pf64() { return _impl->pf64; }
void mosek::fusion::WorkStack::set_pf64(int _val) { _impl->pf64 = _val; }
int mosek::fusion::WorkStack::get_pi64() { return _impl->pi64; }
void mosek::fusion::WorkStack::set_pi64(int _val) { _impl->pi64 = _val; }
int mosek::fusion::WorkStack::get_pi32() { return _impl->pi32; }
void mosek::fusion::WorkStack::set_pi32(int _val) { _impl->pi32 = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::WorkStack::get_f64() { return _impl->f64; }
void mosek::fusion::WorkStack::set_f64(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->f64 = _val; }
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::WorkStack::get_i64() { return _impl->i64; }
void mosek::fusion::WorkStack::set_i64(std::shared_ptr< monty::ndarray< long long,1 > > _val) { _impl->i64 = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::WorkStack::get_i32() { return _impl->i32; }
void mosek::fusion::WorkStack::set_i32(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->i32 = _val; }
mosek::fusion::WorkStack::t mosek::fusion::p_WorkStack::_new_WorkStack  (){ return new mosek::fusion::WorkStack(); }mosek::fusion::WorkStack::WorkStack  () :    WorkStack(new mosek::fusion::p_WorkStack(this)){ mosek::fusion::p_WorkStack::_get_impl(this)->_initialize(); }void mosek::fusion::p_WorkStack::_initialize  (){monty::rc_reserve __reserve_this(_pubthis);   {
    i32 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)256)));
    i64 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)256)));
    f64 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)256)));
    pi32 = (int)0;
    pi64 = (int)0;
    pf64 = (int)0;
    nd = (int)0;
    nnz = (int)0;
    nelem = (int)0;
    hassp = false;
    ptr_base = (int)0;
    shape_base = (int)0;
    sp_base = (int)0;
    nidxs_base = (int)0;
    bfix_base = (int)0;
    cof_base = (int)0;
  }
}bool mosek::fusion::WorkStack :: peek_hassp() { return mosek::fusion::p_WorkStack::_get_impl(this)->peek_hassp(); }bool mosek::fusion::p_WorkStack::peek_hassp(){
  return (_pubthis->peeki32(safe_add( (int)3,_pubthis->peek_nd() )) != (int)0);
}
int mosek::fusion::WorkStack :: peek_nnz() { return mosek::fusion::p_WorkStack::_get_impl(this)->peek_nnz(); }int mosek::fusion::p_WorkStack::peek_nnz(){
  return _pubthis->peeki32(safe_add( (int)2,_pubthis->peek_nd() ));
}
int mosek::fusion::WorkStack :: peek_nelem() { return mosek::fusion::p_WorkStack::_get_impl(this)->peek_nelem(); }int mosek::fusion::p_WorkStack::peek_nelem(){
  return _pubthis->peeki32(safe_add( (int)1,_pubthis->peek_nd() ));
}
int mosek::fusion::WorkStack :: peek_dim(int _4911) { return mosek::fusion::p_WorkStack::_get_impl(this)->peek_dim(_4911); }int mosek::fusion::p_WorkStack::peek_dim(int _4911){
  return _pubthis->peeki32(safe_add( _4911,(int)1 ));
}
int mosek::fusion::WorkStack :: peek_nd() { return mosek::fusion::p_WorkStack::_get_impl(this)->peek_nd(); }int mosek::fusion::p_WorkStack::peek_nd(){
  return _pubthis->peeki32();
}
void mosek::fusion::WorkStack :: alloc_expr(int _4912,int _4913,int _4914,bool _4915) { mosek::fusion::p_WorkStack::_get_impl(this)->alloc_expr(_4912,_4913,_4914,_4915); }void mosek::fusion::p_WorkStack::alloc_expr(int _4912,int _4913,int _4914,bool _4915){
  cof_base = _pubthis->allocf64(_4914);
  bfix_base = _pubthis->allocf64(_4913);
  nidxs_base = _pubthis->alloci64(_4914);
  int _9128;
  bool _9129 = _4915;
  if (_9129)
  {
    _9128 = _pubthis->alloci64(_4913);
  }
  else
  {
    _9128 = (-(int)9999);
  }
  sp_base = _9128;
  ptr_base = _pubthis->alloci32(safe_add( _4913,(int)1 ));
  int _9130;
  bool _9131 = _4915;
  if (_9131)
  {
    _9130 = (int)1;
  }
  else
  {
    _9130 = (int)0;
  }
  _pubthis->pushi32(_9130);
  _pubthis->pushi32(_4914);
  _pubthis->pushi32(_4913);
  shape_base = _pubthis->alloci32(_4912);
  _pubthis->pushi32(_4912);
  mosek::fusion::p_WorkStack::_get_impl(::mosek::fusion::WorkStack::t(_pubthis))->nd = _4912;
  mosek::fusion::p_WorkStack::_get_impl(::mosek::fusion::WorkStack::t(_pubthis))->nelem = _4913;
  mosek::fusion::p_WorkStack::_get_impl(::mosek::fusion::WorkStack::t(_pubthis))->nnz = _4914;
  mosek::fusion::p_WorkStack::_get_impl(::mosek::fusion::WorkStack::t(_pubthis))->hassp = _4915;
}
void mosek::fusion::WorkStack :: move_expr(monty::rc_ptr< ::mosek::fusion::WorkStack > _4916) { mosek::fusion::p_WorkStack::_get_impl(this)->move_expr(_4916); }void mosek::fusion::p_WorkStack::move_expr(monty::rc_ptr< ::mosek::fusion::WorkStack > _4916){
  int _4917 = pi32;
  int _4918 = pi64;
  int _4919 = pf64;
  _pubthis->pop_expr();
  int _4920 = _4916->alloci32((_4917 - pi32));
  int _4921 = _4916->alloci64((_4918 - pi64));
  int _4922 = _4916->allocf64((_4919 - pf64));
  ::mosek::fusion::Utils::Tools::arraycopy(i32,pi32,mosek::fusion::p_WorkStack::_get_impl(_4916)->i32,_4920,(_4917 - pi32));
  ::mosek::fusion::Utils::Tools::arraycopy(i64,pi64,mosek::fusion::p_WorkStack::_get_impl(_4916)->i64,_4921,(_4918 - pi64));
  ::mosek::fusion::Utils::Tools::arraycopy(f64,pf64,mosek::fusion::p_WorkStack::_get_impl(_4916)->f64,_4922,(_4919 - pf64));
}
void mosek::fusion::WorkStack :: peek_expr() { mosek::fusion::p_WorkStack::_get_impl(this)->peek_expr(); }void mosek::fusion::p_WorkStack::peek_expr(){
  int _4923 = pi32;
  int _4924 = pi64;
  int _4925 = pf64;
  _pubthis->pop_expr();
  pi32 = _4923;
  pi64 = _4924;
  pf64 = _4925;
}
void mosek::fusion::WorkStack :: pop_expr() { mosek::fusion::p_WorkStack::_get_impl(this)->pop_expr(); }void mosek::fusion::p_WorkStack::pop_expr(){
  nd = _pubthis->popi32();
  shape_base = _pubthis->popi32(nd);
  nelem = _pubthis->popi32();
  nnz = _pubthis->popi32();
  hassp = (_pubthis->popi32() != (int)0);
  ptr_base = _pubthis->popi32(safe_add( nelem,(int)1 ));
  int _9132;
  bool _9133 = hassp;
  if (_9133)
  {
    _9132 = _pubthis->popi64(nelem);
  }
  else
  {
    _9132 = (-(int)9999);
  }
  sp_base = _9132;
  nidxs_base = _pubthis->popi64(nnz);
  bfix_base = _pubthis->popf64(nelem);
  cof_base = _pubthis->popf64(nnz);
}
void mosek::fusion::WorkStack :: ensure_sparsity() { mosek::fusion::p_WorkStack::_get_impl(this)->ensure_sparsity(); }void mosek::fusion::p_WorkStack::ensure_sparsity(){
  int _4926 = ((*i32)((pi32 - (int)1)));
  bool _4927 = (((*i32)(((pi32 - _4926) - (int)3))) != (int)0);
  int _4928 = ((*i32)(((pi32 - _4926) - (int)1)));
  if ((!_4927))
  {
    {
      ((*i32)(((pi32 - _4926) - (int)3))) = (int)1;
      int _4929 = _pubthis->alloci64(_4928);
      int _9134 = (int)0;
      int _9135 = _4928;
      for (int _4930 = _9134; _4930 < _9135; ++_4930)
      {
        {
          ((*i64)(_4929)) = _4930;
        }
      }
    }
  }
  {}
}
void mosek::fusion::WorkStack :: clear() { mosek::fusion::p_WorkStack::_get_impl(this)->clear(); }void mosek::fusion::p_WorkStack::clear(){
  pi32 = (int)0;
  pi64 = (int)0;
  pf64 = (int)0;
}
int mosek::fusion::WorkStack :: allocf64(int _4931) { return mosek::fusion::p_WorkStack::_get_impl(this)->allocf64(_4931); }int mosek::fusion::p_WorkStack::allocf64(int _4931){
  _pubthis->ensuref64(_4931);
  int _4932 = pf64;
  pf64 += _4931;
  return _4932;
}
int mosek::fusion::WorkStack :: alloci64(int _4933) { return mosek::fusion::p_WorkStack::_get_impl(this)->alloci64(_4933); }int mosek::fusion::p_WorkStack::alloci64(int _4933){
  _pubthis->ensurei64(_4933);
  int _4934 = pi64;
  pi64 += _4933;
  return _4934;
}
int mosek::fusion::WorkStack :: alloci32(int _4935) { return mosek::fusion::p_WorkStack::_get_impl(this)->alloci32(_4935); }int mosek::fusion::p_WorkStack::alloci32(int _4935){
  if ((_4935 > (int)0))
  {
    {
      _pubthis->ensurei32(_4935);
      int _4936 = pi32;
      pi32 += _4935;
      return _4936;
    }
  }
  else
  {
    {
      return (int)0;
    }
  }
}
void mosek::fusion::WorkStack :: pushf64(double _4937) { mosek::fusion::p_WorkStack::_get_impl(this)->pushf64(_4937); }void mosek::fusion::p_WorkStack::pushf64(double _4937){
  _pubthis->ensuref64((int)1);
  ((*f64)(pf64)) = _4937;
  ++ pf64;
}
void mosek::fusion::WorkStack :: pushi64(long long _4938) { mosek::fusion::p_WorkStack::_get_impl(this)->pushi64(_4938); }void mosek::fusion::p_WorkStack::pushi64(long long _4938){
  _pubthis->ensurei64((int)1);
  ((*i64)(pi64)) = _4938;
  ++ pi64;
}
void mosek::fusion::WorkStack :: pushi32(int _4939) { mosek::fusion::p_WorkStack::_get_impl(this)->pushi32(_4939); }void mosek::fusion::p_WorkStack::pushi32(int _4939){
  _pubthis->ensurei32((int)1);
  ((*i32)(pi32)) = _4939;
  ++ pi32;
}
void mosek::fusion::WorkStack :: ensuref64(int _4940) { mosek::fusion::p_WorkStack::_get_impl(this)->ensuref64(_4940); }void mosek::fusion::p_WorkStack::ensuref64(int _4940){
  if ((safe_add( pf64,_4940 ) > (int)((f64)->size(0))))
  {
    {
      int _9136;
      bool _9137 = (_4940 < (int)((f64)->size(0)));
      if (_9137)
      {
        _9136 = safe_mul( (int)((f64)->size(0)),(int)2 );
      }
      else
      {
        _9136 = safe_add( (int)((f64)->size(0)),_4940 );
      }
      int _4941 = _9136;
      std::shared_ptr< monty::ndarray< double,1 > > _4942 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4941)));
      _checked_ptr_1<double> _ptr__4942(_4942 ? _4942->raw() : nullptr,_4942 ? _4942->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(f64,(int)0,_4942,(int)0,pf64);
      f64 = _4942;
    }
  }
  {}
}
void mosek::fusion::WorkStack :: ensurei64(int _4943) { mosek::fusion::p_WorkStack::_get_impl(this)->ensurei64(_4943); }void mosek::fusion::p_WorkStack::ensurei64(int _4943){
  if ((safe_add( pi64,_4943 ) > (int)((i64)->size(0))))
  {
    {
      int _9138;
      bool _9139 = (_4943 < (int)((i64)->size(0)));
      if (_9139)
      {
        _9138 = (int)((i64)->size(0));
      }
      else
      {
        _9138 = _4943;
      }
      int _4944 = safe_add( (int)((i64)->size(0)),_9138 );
      std::shared_ptr< monty::ndarray< long long,1 > > _4945 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4944)));
      _checked_ptr_1<long long> _ptr__4945(_4945 ? _4945->raw() : nullptr,_4945 ? _4945->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(i64,(int)0,_4945,(int)0,pi64);
      i64 = _4945;
    }
  }
  {}
}
void mosek::fusion::WorkStack :: ensurei32(int _4946) { mosek::fusion::p_WorkStack::_get_impl(this)->ensurei32(_4946); }void mosek::fusion::p_WorkStack::ensurei32(int _4946){
  if ((safe_add( pi32,_4946 ) > (int)((i32)->size(0))))
  {
    {
      int _9140;
      bool _9141 = (_4946 < (int)((i32)->size(0)));
      if (_9141)
      {
        _9140 = safe_mul( (int)((i32)->size(0)),(int)2 );
      }
      else
      {
        _9140 = safe_add( (int)((i32)->size(0)),_4946 );
      }
      int _4947 = _9140;
      std::shared_ptr< monty::ndarray< int,1 > > _4948 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4947)));
      _checked_ptr_1<int> _ptr__4948(_4948 ? _4948->raw() : nullptr,_4948 ? _4948->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(i32,(int)0,_4948,(int)0,pi32);
      i32 = _4948;
    }
  }
  {}
}
int mosek::fusion::WorkStack :: popf64(int _4949) { return mosek::fusion::p_WorkStack::_get_impl(this)->popf64(_4949); }int mosek::fusion::p_WorkStack::popf64(int _4949){
  pf64 -= _4949;
  return pf64;
}
int mosek::fusion::WorkStack :: popi64(int _4950) { return mosek::fusion::p_WorkStack::_get_impl(this)->popi64(_4950); }int mosek::fusion::p_WorkStack::popi64(int _4950){
  pi64 -= _4950;
  return pi64;
}
int mosek::fusion::WorkStack :: popi32(int _4951) { return mosek::fusion::p_WorkStack::_get_impl(this)->popi32(_4951); }int mosek::fusion::p_WorkStack::popi32(int _4951){
  pi32 -= _4951;
  return pi32;
}
void mosek::fusion::WorkStack :: popf64(int _4952,std::shared_ptr< monty::ndarray< double,1 > > _4953,int _4954) { mosek::fusion::p_WorkStack::_get_impl(this)->popf64(_4952,_4953,_4954); }void mosek::fusion::p_WorkStack::popf64(int _4952,std::shared_ptr< monty::ndarray< double,1 > > _4953,int _4954){
  _checked_ptr_1<double> _ptr__4953(_4953 ? _4953->raw() : nullptr, _4953 ? _4953->size(0) : 0);
  pf64 -= _4952;
  ::mosek::fusion::Utils::Tools::arraycopy(f64,pf64,_4953,_4954,_4952);
}
void mosek::fusion::WorkStack :: popi64(int _4955,std::shared_ptr< monty::ndarray< long long,1 > > _4956,int _4957) { mosek::fusion::p_WorkStack::_get_impl(this)->popi64(_4955,_4956,_4957); }void mosek::fusion::p_WorkStack::popi64(int _4955,std::shared_ptr< monty::ndarray< long long,1 > > _4956,int _4957){
  _checked_ptr_1<long long> _ptr__4956(_4956 ? _4956->raw() : nullptr, _4956 ? _4956->size(0) : 0);
  pi64 -= _4955;
  ::mosek::fusion::Utils::Tools::arraycopy(i64,pi64,_4956,_4957,_4955);
}
void mosek::fusion::WorkStack :: popi32(int _4958,std::shared_ptr< monty::ndarray< int,1 > > _4959,int _4960) { mosek::fusion::p_WorkStack::_get_impl(this)->popi32(_4958,_4959,_4960); }void mosek::fusion::p_WorkStack::popi32(int _4958,std::shared_ptr< monty::ndarray< int,1 > > _4959,int _4960){
  _checked_ptr_1<int> _ptr__4959(_4959 ? _4959->raw() : nullptr, _4959 ? _4959->size(0) : 0);
  pi32 -= _4958;
  ::mosek::fusion::Utils::Tools::arraycopy(i32,pi32,_4959,_4960,_4958);
}
double mosek::fusion::WorkStack :: popf64() { return mosek::fusion::p_WorkStack::_get_impl(this)->popf64(); }double mosek::fusion::p_WorkStack::popf64(){
  -- pf64;
  return ((*f64)(pf64));
}
long long mosek::fusion::WorkStack :: popi64() { return mosek::fusion::p_WorkStack::_get_impl(this)->popi64(); }long long mosek::fusion::p_WorkStack::popi64(){
  -- pi64;
  return ((*i64)(pi64));
}
int mosek::fusion::WorkStack :: popi32() { return mosek::fusion::p_WorkStack::_get_impl(this)->popi32(); }int mosek::fusion::p_WorkStack::popi32(){
  -- pi32;
  return ((*i32)(pi32));
}
double mosek::fusion::WorkStack :: peekf64() { return mosek::fusion::p_WorkStack::_get_impl(this)->peekf64(); }double mosek::fusion::p_WorkStack::peekf64(){
  return ((*f64)((pf64 - (int)1)));
}
long long mosek::fusion::WorkStack :: peeki64() { return mosek::fusion::p_WorkStack::_get_impl(this)->peeki64(); }long long mosek::fusion::p_WorkStack::peeki64(){
  return ((*i64)((pi64 - (int)1)));
}
int mosek::fusion::WorkStack :: peeki32() { return mosek::fusion::p_WorkStack::_get_impl(this)->peeki32(); }int mosek::fusion::p_WorkStack::peeki32(){
  return ((*i32)((pi32 - (int)1)));
}
double mosek::fusion::WorkStack :: peekf64(int _4961) { return mosek::fusion::p_WorkStack::_get_impl(this)->peekf64(_4961); }double mosek::fusion::p_WorkStack::peekf64(int _4961){
  return ((*f64)(((pf64 - _4961) - (int)1)));
}
long long mosek::fusion::WorkStack :: peeki64(int _4962) { return mosek::fusion::p_WorkStack::_get_impl(this)->peeki64(_4962); }long long mosek::fusion::p_WorkStack::peeki64(int _4962){
  return ((*i64)(((pi64 - _4962) - (int)1)));
}
int mosek::fusion::WorkStack :: peeki32(int _4963) { return mosek::fusion::p_WorkStack::_get_impl(this)->peeki32(_4963); }int mosek::fusion::p_WorkStack::peeki32(int _4963){
  return ((*i32)(((pi32 - _4963) - (int)1)));
}
void mosek::fusion::p_WorkStack::destroy(){f64.reset();i64.reset();i32.reset();}void mosek::fusion::WorkStack::destroy() { mosek::fusion::p_WorkStack::_get_impl(this)->destroy(); }mosek::fusion::SymmetricExpr::SymmetricExpr(mosek::fusion::p_SymmetricExpr *_impl) : _impl(_impl) { /*std::cout << "SymmetricExpr() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::SymmetricExpr::~SymmetricExpr() { delete _impl; _impl = nullptr; }mosek::fusion::p_SymmetricExpr::p_SymmetricExpr  (::mosek::fusion::SymmetricExpr * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::SymmetricExpr::t mosek::fusion::p_SymmetricExpr::_new_SymmetricExpr  (int _4964,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > > _4965,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4966,    monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _4967){ return new mosek::fusion::SymmetricExpr(_4964,_4965,_4966,_4967); }mosek::fusion::SymmetricExpr::SymmetricExpr  (int _4964,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > > _4965,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4966,    monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _4967) :    SymmetricExpr(new mosek::fusion::p_SymmetricExpr(this)){ mosek::fusion::p_SymmetricExpr::_get_impl(this)->_initialize(_4964,_4965,_4966,_4967); }void mosek::fusion::p_SymmetricExpr::_initialize  (int _4964,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > > _4965,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4966,    monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _4967){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_SymmetricExpr::_get_impl(::mosek::fusion::SymmetricExpr::t(_pubthis))->n = _4964;
    mosek::fusion::p_SymmetricExpr::_get_impl(::mosek::fusion::SymmetricExpr::t(_pubthis))->Ms = _4965;
    mosek::fusion::p_SymmetricExpr::_get_impl(::mosek::fusion::SymmetricExpr::t(_pubthis))->xs = _4966;
    mosek::fusion::p_SymmetricExpr::_get_impl(::mosek::fusion::SymmetricExpr::t(_pubthis))->b = _4967;
  }
}monty::rc_ptr< ::mosek::fusion::SymmetricExpr > mosek::fusion::p_SymmetricExpr::add(monty::rc_ptr< ::mosek::fusion::SymmetricExpr > _4968,monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _4969){
  if ((mosek::fusion::p_SymmetricExpr::_get_impl(_4968)->n != _4969->getdim()))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Dimension does not match"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _9142;
  bool _9143 = (NULL != mosek::fusion::p_SymmetricExpr::_get_impl(_4968)->b.get());
  if (_9143)
  {
    _9142 = mosek::fusion::p_SymmetricExpr::_get_impl(_4968)->b->__mosek_2fusion_2SymmetricMatrix__add(_4969);
  }
  else
  {
    _9142 = _4969;
  }
  return ::mosek::fusion::p_SymmetricExpr::_new_SymmetricExpr(mosek::fusion::p_SymmetricExpr::_get_impl(_4968)->n,mosek::fusion::p_SymmetricExpr::_get_impl(_4968)->Ms,mosek::fusion::p_SymmetricExpr::_get_impl(_4968)->xs,_9142);
}
monty::rc_ptr< ::mosek::fusion::SymmetricExpr > mosek::fusion::p_SymmetricExpr::mul(monty::rc_ptr< ::mosek::fusion::SymmetricExpr > _4970,double _4971){
  std::vector<monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >> _9144;
  for (int _4972 = (int)0, _9145 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_4970)->Ms)->size(0)); _4972 < _9145 ; ++_4972)
  {
    _9144.push_back(((*mosek::fusion::p_SymmetricExpr::_get_impl(_4970)->Ms)(_4972))->__mosek_2fusion_2SymmetricMatrix__mul(_4971));
  }
  auto _9146 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 >(monty::shape(_9144.size()),_9144.begin(),_9144.end()));
  monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _9147;
  bool _9148 = (NULL != mosek::fusion::p_SymmetricExpr::_get_impl(_4970)->b.get());
  if (_9148)
  {
    _9147 = mosek::fusion::p_SymmetricExpr::_get_impl(_4970)->b->__mosek_2fusion_2SymmetricMatrix__mul(_4971);
  }
  else
  {
    _9147 = nullptr;
  }
  return ::mosek::fusion::p_SymmetricExpr::_new_SymmetricExpr(mosek::fusion::p_SymmetricExpr::_get_impl(_4970)->n,_9146,mosek::fusion::p_SymmetricExpr::_get_impl(_4970)->xs,_9147);
}
monty::rc_ptr< ::mosek::fusion::SymmetricExpr > mosek::fusion::p_SymmetricExpr::add(monty::rc_ptr< ::mosek::fusion::SymmetricExpr > _4973,monty::rc_ptr< ::mosek::fusion::SymmetricExpr > _4974){
  if ((mosek::fusion::p_SymmetricExpr::_get_impl(_4973)->n != mosek::fusion::p_SymmetricExpr::_get_impl(_4974)->n))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions of operands"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > > _4975 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 >(monty::shape(safe_add( (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_4973)->Ms)->size(0)),(int)((mosek::fusion::p_SymmetricExpr::_get_impl(_4974)->Ms)->size(0)) ))));
  std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4976 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(safe_add( (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_4973)->xs)->size(0)),(int)((mosek::fusion::p_SymmetricExpr::_get_impl(_4974)->xs)->size(0)) ))));
  int _4977 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_4973)->Ms)->size(0));
  int _9149 = (int)0;
  int _9150 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_4973)->Ms)->size(0));
  for (int _4978 = _9149; _4978 < _9150; ++_4978)
  {
    {
      ((*_4975)(_4978)) = ((*mosek::fusion::p_SymmetricExpr::_get_impl(_4973)->Ms)(_4978));
    }
  }
  int _9151 = (int)0;
  int _9152 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_4974)->Ms)->size(0));
  for (int _4979 = _9151; _4979 < _9152; ++_4979)
  {
    {
      ((*_4975)(safe_add( _4979,_4977 ))) = ((*mosek::fusion::p_SymmetricExpr::_get_impl(_4974)->Ms)(_4979));
    }
  }
  int _4980 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_4973)->xs)->size(0));
  int _9153 = (int)0;
  int _9154 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_4973)->xs)->size(0));
  for (int _4981 = _9153; _4981 < _9154; ++_4981)
  {
    {
      ((*_4976)(_4981)) = ((*mosek::fusion::p_SymmetricExpr::_get_impl(_4973)->xs)(_4981));
    }
  }
  int _9155 = (int)0;
  int _9156 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_4974)->xs)->size(0));
  for (int _4982 = _9155; _4982 < _9156; ++_4982)
  {
    {
      ((*_4976)(safe_add( _4982,_4980 ))) = ((*mosek::fusion::p_SymmetricExpr::_get_impl(_4974)->xs)(_4982));
    }
  }
  monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _9157;
  bool _9158 = ((NULL == mosek::fusion::p_SymmetricExpr::_get_impl(_4973)->b.get()) && (NULL == mosek::fusion::p_SymmetricExpr::_get_impl(_4974)->b.get()));
  if (_9158)
  {
    _9157 = nullptr;
  }
  else
  {
    monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _9159;
    bool _9160 = ((NULL != mosek::fusion::p_SymmetricExpr::_get_impl(_4973)->b.get()) && (NULL != mosek::fusion::p_SymmetricExpr::_get_impl(_4974)->b.get()));
    if (_9160)
    {
      _9159 = mosek::fusion::p_SymmetricExpr::_get_impl(_4973)->b->__mosek_2fusion_2SymmetricMatrix__add(mosek::fusion::p_SymmetricExpr::_get_impl(_4974)->b);
    }
    else
    {
      monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _9161;
      bool _9162 = (NULL != mosek::fusion::p_SymmetricExpr::_get_impl(_4973)->b.get());
      if (_9162)
      {
        _9161 = mosek::fusion::p_SymmetricExpr::_get_impl(_4973)->b;
      }
      else
      {
        _9161 = mosek::fusion::p_SymmetricExpr::_get_impl(_4974)->b;
      }
      _9159 = _9161;
    }
    _9157 = _9159;
  }
  monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _4983 = _9157;
  return ::mosek::fusion::p_SymmetricExpr::_new_SymmetricExpr(mosek::fusion::p_SymmetricExpr::_get_impl(_4973)->n,_4975,_4976,_4983);
}
std::string mosek::fusion::SymmetricExpr :: toString() { return mosek::fusion::p_SymmetricExpr::_get_impl(this)->toString(); }std::string mosek::fusion::p_SymmetricExpr::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _4984 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _4984->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("SymmetricExpr( ("))->__mosek_2fusion_2Utils_2StringBuffer__a(n)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(n)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") )"));
  return _4984->toString();
}
void mosek::fusion::p_SymmetricExpr::destroy(){xs.reset();b.reset();Ms.reset();}void mosek::fusion::SymmetricExpr::destroy() { mosek::fusion::p_SymmetricExpr::_get_impl(this)->destroy(); }mosek::fusion::Expr::Expr(mosek::fusion::p_Expr *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "Expr()" << this << std::endl; */ }mosek::fusion::Expr::~Expr() {  /* std::cout << "~Expr()" << this << std::endl << std::flush; */ }mosek::fusion::p_Expr::p_Expr  (::mosek::fusion::Expr * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::Expr::t mosek::fusion::p_Expr::_new_Expr  (std::shared_ptr< monty::ndarray< long long,1 > > _4985,    std::shared_ptr< monty::ndarray< long long,1 > > _4986,    std::shared_ptr< monty::ndarray< double,1 > > _4987,    std::shared_ptr< monty::ndarray< double,1 > > _4988,    std::shared_ptr< monty::ndarray< int,1 > > _4989,    std::shared_ptr< monty::ndarray< long long,1 > > _4990){ return new mosek::fusion::Expr(_4985,_4986,_4987,_4988,_4989,_4990); }mosek::fusion::Expr::Expr  (std::shared_ptr< monty::ndarray< long long,1 > > _4985,    std::shared_ptr< monty::ndarray< long long,1 > > _4986,    std::shared_ptr< monty::ndarray< double,1 > > _4987,    std::shared_ptr< monty::ndarray< double,1 > > _4988,    std::shared_ptr< monty::ndarray< int,1 > > _4989,    std::shared_ptr< monty::ndarray< long long,1 > > _4990) :    Expr(new mosek::fusion::p_Expr(this)){ mosek::fusion::p_Expr::_get_impl(this)->_initialize(_4985,_4986,_4987,_4988,_4989,_4990); }void mosek::fusion::p_Expr::_initialize  (std::shared_ptr< monty::ndarray< long long,1 > > _4985,    std::shared_ptr< monty::ndarray< long long,1 > > _4986,    std::shared_ptr< monty::ndarray< double,1 > > _4987,    std::shared_ptr< monty::ndarray< double,1 > > _4988,    std::shared_ptr< monty::ndarray< int,1 > > _4989,    std::shared_ptr< monty::ndarray< long long,1 > > _4990){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__4985(_4985 ? _4985->raw() : nullptr, _4985 ? _4985->size(0) : 0);
    _checked_ptr_1<long long> _ptr__4986(_4986 ? _4986->raw() : nullptr, _4986 ? _4986->size(0) : 0);
    _checked_ptr_1<double> _ptr__4987(_4987 ? _4987->raw() : nullptr, _4987 ? _4987->size(0) : 0);
    _checked_ptr_1<double> _ptr__4988(_4988 ? _4988->raw() : nullptr, _4988 ? _4988->size(0) : 0);
    _checked_ptr_1<int> _ptr__4989(_4989 ? _4989->raw() : nullptr, _4989 ? _4989->size(0) : 0);
    _checked_ptr_1<long long> _ptr__4990(_4990 ? _4990->raw() : nullptr, _4990 ? _4990->size(0) : 0);
    std::shared_ptr< monty::ndarray< int,1 > > _9163;
    bool _9164 = (NULL != _4989.get());
    if (_9164)
    {
      _9163 = ::mosek::fusion::Utils::Tools::arraycopy(_4989);
    }
    else
    {
      _9163 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(((int)((_4985)->size(0)) - (int)1))});
    }
    std::shared_ptr< monty::ndarray< long long,1 > > _9165;
    bool _9166 = (NULL != _4990.get());
    if (_9166)
    {
      _9165 = ::mosek::fusion::Utils::Tools::arraycopy(_4990);
    }
    else
    {
      _9165 = nullptr;
    }
    mosek::fusion::p_Expr::_initialize(::mosek::fusion::Utils::Tools::arraycopy(_4985),::mosek::fusion::Utils::Tools::arraycopy(_4986),::mosek::fusion::Utils::Tools::arraycopy(_4987),::mosek::fusion::Utils::Tools::arraycopy(_4988),_9163,_9165,(int)1);
    int _4991 = ((int)((_4985)->size(0)) - (int)1);
    if ((_4991 < (int)0))
    {
      {
        throw ::mosek::fusion::ExpressionError(std::string ("Invalid ptrb"));
      }
    }
    {}
    long long _4992 = _ptr__4985[_4991];
    if (((_4992 < (int)0) || ((_4992 != (int)((_4987)->size(0))) || (_4992 != (int)((_4986)->size(0))))))
    {
      {
        throw ::mosek::fusion::ExpressionError(std::string ("Invalid ptrb construction"));
      }
    }
    {}
    bool _4993 = true;
    bool _4994 = true;
    bool _4995 = true;
    std::shared_ptr< monty::ndarray< int,1 > > _4996 = mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->shape;
    _checked_ptr_1<int> _ptr__4996(_4996 ? _4996->raw() : nullptr,_4996 ? _4996->size(0) : 0);
    long long _4997 = ::mosek::fusion::p_Set::size(_4996);
    {
      int _9167 = (int)0;
      int _9168 = (int)((_4996)->size(0));
      for (int _4998 = _9167; _4998 < _9168; ++_4998)
      {
        {
          _4994 = (_4994 && (_ptr__4996[_4998] >= (int)0));
        }
      }
      int _9169 = (int)0;
      int _9170 = _4991;
      for (int _4999 = _9169; _4999 < _9170; ++_4999)
      {
        {
          _4993 = (_4993 && (_ptr__4985[_4999] <= _ptr__4985[safe_add( _4999,(int)1 )]));
        }
      }
      if (((NULL != _4990.get()) && ((int)((_4990)->size(0)) > (int)0)))
      {
        {
          _4995 = ((_ptr__4990[(int)0] >= (int)0) && (_ptr__4990[(_4991 - (int)1)] < _4997));
          int _9171 = (int)0;
          int _9172 = (_4991 - (int)1);
          for (int _5000 = _9171; _5000 < _9172; ++_5000)
          {
            {
              _4995 = (_4995 && (_ptr__4990[_5000] < _ptr__4990[safe_add( _5000,(int)1 )]));
            }
          }
        }
      }
      {}
    }
    if ((!_4994))
    {
      {
        throw ::mosek::fusion::ExpressionError(std::string ("Invalid shape"));
      }
    }
    {}
    if ((!_4993))
    {
      {
        throw ::mosek::fusion::ExpressionError(std::string ("Invalid ptrb"));
      }
    }
    {}
    if ((!_4995))
    {
      {
        throw ::mosek::fusion::ExpressionError(std::string ("Invalid sparsity pattern"));
      }
    }
    {}
  }
}mosek::fusion::Expr::t mosek::fusion::p_Expr::_new_Expr  (std::shared_ptr< monty::ndarray< long long,1 > > _5001,    std::shared_ptr< monty::ndarray< long long,1 > > _5002,    std::shared_ptr< monty::ndarray< double,1 > > _5003,    std::shared_ptr< monty::ndarray< double,1 > > _5004,    std::shared_ptr< monty::ndarray< int,1 > > _5005,    std::shared_ptr< monty::ndarray< long long,1 > > _5006,    int _5007){ return new mosek::fusion::Expr(_5001,_5002,_5003,_5004,_5005,_5006,_5007); }mosek::fusion::Expr::Expr  (std::shared_ptr< monty::ndarray< long long,1 > > _5001,    std::shared_ptr< monty::ndarray< long long,1 > > _5002,    std::shared_ptr< monty::ndarray< double,1 > > _5003,    std::shared_ptr< monty::ndarray< double,1 > > _5004,    std::shared_ptr< monty::ndarray< int,1 > > _5005,    std::shared_ptr< monty::ndarray< long long,1 > > _5006,    int _5007) :    Expr(new mosek::fusion::p_Expr(this)){ mosek::fusion::p_Expr::_get_impl(this)->_initialize(_5001,_5002,_5003,_5004,_5005,_5006,_5007); }void mosek::fusion::p_Expr::_initialize  (std::shared_ptr< monty::ndarray< long long,1 > > _5001,    std::shared_ptr< monty::ndarray< long long,1 > > _5002,    std::shared_ptr< monty::ndarray< double,1 > > _5003,    std::shared_ptr< monty::ndarray< double,1 > > _5004,    std::shared_ptr< monty::ndarray< int,1 > > _5005,    std::shared_ptr< monty::ndarray< long long,1 > > _5006,    int _5007){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__5001(_5001 ? _5001->raw() : nullptr, _5001 ? _5001->size(0) : 0);
    _checked_ptr_1<long long> _ptr__5002(_5002 ? _5002->raw() : nullptr, _5002 ? _5002->size(0) : 0);
    _checked_ptr_1<double> _ptr__5003(_5003 ? _5003->raw() : nullptr, _5003 ? _5003->size(0) : 0);
    _checked_ptr_1<double> _ptr__5004(_5004 ? _5004->raw() : nullptr, _5004 ? _5004->size(0) : 0);
    _checked_ptr_1<int> _ptr__5005(_5005 ? _5005->raw() : nullptr, _5005 ? _5005->size(0) : 0);
    _checked_ptr_1<long long> _ptr__5006(_5006 ? _5006->raw() : nullptr, _5006 ? _5006->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(_5005);
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->shape = _5005;
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->ptrb = _5001;
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->subj = _5002;
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->cof_v = _5003;
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->bfix = _5004;
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->inst = _5006;
    if ((NULL == mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->shape.get()))
    {
      {
        throw ::mosek::fusion::UnexpectedError(std::string ("Internal: NULL shape"));
      }
    }
    {}
  }
}mosek::fusion::Expr::t mosek::fusion::p_Expr::_new_Expr  (monty::rc_ptr< ::mosek::fusion::Expression > _5008){ return new mosek::fusion::Expr(_5008); }mosek::fusion::Expr::Expr  (monty::rc_ptr< ::mosek::fusion::Expression > _5008) :    Expr(new mosek::fusion::p_Expr(this)){ mosek::fusion::p_Expr::_get_impl(this)->_initialize(_5008); }void mosek::fusion::p_Expr::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _5008){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_5008->getShape());
    monty::rc_ptr< ::mosek::fusion::Expression > _9173 = _5008;
    if (false) {}
    else if (nullptr != dynamic_cast<::mosek::fusion::Expr*>(_9173.get()))
    {
      ::mosek::fusion::Expr::t _5009 (dynamic_cast<::mosek::fusion::Expr*>(_9173.get()));
      {
        shape = mosek::fusion::p_Expr::_get_impl(_5009)->shape;
        ptrb = mosek::fusion::p_Expr::_get_impl(_5009)->ptrb;
        subj = mosek::fusion::p_Expr::_get_impl(_5009)->subj;
        cof_v = mosek::fusion::p_Expr::_get_impl(_5009)->cof_v;
        bfix = mosek::fusion::p_Expr::_get_impl(_5009)->bfix;
        inst = mosek::fusion::p_Expr::_get_impl(_5009)->inst;
      }
    }
    else
    {
      mosek::fusion::Expression::t _5010 = _9173;
      {
        monty::rc_ptr< ::mosek::fusion::WorkStack > _5011 = ::mosek::fusion::p_WorkStack::_new_WorkStack();
        monty::rc_ptr< ::mosek::fusion::WorkStack > _5012 = ::mosek::fusion::p_WorkStack::_new_WorkStack();
        monty::rc_ptr< ::mosek::fusion::WorkStack > _5013 = ::mosek::fusion::p_WorkStack::_new_WorkStack();
        _5010->eval(_5013,_5012,_5011);
        int _5014 = _5013->popi32();
        int _5015 = _5013->popi32(_5014);
        int _5016 = _5013->popi32();
        int _5017 = _5013->popi32();
        bool _5018 = (_5013->popi32() != (int)0);
        int _5019 = _5013->popi32(safe_add( _5016,(int)1 ));
        int _9174;
        bool _9175 = _5018;
        if (_9175)
        {
          _9174 = _5013->popi64(_5016);
        }
        else
        {
          _9174 = (int)0;
        }
        int _5020 = _9174;
        int _5021 = _5013->popi64(_5017);
        int _5022 = _5013->popf64(_5016);
        int _5023 = _5013->popf64(_5017);
        std::shared_ptr< monty::ndarray< int,1 > > _5024 = mosek::fusion::p_WorkStack::_get_impl(_5013)->i32;
        _checked_ptr_1<int> _ptr__5024(_5024 ? _5024->raw() : nullptr,_5024 ? _5024->size(0) : 0);
        std::shared_ptr< monty::ndarray< long long,1 > > _5025 = mosek::fusion::p_WorkStack::_get_impl(_5013)->i64;
        _checked_ptr_1<long long> _ptr__5025(_5025 ? _5025->raw() : nullptr,_5025 ? _5025->size(0) : 0);
        std::shared_ptr< monty::ndarray< double,1 > > _5026 = mosek::fusion::p_WorkStack::_get_impl(_5013)->f64;
        _checked_ptr_1<double> _ptr__5026(_5026 ? _5026->raw() : nullptr,_5026 ? _5026->size(0) : 0);
        std::vector<int> _9176;
        for (int _5027 = (int)0, _9177 = _5014; _5027 < _9177 ; ++_5027)
        {
          _9176.push_back(_ptr__5024[safe_add( _5015,_5027 )]);
        }
        auto _9178 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9176.size()),_9176.begin(),_9176.end()));
        shape = _9178;
        std::vector<long long> _9179;
        for (int _5028 = (int)0, _9180 = safe_add( _5016,(int)1 ); _5028 < _9180 ; ++_5028)
        {
          _9179.push_back(_ptr__5024[safe_add( _5019,_5028 )]);
        }
        auto _9181 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9179.size()),_9179.begin(),_9179.end()));
        ptrb = _9181;
        std::vector<long long> _9182;
        for (int _5029 = (int)0, _9183 = _5017; _5029 < _9183 ; ++_5029)
        {
          _9182.push_back(_ptr__5025[safe_add( _5021,_5029 )]);
        }
        auto _9184 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9182.size()),_9182.begin(),_9182.end()));
        subj = _9184;
        std::vector<double> _9185;
        for (int _5030 = (int)0, _9186 = _5017; _5030 < _9186 ; ++_5030)
        {
          _9185.push_back(_ptr__5026[safe_add( _5023,_5030 )]);
        }
        auto _9187 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9185.size()),_9185.begin(),_9185.end()));
        cof_v = _9187;
        std::vector<double> _9188;
        for (int _5031 = (int)0, _9189 = _5017; _5031 < _9189 ; ++_5031)
        {
          _9188.push_back(_ptr__5026[safe_add( _5022,_5031 )]);
        }
        auto _9190 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9188.size()),_9188.begin(),_9188.end()));
        bfix = _9190;
        std::shared_ptr< monty::ndarray< long long,1 > > _9191;
        bool _9192 = _5018;
        if (_9192)
        {
          std::vector<long long> _9193;
          for (int _5032 = (int)0, _9194 = _5017; _5032 < _9194 ; ++_5032)
          {
            _9193.push_back(_ptr__5025[safe_add( _5020,_5032 )]);
          }
          auto _9195 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9193.size()),_9193.begin(),_9193.end()));
          _9191 = _9195;
        }
        else
        {
          _9191 = nullptr;
        }
        inst = _9191;
      }
    }
    if ((NULL == shape.get()))
    {
      {
        throw ::mosek::fusion::UnexpectedError(std::string ("Internal: NULL shape"));
      }
    }
    {}
  }
}long long mosek::fusion::p_Expr::prod(std::shared_ptr< monty::ndarray< int,1 > > _5033){
  _checked_ptr_1<int> _ptr__5033(_5033 ? _5033->raw() : nullptr, _5033 ? _5033->size(0) : 0);
  int _5034 = (int)1;
  int _9196 = (int)0;
  int _9197 = (int)((_5033)->size(0));
  for (int _5035 = _9196; _5035 < _9197; ++_5035)
  {
    {
      _5034 *= _ptr__5033[_5035];
    }
  }
  return _5034;
}
std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > mosek::fusion::p_Expr::varstack(std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >,1 > > _5036){
  std::vector<monty::rc_ptr< ::mosek::fusion::Variable >> _9198;
  for (int _5037 = (int)0, _9199 = (int)((_5036)->size(0)); _5037 < _9199 ; ++_5037)
  {
    for (int _5038 = (int)0, _9200 = (int)((((*_5036)(_5037)))->size(0)); _5038 < _9200 ; ++_5038)
    {
      _9198.push_back(((*((*_5036)(_5037)))(_5038)));
    }
  }
  auto _9201 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(_9198.size()),_9198.begin(),_9198.end()));
  return _9201;
}
std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > mosek::fusion::p_Expr::varstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5039,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5040){
  if ((NULL == _5039.get()))
  {
    {
      return _5040;
    }
  }
  else if((NULL == _5040.get()))
  {
    {
      return _5039;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5041 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(safe_add( (int)((_5039)->size(0)),(int)((_5040)->size(0)) ))));
      int _9202 = (int)0;
      int _9203 = (int)((_5039)->size(0));
      for (int _5042 = _9202; _5042 < _9203; ++_5042)
      {
        {
          ((*_5041)(_5042)) = ((*_5039)(_5042));
        }
      }
      int _9204 = (int)0;
      int _9205 = (int)((_5040)->size(0));
      for (int _5043 = _9204; _5043 < _9205; ++_5043)
      {
        {
          ((*_5041)(safe_add( _5043,(int)((_5039)->size(0)) ))) = ((*_5040)(_5043));
        }
      }
      return _5041;
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::condense  ( monty::rc_ptr< ::mosek::fusion::Expression > _5044) { return mosek::fusion::p_Expr::condense(_5044); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::condense(monty::rc_ptr< ::mosek::fusion::Expression > _5044){
  return (::mosek::fusion::p_ExprCondense::_new_ExprCondense(_5044)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::flatten  ( monty::rc_ptr< ::mosek::fusion::Expression > _5045) { return mosek::fusion::p_Expr::flatten(_5045); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::flatten(monty::rc_ptr< ::mosek::fusion::Expression > _5045){
  if ((NULL == _5045.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments for flatten may not be null"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::reshape(_5045,(int)_5045->getSize());
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::reshape  ( monty::rc_ptr< ::mosek::fusion::Expression > _5046,    int _5047,    int _5048) { return mosek::fusion::p_Expr::reshape(_5046,_5047,_5048); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::reshape(monty::rc_ptr< ::mosek::fusion::Expression > _5046,int _5047,int _5048){
  if ((NULL == _5046.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments for reshape may not be null"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::reshape(_5046,::mosek::fusion::p_Set::make(_5047,_5048));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::reshape  ( monty::rc_ptr< ::mosek::fusion::Expression > _5049,    int _5050) { return mosek::fusion::p_Expr::reshape(_5049,_5050); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::reshape(monty::rc_ptr< ::mosek::fusion::Expression > _5049,int _5050){
  if ((NULL == _5049.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments for reshape may not be null"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::reshape(_5049,::mosek::fusion::p_Set::make(_5050));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::reshape  ( monty::rc_ptr< ::mosek::fusion::Expression > _5051,    std::shared_ptr< monty::ndarray< int,1 > > _5052) { return mosek::fusion::p_Expr::reshape(_5051,_5052); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::reshape(monty::rc_ptr< ::mosek::fusion::Expression > _5051,std::shared_ptr< monty::ndarray< int,1 > > _5052){
  _checked_ptr_1<int> _ptr__5052(_5052 ? _5052->raw() : nullptr, _5052 ? _5052->size(0) : 0);
  return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(_5052,_5051)).as<::mosek::fusion::Expression>();
}
long long mosek::fusion::Expr :: size() { return mosek::fusion::p_Expr::_get_impl(this)->size(); }long long mosek::fusion::p_Expr::size(){
  return ((long long)((ptrb)->size(0)) - (int)1);
}
monty::rc_ptr< ::mosek::fusion::FlatExpr > mosek::fusion::Expr :: __mosek_2fusion_2Expr__eval() { return mosek::fusion::p_Expr::_get_impl(this)->__mosek_2fusion_2Expr__eval(); }monty::rc_ptr< ::mosek::fusion::FlatExpr > mosek::fusion::Expr::eval() { return __mosek_2fusion_2Expr__eval(); }
monty::rc_ptr< ::mosek::fusion::FlatExpr > mosek::fusion::Expr::__mosek_2fusion_2BaseExpression__eval() { return __mosek_2fusion_2Expr__eval(); }monty::rc_ptr< ::mosek::fusion::FlatExpr > mosek::fusion::p_Expr::__mosek_2fusion_2Expr__eval(){
  std::shared_ptr< monty::ndarray< double,1 > > _9206;
  bool _9207 = (NULL == bfix.get());
  if (_9207)
  {
    _9206 = nullptr;
  }
  else
  {
    _9206 = ::mosek::fusion::Utils::Tools::arraycopy(bfix);
  }
  std::shared_ptr< monty::ndarray< double,1 > > _5053 = _9206;
  _checked_ptr_1<double> _ptr__5053(_5053 ? _5053->raw() : nullptr,_5053 ? _5053->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _9208;
  bool _9209 = (NULL == inst.get());
  if (_9209)
  {
    _9208 = nullptr;
  }
  else
  {
    _9208 = ::mosek::fusion::Utils::Tools::arraycopy(inst);
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _5054 = _9208;
  _checked_ptr_1<long long> _ptr__5054(_5054 ? _5054->raw() : nullptr,_5054 ? _5054->size(0) : 0);
  return ::mosek::fusion::p_FlatExpr::_new_FlatExpr(_5053,::mosek::fusion::Utils::Tools::arraycopy(ptrb),::mosek::fusion::Utils::Tools::arraycopy(subj),::mosek::fusion::Utils::Tools::arraycopy(cof_v),shape,inst);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::zeros  ( std::shared_ptr< monty::ndarray< int,1 > > _5055) { return mosek::fusion::p_Expr::zeros(_5055); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::zeros(std::shared_ptr< monty::ndarray< int,1 > > _5055){
  _checked_ptr_1<int> _ptr__5055(_5055 ? _5055->raw() : nullptr, _5055 ? _5055->size(0) : 0);
  return ::mosek::fusion::p_Expr::constTerm(_5055,(double)((int)0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::zeros  ( int _5056) { return mosek::fusion::p_Expr::zeros(_5056); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::zeros(int _5056){
  return ::mosek::fusion::p_Expr::constTerm(_5056,(double)((int)0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::ones  ( ) { return mosek::fusion::p_Expr::ones(); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::ones(){
  return ::mosek::fusion::p_Expr::constTerm((double)((int)1));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::ones  ( std::shared_ptr< monty::ndarray< int,1 > > _5057,    std::shared_ptr< monty::ndarray< int,2 > > _5058) { return mosek::fusion::p_Expr::ones(_5057,_5058); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::ones(std::shared_ptr< monty::ndarray< int,1 > > _5057,std::shared_ptr< monty::ndarray< int,2 > > _5058){
  _checked_ptr_1<int> _ptr__5057(_5057 ? _5057->raw() : nullptr, _5057 ? _5057->size(0) : 0);
  return ::mosek::fusion::p_Expr::constTerm(_5057,_5058,(double)((int)1));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::ones  ( std::shared_ptr< monty::ndarray< int,1 > > _5059) { return mosek::fusion::p_Expr::ones(_5059); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::ones(std::shared_ptr< monty::ndarray< int,1 > > _5059){
  _checked_ptr_1<int> _ptr__5059(_5059 ? _5059->raw() : nullptr, _5059 ? _5059->size(0) : 0);
  return ::mosek::fusion::p_Expr::constTerm(_5059,(double)((int)1));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::ones  ( int _5060) { return mosek::fusion::p_Expr::ones(_5060); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::ones(int _5060){
  return ::mosek::fusion::p_Expr::constTerm(_5060,(double)((int)1));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5061) { return mosek::fusion::p_Expr::constTerm(_5061); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5061){
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(mosek::fusion::p_NDSparseArray::_get_impl(_5061)->dims,mosek::fusion::p_NDSparseArray::_get_impl(_5061)->inst,mosek::fusion::p_NDSparseArray::_get_impl(_5061)->cof)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5062) { return mosek::fusion::p_Expr::constTerm(_5062); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(monty::rc_ptr< ::mosek::fusion::Matrix > _5062){
  int _5063 = _5062->numRows();
  int _5064 = _5062->numColumns();
  std::shared_ptr< monty::ndarray< int,1 > > _5065 = ::mosek::fusion::p_Set::make(_5063,_5064);
  _checked_ptr_1<int> _ptr__5065(_5065 ? _5065->raw() : nullptr,_5065 ? _5065->size(0) : 0);
  if (_5062->isSparse())
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _5066 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5062->numNonzeros())));
      _checked_ptr_1<double> _ptr__5066(_5066 ? _5066->raw() : nullptr,_5066 ? _5066->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _5067 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5062->numNonzeros())));
      _checked_ptr_1<int> _ptr__5067(_5067 ? _5067->raw() : nullptr,_5067 ? _5067->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _5068 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5062->numNonzeros())));
      _checked_ptr_1<int> _ptr__5068(_5068 ? _5068->raw() : nullptr,_5068 ? _5068->size(0) : 0);
      _5062->getDataAsTriplets(_5068,_5067,_5066);
      std::vector<long long> _9210;
      for (int _5070 = (int)0, _9211 = (int)((_5067)->size(0)); _5070 < _9211 ; ++_5070)
      {
        _9210.push_back(safe_add( safe_mul( _ptr__5068[_5070],_5064 ),_ptr__5067[_5070] ));
      }
      auto _9212 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9210.size()),_9210.begin(),_9210.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _5069 = _9212;
      _checked_ptr_1<long long> _ptr__5069(_5069 ? _5069->raw() : nullptr,_5069 ? _5069->size(0) : 0);
      return (::mosek::fusion::p_ExprConst::_new_ExprConst(_5065,_5069,_5066)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_ExprConst::_new_ExprConst(_5065,nullptr,_5062->getDataAsArray())).as<::mosek::fusion::Expression>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( double _5071) { return mosek::fusion::p_Expr::constTerm(_5071); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(double _5071){
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),nullptr,_5071)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( std::shared_ptr< monty::ndarray< int,1 > > _5072,    std::shared_ptr< monty::ndarray< int,2 > > _5073,    double _5074) { return mosek::fusion::p_Expr::constTerm(_5072,_5073,_5074); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(std::shared_ptr< monty::ndarray< int,1 > > _5072,std::shared_ptr< monty::ndarray< int,2 > > _5073,double _5074){
  _checked_ptr_1<int> _ptr__5072(_5072 ? _5072->raw() : nullptr, _5072 ? _5072->size(0) : 0);
  int _5075 = (int)((_5073)->size(0));
  int _5076 = (int)((_5072)->size(0));
  std::shared_ptr< monty::ndarray< long long,1 > > _5077 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5075)));
  _checked_ptr_1<long long> _ptr__5077(_5077 ? _5077->raw() : nullptr,_5077 ? _5077->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5078 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5076)));
  _checked_ptr_1<long long> _ptr__5078(_5078 ? _5078->raw() : nullptr,_5078 ? _5078->size(0) : 0);
  _ptr__5078[(_5076 - (int)1)] = (int)1;
  int _9213 = (int)1;
  int _9214 = _5076;
  for (int _5079 = _9213; _5079 < _9214; ++_5079)
  {
    {
      _ptr__5078[((_5076 - _5079) - (int)1)] = safe_mul( _ptr__5078[(_5076 - _5079)],_ptr__5072[(_5076 - _5079)] );
    }
  }
  int _9215 = (int)0;
  int _9216 = _5075;
  for (int _5080 = _9215; _5080 < _9216; ++_5080)
  {
    {
      int _9217 = (int)0;
      int _9218 = _5076;
      for (int _5081 = _9217; _5081 < _9218; ++_5081)
      {
        {
          _ptr__5077[_5080] += safe_mul( _ptr__5078[_5081],((*_5073)(_5080,_5081)) );
        }
      }
    }
  }
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(_5072,_5077,_5074)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( std::shared_ptr< monty::ndarray< int,1 > > _5082,    std::shared_ptr< monty::ndarray< int,2 > > _5083,    std::shared_ptr< monty::ndarray< double,1 > > _5084) { return mosek::fusion::p_Expr::constTerm(_5082,_5083,_5084); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(std::shared_ptr< monty::ndarray< int,1 > > _5082,std::shared_ptr< monty::ndarray< int,2 > > _5083,std::shared_ptr< monty::ndarray< double,1 > > _5084){
  _checked_ptr_1<int> _ptr__5082(_5082 ? _5082->raw() : nullptr, _5082 ? _5082->size(0) : 0);
  _checked_ptr_1<double> _ptr__5084(_5084 ? _5084->raw() : nullptr, _5084 ? _5084->size(0) : 0);
  int _5085 = (int)((_5083)->size(0));
  int _5086 = (int)((_5082)->size(0));
  std::shared_ptr< monty::ndarray< long long,1 > > _5087 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5085)));
  _checked_ptr_1<long long> _ptr__5087(_5087 ? _5087->raw() : nullptr,_5087 ? _5087->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5088 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5086)));
  _checked_ptr_1<long long> _ptr__5088(_5088 ? _5088->raw() : nullptr,_5088 ? _5088->size(0) : 0);
  _ptr__5088[(_5086 - (int)1)] = (int)1;
  int _9219 = (int)1;
  int _9220 = _5086;
  for (int _5089 = _9219; _5089 < _9220; ++_5089)
  {
    {
      _ptr__5088[((_5086 - _5089) - (int)1)] = safe_mul( _ptr__5088[(_5086 - _5089)],_ptr__5082[(_5086 - _5089)] );
    }
  }
  int _9221 = (int)0;
  int _9222 = _5085;
  for (int _5090 = _9221; _5090 < _9222; ++_5090)
  {
    {
      int _9223 = (int)0;
      int _9224 = _5086;
      for (int _5091 = _9223; _5091 < _9224; ++_5091)
      {
        {
          _ptr__5087[_5090] += safe_mul( _ptr__5088[_5091],((*_5083)(_5090,_5091)) );
        }
      }
    }
  }
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(_5082,_5087,_5084)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( std::shared_ptr< monty::ndarray< int,1 > > _5092,    double _5093) { return mosek::fusion::p_Expr::constTerm(_5092,_5093); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(std::shared_ptr< monty::ndarray< int,1 > > _5092,double _5093){
  _checked_ptr_1<int> _ptr__5092(_5092 ? _5092->raw() : nullptr, _5092 ? _5092->size(0) : 0);
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(_5092,nullptr,_5093)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( int _5094,    double _5095) { return mosek::fusion::p_Expr::constTerm(_5094,_5095); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(int _5094,double _5095){
  std::vector<double> _9225;
  for (int _5096 = (int)0, _9226 = _5094; _5096 < _9226 ; ++_5096)
  {
    _9225.push_back(_5095);
  }
  auto _9227 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9225.size()),_9225.begin(),_9225.end()));
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_5094)}),nullptr,_9227)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( std::shared_ptr< monty::ndarray< double,2 > > _5097) { return mosek::fusion::p_Expr::constTerm(_5097); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(std::shared_ptr< monty::ndarray< double,2 > > _5097){
  std::vector<double> _9228;
  for (int _5098 = (int)0, _9229 = (int)((_5097)->size(0)); _5098 < _9229 ; ++_5098)
  {
    for (int _5099 = (int)0, _9230 = (int)((_5097)->size(1)); _5099 < _9230 ; ++_5099)
    {
      _9228.push_back(((*_5097)(_5098,_5099)));
    }
  }
  auto _9231 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9228.size()),_9228.begin(),_9228.end()));
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_5097)->size(0))),(int)((int)((_5097)->size(1)))}),nullptr,_9231)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( std::shared_ptr< monty::ndarray< double,1 > > _5100) { return mosek::fusion::p_Expr::constTerm(_5100); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(std::shared_ptr< monty::ndarray< double,1 > > _5100){
  _checked_ptr_1<double> _ptr__5100(_5100 ? _5100->raw() : nullptr, _5100 ? _5100->size(0) : 0);
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_5100)->size(0)))}),nullptr,_5100)).as<::mosek::fusion::Expression>();
}
long long mosek::fusion::Expr :: numNonzeros() { return mosek::fusion::p_Expr::_get_impl(this)->numNonzeros(); }long long mosek::fusion::p_Expr::numNonzeros(){
  return (long long)((cof_v)->size(0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sum  ( monty::rc_ptr< ::mosek::fusion::Expression > _5101,    int _5102) { return mosek::fusion::p_Expr::sum(_5101,_5102); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sum(monty::rc_ptr< ::mosek::fusion::Expression > _5101,int _5102){
  return (::mosek::fusion::p_ExprSumReduce::_new_ExprSumReduce(_5102,_5101)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sum  ( monty::rc_ptr< ::mosek::fusion::Expression > _5103) { return mosek::fusion::p_Expr::sum(_5103); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sum(monty::rc_ptr< ::mosek::fusion::Expression > _5103){
  return (::mosek::fusion::p_ExprSumReduce::_new_ExprSumReduce((int)0,::mosek::fusion::p_Expr::flatten(_5103))).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::neg  ( monty::rc_ptr< ::mosek::fusion::Expression > _5104) { return mosek::fusion::p_Expr::neg(_5104); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::neg(monty::rc_ptr< ::mosek::fusion::Expression > _5104){
  return (::mosek::fusion::p_ExprMulScalarConst::_new_ExprMulScalarConst((double)((-(int)1)),_5104)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(bool _5105,monty::rc_ptr< ::mosek::fusion::Matrix > _5106,monty::rc_ptr< ::mosek::fusion::Expression > _5107){
  long long _5108 = _5106->numNonzeros();
  int _5109 = _5106->numRows();
  int _5110 = _5106->numColumns();
  std::shared_ptr< monty::ndarray< double,1 > > _5111 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5108)));
  _checked_ptr_1<double> _ptr__5111(_5111 ? _5111->raw() : nullptr,_5111 ? _5111->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5112 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5108)));
  _checked_ptr_1<int> _ptr__5112(_5112 ? _5112->raw() : nullptr,_5112 ? _5112->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5113 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5108)));
  _checked_ptr_1<int> _ptr__5113(_5113 ? _5113->raw() : nullptr,_5113 ? _5113->size(0) : 0);
  _5106->getDataAsTriplets(_5113,_5112,_5111);
  if (_5105)
  {
    {
      return (::mosek::fusion::p_ExprMulDiagLeft::_new_ExprMulDiagLeft(_5109,_5110,_5113,_5112,_5111,_5107)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_ExprMulDiagRight::_new_ExprMulDiagRight(_5109,_5110,_5113,_5112,_5111,_5107)).as<::mosek::fusion::Expression>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Variable > _5114,    monty::rc_ptr< ::mosek::fusion::Matrix > _5115) { return mosek::fusion::p_Expr::mulDiag(_5114,_5115); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Variable > _5114,monty::rc_ptr< ::mosek::fusion::Matrix > _5115){
  return ::mosek::fusion::p_Expr::mulDiag(false,_5115,_5114->__mosek_2fusion_2Variable__asExpr());
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5116,    monty::rc_ptr< ::mosek::fusion::Variable > _5117) { return mosek::fusion::p_Expr::mulDiag(_5116,_5117); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Matrix > _5116,monty::rc_ptr< ::mosek::fusion::Variable > _5117){
  return ::mosek::fusion::p_Expr::mulDiag(true,_5116,_5117->__mosek_2fusion_2Variable__asExpr());
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Expression > _5118,    monty::rc_ptr< ::mosek::fusion::Matrix > _5119) { return mosek::fusion::p_Expr::mulDiag(_5118,_5119); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Expression > _5118,monty::rc_ptr< ::mosek::fusion::Matrix > _5119){
  return ::mosek::fusion::p_Expr::mulDiag(false,_5119,_5118);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5120,    monty::rc_ptr< ::mosek::fusion::Expression > _5121) { return mosek::fusion::p_Expr::mulDiag(_5120,_5121); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Matrix > _5120,monty::rc_ptr< ::mosek::fusion::Expression > _5121){
  return ::mosek::fusion::p_Expr::mulDiag(true,_5120,_5121);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Variable > _5122,    std::shared_ptr< monty::ndarray< double,2 > > _5123) { return mosek::fusion::p_Expr::mulDiag(_5122,_5123); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Variable > _5122,std::shared_ptr< monty::ndarray< double,2 > > _5123){
  std::vector<int> _9232;
  for (int _5124 = (int)0, _9233 = (int)((_5123)->size(0)); _5124 < _9233 ; ++_5124)
  {
    for (int _5125 = (int)0, _9234 = (int)((_5123)->size(1)); _5125 < _9234 ; ++_5125)
    {
      _9232.push_back(_5124);
    }
  }
  auto _9235 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9232.size()),_9232.begin(),_9232.end()));
  std::vector<int> _9236;
  for (int _5126 = (int)0, _9237 = (int)((_5123)->size(0)); _5126 < _9237 ; ++_5126)
  {
    for (int _5127 = (int)0, _9238 = (int)((_5123)->size(1)); _5127 < _9238 ; ++_5127)
    {
      _9236.push_back(_5127);
    }
  }
  auto _9239 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9236.size()),_9236.begin(),_9236.end()));
  std::vector<double> _9240;
  for (int _5128 = (int)0, _9241 = (int)((_5123)->size(0)); _5128 < _9241 ; ++_5128)
  {
    for (int _5129 = (int)0, _9242 = (int)((_5123)->size(1)); _5129 < _9242 ; ++_5129)
    {
      _9240.push_back(((*_5123)(_5128,_5129)));
    }
  }
  auto _9243 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9240.size()),_9240.begin(),_9240.end()));
  return (::mosek::fusion::p_ExprMulDiagRight::_new_ExprMulDiagRight((int)((_5123)->size(0)),(int)((_5123)->size(1)),_9235,_9239,_9243,_5122->__mosek_2fusion_2Variable__asExpr())).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Expression > _5130,    std::shared_ptr< monty::ndarray< double,2 > > _5131) { return mosek::fusion::p_Expr::mulDiag(_5130,_5131); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Expression > _5130,std::shared_ptr< monty::ndarray< double,2 > > _5131){
  std::vector<int> _9244;
  for (int _5132 = (int)0, _9245 = (int)((_5131)->size(0)); _5132 < _9245 ; ++_5132)
  {
    for (int _5133 = (int)0, _9246 = (int)((_5131)->size(1)); _5133 < _9246 ; ++_5133)
    {
      _9244.push_back(_5132);
    }
  }
  auto _9247 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9244.size()),_9244.begin(),_9244.end()));
  std::vector<int> _9248;
  for (int _5134 = (int)0, _9249 = (int)((_5131)->size(0)); _5134 < _9249 ; ++_5134)
  {
    for (int _5135 = (int)0, _9250 = (int)((_5131)->size(1)); _5135 < _9250 ; ++_5135)
    {
      _9248.push_back(_5135);
    }
  }
  auto _9251 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9248.size()),_9248.begin(),_9248.end()));
  std::vector<double> _9252;
  for (int _5136 = (int)0, _9253 = (int)((_5131)->size(0)); _5136 < _9253 ; ++_5136)
  {
    for (int _5137 = (int)0, _9254 = (int)((_5131)->size(1)); _5137 < _9254 ; ++_5137)
    {
      _9252.push_back(((*_5131)(_5136,_5137)));
    }
  }
  auto _9255 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9252.size()),_9252.begin(),_9252.end()));
  return (::mosek::fusion::p_ExprMulDiagRight::_new_ExprMulDiagRight((int)((_5131)->size(0)),(int)((_5131)->size(1)),_9247,_9251,_9255,_5130)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( std::shared_ptr< monty::ndarray< double,2 > > _5138,    monty::rc_ptr< ::mosek::fusion::Variable > _5139) { return mosek::fusion::p_Expr::mulDiag(_5138,_5139); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(std::shared_ptr< monty::ndarray< double,2 > > _5138,monty::rc_ptr< ::mosek::fusion::Variable > _5139){
  std::vector<int> _9256;
  for (int _5140 = (int)0, _9257 = (int)((_5138)->size(0)); _5140 < _9257 ; ++_5140)
  {
    for (int _5141 = (int)0, _9258 = (int)((_5138)->size(1)); _5141 < _9258 ; ++_5141)
    {
      _9256.push_back(_5140);
    }
  }
  auto _9259 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9256.size()),_9256.begin(),_9256.end()));
  std::vector<int> _9260;
  for (int _5142 = (int)0, _9261 = (int)((_5138)->size(0)); _5142 < _9261 ; ++_5142)
  {
    for (int _5143 = (int)0, _9262 = (int)((_5138)->size(1)); _5143 < _9262 ; ++_5143)
    {
      _9260.push_back(_5143);
    }
  }
  auto _9263 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9260.size()),_9260.begin(),_9260.end()));
  std::vector<double> _9264;
  for (int _5144 = (int)0, _9265 = (int)((_5138)->size(0)); _5144 < _9265 ; ++_5144)
  {
    for (int _5145 = (int)0, _9266 = (int)((_5138)->size(1)); _5145 < _9266 ; ++_5145)
    {
      _9264.push_back(((*_5138)(_5144,_5145)));
    }
  }
  auto _9267 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9264.size()),_9264.begin(),_9264.end()));
  return (::mosek::fusion::p_ExprMulDiagLeft::_new_ExprMulDiagLeft((int)((_5138)->size(0)),(int)((_5138)->size(1)),_9259,_9263,_9267,_5139->__mosek_2fusion_2Variable__asExpr())).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( std::shared_ptr< monty::ndarray< double,2 > > _5146,    monty::rc_ptr< ::mosek::fusion::Expression > _5147) { return mosek::fusion::p_Expr::mulDiag(_5146,_5147); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(std::shared_ptr< monty::ndarray< double,2 > > _5146,monty::rc_ptr< ::mosek::fusion::Expression > _5147){
  std::vector<int> _9268;
  for (int _5148 = (int)0, _9269 = (int)((_5146)->size(0)); _5148 < _9269 ; ++_5148)
  {
    for (int _5149 = (int)0, _9270 = (int)((_5146)->size(1)); _5149 < _9270 ; ++_5149)
    {
      _9268.push_back(_5148);
    }
  }
  auto _9271 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9268.size()),_9268.begin(),_9268.end()));
  std::vector<int> _9272;
  for (int _5150 = (int)0, _9273 = (int)((_5146)->size(0)); _5150 < _9273 ; ++_5150)
  {
    for (int _5151 = (int)0, _9274 = (int)((_5146)->size(1)); _5151 < _9274 ; ++_5151)
    {
      _9272.push_back(_5151);
    }
  }
  auto _9275 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9272.size()),_9272.begin(),_9272.end()));
  std::vector<double> _9276;
  for (int _5152 = (int)0, _9277 = (int)((_5146)->size(0)); _5152 < _9277 ; ++_5152)
  {
    for (int _5153 = (int)0, _9278 = (int)((_5146)->size(1)); _5153 < _9278 ; ++_5153)
    {
      _9276.push_back(((*_5146)(_5152,_5153)));
    }
  }
  auto _9279 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9276.size()),_9276.begin(),_9276.end()));
  return (::mosek::fusion::p_ExprMulDiagLeft::_new_ExprMulDiagLeft((int)((_5146)->size(0)),(int)((_5146)->size(1)),_9271,_9275,_9279,_5147)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm_(monty::rc_ptr< ::mosek::fusion::Matrix > _5154,monty::rc_ptr< ::mosek::fusion::Expression > _5155){
  std::shared_ptr< monty::ndarray< int,1 > > _5156 = _5155->getShape();
  _checked_ptr_1<int> _ptr__5156(_5156 ? _5156->raw() : nullptr,_5156 ? _5156->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::Expression > _5157 = _5155;
  if (((int)((_5156)->size(0)) == (int)1))
  {
    {
      _5156 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__5156[(int)0]),(int)((int)1)});
      _ptr__5156.update(_5156 ? _5156->raw() : nullptr, _5156 ? _5156->size(0) : 0);
      _5157 = (::mosek::fusion::p_ExprReshape::_new_ExprReshape(_5156,_5155)).as<::mosek::fusion::Expression>();
    }
  }
  {}
  if ((((int)((_5156)->size(0)) != (int)2) || ((_5154->numRows() != _ptr__5156[(int)0]) || (_5154->numColumns() != _ptr__5156[(int)1]))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));
    }
  }
  {}
  int _5158 = _5154->numColumns();
  long long _5159 = _5154->numNonzeros();
  std::shared_ptr< monty::ndarray< int,1 > > _5160 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5159)));
  _checked_ptr_1<int> _ptr__5160(_5160 ? _5160->raw() : nullptr,_5160 ? _5160->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5161 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5159)));
  _checked_ptr_1<int> _ptr__5161(_5161 ? _5161->raw() : nullptr,_5161 ? _5161->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5162 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5159)));
  _checked_ptr_1<double> _ptr__5162(_5162 ? _5162->raw() : nullptr,_5162 ? _5162->size(0) : 0);
  _5154->getDataAsTriplets(_5160,_5161,_5162);
  std::vector<long long> _9280;
  for (long long _5163 = (int)0, _9281 = _5159; _5163 < _9281 ; ++_5163)
  {
    _9280.push_back(safe_add( safe_mul( _ptr__5160[_5163],_5158 ),_ptr__5161[_5163] ));
  }
  auto _9282 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9280.size()),_9280.begin(),_9280.end()));
  return (::mosek::fusion::p_ExprMulElement::_new_ExprMulElement(_5162,_9282,_5157,(int)1)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm_(std::shared_ptr< monty::ndarray< double,1 > > _5164,monty::rc_ptr< ::mosek::fusion::Expression > _5165){
  _checked_ptr_1<double> _ptr__5164(_5164 ? _5164->raw() : nullptr, _5164 ? _5164->size(0) : 0);
  if (((NULL == _5164.get()) || (NULL == _5165.get())))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments for mulElm may not be null"));
    }
  }
  {}
  if (((_5165->getND() == (int)0) && ((int)((_5164)->size(0)) == (int)1)))
  {
    {
      return (::mosek::fusion::p_ExprMulScalarConst::_new_ExprMulScalarConst(_ptr__5164[(int)0],_5165)).as<::mosek::fusion::Expression>();
    }
  }
  else if(((_5165->getND() != (int)1) || (_5165->getDim((int)0) != (int)((_5164)->size(0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));
    }
  }
  else
  {
    {
      std::vector<long long> _9283;
      for (int _5166 = (int)0, _9284 = (int)((_5164)->size(0)); _5166 < _9284 ; ++_5166)
      {
        _9283.push_back(_5166);
      }
      auto _9285 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9283.size()),_9283.begin(),_9283.end()));
      return (::mosek::fusion::p_ExprMulElement::_new_ExprMulElement(_5164,_9285,_5165)).as<::mosek::fusion::Expression>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm_(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5167,monty::rc_ptr< ::mosek::fusion::Expression > _5168){
  if (((NULL == _5167.get()) || (NULL == _5168.get())))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments for mulElm may not be null"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _5169 = _5168->getShape();
  _checked_ptr_1<int> _ptr__5169(_5169 ? _5169->raw() : nullptr,_5169 ? _5169->size(0) : 0);
  if (((int)((_5169)->size(0)) != (int)((mosek::fusion::p_NDSparseArray::_get_impl(_5167)->dims)->size(0))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Dimension mismatch"));
    }
  }
  {}
  int _9286 = (int)0;
  int _9287 = (int)((mosek::fusion::p_NDSparseArray::_get_impl(_5167)->dims)->size(0));
  for (int _5170 = _9286; _5170 < _9287; ++_5170)
  {
    {
      if ((((*mosek::fusion::p_NDSparseArray::_get_impl(_5167)->dims)(_5170)) != _ptr__5169[_5170]))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_ExprMulElement::_new_ExprMulElement(mosek::fusion::p_NDSparseArray::_get_impl(_5167)->cof,mosek::fusion::p_NDSparseArray::_get_impl(_5167)->inst,_5168)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Expression > _5171,    double _5172) { return mosek::fusion::p_Expr::mul(_5171,_5172); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Expression > _5171,double _5172){
  return (::mosek::fusion::p_ExprMulScalarConst::_new_ExprMulScalarConst(_5172,_5171)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( double _5173,    monty::rc_ptr< ::mosek::fusion::Expression > _5174) { return mosek::fusion::p_Expr::mul(_5173,_5174); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(double _5173,monty::rc_ptr< ::mosek::fusion::Expression > _5174){
  return (::mosek::fusion::p_ExprMulScalarConst::_new_ExprMulScalarConst(_5173,_5174)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Expression > _5175,    std::shared_ptr< monty::ndarray< double,1 > > _5176) { return mosek::fusion::p_Expr::mul(_5175,_5176); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Expression > _5175,std::shared_ptr< monty::ndarray< double,1 > > _5176){
  _checked_ptr_1<double> _ptr__5176(_5176 ? _5176->raw() : nullptr, _5176 ? _5176->size(0) : 0);
  return ::mosek::fusion::p_Expr::mul(false,_5176,_5175);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( std::shared_ptr< monty::ndarray< double,1 > > _5177,    monty::rc_ptr< ::mosek::fusion::Expression > _5178) { return mosek::fusion::p_Expr::mul(_5177,_5178); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(std::shared_ptr< monty::ndarray< double,1 > > _5177,monty::rc_ptr< ::mosek::fusion::Expression > _5178){
  _checked_ptr_1<double> _ptr__5177(_5177 ? _5177->raw() : nullptr, _5177 ? _5177->size(0) : 0);
  return ::mosek::fusion::p_Expr::mul(true,_5177,_5178);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Expression > _5179,    std::shared_ptr< monty::ndarray< double,2 > > _5180) { return mosek::fusion::p_Expr::mul(_5179,_5180); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Expression > _5179,std::shared_ptr< monty::ndarray< double,2 > > _5180){
  return ::mosek::fusion::p_Expr::mul(false,_5180,_5179);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( std::shared_ptr< monty::ndarray< double,2 > > _5181,    monty::rc_ptr< ::mosek::fusion::Expression > _5182) { return mosek::fusion::p_Expr::mul(_5181,_5182); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(std::shared_ptr< monty::ndarray< double,2 > > _5181,monty::rc_ptr< ::mosek::fusion::Expression > _5182){
  return ::mosek::fusion::p_Expr::mul(true,_5181,_5182);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Expression > _5183,    monty::rc_ptr< ::mosek::fusion::Matrix > _5184) { return mosek::fusion::p_Expr::mul(_5183,_5184); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Expression > _5183,monty::rc_ptr< ::mosek::fusion::Matrix > _5184){
  return ::mosek::fusion::p_Expr::mul(false,_5184,_5183);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5185,    monty::rc_ptr< ::mosek::fusion::Expression > _5186) { return mosek::fusion::p_Expr::mul(_5185,_5186); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Matrix > _5185,monty::rc_ptr< ::mosek::fusion::Expression > _5186){
  return ::mosek::fusion::p_Expr::mul(true,_5185,_5186);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(bool _5187,std::shared_ptr< monty::ndarray< double,1 > > _5188,monty::rc_ptr< ::mosek::fusion::Expression > _5189){
  _checked_ptr_1<double> _ptr__5188(_5188 ? _5188->raw() : nullptr, _5188 ? _5188->size(0) : 0);
  int _5190 = (int)((_5188)->size(0));
  int _5191 = _5190;
  std::shared_ptr< monty::ndarray< double,1 > > _5192 = ::mosek::fusion::Utils::Tools::arraycopy(_5188);
  _checked_ptr_1<double> _ptr__5192(_5192 ? _5192->raw() : nullptr,_5192 ? _5192->size(0) : 0);
  int _5193 = _5189->getND();
  if ((_5193 == (int)0))
  {
    {
      std::vector<int> _9288;
      for (int _5194 = (int)0, _9289 = _5190; _5194 < _9289 ; ++_5194)
      {
        _9288.push_back(_5194);
      }
      auto _9290 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9288.size()),_9288.begin(),_9288.end()));
      std::vector<int> _9291;
      for (int _5195 = (int)0, _9292 = _5190; _5195 < _9292 ; ++_5195)
      {
        _9291.push_back((int)0);
      }
      auto _9293 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9291.size()),_9291.begin(),_9291.end()));
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_5190)}),(::mosek::fusion::p_ExprScalarMul::_new_ExprScalarMul(_5190,(int)1,_9290,_9293,_5192,_5189,(int)1)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if((_5193 != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  else if((_5187 && (_5189->getDim((int)0) == (int)((_5188)->size(0)))))
  {
    {
      std::vector<int> _9294;
      for (int _5196 = (int)0, _9295 = _5190; _5196 < _9295 ; ++_5196)
      {
        _9294.push_back((int)0);
      }
      auto _9296 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9294.size()),_9294.begin(),_9294.end()));
      std::vector<int> _9297;
      for (int _5197 = (int)0, _9298 = _5190; _5197 < _9298 ; ++_5197)
      {
        _9297.push_back(_5197);
      }
      auto _9299 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9297.size()),_9297.begin(),_9297.end()));
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_5189->getDim((int)1))}),(::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft((int)1,_5190,_9296,_9299,_5192,_5189)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if((_5187 && (_5189->getDim((int)0) == (int)1)))
  {
    {
      std::vector<int> _9300;
      for (int _5198 = (int)0, _9301 = _5190; _5198 < _9301 ; ++_5198)
      {
        _9300.push_back(_5198);
      }
      auto _9302 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9300.size()),_9300.begin(),_9300.end()));
      std::vector<int> _9303;
      for (int _5199 = (int)0, _9304 = _5190; _5199 < _9304 ; ++_5199)
      {
        _9303.push_back((int)0);
      }
      auto _9305 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9303.size()),_9303.begin(),_9303.end()));
      return (::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft(_5190,(int)1,_9302,_9305,_5192,_5189,(int)1)).as<::mosek::fusion::Expression>();
    }
  }
  else if(((!_5187) && (_5189->getDim((int)1) == _5190)))
  {
    {
      std::vector<int> _9306;
      for (int _5200 = (int)0, _9307 = _5190; _5200 < _9307 ; ++_5200)
      {
        _9306.push_back(_5200);
      }
      auto _9308 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9306.size()),_9306.begin(),_9306.end()));
      std::vector<int> _9309;
      for (int _5201 = (int)0, _9310 = _5190; _5201 < _9310 ; ++_5201)
      {
        _9309.push_back((int)0);
      }
      auto _9311 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9309.size()),_9309.begin(),_9309.end()));
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_5189->getDim((int)0))}),(::mosek::fusion::p_ExprMulRight::_new_ExprMulRight(_5190,(int)1,_9308,_9311,_5192,_5189)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if(((!_5187) && (_5189->getDim((int)1) == (int)1)))
  {
    {
      std::vector<int> _9312;
      for (int _5202 = (int)0, _9313 = _5190; _5202 < _9313 ; ++_5202)
      {
        _9312.push_back((int)0);
      }
      auto _9314 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9312.size()),_9312.begin(),_9312.end()));
      std::vector<int> _9315;
      for (int _5203 = (int)0, _9316 = _5190; _5203 < _9316 ; ++_5203)
      {
        _9315.push_back(_5203);
      }
      auto _9317 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9315.size()),_9315.begin(),_9315.end()));
      return (::mosek::fusion::p_ExprMulRight::_new_ExprMulRight((int)1,_5190,_9314,_9317,_5192,_5189,(int)1)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(bool _5204,std::shared_ptr< monty::ndarray< double,2 > > _5205,monty::rc_ptr< ::mosek::fusion::Expression > _5206){
  int _5207 = (int)((_5205)->size(0));
  int _5208 = (int)((_5205)->size(1));
  int _5209 = safe_mul( _5207,_5208 );
  std::vector<int> _9318;
  for (int _5211 = (int)0, _9319 = _5207; _5211 < _9319 ; ++_5211)
  {
    for (int _5212 = (int)0, _9320 = _5208; _5212 < _9320 ; ++_5212)
    {
      _9318.push_back(_5211);
    }
  }
  auto _9321 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9318.size()),_9318.begin(),_9318.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _5210 = _9321;
  _checked_ptr_1<int> _ptr__5210(_5210 ? _5210->raw() : nullptr,_5210 ? _5210->size(0) : 0);
  std::vector<int> _9322;
  for (int _5214 = (int)0, _9323 = _5207; _5214 < _9323 ; ++_5214)
  {
    for (int _5215 = (int)0, _9324 = _5208; _5215 < _9324 ; ++_5215)
    {
      _9322.push_back(_5215);
    }
  }
  auto _9325 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9322.size()),_9322.begin(),_9322.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _5213 = _9325;
  _checked_ptr_1<int> _ptr__5213(_5213 ? _5213->raw() : nullptr,_5213 ? _5213->size(0) : 0);
  std::vector<double> _9326;
  for (int _5217 = (int)0, _9327 = _5207; _5217 < _9327 ; ++_5217)
  {
    for (int _5218 = (int)0, _9328 = _5208; _5218 < _9328 ; ++_5218)
    {
      _9326.push_back(((*_5205)(_5217,_5218)));
    }
  }
  auto _9329 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9326.size()),_9326.begin(),_9326.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _5216 = _9329;
  _checked_ptr_1<double> _ptr__5216(_5216 ? _5216->raw() : nullptr,_5216 ? _5216->size(0) : 0);
  long long _5219 = _5206->getSize();
  std::shared_ptr< monty::ndarray< int,1 > > _5220 = _5206->getShape();
  _checked_ptr_1<int> _ptr__5220(_5220 ? _5220->raw() : nullptr,_5220 ? _5220->size(0) : 0);
  if (((int)((_5220)->size(0)) == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprScalarMul::_new_ExprScalarMul(_5207,_5208,_5210,_5213,_5216,_5206,(int)1)).as<::mosek::fusion::Expression>();
    }
  }
  else if(_5204)
  {
    {
      if (((int)((_5220)->size(0)) == (int)1))
      {
        {
          return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_5205)->size(0)))}),(::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft(_5207,_5208,_5210,_5213,_5216,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__5220[(int)0]),(int)((int)1)}),_5206)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
        }
      }
      else if(((int)((_5220)->size(0)) == (int)2))
      {
        {
          return (::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft(_5207,_5208,_5210,_5213,_5216,_5206)).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
        }
      }
    }
  }
  else
  {
    {
      if (((int)((_5220)->size(0)) == (int)1))
      {
        {
          return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_5205)->size(1)))}),(::mosek::fusion::p_ExprMulRight::_new_ExprMulRight(_5207,_5208,_5210,_5213,_5216,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(_ptr__5220[(int)0])}),_5206)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
        }
      }
      else if(((int)((_5220)->size(0)) == (int)2))
      {
        {
          return (::mosek::fusion::p_ExprMulRight::_new_ExprMulRight(_5207,_5208,_5210,_5213,_5216,_5206)).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(bool _5221,monty::rc_ptr< ::mosek::fusion::Matrix > _5222,monty::rc_ptr< ::mosek::fusion::Expression > _5223){
  long long _5224 = _5222->numNonzeros();
  std::shared_ptr< monty::ndarray< int,1 > > _5225 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5224)));
  _checked_ptr_1<int> _ptr__5225(_5225 ? _5225->raw() : nullptr,_5225 ? _5225->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5226 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5224)));
  _checked_ptr_1<int> _ptr__5226(_5226 ? _5226->raw() : nullptr,_5226 ? _5226->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5227 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5224)));
  _checked_ptr_1<double> _ptr__5227(_5227 ? _5227->raw() : nullptr,_5227 ? _5227->size(0) : 0);
  int _5228 = _5222->numRows();
  int _5229 = _5222->numColumns();
  _5222->getDataAsTriplets(_5225,_5226,_5227);
  int _5230 = _5223->getND();
  if ((_5230 == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprScalarMul::_new_ExprScalarMul(_5228,_5229,_5225,_5226,_5227,_5223)).as<::mosek::fusion::Expression>();
    }
  }
  else if((_5230 == (int)1))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _5231 = _5223->getShape();
      _checked_ptr_1<int> _ptr__5231(_5231 ? _5231->raw() : nullptr,_5231 ? _5231->size(0) : 0);
      if (_5221)
      {
        {
          return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_5228)}),(::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft(_5228,_5229,_5225,_5226,_5227,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__5231[(int)0]),(int)((int)1)}),_5223)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_5229)}),(::mosek::fusion::p_ExprMulRight::_new_ExprMulRight(_5228,_5229,_5225,_5226,_5227,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(_ptr__5231[(int)0])}),_5223)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
  else if((_5230 == (int)2))
  {
    {
      if (_5221)
      {
        {
          return (::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft(_5228,_5229,_5225,_5226,_5227,_5223)).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          return (::mosek::fusion::p_ExprMulRight::_new_ExprMulRight(_5228,_5229,_5225,_5226,_5227,_5223)).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions for multiplication"));
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Variable > _5232,    monty::rc_ptr< ::mosek::fusion::Matrix > _5233) { return mosek::fusion::p_Expr::mul(_5232,_5233); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Variable > _5232,monty::rc_ptr< ::mosek::fusion::Matrix > _5233){
  int _5234 = _5233->numRows();
  int _5235 = _5233->numColumns();
  std::shared_ptr< monty::ndarray< double,1 > > _5236 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5233->numNonzeros())));
  _checked_ptr_1<double> _ptr__5236(_5236 ? _5236->raw() : nullptr,_5236 ? _5236->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5237 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5233->numNonzeros())));
  _checked_ptr_1<int> _ptr__5237(_5237 ? _5237->raw() : nullptr,_5237 ? _5237->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5238 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5233->numNonzeros())));
  _checked_ptr_1<int> _ptr__5238(_5238 ? _5238->raw() : nullptr,_5238 ? _5238->size(0) : 0);
  _5233->getDataAsTriplets(_5238,_5237,_5236);
  return ::mosek::fusion::p_Expr::mul(false,_5234,_5235,_5238,_5237,_5236,_5232);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5239,    monty::rc_ptr< ::mosek::fusion::Variable > _5240) { return mosek::fusion::p_Expr::mul(_5239,_5240); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Matrix > _5239,monty::rc_ptr< ::mosek::fusion::Variable > _5240){
  int _5241 = _5239->numRows();
  int _5242 = _5239->numColumns();
  std::shared_ptr< monty::ndarray< double,1 > > _5243 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5239->numNonzeros())));
  _checked_ptr_1<double> _ptr__5243(_5243 ? _5243->raw() : nullptr,_5243 ? _5243->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5244 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5239->numNonzeros())));
  _checked_ptr_1<int> _ptr__5244(_5244 ? _5244->raw() : nullptr,_5244 ? _5244->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5245 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5239->numNonzeros())));
  _checked_ptr_1<int> _ptr__5245(_5245 ? _5245->raw() : nullptr,_5245 ? _5245->size(0) : 0);
  _5239->getDataAsTriplets(_5245,_5244,_5243);
  return ::mosek::fusion::p_Expr::mul(true,_5241,_5242,_5245,_5244,_5243,_5240);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(bool _5246,int _5247,int _5248,std::shared_ptr< monty::ndarray< int,1 > > _5249,std::shared_ptr< monty::ndarray< int,1 > > _5250,std::shared_ptr< monty::ndarray< double,1 > > _5251,monty::rc_ptr< ::mosek::fusion::Variable > _5252){
  _checked_ptr_1<int> _ptr__5249(_5249 ? _5249->raw() : nullptr, _5249 ? _5249->size(0) : 0);
  _checked_ptr_1<int> _ptr__5250(_5250 ? _5250->raw() : nullptr, _5250 ? _5250->size(0) : 0);
  _checked_ptr_1<double> _ptr__5251(_5251 ? _5251->raw() : nullptr, _5251 ? _5251->size(0) : 0);
  if ((_5252->getND() == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprMulScalarVar::_new_ExprMulScalarVar(_5247,_5248,_5249,_5250,_5251,_5252)).as<::mosek::fusion::Expression>();
    }
  }
  else if((_5252->getND() == (int)1))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _5253 = _5252->getShape();
      _checked_ptr_1<int> _ptr__5253(_5253 ? _5253->raw() : nullptr,_5253 ? _5253->size(0) : 0);
      int _9330;
      bool _9331 = _5246;
      if (_9331)
      {
        _9330 = _5247;
      }
      else
      {
        _9330 = _5248;
      }
      std::shared_ptr< monty::ndarray< int,1 > > _9332;
      bool _9333 = _5246;
      if (_9333)
      {
        _9332 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__5253[(int)0]),(int)((int)1)});
      }
      else
      {
        _9332 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(_ptr__5253[(int)0])});
      }
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_9330)}),(::mosek::fusion::p_ExprMulVar::_new_ExprMulVar(_5246,_5247,_5248,_5249,_5250,_5251,::mosek::fusion::p_Var::reshape(_5252,_9332))).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_ExprMulVar::_new_ExprMulVar(_5246,_5247,_5248,_5249,_5250,_5251,_5252)).as<::mosek::fusion::Expression>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Expression > _5254,    monty::rc_ptr< ::mosek::fusion::Matrix > _5255) { return mosek::fusion::p_Expr::dot(_5254,_5255); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Expression > _5254,monty::rc_ptr< ::mosek::fusion::Matrix > _5255){
  long long _5256 = _5255->numNonzeros();
  if ((!_5255->isSparse()))
  {
    {
      std::vector<long long> _9334;
      for (long long _5257 = (int)0, _9335 = _5256; _5257 < _9335 ; ++_5257)
      {
        _9334.push_back(_5257);
      }
      auto _9336 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9334.size()),_9334.begin(),_9334.end()));
      return (::mosek::fusion::p_ExprInner::_new_ExprInner(_5254,_9336,_5255->getDataAsArray())).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _5258 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5256)));
      _checked_ptr_1<int> _ptr__5258(_5258 ? _5258->raw() : nullptr,_5258 ? _5258->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _5259 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5256)));
      _checked_ptr_1<int> _ptr__5259(_5259 ? _5259->raw() : nullptr,_5259 ? _5259->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _5260 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5256)));
      _checked_ptr_1<double> _ptr__5260(_5260 ? _5260->raw() : nullptr,_5260 ? _5260->size(0) : 0);
      int _5261 = _5255->numColumns();
      _5255->getDataAsTriplets(_5258,_5259,_5260);
      std::vector<long long> _9337;
      for (int _5262 = (int)0, _9338 = (int)((_5258)->size(0)); _5262 < _9338 ; ++_5262)
      {
        _9337.push_back(safe_add( safe_mul( _ptr__5258[_5262],_5261 ),_ptr__5259[_5262] ));
      }
      auto _9339 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9337.size()),_9337.begin(),_9337.end()));
      return (::mosek::fusion::p_ExprInner::_new_ExprInner(_5254,_9339,_5260)).as<::mosek::fusion::Expression>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Expression > _5263,    std::shared_ptr< monty::ndarray< double,2 > > _5264) { return mosek::fusion::p_Expr::dot(_5263,_5264); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Expression > _5263,std::shared_ptr< monty::ndarray< double,2 > > _5264){
  std::vector<long long> _9340;
  for (int _5265 = (int)0, _9341 = safe_mul( (int)((_5264)->size(0)),(int)((_5264)->size(1)) ); _5265 < _9341 ; ++_5265)
  {
    _9340.push_back(_5265);
  }
  auto _9342 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9340.size()),_9340.begin(),_9340.end()));
  std::vector<double> _9343;
  for (int _5266 = (int)0, _9344 = (int)((_5264)->size(0)); _5266 < _9344 ; ++_5266)
  {
    for (int _5267 = (int)0, _9345 = (int)((_5264)->size(1)); _5267 < _9345 ; ++_5267)
    {
      _9343.push_back(((*_5264)(_5266,_5267)));
    }
  }
  auto _9346 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9343.size()),_9343.begin(),_9343.end()));
  return (::mosek::fusion::p_ExprInner::_new_ExprInner(_5263,_9342,_9346)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Expression > _5268,    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5269) { return mosek::fusion::p_Expr::dot(_5268,_5269); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Expression > _5268,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5269){
  return (::mosek::fusion::p_ExprInner::_new_ExprInner(_5268,mosek::fusion::p_NDSparseArray::_get_impl(_5269)->inst,mosek::fusion::p_NDSparseArray::_get_impl(_5269)->cof)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Expression > _5270,    std::shared_ptr< monty::ndarray< double,1 > > _5271) { return mosek::fusion::p_Expr::dot(_5270,_5271); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Expression > _5270,std::shared_ptr< monty::ndarray< double,1 > > _5271){
  _checked_ptr_1<double> _ptr__5271(_5271 ? _5271->raw() : nullptr, _5271 ? _5271->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5272 = _5270->getShape();
  _checked_ptr_1<int> _ptr__5272(_5272 ? _5272->raw() : nullptr,_5272 ? _5272->size(0) : 0);
  if (((_5270->getSize() == (int)((_5271)->size(0))) && ((int)((_5272)->size(0)) > (int)1)))
  {
    {
      int _5273 = (int)0;
      int _9347 = (int)0;
      int _9348 = (int)((_5272)->size(0));
      for (int _5274 = _9347; _5274 < _9348; ++_5274)
      {
        {
          if ((_ptr__5272[_5274] > (int)1))
          {
            {
              ++ _5273;
            }
          }
          {}
        }
      }
      if ((_5273 > (int)1))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _5275 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)_5270->getSize())});
          _checked_ptr_1<int> _ptr__5275(_5275 ? _5275->raw() : nullptr,_5275 ? _5275->size(0) : 0);
          return (::mosek::fusion::p_ExprInner::_new_ExprInner((::mosek::fusion::p_ExprReshape::_new_ExprReshape(_5275,_5270)).as<::mosek::fusion::Expression>(),_5271)).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_ExprInner::_new_ExprInner(_5270,_5271)).as<::mosek::fusion::Expression>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5276,    monty::rc_ptr< ::mosek::fusion::Expression > _5277) { return mosek::fusion::p_Expr::dot(_5276,_5277); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Matrix > _5276,monty::rc_ptr< ::mosek::fusion::Expression > _5277){
  return ::mosek::fusion::p_Expr::dot(_5277,_5276);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5278,    monty::rc_ptr< ::mosek::fusion::Expression > _5279) { return mosek::fusion::p_Expr::dot(_5278,_5279); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5278,monty::rc_ptr< ::mosek::fusion::Expression > _5279){
  return ::mosek::fusion::p_Expr::dot(_5279,_5278);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( std::shared_ptr< monty::ndarray< double,2 > > _5280,    monty::rc_ptr< ::mosek::fusion::Expression > _5281) { return mosek::fusion::p_Expr::dot(_5280,_5281); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(std::shared_ptr< monty::ndarray< double,2 > > _5280,monty::rc_ptr< ::mosek::fusion::Expression > _5281){
  return ::mosek::fusion::p_Expr::dot(_5281,_5280);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( std::shared_ptr< monty::ndarray< double,1 > > _5282,    monty::rc_ptr< ::mosek::fusion::Expression > _5283) { return mosek::fusion::p_Expr::dot(_5282,_5283); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(std::shared_ptr< monty::ndarray< double,1 > > _5282,monty::rc_ptr< ::mosek::fusion::Expression > _5283){
  _checked_ptr_1<double> _ptr__5282(_5282 ? _5282->raw() : nullptr, _5282 ? _5282->size(0) : 0);
  return ::mosek::fusion::p_Expr::dot(_5283,_5282);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( std::shared_ptr< monty::ndarray< double,1 > > _5284,    monty::rc_ptr< ::mosek::fusion::Expression > _5285) { return mosek::fusion::p_Expr::outer(_5284,_5285); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(std::shared_ptr< monty::ndarray< double,1 > > _5284,monty::rc_ptr< ::mosek::fusion::Expression > _5285){
  _checked_ptr_1<double> _ptr__5284(_5284 ? _5284->raw() : nullptr, _5284 ? _5284->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5286 = _5285->getShape();
  _checked_ptr_1<int> _ptr__5286(_5286 ? _5286->raw() : nullptr,_5286 ? _5286->size(0) : 0);
  if (((int)((_5286)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Arguments must be one-dimensional"));
    }
  }
  {}
  if ((_ptr__5286[(int)0] != (int)((_5284)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Argument lengths do not match"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::FlatExpr > _5287 = _5285->__mosek_2fusion_2Expression__eval();
  std::vector<int> _9349;
  for (int _5288 = (int)0, _9350 = (int)((_5284)->size(0)); _5288 < _9350 ; ++_5288)
  {
    _9349.push_back(_5288);
  }
  auto _9351 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9349.size()),_9349.begin(),_9349.end()));
  return ::mosek::fusion::p_Expr::outer_(((*mosek::fusion::p_FlatExpr::_get_impl(_5287)->shape)((int)0)),mosek::fusion::p_FlatExpr::_get_impl(_5287)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_5287)->subj,mosek::fusion::p_FlatExpr::_get_impl(_5287)->cof,mosek::fusion::p_FlatExpr::_get_impl(_5287)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_5287)->inst,_5284,_9351,(int)((_5284)->size(0)),true);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( monty::rc_ptr< ::mosek::fusion::Expression > _5289,    std::shared_ptr< monty::ndarray< double,1 > > _5290) { return mosek::fusion::p_Expr::outer(_5289,_5290); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(monty::rc_ptr< ::mosek::fusion::Expression > _5289,std::shared_ptr< monty::ndarray< double,1 > > _5290){
  _checked_ptr_1<double> _ptr__5290(_5290 ? _5290->raw() : nullptr, _5290 ? _5290->size(0) : 0);
  if (((_5289->getND() != (int)1) || (_5289->getND() != (int)1)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Arguments must be one-dimensional"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::FlatExpr > _5291 = _5289->__mosek_2fusion_2Expression__eval();
  std::vector<int> _9352;
  for (int _5292 = (int)0, _9353 = (int)((_5290)->size(0)); _5292 < _9353 ; ++_5292)
  {
    _9352.push_back(_5292);
  }
  auto _9354 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9352.size()),_9352.begin(),_9352.end()));
  return ::mosek::fusion::p_Expr::outer_(((*mosek::fusion::p_FlatExpr::_get_impl(_5291)->shape)((int)0)),mosek::fusion::p_FlatExpr::_get_impl(_5291)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_5291)->subj,mosek::fusion::p_FlatExpr::_get_impl(_5291)->cof,mosek::fusion::p_FlatExpr::_get_impl(_5291)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_5291)->inst,_5290,_9354,(int)((_5290)->size(0)),false);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5293,    monty::rc_ptr< ::mosek::fusion::Variable > _5294) { return mosek::fusion::p_Expr::outer(_5293,_5294); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(monty::rc_ptr< ::mosek::fusion::Matrix > _5293,monty::rc_ptr< ::mosek::fusion::Variable > _5294){
  std::shared_ptr< monty::ndarray< int,1 > > _5295 = _5294->getShape();
  _checked_ptr_1<int> _ptr__5295(_5295 ? _5295->raw() : nullptr,_5295 ? _5295->size(0) : 0);
  if ((!(((int)((_5295)->size(0)) == (int)1) || (((int)((_5295)->size(0)) == (int)2) && (_ptr__5295[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable argument must be one-dimensional"));
    }
  }
  {}
  if ((mosek::fusion::p_Matrix::_get_impl(_5293)->dimj != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Constant matrix must be a column-vector"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::Matrix > _9355 = _5293;
  if (false) {}
  else if (nullptr != dynamic_cast<::mosek::fusion::DenseMatrix*>(_9355.get()))
  {
    ::mosek::fusion::DenseMatrix::t _5296 (dynamic_cast<::mosek::fusion::DenseMatrix*>(_9355.get()));
    {
      return ::mosek::fusion::p_Expr::outer_(_5294,_ptr__5295[(int)0],mosek::fusion::p_DenseMatrix::_get_impl(_5296)->data,nullptr,(int)((mosek::fusion::p_DenseMatrix::_get_impl(_5296)->data)->size(0)),true);
    }
  }
  else
  {
    mosek::fusion::Matrix::t _5297 = _9355;
    {
      std::shared_ptr< monty::ndarray< double,1 > > _5298 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5297->numNonzeros())));
      _checked_ptr_1<double> _ptr__5298(_5298 ? _5298->raw() : nullptr,_5298 ? _5298->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _5299 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5297->numNonzeros())));
      _checked_ptr_1<int> _ptr__5299(_5299 ? _5299->raw() : nullptr,_5299 ? _5299->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _5300 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5297->numNonzeros())));
      _checked_ptr_1<int> _ptr__5300(_5300 ? _5300->raw() : nullptr,_5300 ? _5300->size(0) : 0);
      _5297->getDataAsTriplets(_5300,_5299,_5298);
      return ::mosek::fusion::p_Expr::outer_(_5294,_ptr__5295[(int)0],_5298,_5300,mosek::fusion::p_Matrix::_get_impl(_5297)->dimi,true);
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( monty::rc_ptr< ::mosek::fusion::Variable > _5301,    monty::rc_ptr< ::mosek::fusion::Matrix > _5302) { return mosek::fusion::p_Expr::outer(_5301,_5302); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(monty::rc_ptr< ::mosek::fusion::Variable > _5301,monty::rc_ptr< ::mosek::fusion::Matrix > _5302){
  std::shared_ptr< monty::ndarray< int,1 > > _5303 = _5301->getShape();
  _checked_ptr_1<int> _ptr__5303(_5303 ? _5303->raw() : nullptr,_5303 ? _5303->size(0) : 0);
  if ((!((_5301->getND() == (int)1) || ((_5301->getND() == (int)2) && (_ptr__5303[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable argument must be one-dimensional"));
    }
  }
  {}
  if ((mosek::fusion::p_Matrix::_get_impl(_5302)->dimj != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Constant matrix must be a column-vector"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::Matrix > _9356 = _5302;
  if (false) {}
  else if (nullptr != dynamic_cast<::mosek::fusion::DenseMatrix*>(_9356.get()))
  {
    ::mosek::fusion::DenseMatrix::t _5304 (dynamic_cast<::mosek::fusion::DenseMatrix*>(_9356.get()));
    {
      return ::mosek::fusion::p_Expr::outer_(_5301,_ptr__5303[(int)0],mosek::fusion::p_DenseMatrix::_get_impl(_5304)->data,nullptr,(int)((mosek::fusion::p_DenseMatrix::_get_impl(_5304)->data)->size(0)),false);
    }
  }
  else
  {
    mosek::fusion::Matrix::t _5305 = _9356;
    {
      std::shared_ptr< monty::ndarray< double,1 > > _5306 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5305->numNonzeros())));
      _checked_ptr_1<double> _ptr__5306(_5306 ? _5306->raw() : nullptr,_5306 ? _5306->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _5307 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5305->numNonzeros())));
      _checked_ptr_1<int> _ptr__5307(_5307 ? _5307->raw() : nullptr,_5307 ? _5307->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _5308 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5302->numNonzeros())));
      _checked_ptr_1<int> _ptr__5308(_5308 ? _5308->raw() : nullptr,_5308 ? _5308->size(0) : 0);
      _5305->getDataAsTriplets(_5308,_5307,_5306);
      return ::mosek::fusion::p_Expr::outer_(_5301,((*_5301->getShape())((int)0)),_5306,_5308,mosek::fusion::p_Matrix::_get_impl(_5305)->dimi,false);
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( std::shared_ptr< monty::ndarray< double,1 > > _5309,    monty::rc_ptr< ::mosek::fusion::Variable > _5310) { return mosek::fusion::p_Expr::outer(_5309,_5310); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(std::shared_ptr< monty::ndarray< double,1 > > _5309,monty::rc_ptr< ::mosek::fusion::Variable > _5310){
  _checked_ptr_1<double> _ptr__5309(_5309 ? _5309->raw() : nullptr, _5309 ? _5309->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5311 = _5310->getShape();
  _checked_ptr_1<int> _ptr__5311(_5311 ? _5311->raw() : nullptr,_5311 ? _5311->size(0) : 0);
  if ((!((_5310->getND() == (int)1) || ((_5310->getND() == (int)2) && (_ptr__5311[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable argument must be one-dimensional"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::outer_(_5310,_ptr__5311[(int)0],_5309,nullptr,(int)((_5309)->size(0)),true);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( monty::rc_ptr< ::mosek::fusion::Variable > _5312,    std::shared_ptr< monty::ndarray< double,1 > > _5313) { return mosek::fusion::p_Expr::outer(_5312,_5313); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(monty::rc_ptr< ::mosek::fusion::Variable > _5312,std::shared_ptr< monty::ndarray< double,1 > > _5313){
  _checked_ptr_1<double> _ptr__5313(_5313 ? _5313->raw() : nullptr, _5313 ? _5313->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5314 = _5312->getShape();
  _checked_ptr_1<int> _ptr__5314(_5314 ? _5314->raw() : nullptr,_5314 ? _5314->size(0) : 0);
  if ((!((_5312->getND() == (int)1) || ((_5312->getND() == (int)2) && (_ptr__5314[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable argument must be one-dimensional"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::outer_(_5312,_ptr__5314[(int)0],_5313,nullptr,(int)((_5313)->size(0)),false);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer_(int _5315,std::shared_ptr< monty::ndarray< long long,1 > > _5316,std::shared_ptr< monty::ndarray< long long,1 > > _5317,std::shared_ptr< monty::ndarray< double,1 > > _5318,std::shared_ptr< monty::ndarray< double,1 > > _5319,std::shared_ptr< monty::ndarray< long long,1 > > _5320,std::shared_ptr< monty::ndarray< double,1 > > _5321,std::shared_ptr< monty::ndarray< int,1 > > _5322,int _5323,bool _5324){
  _checked_ptr_1<long long> _ptr__5316(_5316 ? _5316->raw() : nullptr, _5316 ? _5316->size(0) : 0);
  _checked_ptr_1<long long> _ptr__5317(_5317 ? _5317->raw() : nullptr, _5317 ? _5317->size(0) : 0);
  _checked_ptr_1<double> _ptr__5318(_5318 ? _5318->raw() : nullptr, _5318 ? _5318->size(0) : 0);
  _checked_ptr_1<double> _ptr__5319(_5319 ? _5319->raw() : nullptr, _5319 ? _5319->size(0) : 0);
  _checked_ptr_1<long long> _ptr__5320(_5320 ? _5320->raw() : nullptr, _5320 ? _5320->size(0) : 0);
  _checked_ptr_1<double> _ptr__5321(_5321 ? _5321->raw() : nullptr, _5321 ? _5321->size(0) : 0);
  _checked_ptr_1<int> _ptr__5322(_5322 ? _5322->raw() : nullptr, _5322 ? _5322->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _9357;
  bool _9358 = (!_5324);
  if (_9358)
  {
    _9357 = ::mosek::fusion::p_Set::make(_5315,_5323);
  }
  else
  {
    _9357 = ::mosek::fusion::p_Set::make(_5323,_5315);
  }
  std::shared_ptr< monty::ndarray< int,1 > > _5325 = _9357;
  _checked_ptr_1<int> _ptr__5325(_5325 ? _5325->raw() : nullptr,_5325 ? _5325->size(0) : 0);
  int _5326 = safe_mul( (int)((_5321)->size(0)),(int)((_5320)->size(0)) );
  int _5327 = safe_mul( (int)((_5321)->size(0)),(int)((_5317)->size(0)) );
  std::shared_ptr< monty::ndarray< long long,1 > > _5328 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5326)));
  _checked_ptr_1<long long> _ptr__5328(_5328 ? _5328->raw() : nullptr,_5328 ? _5328->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _9359;
  bool _9360 = (NULL != _5319.get());
  if (_9360)
  {
    _9359 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5326)));
  }
  else
  {
    _9359 = nullptr;
  }
  std::shared_ptr< monty::ndarray< double,1 > > _5329 = _9359;
  _checked_ptr_1<double> _ptr__5329(_5329 ? _5329->raw() : nullptr,_5329 ? _5329->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5330 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5327)));
  _checked_ptr_1<double> _ptr__5330(_5330 ? _5330->raw() : nullptr,_5330 ? _5330->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5331 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5327)));
  _checked_ptr_1<long long> _ptr__5331(_5331 ? _5331->raw() : nullptr,_5331 ? _5331->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5332 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _5326,(int)1 ))));
  _checked_ptr_1<long long> _ptr__5332(_5332 ? _5332->raw() : nullptr,_5332 ? _5332->size(0) : 0);
  int _5333 = (int)_ptr__5332[((int)((_5332)->size(0)) - (int)1)];
  if ((!_5324))
  {
    {
      long long _5334 = (long long)0;
      long long _5335 = (long long)0;
      int _9361 = (int)0;
      int _9362 = (int)((_5320)->size(0));
      for (int _5336 = _9361; _5336 < _9362; ++_5336)
      {
        {
          long long _5337 = (_ptr__5316[safe_add( _5336,(int)1 )] - _ptr__5316[_5336]);
          int _9363 = (int)0;
          int _9364 = (int)((_5321)->size(0));
          for (int _5338 = _9363; _5338 < _9364; ++_5338)
          {
            {
              _ptr__5320[_5334] = safe_add( safe_mul( _ptr__5320[_5336],_5323 ),_ptr__5322[_5338] );
              _ptr__5332[safe_add( _5334,(int)1 )] = safe_add( _ptr__5332[_5334],_5337 );
              ++ _5334;
              long long _9365 = _ptr__5316[_5336];
              long long _9366 = _ptr__5316[safe_add( _5336,(int)1 )];
              for (long long _5339 = _9365; _5339 < _9366; ++_5339)
              {
                {
                  _ptr__5331[_5335] = _ptr__5317[_5339];
                  _ptr__5330[_5335] = (_ptr__5318[_5339] * _ptr__5321[_5338]);
                  ++ _5335;
                }
              }
            }
          }
        }
      }
      if ((NULL != _5329.get()))
      {
        {
          int _5340 = (int)0;
          int _9367 = (int)0;
          int _9368 = (int)((_5320)->size(0));
          for (int _5341 = _9367; _5341 < _9368; ++_5341)
          {
            {
              int _9369 = (int)0;
              int _9370 = (int)((_5321)->size(0));
              for (int _5342 = _9369; _5342 < _9370; ++_5342)
              {
                {
                  _ptr__5329[_5340] = (_ptr__5321[_5342] * _ptr__5319[_5341]);
                  ++ _5340;
                }
              }
            }
          }
        }
      }
      {}
    }
  }
  else
  {
    {
      long long _5343 = (long long)0;
      long long _5344 = (long long)0;
      int _9371 = (int)0;
      int _9372 = (int)((_5321)->size(0));
      for (int _5345 = _9371; _5345 < _9372; ++_5345)
      {
        {
          double _5346 = _ptr__5321[_5345];
          ::mosek::fusion::Utils::Tools::arraycopy(_5317,(long long)((int)0),_5331,_5344,(long long)(_5333));
          int _9373 = (int)0;
          int _9374 = _5333;
          for (int _5347 = _9373; _5347 < _9374; ++_5347)
          {
            {
              _ptr__5330[safe_add( _5344,_5347 )] = (_ptr__5318[_5347] * _ptr__5321[_5345]);
            }
          }
          int _9375 = (int)0;
          int _9376 = (int)((_5320)->size(0));
          for (int _5348 = _9375; _5348 < _9376; ++_5348)
          {
            {
              long long _5349 = (_ptr__5316[safe_add( _5348,(int)1 )] - _ptr__5316[_5348]);
              _ptr__5320[_5343] = safe_add( safe_mul( _ptr__5320[_5348],_5323 ),_ptr__5322[_5345] );
              _ptr__5332[safe_add( _5343,(int)1 )] = safe_add( _ptr__5332[_5343],_5349 );
              ++ _5343;
            }
          }
          _5344 += _5333;
        }
      }
      if ((NULL != _5329.get()))
      {
        {
          int _5350 = (int)0;
          int _9377 = (int)0;
          int _9378 = (int)((_5321)->size(0));
          for (int _5351 = _9377; _5351 < _9378; ++_5351)
          {
            {
              double _5352 = _ptr__5321[_5351];
              int _9379 = (int)0;
              int _9380 = (int)((_5320)->size(0));
              for (int _5353 = _9379; _5353 < _9380; ++_5353)
              {
                {
                  _ptr__5329[_5350] = (_ptr__5319[_5353] * _5352);
                  ++ _5350;
                }
              }
            }
          }
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_Expr::_new_Expr(_5332,_5331,_5330,_5329,_5325,_5328)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer_(monty::rc_ptr< ::mosek::fusion::Variable > _5354,int _5355,std::shared_ptr< monty::ndarray< double,1 > > _5356,std::shared_ptr< monty::ndarray< int,1 > > _5357,int _5358,bool _5359){
  _checked_ptr_1<double> _ptr__5356(_5356 ? _5356->raw() : nullptr, _5356 ? _5356->size(0) : 0);
  _checked_ptr_1<int> _ptr__5357(_5357 ? _5357->raw() : nullptr, _5357 ? _5357->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _9381;
  bool _9382 = (!_5359);
  if (_9382)
  {
    _9381 = ::mosek::fusion::p_Set::make(_5355,_5358);
  }
  else
  {
    _9381 = ::mosek::fusion::p_Set::make(_5358,_5355);
  }
  std::shared_ptr< monty::ndarray< int,1 > > _5360 = _9381;
  _checked_ptr_1<int> _ptr__5360(_5360 ? _5360->raw() : nullptr,_5360 ? _5360->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _9383;
  bool _9384 = (_5358 == (int)((_5356)->size(0)));
  if (_9384)
  {
    _9383 = nullptr;
  }
  else
  {
    _9383 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_mul( (int)((_5356)->size(0)),_5355 ))));
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _5361 = _9383;
  _checked_ptr_1<long long> _ptr__5361(_5361 ? _5361->raw() : nullptr,_5361 ? _5361->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5362 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( (int)((_5356)->size(0)),_5355 ))));
  _checked_ptr_1<double> _ptr__5362(_5362 ? _5362->raw() : nullptr,_5362 ? _5362->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5363 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( (int)((_5356)->size(0)),_5355 ))));
  _checked_ptr_1<double> _ptr__5363(_5363 ? _5363->raw() : nullptr,_5363 ? _5363->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5364 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_mul( (int)((_5356)->size(0)),_5355 ))));
  _checked_ptr_1<long long> _ptr__5364(_5364 ? _5364->raw() : nullptr,_5364 ? _5364->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5365 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( safe_mul( (int)((_5356)->size(0)),_5355 ),(int)1 ))));
  _checked_ptr_1<long long> _ptr__5365(_5365 ? _5365->raw() : nullptr,_5365 ? _5365->size(0) : 0);
  if ((_5358 == (int)((_5356)->size(0))))
  {
    {
      long long _5366 = (long long)0;
      if ((!_5359))
      {
        {
          int _9385 = (int)0;
          int _9386 = _5355;
          for (int _5367 = _9385; _5367 < _9386; ++_5367)
          {
            {
              int _9387 = (int)0;
              int _9388 = _5358;
              for (int _5368 = _9387; _5368 < _9388; ++_5368)
              {
                {
                  _ptr__5365[safe_add( _5366,(int)1 )] = safe_add( _5366,(int)1 );
                  _ptr__5364[_5366] = (long long)_5367;
                  _ptr__5363[_5366] = _ptr__5356[_5368];
                  ++ _5366;
                }
              }
            }
          }
        }
      }
      else
      {
        {
          int _9389 = (int)0;
          int _9390 = _5358;
          for (int _5369 = _9389; _5369 < _9390; ++_5369)
          {
            {
              int _9391 = (int)0;
              int _9392 = _5355;
              for (int _5370 = _9391; _5370 < _9392; ++_5370)
              {
                {
                  _ptr__5365[safe_add( _5366,(int)1 )] = safe_add( _5366,(int)1 );
                  _ptr__5364[_5366] = (long long)_5370;
                  _ptr__5363[_5366] = _ptr__5356[_5369];
                  ++ _5366;
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    {
      long long _5371 = (long long)0;
      if ((!_5359))
      {
        {
          int _9393 = (int)0;
          int _9394 = _5355;
          for (int _5372 = _9393; _5372 < _9394; ++_5372)
          {
            {
              int _9395 = (int)0;
              int _9396 = (int)((_5356)->size(0));
              for (int _5373 = _9395; _5373 < _9396; ++_5373)
              {
                {
                  _ptr__5365[safe_add( _5371,(int)1 )] = safe_add( _5371,(int)1 );
                  _ptr__5364[_5371] = (long long)_5372;
                  _ptr__5363[_5371] = _ptr__5356[_5373];
                  _ptr__5361[_5371] = safe_add( safe_mul( _5372,_5358 ),_ptr__5357[_5373] );
                  ++ _5371;
                }
              }
            }
          }
        }
      }
      else
      {
        {
          int _9397 = (int)0;
          int _9398 = (int)((_5356)->size(0));
          for (int _5374 = _9397; _5374 < _9398; ++_5374)
          {
            {
              int _9399 = (int)0;
              int _9400 = _5355;
              for (int _5375 = _9399; _5375 < _9400; ++_5375)
              {
                {
                  _ptr__5365[safe_add( _5371,(int)1 )] = safe_add( _5371,(int)1 );
                  _ptr__5364[_5371] = (long long)_5375;
                  _ptr__5363[_5371] = _ptr__5356[_5374];
                  _ptr__5361[_5371] = safe_add( safe_mul( _ptr__5357[_5374],_5355 ),_5375 );
                  ++ _5371;
                }
              }
            }
          }
        }
      }
    }
  }
  return (::mosek::fusion::p_Expr::_new_Expr(_5365,_5364,_5363,_5362,_5360,_5361)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >,1 > > _5376) { return mosek::fusion::p_Expr::stack(_5376); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >,1 > > _5376){
  if ((NULL == _5376.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Argument exprs may not be null"));
    }
  }
  {}
  int _9401 = (int)0;
  int _9402 = (int)((_5376)->size(0));
  for (int _5377 = _9401; _5377 < _9402; ++_5377)
  {
    {
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5378 = ((*_5376)(_5377));
      if ((NULL == _5378.get()))
      {
        {
          throw monty::NullPointerException(std::string ("Arguments for stack may not be null"));
        }
      }
      {}
      int _9403 = (int)0;
      int _9404 = (int)((_5378)->size(0));
      for (int _5379 = _9403; _5379 < _9404; ++_5379)
      {
        {
          if ((NULL == ((*_5378)(_5379)).get()))
          {
            {
              throw monty::NullPointerException(std::string ("Arguments for stack may not be null"));
            }
          }
          {}
        }
      }
    }
  }
  std::vector<monty::rc_ptr< ::mosek::fusion::Expression >> _9405;
  for (int _5381 = (int)0, _9406 = (int)((_5376)->size(0)); _5381 < _9406 ; ++_5381)
  {
    _9405.push_back(::mosek::fusion::p_Expr::stack_(((*_5376)(_5381)),(int)1));
  }
  auto _9407 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_9405.size()),_9405.begin(),_9405.end()));
  std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5380 = _9407;
  return ::mosek::fusion::p_Expr::stack_(_5380,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _5382,    double _5383,    double _5384) { return mosek::fusion::p_Expr::vstack(_5382,_5383,_5384); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(double _5382,double _5383,double _5384){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5382).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5383).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5384).get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _5385,    double _5386,    monty::rc_ptr< ::mosek::fusion::Expression > _5387) { return mosek::fusion::p_Expr::vstack(_5385,_5386,_5387); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(double _5385,double _5386,monty::rc_ptr< ::mosek::fusion::Expression > _5387){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5385).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5386).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5387.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _5388,    monty::rc_ptr< ::mosek::fusion::Expression > _5389,    double _5390) { return mosek::fusion::p_Expr::vstack(_5388,_5389,_5390); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(double _5388,monty::rc_ptr< ::mosek::fusion::Expression > _5389,double _5390){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5388).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5389.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5390).get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _5391,    monty::rc_ptr< ::mosek::fusion::Expression > _5392,    monty::rc_ptr< ::mosek::fusion::Expression > _5393) { return mosek::fusion::p_Expr::vstack(_5391,_5392,_5393); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(double _5391,monty::rc_ptr< ::mosek::fusion::Expression > _5392,monty::rc_ptr< ::mosek::fusion::Expression > _5393){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5391).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5392.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5393.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5394,    double _5395,    double _5396) { return mosek::fusion::p_Expr::vstack(_5394,_5395,_5396); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _5394,double _5395,double _5396){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5394.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5395).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5396).get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5397,    double _5398,    monty::rc_ptr< ::mosek::fusion::Expression > _5399) { return mosek::fusion::p_Expr::vstack(_5397,_5398,_5399); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _5397,double _5398,monty::rc_ptr< ::mosek::fusion::Expression > _5399){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5397.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5398).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5399.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5400,    monty::rc_ptr< ::mosek::fusion::Expression > _5401,    double _5402) { return mosek::fusion::p_Expr::vstack(_5400,_5401,_5402); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _5400,monty::rc_ptr< ::mosek::fusion::Expression > _5401,double _5402){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5400.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5401.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5402).get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5403,    monty::rc_ptr< ::mosek::fusion::Expression > _5404,    monty::rc_ptr< ::mosek::fusion::Expression > _5405) { return mosek::fusion::p_Expr::vstack(_5403,_5404,_5405); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _5403,monty::rc_ptr< ::mosek::fusion::Expression > _5404,monty::rc_ptr< ::mosek::fusion::Expression > _5405){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5403.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5404.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5405.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _5406,    monty::rc_ptr< ::mosek::fusion::Expression > _5407) { return mosek::fusion::p_Expr::vstack(_5406,_5407); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(double _5406,monty::rc_ptr< ::mosek::fusion::Expression > _5407){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5406).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5407.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5408,    double _5409) { return mosek::fusion::p_Expr::vstack(_5408,_5409); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _5408,double _5409){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5408.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5409).get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5410,    monty::rc_ptr< ::mosek::fusion::Expression > _5411) { return mosek::fusion::p_Expr::vstack(_5410,_5411); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _5410,monty::rc_ptr< ::mosek::fusion::Expression > _5411){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5410.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5411.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5412) { return mosek::fusion::p_Expr::vstack(_5412); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5412){
  if ((NULL == _5412.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Argument exprs may not be null"));
    }
  }
  {}
  int _9408 = (int)0;
  int _9409 = (int)((_5412)->size(0));
  for (int _5413 = _9408; _5413 < _9409; ++_5413)
  {
    {
      if ((NULL == ((*_5412)(_5413)).get()))
      {
        {
          throw monty::NullPointerException(std::string ("Arguments for vstack may not be null"));
        }
      }
      {}
    }
  }
  return ::mosek::fusion::p_Expr::stack_(_5412,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5414,    monty::rc_ptr< ::mosek::fusion::Expression > _5415,    monty::rc_ptr< ::mosek::fusion::Expression > _5416) { return mosek::fusion::p_Expr::hstack(_5414,_5415,_5416); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _5414,monty::rc_ptr< ::mosek::fusion::Expression > _5415,monty::rc_ptr< ::mosek::fusion::Expression > _5416){
  if (((NULL == _5414.get()) || ((NULL == _5415.get()) || (NULL == _5416.get()))))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments e1, e2 and e3 may not be null"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5414.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5415.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5416.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5417,    monty::rc_ptr< ::mosek::fusion::Expression > _5418,    double _5419) { return mosek::fusion::p_Expr::hstack(_5417,_5418,_5419); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _5417,monty::rc_ptr< ::mosek::fusion::Expression > _5418,double _5419){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5417.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5418.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5419).get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5420,    double _5421,    monty::rc_ptr< ::mosek::fusion::Expression > _5422) { return mosek::fusion::p_Expr::hstack(_5420,_5421,_5422); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _5420,double _5421,monty::rc_ptr< ::mosek::fusion::Expression > _5422){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5420.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5421).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5422.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5423,    double _5424,    double _5425) { return mosek::fusion::p_Expr::hstack(_5423,_5424,_5425); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _5423,double _5424,double _5425){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5423.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5424).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5425).get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _5426,    monty::rc_ptr< ::mosek::fusion::Expression > _5427,    monty::rc_ptr< ::mosek::fusion::Expression > _5428) { return mosek::fusion::p_Expr::hstack(_5426,_5427,_5428); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(double _5426,monty::rc_ptr< ::mosek::fusion::Expression > _5427,monty::rc_ptr< ::mosek::fusion::Expression > _5428){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5426).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5427.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5428.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _5429,    monty::rc_ptr< ::mosek::fusion::Expression > _5430,    double _5431) { return mosek::fusion::p_Expr::hstack(_5429,_5430,_5431); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(double _5429,monty::rc_ptr< ::mosek::fusion::Expression > _5430,double _5431){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5429).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5430.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5431).get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _5432,    double _5433,    monty::rc_ptr< ::mosek::fusion::Expression > _5434) { return mosek::fusion::p_Expr::hstack(_5432,_5433,_5434); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(double _5432,double _5433,monty::rc_ptr< ::mosek::fusion::Expression > _5434){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5432).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5433).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5434.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _5435,    monty::rc_ptr< ::mosek::fusion::Expression > _5436) { return mosek::fusion::p_Expr::hstack(_5435,_5436); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(double _5435,monty::rc_ptr< ::mosek::fusion::Expression > _5436){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5435).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5436.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5437,    double _5438) { return mosek::fusion::p_Expr::hstack(_5437,_5438); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _5437,double _5438){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5437.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5438).get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5439,    monty::rc_ptr< ::mosek::fusion::Expression > _5440) { return mosek::fusion::p_Expr::hstack(_5439,_5440); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _5439,monty::rc_ptr< ::mosek::fusion::Expression > _5440){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5439.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5440.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5441) { return mosek::fusion::p_Expr::hstack(_5441); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5441){
  if ((NULL == _5441.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Argument exprs may not be null"));
    }
  }
  {}
  int _9410 = (int)0;
  int _9411 = (int)((_5441)->size(0));
  for (int _5442 = _9410; _5442 < _9411; ++_5442)
  {
    {
      if ((NULL == ((*_5441)(_5442)).get()))
      {
        {
          throw monty::NullPointerException(std::string ("Arguments for hstack may not be null"));
        }
      }
      {}
    }
  }
  return ::mosek::fusion::p_Expr::stack_(_5441,(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5443,    monty::rc_ptr< ::mosek::fusion::Expression > _5444,    monty::rc_ptr< ::mosek::fusion::Expression > _5445,    monty::rc_ptr< ::mosek::fusion::Expression > _5446) { return mosek::fusion::p_Expr::stack(_5443,_5444,_5445,_5446); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _5443,monty::rc_ptr< ::mosek::fusion::Expression > _5444,monty::rc_ptr< ::mosek::fusion::Expression > _5445,monty::rc_ptr< ::mosek::fusion::Expression > _5446){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5444.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5445.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5446.get())}),_5443);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5447,    monty::rc_ptr< ::mosek::fusion::Expression > _5448,    monty::rc_ptr< ::mosek::fusion::Expression > _5449,    double _5450) { return mosek::fusion::p_Expr::stack(_5447,_5448,_5449,_5450); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _5447,monty::rc_ptr< ::mosek::fusion::Expression > _5448,monty::rc_ptr< ::mosek::fusion::Expression > _5449,double _5450){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5448.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5449.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5450).get())}),_5447);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5451,    monty::rc_ptr< ::mosek::fusion::Expression > _5452,    double _5453,    monty::rc_ptr< ::mosek::fusion::Expression > _5454) { return mosek::fusion::p_Expr::stack(_5451,_5452,_5453,_5454); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _5451,monty::rc_ptr< ::mosek::fusion::Expression > _5452,double _5453,monty::rc_ptr< ::mosek::fusion::Expression > _5454){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5452.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5453).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5454.get())}),_5451);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5455,    monty::rc_ptr< ::mosek::fusion::Expression > _5456,    double _5457,    double _5458) { return mosek::fusion::p_Expr::stack(_5455,_5456,_5457,_5458); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _5455,monty::rc_ptr< ::mosek::fusion::Expression > _5456,double _5457,double _5458){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5456.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5457).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5458).get())}),_5455);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5459,    double _5460,    monty::rc_ptr< ::mosek::fusion::Expression > _5461,    monty::rc_ptr< ::mosek::fusion::Expression > _5462) { return mosek::fusion::p_Expr::stack(_5459,_5460,_5461,_5462); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _5459,double _5460,monty::rc_ptr< ::mosek::fusion::Expression > _5461,monty::rc_ptr< ::mosek::fusion::Expression > _5462){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5460).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5461.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5462.get())}),_5459);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5463,    double _5464,    monty::rc_ptr< ::mosek::fusion::Expression > _5465,    double _5466) { return mosek::fusion::p_Expr::stack(_5463,_5464,_5465,_5466); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _5463,double _5464,monty::rc_ptr< ::mosek::fusion::Expression > _5465,double _5466){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5464).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5465.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5466).get())}),_5463);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5467,    double _5468,    double _5469,    monty::rc_ptr< ::mosek::fusion::Expression > _5470) { return mosek::fusion::p_Expr::stack(_5467,_5468,_5469,_5470); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _5467,double _5468,double _5469,monty::rc_ptr< ::mosek::fusion::Expression > _5470){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5468).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5469).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5470.get())}),_5467);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5471,    double _5472,    monty::rc_ptr< ::mosek::fusion::Expression > _5473) { return mosek::fusion::p_Expr::stack(_5471,_5472,_5473); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _5471,double _5472,monty::rc_ptr< ::mosek::fusion::Expression > _5473){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5472).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5473.get())}),_5471);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5474,    monty::rc_ptr< ::mosek::fusion::Expression > _5475,    double _5476) { return mosek::fusion::p_Expr::stack(_5474,_5475,_5476); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _5474,monty::rc_ptr< ::mosek::fusion::Expression > _5475,double _5476){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5475.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5476).get())}),_5474);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5477,    monty::rc_ptr< ::mosek::fusion::Expression > _5478,    monty::rc_ptr< ::mosek::fusion::Expression > _5479) { return mosek::fusion::p_Expr::stack(_5477,_5478,_5479); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _5477,monty::rc_ptr< ::mosek::fusion::Expression > _5478,monty::rc_ptr< ::mosek::fusion::Expression > _5479){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5478.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5479.get())}),_5477);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5480,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5481) { return mosek::fusion::p_Expr::stack(_5480,_5481); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _5480,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5481){
  return ::mosek::fusion::p_Expr::stack_(_5481,_5480);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5482,int _5483){
  if (((int)((_5482)->size(0)) == (int)1))
  {
    {
      return ((*_5482)((int)0));
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_ExprStack::_new_ExprStack(::mosek::fusion::p_Expr::promote(_5482,_5483),_5483)).as<::mosek::fusion::Expression>();
    }
  }
}
std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > mosek::fusion::p_Expr::promote(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5484,int _5485){
  int _5486 = (int)((_5484)->size(0));
  std::vector<int> _9412;
  for (int _5488 = (int)0, _9413 = _5486; _5488 < _9413 ; ++_5488)
  {
    _9412.push_back(((*_5484)(_5488))->getND());
  }
  auto _9414 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9412.size()),_9412.begin(),_9412.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _5487 = _9414;
  _checked_ptr_1<int> _ptr__5487(_5487 ? _5487->raw() : nullptr,_5487 ? _5487->size(0) : 0);
  int _5489 = _ptr__5487[(int)0];
  int _5490 = _ptr__5487[(int)0];
  int _9415 = (int)1;
  int _9416 = _5486;
  for (int _5491 = _9415; _5491 < _9416; ++_5491)
  {
    {
      if ((_ptr__5487[_5491] < _5490))
      {
        {
          _5490 = _ptr__5487[_5491];
        }
      }
      {}
      if ((_ptr__5487[_5491] > _5489))
      {
        {
          _5489 = _ptr__5487[_5491];
        }
      }
      {}
    }
  }
  if ((_5489 < _5485))
  {
    {
      _5489 = _5485;
    }
  }
  {}
  if ((_5490 < _5489))
  {
    {
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5492 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_5486)));
      std::shared_ptr< monty::ndarray< int,1 > > _5493 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5489)));
      _checked_ptr_1<int> _ptr__5493(_5493 ? _5493->raw() : nullptr,_5493 ? _5493->size(0) : 0);
      int _9417 = (int)0;
      int _9418 = _5486;
      for (int _5494 = _9417; _5494 < _9418; ++_5494)
      {
        {
          if ((((*_5484)(_5494))->getND() == _5489))
          {
            {
              ((*_5492)(_5494)) = ((*_5484)(_5494));
            }
          }
          else
          {
            {
              std::shared_ptr< monty::ndarray< int,1 > > _5495 = ((*_5484)(_5494))->getShape();
              _checked_ptr_1<int> _ptr__5495(_5495 ? _5495->raw() : nullptr,_5495 ? _5495->size(0) : 0);
              int _9419 = (int)0;
              int _9420 = (int)((_5495)->size(0));
              for (int _5496 = _9419; _5496 < _9420; ++_5496)
              {
                {
                  _ptr__5493[_5496] = _ptr__5495[_5496];
                }
              }
              int _9421 = (int)((_5495)->size(0));
              int _9422 = _5489;
              for (int _5497 = _9421; _5497 < _9422; ++_5497)
              {
                {
                  _ptr__5493[_5497] = (int)1;
                }
              }
              ((*_5492)(_5494)) = (::mosek::fusion::p_ExprReshape::_new_ExprReshape(_5493,((*_5484)(_5494)))).as<::mosek::fusion::Expression>();
            }
          }
        }
      }
      return _5492;
    }
  }
  else
  {
    {
      return _5484;
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::repeat  ( monty::rc_ptr< ::mosek::fusion::Expression > _5498,    int _5499,    int _5500) { return mosek::fusion::p_Expr::repeat(_5498,_5499,_5500); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::repeat(monty::rc_ptr< ::mosek::fusion::Expression > _5498,int _5499,int _5500){
  if ((_5499 <= (int)0))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Cannot repeat Expression 0 or less times"));
    }
  }
  {}
  std::vector<monty::rc_ptr< ::mosek::fusion::Expression >> _9423;
  for (int _5501 = (int)0, _9424 = _5499; _5501 < _9424 ; ++_5501)
  {
    _9423.push_back(_5498);
  }
  auto _9425 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_9423.size()),_9423.begin(),_9423.end()));
  return ::mosek::fusion::p_Expr::stack_(_9425,_5500);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5502) { return mosek::fusion::p_Expr::add(_5502); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5502){
  std::vector<double> _9426;
  for (int _5503 = (int)0, _9427 = (int)((_5502)->size(0)); _5503 < _9427 ; ++_5503)
  {
    _9426.push_back(1.0);
  }
  auto _9428 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9426.size()),_9426.begin(),_9426.end()));
  return (::mosek::fusion::p_ExprWSum::_new_ExprWSum(_5502,_9428)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5504) { return mosek::fusion::p_Expr::add(_5504); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5504){
  if ((NULL == _5504.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Argument vs may not be null"));
    }
  }
  {}
  if (((int)((_5504)->size(0)) == (int)0))
  {
    {
      return (::mosek::fusion::p_Expr::_new_Expr(std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)((int)0)}),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),nullptr,::mosek::fusion::p_Set::make((int)0),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),(int)1)).as<::mosek::fusion::Expression>();
    }
  }
  {}
  if ((((int)((_5504)->size(0)) > (int)0) && (NULL == ((*_5504)((int)0)).get())))
  {
    {
      throw monty::NullPointerException(std::string ("Argument vs may contain null"));
    }
  }
  {}
  int _5505 = ((*_5504)((int)0))->getND();
  int _9429 = (int)1;
  int _9430 = (int)((_5504)->size(0));
  for (int _5506 = _9429; _5506 < _9430; ++_5506)
  {
    {
      if ((_5505 < ((*_5504)(_5506))->getND()))
      {
        {
          _5505 = ((*_5504)(_5506))->getND();
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int,2 > > _5507 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_5504)->size(0)),_5505)));
  int _9431 = (int)0;
  int _9432 = (int)((_5504)->size(0));
  for (int _5508 = _9431; _5508 < _9432; ++_5508)
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _5509 = ((*_5504)(_5508))->getShape();
      _checked_ptr_1<int> _ptr__5509(_5509 ? _5509->raw() : nullptr,_5509 ? _5509->size(0) : 0);
      int _9433 = (int)0;
      int _9434 = (int)((_5509)->size(0));
      for (int _5510 = _9433; _5510 < _9434; ++_5510)
      {
        {
          ((*_5507)(_5508,_5510)) = _ptr__5509[_5510];
        }
      }
      int _9435 = (int)((_5509)->size(0));
      int _9436 = _5505;
      for (int _5511 = _9435; _5511 < _9436; ++_5511)
      {
        {
          ((*_5507)(_5508,_5511)) = (int)1;
        }
      }
    }
  }
  int _9437 = (int)1;
  int _9438 = (int)((_5504)->size(0));
  for (int _5512 = _9437; _5512 < _9438; ++_5512)
  {
    {
      int _9439 = (int)0;
      int _9440 = _5505;
      for (int _5513 = _9439; _5513 < _9440; ++_5513)
      {
        {
          if ((((*_5507)((int)0,_5513)) != ((*_5507)(_5512,_5513))))
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
            }
          }
          {}
        }
      }
    }
  }
  std::vector<int> _9441;
  for (int _5515 = (int)0, _9442 = _5505; _5515 < _9442 ; ++_5515)
  {
    _9441.push_back(((*_5507)((int)0,_5515)));
  }
  auto _9443 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9441.size()),_9441.begin(),_9441.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _5514 = _9443;
  _checked_ptr_1<int> _ptr__5514(_5514 ? _5514->raw() : nullptr,_5514 ? _5514->size(0) : 0);
  int _5516 = (int)1;
  int _9444 = (int)0;
  int _9445 = _5505;
  for (int _5517 = _9444; _5517 < _9445; ++_5517)
  {
    {
      _5516 *= _ptr__5514[_5517];
    }
  }
  int _5518 = (int)0;
  int _5519 = (int)0;
  int _9446 = (int)0;
  int _9447 = (int)((_5504)->size(0));
  for (int _5520 = _9446; _5520 < _9447; ++_5520)
  {
    {
      int _5521 = ((*_5504)(_5520))->numInst();
      _5518 += _5521;
      int _9448;
      bool _9449 = (_5519 > _5521);
      if (_9449)
      {
        _9448 = _5519;
      }
      else
      {
        _9448 = _5521;
      }
      _5519 = _9448;
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _5522 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _5516,(int)1 ))));
  _checked_ptr_1<long long> _ptr__5522(_5522 ? _5522->raw() : nullptr,_5522 ? _5522->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5523 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5518)));
  _checked_ptr_1<long long> _ptr__5523(_5523 ? _5523->raw() : nullptr,_5523 ? _5523->size(0) : 0);
  std::vector<double> _9450;
  for (int _5525 = (int)0, _9451 = _5518; _5525 < _9451 ; ++_5525)
  {
    _9450.push_back(1.0);
  }
  auto _9452 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9450.size()),_9450.begin(),_9450.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _5524 = _9452;
  _checked_ptr_1<double> _ptr__5524(_5524 ? _5524->raw() : nullptr,_5524 ? _5524->size(0) : 0);
  {
    std::shared_ptr< monty::ndarray< long long,1 > > _5526 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5519)));
    _checked_ptr_1<long long> _ptr__5526(_5526 ? _5526->raw() : nullptr,_5526 ? _5526->size(0) : 0);
    std::shared_ptr< monty::ndarray< long long,1 > > _5527 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5519)));
    _checked_ptr_1<long long> _ptr__5527(_5527 ? _5527->raw() : nullptr,_5527 ? _5527->size(0) : 0);
    int _9453 = (int)0;
    int _9454 = (int)((_5504)->size(0));
    for (int _5528 = _9453; _5528 < _9454; ++_5528)
    {
      {
        int _5529 = ((*_5504)(_5528))->inst((int)0,_5526,(int)0,_5527);
        int _9455 = (int)0;
        int _9456 = _5529;
        for (int _5530 = _9455; _5530 < _9456; ++_5530)
        {
          {
            _ptr__5522[safe_add( _ptr__5526[_5530],(int)1 )] += (int)1;
          }
        }
      }
    }
    int _9457 = (int)0;
    int _9458 = _5516;
    for (int _5531 = _9457; _5531 < _9458; ++_5531)
    {
      {
        _ptr__5522[safe_add( _5531,(int)1 )] += _ptr__5522[_5531];
      }
    }
    int _9459 = (int)0;
    int _9460 = (int)((_5504)->size(0));
    for (int _5532 = _9459; _5532 < _9460; ++_5532)
    {
      {
        int _5533 = ((*_5504)(_5532))->inst((int)0,_5526,(int)0,_5527);
        int _9461 = (int)0;
        int _9462 = _5533;
        for (int _5534 = _9461; _5534 < _9462; ++_5534)
        {
          {
            _ptr__5523[_ptr__5522[_ptr__5526[_5534]]] = _ptr__5527[_5534];
            ++ _ptr__5522[_ptr__5526[_5534]];
          }
        }
      }
    }
    int _9463 = (int)0;
    int _9464 = _5516;
    for (int _5535 = _9463; _5535 < _9464; ++_5535)
    {
      {
        _ptr__5522[(_5516 - _5535)] = _ptr__5522[((_5516 - _5535) - (int)1)];
      }
    }
    _ptr__5522[(int)0] = (int)0;
  }
  std::vector<double> _9465;
  for (int _5536 = (int)0, _9466 = _5516; _5536 < _9466 ; ++_5536)
  {
    _9465.push_back(0.0);
  }
  auto _9467 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9465.size()),_9465.begin(),_9465.end()));
  return (::mosek::fusion::p_Expr::_new_Expr(_5522,_5523,_5524,_9467,_5514,nullptr,(int)1)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add_(monty::rc_ptr< ::mosek::fusion::Expression > _5537,double _5538,monty::rc_ptr< ::mosek::fusion::Expression > _5539,double _5540){
  int _5541 = _5537->getND();
  int _5542 = _5539->getND();
  if ((_5541 == _5542))
  {
    {
      return (::mosek::fusion::p_ExprAdd::_new_ExprAdd(_5537,_5539,_5538,_5540)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      int _9468;
      bool _9469 = (_5541 > _5542);
      if (_9469)
      {
        _9468 = _5541;
      }
      else
      {
        _9468 = _5542;
      }
      int _5543 = _9468;
      std::shared_ptr< monty::ndarray< int,1 > > _5544 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5543)));
      _checked_ptr_1<int> _ptr__5544(_5544 ? _5544->raw() : nullptr,_5544 ? _5544->size(0) : 0);
      if ((_5541 < _5542))
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _5545 = _5537->getShape();
          _checked_ptr_1<int> _ptr__5545(_5545 ? _5545->raw() : nullptr,_5545 ? _5545->size(0) : 0);
          int _9470 = (int)0;
          int _9471 = _5541;
          for (int _5546 = _9470; _5546 < _9471; ++_5546)
          {
            {
              _ptr__5544[_5546] = _ptr__5545[_5546];
            }
          }
          int _9472 = _5541;
          int _9473 = _5543;
          for (int _5547 = _9472; _5547 < _9473; ++_5547)
          {
            {
              _ptr__5544[_5547] = (int)1;
            }
          }
          return (::mosek::fusion::p_ExprAdd::_new_ExprAdd((::mosek::fusion::p_ExprReshape::_new_ExprReshape(_5544,_5537)).as<::mosek::fusion::Expression>(),_5539,_5538,_5540)).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _5548 = _5539->getShape();
          _checked_ptr_1<int> _ptr__5548(_5548 ? _5548->raw() : nullptr,_5548 ? _5548->size(0) : 0);
          int _9474 = (int)0;
          int _9475 = _5542;
          for (int _5549 = _9474; _5549 < _9475; ++_5549)
          {
            {
              _ptr__5544[_5549] = _ptr__5548[_5549];
            }
          }
          int _9476 = _5542;
          int _9477 = _5543;
          for (int _5550 = _9476; _5550 < _9477; ++_5550)
          {
            {
              _ptr__5544[_5550] = (int)1;
            }
          }
          return (::mosek::fusion::p_ExprAdd::_new_ExprAdd(_5537,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(_5544,_5539)).as<::mosek::fusion::Expression>(),_5538,_5540)).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::transpose  ( monty::rc_ptr< ::mosek::fusion::Expression > _5551) { return mosek::fusion::p_Expr::transpose(_5551); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::transpose(monty::rc_ptr< ::mosek::fusion::Expression > _5551){
  if ((_5551->getND() == (int)0))
  {
    {
      return _5551;
    }
  }
  else if((_5551->getND() == (int)1))
  {
    {
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(_5551->getDim((int)0))}),_5551)).as<::mosek::fusion::Expression>();
    }
  }
  else if((_5551->getND() == (int)2))
  {
    {
      return (::mosek::fusion::p_ExprTranspose::_new_ExprTranspose(_5551)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Incorrect number of dimensions for transpose"));
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5552,    monty::rc_ptr< ::mosek::fusion::Expression > _5553) { return mosek::fusion::p_Expr::mulElm(_5552,_5553); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Matrix > _5552,monty::rc_ptr< ::mosek::fusion::Expression > _5553){
  return ::mosek::fusion::p_Expr::mulElm_(_5552,_5553);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5554,    monty::rc_ptr< ::mosek::fusion::Expression > _5555) { return mosek::fusion::p_Expr::mulElm(_5554,_5555); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5554,monty::rc_ptr< ::mosek::fusion::Expression > _5555){
  return ::mosek::fusion::p_Expr::mulElm_(_5554,_5555);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( std::shared_ptr< monty::ndarray< double,2 > > _5556,    monty::rc_ptr< ::mosek::fusion::Expression > _5557) { return mosek::fusion::p_Expr::mulElm(_5556,_5557); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(std::shared_ptr< monty::ndarray< double,2 > > _5556,monty::rc_ptr< ::mosek::fusion::Expression > _5557){
  return ::mosek::fusion::p_Expr::mulElm_(::mosek::fusion::p_Matrix::dense(_5556),_5557);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( std::shared_ptr< monty::ndarray< double,1 > > _5558,    monty::rc_ptr< ::mosek::fusion::Expression > _5559) { return mosek::fusion::p_Expr::mulElm(_5558,_5559); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(std::shared_ptr< monty::ndarray< double,1 > > _5558,monty::rc_ptr< ::mosek::fusion::Expression > _5559){
  _checked_ptr_1<double> _ptr__5558(_5558 ? _5558->raw() : nullptr, _5558 ? _5558->size(0) : 0);
  return ::mosek::fusion::p_Expr::mulElm_(_5558,_5559);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Expression > _5560,    monty::rc_ptr< ::mosek::fusion::Matrix > _5561) { return mosek::fusion::p_Expr::mulElm(_5560,_5561); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Expression > _5560,monty::rc_ptr< ::mosek::fusion::Matrix > _5561){
  return ::mosek::fusion::p_Expr::mulElm_(_5561,_5560);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Expression > _5562,    std::shared_ptr< monty::ndarray< double,2 > > _5563) { return mosek::fusion::p_Expr::mulElm(_5562,_5563); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Expression > _5562,std::shared_ptr< monty::ndarray< double,2 > > _5563){
  return ::mosek::fusion::p_Expr::mulElm_(::mosek::fusion::p_Matrix::dense(_5563),_5562);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Expression > _5564,    std::shared_ptr< monty::ndarray< double,1 > > _5565) { return mosek::fusion::p_Expr::mulElm(_5564,_5565); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Expression > _5564,std::shared_ptr< monty::ndarray< double,1 > > _5565){
  _checked_ptr_1<double> _ptr__5565(_5565 ? _5565->raw() : nullptr, _5565 ? _5565->size(0) : 0);
  return ::mosek::fusion::p_Expr::mulElm_(_5565,_5564);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Expression > _5566,    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5567) { return mosek::fusion::p_Expr::mulElm(_5566,_5567); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Expression > _5566,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5567){
  return ::mosek::fusion::p_Expr::mulElm_(_5567,_5566);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5568,    monty::rc_ptr< ::mosek::fusion::Expression > _5569) { return mosek::fusion::p_Expr::sub(_5568,_5569); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5568,monty::rc_ptr< ::mosek::fusion::Expression > _5569){
  return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_5568),1.0,_5569,(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _5570,    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5571) { return mosek::fusion::p_Expr::sub(_5570,_5571); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _5570,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5571){
  return ::mosek::fusion::p_Expr::add_(_5570,1.0,::mosek::fusion::p_Expr::constTerm(_5571),(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5572,    monty::rc_ptr< ::mosek::fusion::Expression > _5573) { return mosek::fusion::p_Expr::sub(_5572,_5573); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Matrix > _5572,monty::rc_ptr< ::mosek::fusion::Expression > _5573){
  return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_5572),1.0,_5573,(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _5574,    monty::rc_ptr< ::mosek::fusion::Matrix > _5575) { return mosek::fusion::p_Expr::sub(_5574,_5575); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _5574,monty::rc_ptr< ::mosek::fusion::Matrix > _5575){
  return ::mosek::fusion::p_Expr::add_(_5574,1.0,::mosek::fusion::p_Expr::constTerm(_5575),(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( double _5576,    monty::rc_ptr< ::mosek::fusion::Expression > _5577) { return mosek::fusion::p_Expr::sub(_5576,_5577); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(double _5576,monty::rc_ptr< ::mosek::fusion::Expression > _5577){
  return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_5577->getShape(),_5576),1.0,_5577,(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _5578,    double _5579) { return mosek::fusion::p_Expr::sub(_5578,_5579); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _5578,double _5579){
  return ::mosek::fusion::p_Expr::add_(_5578,1.0,::mosek::fusion::p_Expr::constTerm(_5578->getShape(),_5579),(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( std::shared_ptr< monty::ndarray< double,2 > > _5580,    monty::rc_ptr< ::mosek::fusion::Expression > _5581) { return mosek::fusion::p_Expr::sub(_5580,_5581); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(std::shared_ptr< monty::ndarray< double,2 > > _5580,monty::rc_ptr< ::mosek::fusion::Expression > _5581){
  return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_5580),1.0,_5581,(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( std::shared_ptr< monty::ndarray< double,1 > > _5582,    monty::rc_ptr< ::mosek::fusion::Expression > _5583) { return mosek::fusion::p_Expr::sub(_5582,_5583); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(std::shared_ptr< monty::ndarray< double,1 > > _5582,monty::rc_ptr< ::mosek::fusion::Expression > _5583){
  _checked_ptr_1<double> _ptr__5582(_5582 ? _5582->raw() : nullptr, _5582 ? _5582->size(0) : 0);
  return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_5582),1.0,_5583,(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _5584,    std::shared_ptr< monty::ndarray< double,2 > > _5585) { return mosek::fusion::p_Expr::sub(_5584,_5585); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _5584,std::shared_ptr< monty::ndarray< double,2 > > _5585){
  return ::mosek::fusion::p_Expr::add_(_5584,1.0,::mosek::fusion::p_Expr::constTerm(_5585),(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _5586,    std::shared_ptr< monty::ndarray< double,1 > > _5587) { return mosek::fusion::p_Expr::sub(_5586,_5587); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _5586,std::shared_ptr< monty::ndarray< double,1 > > _5587){
  _checked_ptr_1<double> _ptr__5587(_5587 ? _5587->raw() : nullptr, _5587 ? _5587->size(0) : 0);
  return ::mosek::fusion::p_Expr::add_(_5586,1.0,::mosek::fusion::p_Expr::constTerm(_5587),(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _5588,    monty::rc_ptr< ::mosek::fusion::Expression > _5589) { return mosek::fusion::p_Expr::sub(_5588,_5589); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _5588,monty::rc_ptr< ::mosek::fusion::Expression > _5589){
  return ::mosek::fusion::p_Expr::add_(_5588,1.0,_5589,(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5590,    monty::rc_ptr< ::mosek::fusion::Expression > _5591) { return mosek::fusion::p_Expr::add(_5590,_5591); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5590,monty::rc_ptr< ::mosek::fusion::Expression > _5591){
  return ::mosek::fusion::p_Expr::add_(_5591,1.0,::mosek::fusion::p_Expr::constTerm(_5590),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _5592,    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5593) { return mosek::fusion::p_Expr::add(_5592,_5593); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _5592,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5593){
  return ::mosek::fusion::p_Expr::add_(_5592,1.0,::mosek::fusion::p_Expr::constTerm(_5593),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5594,    monty::rc_ptr< ::mosek::fusion::Expression > _5595) { return mosek::fusion::p_Expr::add(_5594,_5595); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Matrix > _5594,monty::rc_ptr< ::mosek::fusion::Expression > _5595){
  return ::mosek::fusion::p_Expr::add_(_5595,1.0,::mosek::fusion::p_Expr::constTerm(_5594),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _5596,    monty::rc_ptr< ::mosek::fusion::Matrix > _5597) { return mosek::fusion::p_Expr::add(_5596,_5597); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _5596,monty::rc_ptr< ::mosek::fusion::Matrix > _5597){
  return ::mosek::fusion::p_Expr::add_(_5596,1.0,::mosek::fusion::p_Expr::constTerm(_5597),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( double _5598,    monty::rc_ptr< ::mosek::fusion::Expression > _5599) { return mosek::fusion::p_Expr::add(_5598,_5599); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(double _5598,monty::rc_ptr< ::mosek::fusion::Expression > _5599){
  return ::mosek::fusion::p_Expr::add_(_5599,1.0,::mosek::fusion::p_Expr::constTerm(_5599->getShape(),_5598),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _5600,    double _5601) { return mosek::fusion::p_Expr::add(_5600,_5601); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _5600,double _5601){
  return ::mosek::fusion::p_Expr::add_(_5600,1.0,::mosek::fusion::p_Expr::constTerm(_5600->getShape(),_5601),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( std::shared_ptr< monty::ndarray< double,2 > > _5602,    monty::rc_ptr< ::mosek::fusion::Expression > _5603) { return mosek::fusion::p_Expr::add(_5602,_5603); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(std::shared_ptr< monty::ndarray< double,2 > > _5602,monty::rc_ptr< ::mosek::fusion::Expression > _5603){
  return ::mosek::fusion::p_Expr::add_(_5603,1.0,::mosek::fusion::p_Expr::constTerm(_5602),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( std::shared_ptr< monty::ndarray< double,1 > > _5604,    monty::rc_ptr< ::mosek::fusion::Expression > _5605) { return mosek::fusion::p_Expr::add(_5604,_5605); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(std::shared_ptr< monty::ndarray< double,1 > > _5604,monty::rc_ptr< ::mosek::fusion::Expression > _5605){
  _checked_ptr_1<double> _ptr__5604(_5604 ? _5604->raw() : nullptr, _5604 ? _5604->size(0) : 0);
  return ::mosek::fusion::p_Expr::add_(_5605,1.0,::mosek::fusion::p_Expr::constTerm(_5604),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _5606,    std::shared_ptr< monty::ndarray< double,2 > > _5607) { return mosek::fusion::p_Expr::add(_5606,_5607); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _5606,std::shared_ptr< monty::ndarray< double,2 > > _5607){
  return ::mosek::fusion::p_Expr::add_(_5606,1.0,::mosek::fusion::p_Expr::constTerm(_5607),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _5608,    std::shared_ptr< monty::ndarray< double,1 > > _5609) { return mosek::fusion::p_Expr::add(_5608,_5609); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _5608,std::shared_ptr< monty::ndarray< double,1 > > _5609){
  _checked_ptr_1<double> _ptr__5609(_5609 ? _5609->raw() : nullptr, _5609 ? _5609->size(0) : 0);
  return ::mosek::fusion::p_Expr::add_(_5608,1.0,::mosek::fusion::p_Expr::constTerm(_5609),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _5610,    monty::rc_ptr< ::mosek::fusion::Expression > _5611) { return mosek::fusion::p_Expr::add(_5610,_5611); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _5610,monty::rc_ptr< ::mosek::fusion::Expression > _5611){
  return ::mosek::fusion::p_Expr::add_(_5610,1.0,_5611,1.0);
}
int mosek::fusion::Expr :: getND() { return mosek::fusion::p_Expr::_get_impl(this)->getND(); }int mosek::fusion::p_Expr::getND(){
  return (int)((shape)->size(0));
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Expr :: getShape() { return mosek::fusion::p_Expr::_get_impl(this)->getShape(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Expr::getShape(){
  return ::mosek::fusion::Utils::Tools::arraycopy(shape);
}
void mosek::fusion::Expr :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5612,monty::rc_ptr< ::mosek::fusion::WorkStack > _5613,monty::rc_ptr< ::mosek::fusion::WorkStack > _5614) { mosek::fusion::p_Expr::_get_impl(this)->eval(_5612,_5613,_5614); }void mosek::fusion::p_Expr::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5612,monty::rc_ptr< ::mosek::fusion::WorkStack > _5613,monty::rc_ptr< ::mosek::fusion::WorkStack > _5614){
  std::vector<int> _9478;
  for (int _5615 = (int)0, _9479 = (int)((ptrb)->size(0)); _5615 < _9479 ; ++_5615)
  {
    _9478.push_back((int)((*ptrb)(_5615)));
  }
  auto _9480 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9478.size()),_9478.begin(),_9478.end()));
  ::mosek::fusion::p_BaseExpression::storeexpr(_5612,shape,_9480,inst,subj,cof_v,bfix);
}
void mosek::fusion::p_Expr::validateData(std::shared_ptr< monty::ndarray< long long,1 > > _5616,std::shared_ptr< monty::ndarray< long long,1 > > _5617,std::shared_ptr< monty::ndarray< double,1 > > _5618,std::shared_ptr< monty::ndarray< double,1 > > _5619,std::shared_ptr< monty::ndarray< int,1 > > _5620,std::shared_ptr< monty::ndarray< long long,1 > > _5621){
  _checked_ptr_1<long long> _ptr__5616(_5616 ? _5616->raw() : nullptr, _5616 ? _5616->size(0) : 0);
  _checked_ptr_1<long long> _ptr__5617(_5617 ? _5617->raw() : nullptr, _5617 ? _5617->size(0) : 0);
  _checked_ptr_1<double> _ptr__5618(_5618 ? _5618->raw() : nullptr, _5618 ? _5618->size(0) : 0);
  _checked_ptr_1<double> _ptr__5619(_5619 ? _5619->raw() : nullptr, _5619 ? _5619->size(0) : 0);
  _checked_ptr_1<int> _ptr__5620(_5620 ? _5620->raw() : nullptr, _5620 ? _5620->size(0) : 0);
  _checked_ptr_1<long long> _ptr__5621(_5621 ? _5621->raw() : nullptr, _5621 ? _5621->size(0) : 0);
  if ((NULL == _5620.get()))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Array 'shape' in expression is null"));
    }
  }
  {}
  int _5622 = ((int)((_5616)->size(0)) - (int)1);
  long long _5623 = _ptr__5616[((int)((_5616)->size(0)) - (int)1)];
  int _5624 = (int)((_5620)->size(0));
  long long _5625 = (long long)1;
  int _9481 = (int)0;
  int _9482 = _5624;
  for (int _5626 = _9481; _5626 < _9482; ++_5626)
  {
    {
      _5625 *= _ptr__5620[_5626];
    }
  }
  if (((int)((_5616)->size(0)) < (int)1))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Array 'ptrb' in expression has wrong size"));
    }
  }
  {}
  if ((_5623 != (int)((_5617)->size(0))))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Array 'subj' in expression has wrong size"));
    }
  }
  {}
  if ((_5623 != (int)((_5618)->size(0))))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Array 'cof' in expression has wrong size"));
    }
  }
  {}
  if (((NULL == _5619.get()) || (_5622 != (int)((_5619)->size(0)))))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Array 'bfix' in expression has wrong length"));
    }
  }
  {}
  if (((NULL != _5621.get()) && ((int)((_5621)->size(0)) < _5625)))
  {
    {
      if (((int)((_5621)->size(0)) != ((int)((_5616)->size(0)) - (int)1)))
      {
        {
          throw ::mosek::fusion::ExpressionError(std::string ("Array 'inst' in expression has wrong length"));
        }
      }
      {}
      if (((int)((_5621)->size(0)) > (int)0))
      {
        {
          if (((_ptr__5621[(int)0] < (int)0) || (_ptr__5621[(int)0] >= _5625)))
          {
            {
              throw ::mosek::fusion::ExpressionError(std::string ("Array 'inst' contains an invalid index"));
            }
          }
          {}
          bool _5627 = true;
          long long _5628 = _5625;
          int _9483 = (int)1;
          int _9484 = (int)((_5621)->size(0));
          for (int _5629 = _9483; _5629 < _9484; ++_5629)
          {
            {
              _5627 = (_5627 && ((_ptr__5621[_5629] >= (int)0) && ((_ptr__5621[_5629] < _5628) && (_ptr__5621[_5629] > _ptr__5621[(_5629 - (int)1)]))));
            }
          }
          if ((!_5627))
          {
            {
              throw ::mosek::fusion::ExpressionError(std::string ("Invalid array 'inst'"));
            }
          }
          {}
        }
      }
      {}
    }
  }
  else
  {
    {
      if ((_5625 != ((long long)((_5616)->size(0)) - (int)1)))
      {
        {
          throw ::mosek::fusion::ExpressionError(std::string ("Array 'ptrb' in expression has wrong length"));
        }
      }
      {}
    }
  }
  bool _5630 = false;
  bool _5631 = false;
  if ((_ptr__5616[(int)0] != (long long)0))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Invalid 'ptrb' argument in expression"));
    }
  }
  {}
  bool _5632 = true;
  int _9485 = (int)0;
  int _9486 = _5622;
  for (int _5633 = _9485; _5633 < _9486; ++_5633)
  {
    {
      _5632 = (_5632 && (_ptr__5616[_5633] <= _ptr__5616[safe_add( _5633,(int)1 )]));
    }
  }
  if ((!_5632))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Invalid 'ptrb' argument in expression"));
    }
  }
  {}
}
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_Expr::extractModel(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5634){
  monty::rc_ptr< ::mosek::fusion::Model > _9487;
  bool _9488 = ((NULL == _5634.get()) || ((int)((_5634)->size(0)) == (int)0));
  if (_9488)
  {
    _9487 = nullptr;
  }
  else
  {
    _9487 = ((*_5634)((int)0))->__mosek_2fusion_2Variable__getModel();
  }
  return _9487;
}
void mosek::fusion::p_Expr::destroy(){inst.reset();cof_v.reset();subj.reset();ptrb.reset();bfix.reset();shape.reset();}void mosek::fusion::Expr::destroy() { mosek::fusion::p_Expr::_get_impl(this)->destroy(); }monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::pick(std::shared_ptr< monty::ndarray< int,2 > > _5635) { return __mosek_2fusion_2Expression__pick(_5635); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::pick(std::shared_ptr< monty::ndarray< int,1 > > _5636) { return __mosek_2fusion_2Expression__pick(_5636); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::index(std::shared_ptr< monty::ndarray< int,1 > > _5637) { return __mosek_2fusion_2Expression__index(_5637); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::index(int _5638) { return __mosek_2fusion_2Expression__index(_5638); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::slice(std::shared_ptr< monty::ndarray< int,1 > > _5639,std::shared_ptr< monty::ndarray< int,1 > > _5640) { return __mosek_2fusion_2Expression__slice(_5639,_5640); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::slice(int _5641,int _5642) { return __mosek_2fusion_2Expression__slice(_5641,_5642); }
monty::rc_ptr< mosek::fusion::FlatExpr > mosek::fusion::Expression::eval() { return __mosek_2fusion_2Expression__eval(); }
mosek::fusion::FlatExpr::FlatExpr(mosek::fusion::p_FlatExpr *_impl) : _impl(_impl) { /*std::cout << "FlatExpr() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::FlatExpr::~FlatExpr() { delete _impl; _impl = nullptr; }mosek::fusion::p_FlatExpr::p_FlatExpr  (::mosek::fusion::FlatExpr * _pubthis) :     _pubthis(_pubthis){}std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::FlatExpr::get_inst() { return _impl->inst; }
void mosek::fusion::FlatExpr::set_inst(std::shared_ptr< monty::ndarray< long long,1 > > _val) { _impl->inst = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::FlatExpr::get_shape() { return _impl->shape; }
void mosek::fusion::FlatExpr::set_shape(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->shape = _val; }
long long mosek::fusion::FlatExpr::get_nnz() { return _impl->nnz; }
void mosek::fusion::FlatExpr::set_nnz(long long _val) { _impl->nnz = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::FlatExpr::get_cof() { return _impl->cof; }
void mosek::fusion::FlatExpr::set_cof(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->cof = _val; }
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::FlatExpr::get_subj() { return _impl->subj; }
void mosek::fusion::FlatExpr::set_subj(std::shared_ptr< monty::ndarray< long long,1 > > _val) { _impl->subj = _val; }
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::FlatExpr::get_ptrb() { return _impl->ptrb; }
void mosek::fusion::FlatExpr::set_ptrb(std::shared_ptr< monty::ndarray< long long,1 > > _val) { _impl->ptrb = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::FlatExpr::get_bfix() { return _impl->bfix; }
void mosek::fusion::FlatExpr::set_bfix(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->bfix = _val; }
mosek::fusion::FlatExpr::t mosek::fusion::p_FlatExpr::_new_FlatExpr  (monty::rc_ptr< ::mosek::fusion::FlatExpr > _5647){ return new mosek::fusion::FlatExpr(_5647); }mosek::fusion::FlatExpr::FlatExpr  (monty::rc_ptr< ::mosek::fusion::FlatExpr > _5647) :    FlatExpr(new mosek::fusion::p_FlatExpr(this)){ mosek::fusion::p_FlatExpr::_get_impl(this)->_initialize(_5647); }void mosek::fusion::p_FlatExpr::_initialize  (monty::rc_ptr< ::mosek::fusion::FlatExpr > _5647){monty::rc_reserve __reserve_this(_pubthis);   {
    bfix = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_5647)->bfix);
    ptrb = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_5647)->ptrb);
    subj = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_5647)->subj);
    cof = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_5647)->cof);
    nnz = mosek::fusion::p_FlatExpr::_get_impl(_5647)->nnz;
    shape = mosek::fusion::p_FlatExpr::_get_impl(_5647)->shape;
    inst = mosek::fusion::p_FlatExpr::_get_impl(_5647)->inst;
  }
}mosek::fusion::FlatExpr::t mosek::fusion::p_FlatExpr::_new_FlatExpr  (std::shared_ptr< monty::ndarray< double,1 > > _5648,    std::shared_ptr< monty::ndarray< long long,1 > > _5649,    std::shared_ptr< monty::ndarray< long long,1 > > _5650,    std::shared_ptr< monty::ndarray< double,1 > > _5651,    std::shared_ptr< monty::ndarray< int,1 > > _5652,    std::shared_ptr< monty::ndarray< long long,1 > > _5653){ return new mosek::fusion::FlatExpr(_5648,_5649,_5650,_5651,_5652,_5653); }mosek::fusion::FlatExpr::FlatExpr  (std::shared_ptr< monty::ndarray< double,1 > > _5648,    std::shared_ptr< monty::ndarray< long long,1 > > _5649,    std::shared_ptr< monty::ndarray< long long,1 > > _5650,    std::shared_ptr< monty::ndarray< double,1 > > _5651,    std::shared_ptr< monty::ndarray< int,1 > > _5652,    std::shared_ptr< monty::ndarray< long long,1 > > _5653) :    FlatExpr(new mosek::fusion::p_FlatExpr(this)){ mosek::fusion::p_FlatExpr::_get_impl(this)->_initialize(_5648,_5649,_5650,_5651,_5652,_5653); }void mosek::fusion::p_FlatExpr::_initialize  (std::shared_ptr< monty::ndarray< double,1 > > _5648,    std::shared_ptr< monty::ndarray< long long,1 > > _5649,    std::shared_ptr< monty::ndarray< long long,1 > > _5650,    std::shared_ptr< monty::ndarray< double,1 > > _5651,    std::shared_ptr< monty::ndarray< int,1 > > _5652,    std::shared_ptr< monty::ndarray< long long,1 > > _5653){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__5648(_5648 ? _5648->raw() : nullptr, _5648 ? _5648->size(0) : 0);
    _checked_ptr_1<long long> _ptr__5649(_5649 ? _5649->raw() : nullptr, _5649 ? _5649->size(0) : 0);
    _checked_ptr_1<long long> _ptr__5650(_5650 ? _5650->raw() : nullptr, _5650 ? _5650->size(0) : 0);
    _checked_ptr_1<double> _ptr__5651(_5651 ? _5651->raw() : nullptr, _5651 ? _5651->size(0) : 0);
    _checked_ptr_1<int> _ptr__5652(_5652 ? _5652->raw() : nullptr, _5652 ? _5652->size(0) : 0);
    _checked_ptr_1<long long> _ptr__5653(_5653 ? _5653->raw() : nullptr, _5653 ? _5653->size(0) : 0);
    if (((NULL != _5648.get()) && ((int)((_5648)->size(0)) != ((int)((_5649)->size(0)) - (int)1))))
    {
      {
        throw ::mosek::fusion::SparseFormatError(std::string ("Mismatching lengths of bfix and ptrb"));
      }
    }
    {}
    if (((NULL == _5651.get()) || ((NULL == _5650.get()) || ((int)((_5650)->size(0)) != (int)((_5651)->size(0))))))
    {
      {
        throw ::mosek::fusion::SparseFormatError(std::string ("Mismatching lengths of subj and cof"));
      }
    }
    {}
    if ((NULL != _5652.get()))
    {
      {
        if ((NULL != _5653.get()))
        {
          {
            if (((int)((_5653)->size(0)) != ((int)((_5649)->size(0)) - (int)1)))
            {
              {
                throw ::mosek::fusion::SparseFormatError(std::string ("Mismatching lengths of inst and ptrb"));
              }
            }
            {}
          }
        }
        else if((::mosek::fusion::p_Set::size(_5652) != ((long long)((_5649)->size(0)) - (int)1)))
        {
          {
            throw ::mosek::fusion::SparseFormatError(std::string ("Mismatching shape and ptrb"));
          }
        }
        {}
      }
    }
    {}
    bfix = _5648;
    ptrb = _5649;
    subj = _5650;
    cof = _5651;
    nnz = ((*ptrb)(((int)((ptrb)->size(0)) - (int)1)));
    shape = _5652;
    inst = _5653;
  }
}std::string mosek::fusion::FlatExpr :: toString() { return mosek::fusion::p_FlatExpr::_get_impl(this)->toString(); }std::string mosek::fusion::p_FlatExpr::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _5654 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _5654->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("FlatExpr:"))->__mosek_2fusion_2Utils_2StringBuffer__lf()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("+-----------------"))->__mosek_2fusion_2Utils_2StringBuffer__lf()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("| ptrb["))->__mosek_2fusion_2Utils_2StringBuffer__a((int)((ptrb)->size(0)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("] = "))->__mosek_2fusion_2Utils_2StringBuffer__a(ptrb)->__mosek_2fusion_2Utils_2StringBuffer__lf()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("| subj["))->__mosek_2fusion_2Utils_2StringBuffer__a((int)((subj)->size(0)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("] = "))->__mosek_2fusion_2Utils_2StringBuffer__a(subj)->__mosek_2fusion_2Utils_2StringBuffer__lf()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("| cof ["))->__mosek_2fusion_2Utils_2StringBuffer__a((int)((cof)->size(0)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("] = "))->__mosek_2fusion_2Utils_2StringBuffer__a(cof)->__mosek_2fusion_2Utils_2StringBuffer__lf()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("| bfix["));
  if ((NULL != bfix.get()))
  {
    {
      _5654->__mosek_2fusion_2Utils_2StringBuffer__a((int)((bfix)->size(0)));
    }
  }
  {}
  _5654->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("] = "))->__mosek_2fusion_2Utils_2StringBuffer__a(bfix)->__mosek_2fusion_2Utils_2StringBuffer__lf()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("| inst["));
  if ((NULL != inst.get()))
  {
    {
      _5654->__mosek_2fusion_2Utils_2StringBuffer__a((int)((inst)->size(0)));
    }
  }
  {}
  _5654->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("] = "))->__mosek_2fusion_2Utils_2StringBuffer__a(inst)->__mosek_2fusion_2Utils_2StringBuffer__lf()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("+-----------------"));
  return _5654->toString();
}
int mosek::fusion::FlatExpr :: size() { return mosek::fusion::p_FlatExpr::_get_impl(this)->size(); }int mosek::fusion::p_FlatExpr::size(){
  return ((int)((ptrb)->size(0)) - (int)1);
}
void mosek::fusion::p_FlatExpr::destroy(){inst.reset();shape.reset();cof.reset();subj.reset();ptrb.reset();bfix.reset();}void mosek::fusion::FlatExpr::destroy() { mosek::fusion::p_FlatExpr::_get_impl(this)->destroy(); }mosek::fusion::SymmetricMatrix::SymmetricMatrix(mosek::fusion::p_SymmetricMatrix *_impl) : _impl(_impl) { /*std::cout << "SymmetricMatrix() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::SymmetricMatrix::~SymmetricMatrix() { delete _impl; _impl = nullptr; }mosek::fusion::p_SymmetricMatrix::p_SymmetricMatrix  (::mosek::fusion::SymmetricMatrix * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::SymmetricMatrix::t mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix  (int _5655,    int _5656,    std::shared_ptr< monty::ndarray< int,1 > > _5657,    std::shared_ptr< monty::ndarray< int,1 > > _5658,    std::shared_ptr< monty::ndarray< double,1 > > _5659,    std::shared_ptr< monty::ndarray< int,1 > > _5660,    std::shared_ptr< monty::ndarray< int,1 > > _5661,    std::shared_ptr< monty::ndarray< double,1 > > _5662,    double _5663){ return new mosek::fusion::SymmetricMatrix(_5655,_5656,_5657,_5658,_5659,_5660,_5661,_5662,_5663); }mosek::fusion::SymmetricMatrix::SymmetricMatrix  (int _5655,    int _5656,    std::shared_ptr< monty::ndarray< int,1 > > _5657,    std::shared_ptr< monty::ndarray< int,1 > > _5658,    std::shared_ptr< monty::ndarray< double,1 > > _5659,    std::shared_ptr< monty::ndarray< int,1 > > _5660,    std::shared_ptr< monty::ndarray< int,1 > > _5661,    std::shared_ptr< monty::ndarray< double,1 > > _5662,    double _5663) :    SymmetricMatrix(new mosek::fusion::p_SymmetricMatrix(this)){ mosek::fusion::p_SymmetricMatrix::_get_impl(this)->_initialize(_5655,_5656,_5657,_5658,_5659,_5660,_5661,_5662,_5663); }void mosek::fusion::p_SymmetricMatrix::_initialize  (int _5655,    int _5656,    std::shared_ptr< monty::ndarray< int,1 > > _5657,    std::shared_ptr< monty::ndarray< int,1 > > _5658,    std::shared_ptr< monty::ndarray< double,1 > > _5659,    std::shared_ptr< monty::ndarray< int,1 > > _5660,    std::shared_ptr< monty::ndarray< int,1 > > _5661,    std::shared_ptr< monty::ndarray< double,1 > > _5662,    double _5663){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5657(_5657 ? _5657->raw() : nullptr, _5657 ? _5657->size(0) : 0);
    _checked_ptr_1<int> _ptr__5658(_5658 ? _5658->raw() : nullptr, _5658 ? _5658->size(0) : 0);
    _checked_ptr_1<double> _ptr__5659(_5659 ? _5659->raw() : nullptr, _5659 ? _5659->size(0) : 0);
    _checked_ptr_1<int> _ptr__5660(_5660 ? _5660->raw() : nullptr, _5660 ? _5660->size(0) : 0);
    _checked_ptr_1<int> _ptr__5661(_5661 ? _5661->raw() : nullptr, _5661 ? _5661->size(0) : 0);
    _checked_ptr_1<double> _ptr__5662(_5662 ? _5662->raw() : nullptr, _5662 ? _5662->size(0) : 0);
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->d0 = _5655;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->d1 = _5656;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->usubi = _5657;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->usubj = _5658;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->uval = _5659;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->vsubi = _5660;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->vsubj = _5661;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->vval = _5662;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->scale = _5663;
    nnz = (-(int)1);
  }
}monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::rankOne  ( int _5664,    std::shared_ptr< monty::ndarray< int,1 > > _5665,    std::shared_ptr< monty::ndarray< double,1 > > _5666) { return mosek::fusion::p_SymmetricMatrix::rankOne(_5664,_5665,_5666); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::rankOne(int _5664,std::shared_ptr< monty::ndarray< int,1 > > _5665,std::shared_ptr< monty::ndarray< double,1 > > _5666){
  _checked_ptr_1<int> _ptr__5665(_5665 ? _5665->raw() : nullptr, _5665 ? _5665->size(0) : 0);
  _checked_ptr_1<double> _ptr__5666(_5666 ? _5666->raw() : nullptr, _5666 ? _5666->size(0) : 0);
  if (((int)((_5665)->size(0)) != (int)((_5666)->size(0))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching array lengths"));
    }
  }
  {}
  int _9489 = (int)0;
  int _9490 = (int)((_5665)->size(0));
  for (int _5667 = _9489; _5667 < _9490; ++_5667)
  {
    {
      if (((_ptr__5665[_5667] < (int)0) || (_ptr__5665[_5667] >= _5664)))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Invalid index in argument 'sub'"));
        }
      }
      {}
    }
  }
  std::vector<int> _9491;
  for (int _5669 = (int)0, _9492 = (int)((_5665)->size(0)); _5669 < _9492 ; ++_5669)
  {
    _9491.push_back(_ptr__5665[_5669]);
  }
  auto _9493 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9491.size()),_9491.begin(),_9491.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _5668 = _9493;
  _checked_ptr_1<int> _ptr__5668(_5668 ? _5668->raw() : nullptr,_5668 ? _5668->size(0) : 0);
  std::vector<int> _9494;
  for (int _5671 = (int)0, _9495 = (int)((_5665)->size(0)); _5671 < _9495 ; ++_5671)
  {
    _9494.push_back((int)1);
  }
  auto _9496 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9494.size()),_9494.begin(),_9494.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _5670 = _9496;
  _checked_ptr_1<int> _ptr__5670(_5670 ? _5670->raw() : nullptr,_5670 ? _5670->size(0) : 0);
  std::vector<double> _9497;
  for (int _5673 = (int)0, _9498 = (int)((_5666)->size(0)); _5673 < _9498 ; ++_5673)
  {
    _9497.push_back(_ptr__5666[_5673]);
  }
  auto _9499 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9497.size()),_9497.begin(),_9497.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _5672 = _9499;
  _checked_ptr_1<double> _ptr__5672(_5672 ? _5672->raw() : nullptr,_5672 ? _5672->size(0) : 0);
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(_5664,(int)1,_5668,_5670,_5672,_5668,_5670,_5672,1.0);
}
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::rankOne  ( std::shared_ptr< monty::ndarray< double,1 > > _5674) { return mosek::fusion::p_SymmetricMatrix::rankOne(_5674); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::rankOne(std::shared_ptr< monty::ndarray< double,1 > > _5674){
  _checked_ptr_1<double> _ptr__5674(_5674 ? _5674->raw() : nullptr, _5674 ? _5674->size(0) : 0);
  int _5675 = (int)((_5674)->size(0));
  std::vector<int> _9500;
  for (int _5677 = (int)0, _9501 = _5675; _5677 < _9501 ; ++_5677)
  {
    _9500.push_back(_5677);
  }
  auto _9502 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9500.size()),_9500.begin(),_9500.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _5676 = _9502;
  _checked_ptr_1<int> _ptr__5676(_5676 ? _5676->raw() : nullptr,_5676 ? _5676->size(0) : 0);
  std::vector<int> _9503;
  for (int _5679 = (int)0, _9504 = _5675; _5679 < _9504 ; ++_5679)
  {
    _9503.push_back((int)1);
  }
  auto _9505 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9503.size()),_9503.begin(),_9503.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _5678 = _9505;
  _checked_ptr_1<int> _ptr__5678(_5678 ? _5678->raw() : nullptr,_5678 ? _5678->size(0) : 0);
  std::vector<double> _9506;
  for (int _5681 = (int)0, _9507 = _5675; _5681 < _9507 ; ++_5681)
  {
    _9506.push_back(_ptr__5674[_5681]);
  }
  auto _9508 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9506.size()),_9506.begin(),_9506.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _5680 = _9508;
  _checked_ptr_1<double> _ptr__5680(_5680 ? _5680->raw() : nullptr,_5680 ? _5680->size(0) : 0);
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(_5675,(int)1,_5676,_5678,_5680,_5676,_5678,_5680,1.0);
}
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::antiDiag  ( std::shared_ptr< monty::ndarray< double,1 > > _5682) { return mosek::fusion::p_SymmetricMatrix::antiDiag(_5682); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::antiDiag(std::shared_ptr< monty::ndarray< double,1 > > _5682){
  _checked_ptr_1<double> _ptr__5682(_5682 ? _5682->raw() : nullptr, _5682 ? _5682->size(0) : 0);
  int _5683 = (int)((_5682)->size(0));
  std::vector<int> _9509;
  for (int _5685 = (int)0, _9510 = _5683; _5685 < _9510 ; ++_5685)
  {
    _9509.push_back(_5685);
  }
  auto _9511 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9509.size()),_9509.begin(),_9509.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _5684 = _9511;
  _checked_ptr_1<int> _ptr__5684(_5684 ? _5684->raw() : nullptr,_5684 ? _5684->size(0) : 0);
  std::vector<int> _9512;
  for (int _5686 = (int)0, _9513 = _5683; _5686 < _9513 ; ++_5686)
  {
    _9512.push_back((_5683 - _5686));
  }
  auto _9514 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9512.size()),_9512.begin(),_9512.end()));
  std::vector<double> _9515;
  for (int _5687 = (int)0, _9516 = _5683; _5687 < _9516 ; ++_5687)
  {
    _9515.push_back(_ptr__5682[_5687]);
  }
  auto _9517 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9515.size()),_9515.begin(),_9515.end()));
  std::vector<double> _9518;
  for (int _5688 = (int)0, _9519 = _5683; _5688 < _9519 ; ++_5688)
  {
    _9518.push_back(1.0);
  }
  auto _9520 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9518.size()),_9518.begin(),_9518.end()));
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(_5683,_5683,_5684,_9514,_9517,_5684,_5684,_9520,1.0);
}
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::diag  ( std::shared_ptr< monty::ndarray< double,1 > > _5689) { return mosek::fusion::p_SymmetricMatrix::diag(_5689); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::diag(std::shared_ptr< monty::ndarray< double,1 > > _5689){
  _checked_ptr_1<double> _ptr__5689(_5689 ? _5689->raw() : nullptr, _5689 ? _5689->size(0) : 0);
  int _5690 = (int)((_5689)->size(0));
  std::vector<int> _9521;
  for (int _5692 = (int)0, _9522 = _5690; _5692 < _9522 ; ++_5692)
  {
    _9521.push_back(_5692);
  }
  auto _9523 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9521.size()),_9521.begin(),_9521.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _5691 = _9523;
  _checked_ptr_1<int> _ptr__5691(_5691 ? _5691->raw() : nullptr,_5691 ? _5691->size(0) : 0);
  std::vector<double> _9524;
  for (int _5693 = (int)0, _9525 = _5690; _5693 < _9525 ; ++_5693)
  {
    _9524.push_back(_ptr__5689[_5693]);
  }
  auto _9526 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9524.size()),_9524.begin(),_9524.end()));
  std::vector<double> _9527;
  for (int _5694 = (int)0, _9528 = _5690; _5694 < _9528 ; ++_5694)
  {
    _9527.push_back(1.0);
  }
  auto _9529 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9527.size()),_9527.begin(),_9527.end()));
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(_5690,_5690,_5691,_5691,_9526,_5691,_5691,_9529,1.0);
}
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix :: __mosek_2fusion_2SymmetricMatrix__add(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _5695) { return mosek::fusion::p_SymmetricMatrix::_get_impl(this)->__mosek_2fusion_2SymmetricMatrix__add(_5695); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::add(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _5695) { return __mosek_2fusion_2SymmetricMatrix__add(_5695); }
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::__mosek_2fusion_2SymmetricMatrix__add(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _5695){
  int _5696 = _pubthis->getdim();
  if ((_5695->getdim() != _5696))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions"));
    }
  }
  {}
  int _5697 = (int)((usubi)->size(0));
  int _5698 = (int)((mosek::fusion::p_SymmetricMatrix::_get_impl(_5695)->usubi)->size(0));
  int _5699 = safe_add( _5697,_5698 );
  int _5700 = (int)((vsubi)->size(0));
  int _5701 = (int)((mosek::fusion::p_SymmetricMatrix::_get_impl(_5695)->vsubi)->size(0));
  int _5702 = safe_add( _5700,_5701 );
  std::shared_ptr< monty::ndarray< double,1 > > _5703 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5702)));
  _checked_ptr_1<double> _ptr__5703(_5703 ? _5703->raw() : nullptr,_5703 ? _5703->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5704 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5702)));
  _checked_ptr_1<int> _ptr__5704(_5704 ? _5704->raw() : nullptr,_5704 ? _5704->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5705 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5702)));
  _checked_ptr_1<int> _ptr__5705(_5705 ? _5705->raw() : nullptr,_5705 ? _5705->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5706 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5699)));
  _checked_ptr_1<double> _ptr__5706(_5706 ? _5706->raw() : nullptr,_5706 ? _5706->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5707 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5699)));
  _checked_ptr_1<int> _ptr__5707(_5707 ? _5707->raw() : nullptr,_5707 ? _5707->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5708 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5699)));
  _checked_ptr_1<int> _ptr__5708(_5708 ? _5708->raw() : nullptr,_5708 ? _5708->size(0) : 0);
  ::mosek::fusion::Utils::Tools::arraycopy(usubi,(int)0,_5708,(int)0,_5697);
  ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SymmetricMatrix::_get_impl(_5695)->usubi,(int)0,_5708,_5697,_5698);
  ::mosek::fusion::Utils::Tools::arraycopy(usubj,(int)0,_5707,(int)0,_5697);
  int _9530 = (int)0;
  int _9531 = _5698;
  for (int _5709 = _9530; _5709 < _9531; ++_5709)
  {
    {
      _ptr__5707[safe_add( _5709,_5697 )] = safe_add( ((*mosek::fusion::p_SymmetricMatrix::_get_impl(_5695)->usubj)(_5709)),d1 );
    }
  }
  if (((scale > 1.0) || (scale < 1.0)))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(uval,(int)0,_5706,(int)0,_5697);
    }
  }
  else
  {
    {
      int _9532 = (int)0;
      int _9533 = _5697;
      for (int _5710 = _9532; _5710 < _9533; ++_5710)
      {
        {
          _ptr__5706[_5710] = (scale * ((*uval)(_5710)));
        }
      }
    }
  }
  if (((mosek::fusion::p_SymmetricMatrix::_get_impl(_5695)->scale > 1.0) || (mosek::fusion::p_SymmetricMatrix::_get_impl(_5695)->scale < 1.0)))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SymmetricMatrix::_get_impl(_5695)->uval,(int)0,_5706,_5697,_5698);
    }
  }
  else
  {
    {
      int _9534 = (int)0;
      int _9535 = _5698;
      for (int _5711 = _9534; _5711 < _9535; ++_5711)
      {
        {
          _ptr__5706[safe_add( _5711,_5697 )] = (mosek::fusion::p_SymmetricMatrix::_get_impl(_5695)->scale * ((*mosek::fusion::p_SymmetricMatrix::_get_impl(_5695)->uval)(_5711)));
        }
      }
    }
  }
  ::mosek::fusion::Utils::Tools::arraycopy(usubi,(int)0,_5708,(int)0,_5697);
  int _9536 = (int)0;
  int _9537 = _5701;
  for (int _5712 = _9536; _5712 < _9537; ++_5712)
  {
    {
      _ptr__5705[safe_add( _5712,_5700 )] = safe_add( ((*mosek::fusion::p_SymmetricMatrix::_get_impl(_5695)->vsubi)(_5712)),mosek::fusion::p_SymmetricMatrix::_get_impl(_5695)->d1 );
    }
  }
  ::mosek::fusion::Utils::Tools::arraycopy(vsubj,(int)0,_5704,(int)0,_5700);
  ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SymmetricMatrix::_get_impl(_5695)->vsubj,_5700,_5704,_5700,_5701);
  if (((scale > 1.0) || (scale < 1.0)))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(vval,(int)0,_5703,(int)0,_5700);
    }
  }
  else
  {
    {
      int _9538 = (int)0;
      int _9539 = _5700;
      for (int _5713 = _9538; _5713 < _9539; ++_5713)
      {
        {
          _ptr__5703[_5713] = (scale * ((*vval)(_5713)));
        }
      }
    }
  }
  if (((mosek::fusion::p_SymmetricMatrix::_get_impl(_5695)->scale > 1.0) || (mosek::fusion::p_SymmetricMatrix::_get_impl(_5695)->scale < 1.0)))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SymmetricMatrix::_get_impl(_5695)->vval,(int)0,_5703,_5700,_5701);
    }
  }
  else
  {
    {
      int _9540 = (int)0;
      int _9541 = _5701;
      for (int _5714 = _9540; _5714 < _9541; ++_5714)
      {
        {
          _ptr__5703[safe_add( _5714,_5700 )] = (mosek::fusion::p_SymmetricMatrix::_get_impl(_5695)->scale * ((*mosek::fusion::p_SymmetricMatrix::_get_impl(_5695)->vval)(_5714)));
        }
      }
    }
  }
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(d0,safe_add( d1,mosek::fusion::p_SymmetricMatrix::_get_impl(_5695)->d1 ),_5708,_5707,_5706,_5705,_5704,_5703,1.0);
}
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix :: __mosek_2fusion_2SymmetricMatrix__sub(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _5715) { return mosek::fusion::p_SymmetricMatrix::_get_impl(this)->__mosek_2fusion_2SymmetricMatrix__sub(_5715); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::sub(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _5715) { return __mosek_2fusion_2SymmetricMatrix__sub(_5715); }
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::__mosek_2fusion_2SymmetricMatrix__sub(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _5715){
  return _pubthis->__mosek_2fusion_2SymmetricMatrix__add(_5715->__mosek_2fusion_2SymmetricMatrix__mul((-1.0)));
}
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix :: __mosek_2fusion_2SymmetricMatrix__mul(double _5716) { return mosek::fusion::p_SymmetricMatrix::_get_impl(this)->__mosek_2fusion_2SymmetricMatrix__mul(_5716); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::mul(double _5716) { return __mosek_2fusion_2SymmetricMatrix__mul(_5716); }
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::__mosek_2fusion_2SymmetricMatrix__mul(double _5716){
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(d0,d1,usubi,usubj,uval,vsubi,vsubj,vval,(scale * _5716));
}
int mosek::fusion::SymmetricMatrix :: getdim() { return mosek::fusion::p_SymmetricMatrix::_get_impl(this)->getdim(); }int mosek::fusion::p_SymmetricMatrix::getdim(){
  return d0;
}
void mosek::fusion::p_SymmetricMatrix::destroy(){vval.reset();vsubj.reset();vsubi.reset();uval.reset();usubj.reset();usubi.reset();}void mosek::fusion::SymmetricMatrix::destroy() { mosek::fusion::p_SymmetricMatrix::_get_impl(this)->destroy(); }mosek::fusion::NDSparseArray::NDSparseArray(mosek::fusion::p_NDSparseArray *_impl) : _impl(_impl) { /*std::cout << "NDSparseArray() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::NDSparseArray::~NDSparseArray() { delete _impl; _impl = nullptr; }mosek::fusion::p_NDSparseArray::p_NDSparseArray  (::mosek::fusion::NDSparseArray * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::NDSparseArray::t mosek::fusion::p_NDSparseArray::_new_NDSparseArray  (std::shared_ptr< monty::ndarray< int,1 > > _5717,    std::shared_ptr< monty::ndarray< int,2 > > _5718,    std::shared_ptr< monty::ndarray< double,1 > > _5719){ return new mosek::fusion::NDSparseArray(_5717,_5718,_5719); }mosek::fusion::NDSparseArray::NDSparseArray  (std::shared_ptr< monty::ndarray< int,1 > > _5717,    std::shared_ptr< monty::ndarray< int,2 > > _5718,    std::shared_ptr< monty::ndarray< double,1 > > _5719) :    NDSparseArray(new mosek::fusion::p_NDSparseArray(this)){ mosek::fusion::p_NDSparseArray::_get_impl(this)->_initialize(_5717,_5718,_5719); }void mosek::fusion::p_NDSparseArray::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _5717,    std::shared_ptr< monty::ndarray< int,2 > > _5718,    std::shared_ptr< monty::ndarray< double,1 > > _5719){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5717(_5717 ? _5717->raw() : nullptr, _5717 ? _5717->size(0) : 0);
    _checked_ptr_1<double> _ptr__5719(_5719 ? _5719->raw() : nullptr, _5719 ? _5719->size(0) : 0);
    std::shared_ptr< monty::ndarray< long long,1 > > _5720 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_5718)->size(0)))));
    _checked_ptr_1<long long> _ptr__5720(_5720 ? _5720->raw() : nullptr,_5720 ? _5720->size(0) : 0);
    size = (long long)1;
    int _9542 = (int)0;
    int _9543 = (int)((_5717)->size(0));
    for (int _5721 = _9542; _5721 < _9543; ++_5721)
    {
      {
        size = safe_mul( size,_ptr__5717[_5721] );
      }
    }
    int _5722 = (int)((_5717)->size(0));
    if (((int)((_5718)->size(0)) != (int)((_5719)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Mismatching data array length"));
      }
    }
    {}
    if (((int)((_5718)->size(1)) != _5722))
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("An index key in sub has wrong length"));
      }
    }
    {}
    bool _5723 = false;
    int _9544 = (int)0;
    int _9545 = (int)((_5718)->size(0));
    for (int _5724 = _9544; _5724 < _9545; ++_5724)
    {
      {
        int _9546 = (int)0;
        int _9547 = (int)((_5718)->size(1));
        for (int _5725 = _9546; _5725 < _9547; ++_5725)
        {
          {
            if (((((*_5718)(_5724,_5725)) < (int)0) || (((*_5718)(_5724,_5725)) >= _ptr__5717[_5725])))
            {
              {
                _5723 = true;
              }
            }
            {}
          }
        }
      }
    }
    if (_5723)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("An index in sub is out of bounds"));
      }
    }
    {}
    int _9548 = (int)0;
    int _9549 = (int)((_5718)->size(0));
    for (int _5726 = _9548; _5726 < _9549; ++_5726)
    {
      {
        long long _5727 = (long long)0;
        int _9550 = (int)0;
        int _9551 = (int)((_5718)->size(1));
        for (int _5728 = _9550; _5728 < _9551; ++_5728)
        {
          {
            _5727 = safe_add( safe_mul( _5727,_ptr__5717[_5728] ),((*_5718)(_5726,_5728)) );
          }
        }
        _ptr__5720[_5726] = _5727;
      }
    }
    dims = ::mosek::fusion::Utils::Tools::arraycopy(_5717);
    bool _5729 = true;
    int _9552 = (int)1;
    int _9553 = (int)((_5720)->size(0));
    for (int _5730 = _9552; _5730 < _9553; ++_5730)
    {
      {
        _5729 = (_5729 && (_ptr__5720[_5730] >= _ptr__5720[(_5730 - (int)1)]));
      }
    }
    if (_5729)
    {
      {
        int _5731 = (int)1;
        int _9554 = (int)1;
        int _9555 = (int)((_5720)->size(0));
        for (int _5732 = _9554; _5732 < _9555; ++_5732)
        {
          {
            if ((_ptr__5720[(_5732 - (int)1)] < _ptr__5720[_5732]))
            {
              {
                ++ _5731;
              }
            }
            {}
          }
        }
        if ((_5731 == (int)((_5720)->size(0))))
        {
          {
            inst = ::mosek::fusion::Utils::Tools::arraycopy(_5720);
            cof = ::mosek::fusion::Utils::Tools::arraycopy(_5719);
          }
        }
        else
        {
          {
            inst = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5731)));
            ((*inst)((int)0)) = _ptr__5720[(int)0];
            cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5731)));
            ((*cof)((int)0)) = _ptr__5719[(int)0];
            int _5733 = (int)0;
            int _9556 = (int)1;
            int _9557 = (int)((_5720)->size(0));
            for (int _5734 = _9556; _5734 < _9557; ++_5734)
            {
              {
                if ((_ptr__5720[_5734] > _ptr__5720[(_5734 - (int)1)]))
                {
                  {
                    ++ _5733;
                    ((*inst)(_5733)) = _ptr__5720[_5734];
                    ((*cof)(_5733)) = _ptr__5719[_5734];
                  }
                }
                else
                {
                  {
                    ((*cof)(_5733)) = (((*cof)(_5733)) + _ptr__5719[_5734]);
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      {
        std::shared_ptr< monty::ndarray< long long,1 > > _5735 = ::mosek::fusion::Utils::Tools::range((long long)((_5720)->size(0)));
        _checked_ptr_1<long long> _ptr__5735(_5735 ? _5735->raw() : nullptr,_5735 ? _5735->size(0) : 0);
        ::mosek::fusion::p_CommonTools::argQsort(_5735,_5720,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)0,(long long)((_5720)->size(0)));
        int _5736 = (int)1;
        int _9558 = (int)1;
        int _9559 = (int)((_5720)->size(0));
        for (int _5737 = _9558; _5737 < _9559; ++_5737)
        {
          {
            if ((_ptr__5720[_ptr__5735[(_5737 - (int)1)]] < _ptr__5720[_ptr__5735[_5737]]))
            {
              {
                ++ _5736;
              }
            }
            {}
          }
        }
        inst = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5736)));
        ((*inst)((int)0)) = _ptr__5720[_ptr__5735[(int)0]];
        cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5736)));
        ((*cof)((int)0)) = _ptr__5719[_ptr__5735[(int)0]];
        int _5738 = (int)0;
        int _9560 = (int)1;
        int _9561 = (int)((_5720)->size(0));
        for (int _5739 = _9560; _5739 < _9561; ++_5739)
        {
          {
            if ((_ptr__5720[_ptr__5735[_5739]] > _ptr__5720[_ptr__5735[(_5739 - (int)1)]]))
            {
              {
                ++ _5738;
                ((*inst)(_5738)) = _ptr__5720[_ptr__5735[_5739]];
                ((*cof)(_5738)) = _ptr__5719[_ptr__5735[_5739]];
              }
            }
            else
            {
              {
                ((*cof)(_5738)) = (((*cof)(_5738)) + _ptr__5719[_ptr__5735[_5739]]);
              }
            }
          }
        }
      }
    }
  }
}mosek::fusion::NDSparseArray::t mosek::fusion::p_NDSparseArray::_new_NDSparseArray  (std::shared_ptr< monty::ndarray< int,1 > > _5740,    std::shared_ptr< monty::ndarray< long long,1 > > _5741,    std::shared_ptr< monty::ndarray< double,1 > > _5742){ return new mosek::fusion::NDSparseArray(_5740,_5741,_5742); }mosek::fusion::NDSparseArray::NDSparseArray  (std::shared_ptr< monty::ndarray< int,1 > > _5740,    std::shared_ptr< monty::ndarray< long long,1 > > _5741,    std::shared_ptr< monty::ndarray< double,1 > > _5742) :    NDSparseArray(new mosek::fusion::p_NDSparseArray(this)){ mosek::fusion::p_NDSparseArray::_get_impl(this)->_initialize(_5740,_5741,_5742); }void mosek::fusion::p_NDSparseArray::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _5740,    std::shared_ptr< monty::ndarray< long long,1 > > _5741,    std::shared_ptr< monty::ndarray< double,1 > > _5742){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5740(_5740 ? _5740->raw() : nullptr, _5740 ? _5740->size(0) : 0);
    _checked_ptr_1<long long> _ptr__5741(_5741 ? _5741->raw() : nullptr, _5741 ? _5741->size(0) : 0);
    _checked_ptr_1<double> _ptr__5742(_5742 ? _5742->raw() : nullptr, _5742 ? _5742->size(0) : 0);
    size = (long long)1;
    int _9562 = (int)0;
    int _9563 = (int)((_5740)->size(0));
    for (int _5743 = _9562; _5743 < _9563; ++_5743)
    {
      {
        size = safe_mul( size,_ptr__5740[_5743] );
      }
    }
    if (((int)((_5741)->size(0)) != (int)((_5742)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Mismatching data array length"));
      }
    }
    {}
    {
      bool _5744 = false;
      int _9564 = (int)0;
      int _9565 = (int)((_5741)->size(0));
      for (int _5745 = _9564; _5745 < _9565; ++_5745)
      {
        {
          _5744 = (_5744 || ((_ptr__5741[_5745] < (int)0) || (_ptr__5741[_5745] >= size)));
        }
      }
      if (_5744)
      {
        {
          throw ::mosek::fusion::IndexError(std::string ("An index in inst is out of bounds"));
        }
      }
      {}
    }
    dims = ::mosek::fusion::Utils::Tools::arraycopy(_5740);
    bool _5746 = true;
    int _9566 = (int)1;
    int _9567 = (int)((_5741)->size(0));
    for (int _5747 = _9566; _5747 < _9567; ++_5747)
    {
      {
        _5746 = (_5746 && (_ptr__5741[_5747] >= _ptr__5741[(_5747 - (int)1)]));
      }
    }
    if (_5746)
    {
      {
        int _5748 = (int)1;
        int _9568 = (int)1;
        int _9569 = (int)((_5741)->size(0));
        for (int _5749 = _9568; _5749 < _9569; ++_5749)
        {
          {
            if ((_ptr__5741[(_5749 - (int)1)] < _ptr__5741[_5749]))
            {
              {
                ++ _5748;
              }
            }
            {}
          }
        }
        if ((_5748 == (int)((_5741)->size(0))))
        {
          {
            inst = ::mosek::fusion::Utils::Tools::arraycopy(_5741);
            cof = ::mosek::fusion::Utils::Tools::arraycopy(_5742);
          }
        }
        else
        {
          {
            inst = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5748)));
            ((*inst)((int)0)) = _ptr__5741[(int)0];
            cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5748)));
            ((*cof)((int)0)) = _ptr__5742[(int)0];
            int _5750 = (int)0;
            int _9570 = (int)1;
            int _9571 = (int)((_5741)->size(0));
            for (int _5751 = _9570; _5751 < _9571; ++_5751)
            {
              {
                if ((_ptr__5741[_5751] > _ptr__5741[(_5751 - (int)1)]))
                {
                  {
                    ++ _5750;
                    ((*inst)(_5750)) = _ptr__5741[_5751];
                    ((*cof)(_5750)) = _ptr__5742[_5751];
                  }
                }
                else
                {
                  {
                    ((*cof)(_5750)) = (((*cof)(_5750)) + _ptr__5742[_5751]);
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      {
        std::shared_ptr< monty::ndarray< long long,1 > > _5752 = ::mosek::fusion::Utils::Tools::range((long long)((_5741)->size(0)));
        _checked_ptr_1<long long> _ptr__5752(_5752 ? _5752->raw() : nullptr,_5752 ? _5752->size(0) : 0);
        ::mosek::fusion::p_CommonTools::argQsort(_5752,_5741,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)0,(long long)((_5741)->size(0)));
        int _5753 = (int)1;
        int _9572 = (int)1;
        int _9573 = (int)((_5741)->size(0));
        for (int _5754 = _9572; _5754 < _9573; ++_5754)
        {
          {
            if ((_ptr__5741[_ptr__5752[(_5754 - (int)1)]] < _ptr__5741[_ptr__5752[_5754]]))
            {
              {
                ++ _5753;
              }
            }
            {}
          }
        }
        inst = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5753)));
        ((*inst)((int)0)) = _ptr__5741[_ptr__5752[(int)0]];
        cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5753)));
        ((*cof)((int)0)) = _ptr__5742[_ptr__5752[(int)0]];
        int _5755 = (int)0;
        int _9574 = (int)1;
        int _9575 = (int)((_5741)->size(0));
        for (int _5756 = _9574; _5756 < _9575; ++_5756)
        {
          {
            if ((_ptr__5741[_ptr__5752[_5756]] > ((*inst)(_ptr__5752[(_5756 - (int)1)]))))
            {
              {
                ++ _5755;
                ((*inst)(_5755)) = _ptr__5741[_ptr__5752[_5756]];
                ((*cof)(_5755)) = _ptr__5742[_ptr__5752[_5756]];
              }
            }
            else
            {
              {
                ((*cof)(_5755)) = (((*cof)(_5755)) + _ptr__5742[_ptr__5752[_5756]]);
              }
            }
          }
        }
      }
    }
  }
}mosek::fusion::NDSparseArray::t mosek::fusion::p_NDSparseArray::_new_NDSparseArray  (monty::rc_ptr< ::mosek::fusion::Matrix > _5757){ return new mosek::fusion::NDSparseArray(_5757); }mosek::fusion::NDSparseArray::NDSparseArray  (monty::rc_ptr< ::mosek::fusion::Matrix > _5757) :    NDSparseArray(new mosek::fusion::p_NDSparseArray(this)){ mosek::fusion::p_NDSparseArray::_get_impl(this)->_initialize(_5757); }void mosek::fusion::p_NDSparseArray::_initialize  (monty::rc_ptr< ::mosek::fusion::Matrix > _5757){monty::rc_reserve __reserve_this(_pubthis);   {
    long long _5758 = _5757->numNonzeros();
    int _5759 = _5757->numColumns();
    int _5760 = _5757->numRows();
    std::shared_ptr< monty::ndarray< double,1 > > _5761 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5758)));
    _checked_ptr_1<double> _ptr__5761(_5761 ? _5761->raw() : nullptr,_5761 ? _5761->size(0) : 0);
    std::shared_ptr< monty::ndarray< int,1 > > _5762 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5758)));
    _checked_ptr_1<int> _ptr__5762(_5762 ? _5762->raw() : nullptr,_5762 ? _5762->size(0) : 0);
    std::shared_ptr< monty::ndarray< int,1 > > _5763 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5758)));
    _checked_ptr_1<int> _ptr__5763(_5763 ? _5763->raw() : nullptr,_5763 ? _5763->size(0) : 0);
    _5757->getDataAsTriplets(_5763,_5762,_5761);
    size = safe_mul( (long long)_5757->numRows(),(long long)_5757->numColumns() );
    dims = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_5760),(int)(_5759)});
    std::vector<long long> _9576;
    for (long long _5764 = (long long)0, _9577 = _5758; _5764 < _9577 ; ++_5764)
    {
      _9576.push_back(safe_add( safe_mul( (long long)_ptr__5763[_5764],_5759 ),(long long)_ptr__5762[_5764] ));
    }
    auto _9578 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9576.size()),_9576.begin(),_9576.end()));
    inst = _9578;
    cof = _5761;
  }
}monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::NDSparseArray::make  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5765) { return mosek::fusion::p_NDSparseArray::make(_5765); }monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::p_NDSparseArray::make(monty::rc_ptr< ::mosek::fusion::Matrix > _5765){
  return ::mosek::fusion::p_NDSparseArray::_new_NDSparseArray(_5765);
}
monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::NDSparseArray::make  ( std::shared_ptr< monty::ndarray< int,1 > > _5766,    std::shared_ptr< monty::ndarray< long long,1 > > _5767,    std::shared_ptr< monty::ndarray< double,1 > > _5768) { return mosek::fusion::p_NDSparseArray::make(_5766,_5767,_5768); }monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::p_NDSparseArray::make(std::shared_ptr< monty::ndarray< int,1 > > _5766,std::shared_ptr< monty::ndarray< long long,1 > > _5767,std::shared_ptr< monty::ndarray< double,1 > > _5768){
  _checked_ptr_1<int> _ptr__5766(_5766 ? _5766->raw() : nullptr, _5766 ? _5766->size(0) : 0);
  _checked_ptr_1<long long> _ptr__5767(_5767 ? _5767->raw() : nullptr, _5767 ? _5767->size(0) : 0);
  _checked_ptr_1<double> _ptr__5768(_5768 ? _5768->raw() : nullptr, _5768 ? _5768->size(0) : 0);
  return ::mosek::fusion::p_NDSparseArray::_new_NDSparseArray(_5766,_5767,_5768);
}
monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::NDSparseArray::make  ( std::shared_ptr< monty::ndarray< int,1 > > _5769,    std::shared_ptr< monty::ndarray< int,2 > > _5770,    std::shared_ptr< monty::ndarray< double,1 > > _5771) { return mosek::fusion::p_NDSparseArray::make(_5769,_5770,_5771); }monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::p_NDSparseArray::make(std::shared_ptr< monty::ndarray< int,1 > > _5769,std::shared_ptr< monty::ndarray< int,2 > > _5770,std::shared_ptr< monty::ndarray< double,1 > > _5771){
  _checked_ptr_1<int> _ptr__5769(_5769 ? _5769->raw() : nullptr, _5769 ? _5769->size(0) : 0);
  _checked_ptr_1<double> _ptr__5771(_5771 ? _5771->raw() : nullptr, _5771 ? _5771->size(0) : 0);
  return ::mosek::fusion::p_NDSparseArray::_new_NDSparseArray(_5769,_5770,_5771);
}
void mosek::fusion::p_NDSparseArray::destroy(){cof.reset();inst.reset();dims.reset();}void mosek::fusion::NDSparseArray::destroy() { mosek::fusion::p_NDSparseArray::_get_impl(this)->destroy(); }mosek::fusion::DenseMatrix::DenseMatrix(mosek::fusion::p_DenseMatrix *_impl) : mosek::fusion::Matrix(_impl) { /*std::cout << "DenseMatrix()" << this << std::endl; */ }mosek::fusion::DenseMatrix::~DenseMatrix() {  /* std::cout << "~DenseMatrix()" << this << std::endl << std::flush; */ }mosek::fusion::p_DenseMatrix::p_DenseMatrix  (::mosek::fusion::DenseMatrix * _pubthis) :     mosek::fusion::p_Matrix(_pubthis),    _pubthis(_pubthis){}mosek::fusion::DenseMatrix::t mosek::fusion::p_DenseMatrix::_new_DenseMatrix  (int _5772,    int _5773,    std::shared_ptr< monty::ndarray< double,1 > > _5774){ return new mosek::fusion::DenseMatrix(_5772,_5773,_5774); }mosek::fusion::DenseMatrix::DenseMatrix  (int _5772,    int _5773,    std::shared_ptr< monty::ndarray< double,1 > > _5774) :    DenseMatrix(new mosek::fusion::p_DenseMatrix(this)){ mosek::fusion::p_DenseMatrix::_get_impl(this)->_initialize(_5772,_5773,_5774); }void mosek::fusion::p_DenseMatrix::_initialize  (int _5772,    int _5773,    std::shared_ptr< monty::ndarray< double,1 > > _5774){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__5774(_5774 ? _5774->raw() : nullptr, _5774 ? _5774->size(0) : 0);
    mosek::fusion::p_Matrix::_initialize(_5772,_5773);
    nnz = (long long)safe_mul( _5772,_5773 );
    data = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( _5772,_5773 ))));
    ::mosek::fusion::Utils::Tools::arraycopy(_5774,(int)0,data,(int)0,safe_mul( _5772,_5773 ));
  }
}mosek::fusion::DenseMatrix::t mosek::fusion::p_DenseMatrix::_new_DenseMatrix  (monty::rc_ptr< ::mosek::fusion::Matrix > _5775){ return new mosek::fusion::DenseMatrix(_5775); }mosek::fusion::DenseMatrix::DenseMatrix  (monty::rc_ptr< ::mosek::fusion::Matrix > _5775) :    DenseMatrix(new mosek::fusion::p_DenseMatrix(this)){ mosek::fusion::p_DenseMatrix::_get_impl(this)->_initialize(_5775); }void mosek::fusion::p_DenseMatrix::_initialize  (monty::rc_ptr< ::mosek::fusion::Matrix > _5775){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_Matrix::_initialize(mosek::fusion::p_Matrix::_get_impl(_5775)->dimi,mosek::fusion::p_Matrix::_get_impl(_5775)->dimj);
    monty::rc_ptr< ::mosek::fusion::Matrix > _9579 = _5775;
    if (false) {}
    else if (nullptr != dynamic_cast<::mosek::fusion::DenseMatrix*>(_9579.get()))
    {
      ::mosek::fusion::DenseMatrix::t _5776 (dynamic_cast<::mosek::fusion::DenseMatrix*>(_9579.get()));
      {
        data = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_DenseMatrix::_get_impl(_5776)->data);
      }
    }
    else if (nullptr != dynamic_cast<::mosek::fusion::SparseMatrix*>(_9579.get()))
    {
      ::mosek::fusion::SparseMatrix::t _5777 (dynamic_cast<::mosek::fusion::SparseMatrix*>(_9579.get()));
      {
        data = ::mosek::fusion::Utils::Tools::zeros(safe_mul( mosek::fusion::p_Matrix::_get_impl(_5777)->dimi,mosek::fusion::p_Matrix::_get_impl(_5777)->dimj ));
        long long _9580 = (long long)0;
        long long _9581 = mosek::fusion::p_SparseMatrix::_get_impl(_5777)->nnz;
        for (long long _5779 = _9580; _5779 < _9581; ++_5779)
        {
          {
            ((*data)(safe_add( safe_mul( ((*mosek::fusion::p_SparseMatrix::_get_impl(_5777)->subi)(_5779)),dimj ),((*mosek::fusion::p_SparseMatrix::_get_impl(_5777)->subj)(_5779)) ))) = ((*mosek::fusion::p_SparseMatrix::_get_impl(_5777)->val)(_5779));
          }
        }
      }
    }
    else
    {
      mosek::fusion::Matrix::t _5778 = _9579;
      {
        throw ::mosek::fusion::MatrixError(std::string ("Unknown matrix type."));
      }
    }
    nnz = (long long)safe_mul( dimi,dimj );
  }
}mosek::fusion::DenseMatrix::t mosek::fusion::p_DenseMatrix::_new_DenseMatrix  (std::shared_ptr< monty::ndarray< double,2 > > _5780){ return new mosek::fusion::DenseMatrix(_5780); }mosek::fusion::DenseMatrix::DenseMatrix  (std::shared_ptr< monty::ndarray< double,2 > > _5780) :    DenseMatrix(new mosek::fusion::p_DenseMatrix(this)){ mosek::fusion::p_DenseMatrix::_get_impl(this)->_initialize(_5780); }void mosek::fusion::p_DenseMatrix::_initialize  (std::shared_ptr< monty::ndarray< double,2 > > _5780){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_Matrix::_initialize((int)((_5780)->size(0)),(int)((_5780)->size(1)));
    std::vector<double> _9582;
    for (int _5781 = (int)0, _9583 = dimi; _5781 < _9583 ; ++_5781)
    {
      for (int _5782 = (int)0, _9584 = dimj; _5782 < _9584 ; ++_5782)
      {
        _9582.push_back(((*_5780)(_5781,_5782)));
      }
    }
    auto _9585 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9582.size()),_9582.begin(),_9582.end()));
    data = _9585;
    nnz = (long long)safe_mul( dimi,dimj );
  }
}mosek::fusion::DenseMatrix::t mosek::fusion::p_DenseMatrix::_new_DenseMatrix  (int _5783,    int _5784,    double _5785){ return new mosek::fusion::DenseMatrix(_5783,_5784,_5785); }mosek::fusion::DenseMatrix::DenseMatrix  (int _5783,    int _5784,    double _5785) :    DenseMatrix(new mosek::fusion::p_DenseMatrix(this)){ mosek::fusion::p_DenseMatrix::_get_impl(this)->_initialize(_5783,_5784,_5785); }void mosek::fusion::p_DenseMatrix::_initialize  (int _5783,    int _5784,    double _5785){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_Matrix::_initialize(_5783,_5784);
    std::vector<double> _9586;
    for (int _5786 = (int)0, _9587 = _5783; _5786 < _9587 ; ++_5786)
    {
      for (int _5787 = (int)0, _9588 = _5784; _5787 < _9588 ; ++_5787)
      {
        _9586.push_back(_5785);
      }
    }
    auto _9589 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9586.size()),_9586.begin(),_9586.end()));
    data = _9589;
    nnz = (long long)safe_mul( _5783,_5784 );
  }
}std::string mosek::fusion::DenseMatrix :: toString() { return mosek::fusion::p_DenseMatrix::_get_impl(this)->toString(); }std::string mosek::fusion::p_DenseMatrix::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _5788 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _5788->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("DenseMatrix("));
  _5788->__mosek_2fusion_2Utils_2StringBuffer__a(dimi);
  _5788->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","));
  _5788->__mosek_2fusion_2Utils_2StringBuffer__a(dimj);
  _5788->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (": "));
  int _5789 = (int)0;
  {
    int _5790 = (int)0;
    for(;(_5790 < dimi);++ _5790)
    {
      {
        if ((_5790 > (int)0))
        {
          {
            _5788->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","));
          }
        }
        {}
        _5788->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("[ "));
        _5788->__mosek_2fusion_2Utils_2StringBuffer__a(((*data)(_5789)));
        ++ _5789;
        {
          int _5791 = (int)1;
          for(;(_5791 < dimj);++ _5791)
          {
            {
              _5788->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","));
              _5788->__mosek_2fusion_2Utils_2StringBuffer__a(((*data)(_5789)));
              ++ _5789;
            }
          }
        }
        _5788->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" ]"));
      }
    }
  }
  _5788->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _5788->toString();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::DenseMatrix :: __mosek_2fusion_2DenseMatrix__transpose() { return mosek::fusion::p_DenseMatrix::_get_impl(this)->__mosek_2fusion_2DenseMatrix__transpose(); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::DenseMatrix::transpose() { return __mosek_2fusion_2DenseMatrix__transpose(); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::DenseMatrix::__mosek_2fusion_2Matrix__transpose() { return __mosek_2fusion_2DenseMatrix__transpose(); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_DenseMatrix::__mosek_2fusion_2DenseMatrix__transpose(){
  std::shared_ptr< monty::ndarray< double,1 > > _5792 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( dimi,dimj ))));
  _checked_ptr_1<double> _ptr__5792(_5792 ? _5792->raw() : nullptr,_5792 ? _5792->size(0) : 0);
  int _5793 = (int)0;
  int _5794 = dimi;
  int _9590 = (int)0;
  int _9591 = dimi;
  for (int _5795 = _9590; _5795 < _9591; ++_5795)
  {
    {
      int _5796 = _5795;
      int _9592 = (int)0;
      int _9593 = dimj;
      for (int _5797 = _9592; _5797 < _9593; ++_5797)
      {
        {
          _ptr__5792[_5796] = ((*data)(_5793));
          _5796 = safe_add( _5796,_5794 );
          ++ _5793;
        }
      }
    }
  }
  return (::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(dimj,dimi,_5792)).as<::mosek::fusion::Matrix>();
}
bool mosek::fusion::DenseMatrix :: isSparse() { return mosek::fusion::p_DenseMatrix::_get_impl(this)->isSparse(); }bool mosek::fusion::p_DenseMatrix::isSparse(){
  return false;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::DenseMatrix :: getDataAsArray() { return mosek::fusion::p_DenseMatrix::_get_impl(this)->getDataAsArray(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_DenseMatrix::getDataAsArray(){
  return ::mosek::fusion::Utils::Tools::arraycopy(data);
}
void mosek::fusion::DenseMatrix :: getDataAsTriplets(std::shared_ptr< monty::ndarray< int,1 > > _5798,std::shared_ptr< monty::ndarray< int,1 > > _5799,std::shared_ptr< monty::ndarray< double,1 > > _5800) { mosek::fusion::p_DenseMatrix::_get_impl(this)->getDataAsTriplets(_5798,_5799,_5800); }void mosek::fusion::p_DenseMatrix::getDataAsTriplets(std::shared_ptr< monty::ndarray< int,1 > > _5798,std::shared_ptr< monty::ndarray< int,1 > > _5799,std::shared_ptr< monty::ndarray< double,1 > > _5800){
  _checked_ptr_1<int> _ptr__5798(_5798 ? _5798->raw() : nullptr, _5798 ? _5798->size(0) : 0);
  _checked_ptr_1<int> _ptr__5799(_5799 ? _5799->raw() : nullptr, _5799 ? _5799->size(0) : 0);
  _checked_ptr_1<double> _ptr__5800(_5800 ? _5800->raw() : nullptr, _5800 ? _5800->size(0) : 0);
  if ((((int)((_5798)->size(0)) < nnz) || (((int)((_5799)->size(0)) < nnz) || ((int)((_5800)->size(0)) < nnz))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Output arrays are not long enough."));
    }
  }
  {}
  ::mosek::fusion::Utils::Tools::arraycopy(data,(int)0,_5800,(int)0,(int)((data)->size(0)));
  int _5801 = (int)0;
  int _9594 = (int)0;
  int _9595 = dimi;
  for (int _5802 = _9594; _5802 < _9595; ++_5802)
  {
    {
      int _9596 = (int)0;
      int _9597 = dimj;
      for (int _5803 = _9596; _5803 < _9597; ++_5803)
      {
        {
          _ptr__5798[_5801] = _5802;
          _ptr__5799[_5801] = _5803;
          ++ _5801;
        }
      }
    }
  }
}
double mosek::fusion::DenseMatrix :: get(int _5804,int _5805) { return mosek::fusion::p_DenseMatrix::_get_impl(this)->get(_5804,_5805); }double mosek::fusion::p_DenseMatrix::get(int _5804,int _5805){
  return ((*data)(safe_add( safe_mul( _5804,dimj ),_5805 )));
}
long long mosek::fusion::DenseMatrix :: numNonzeros() { return mosek::fusion::p_DenseMatrix::_get_impl(this)->numNonzeros(); }long long mosek::fusion::p_DenseMatrix::numNonzeros(){
  return (long long)safe_mul( dimi,dimj );
}
void mosek::fusion::p_DenseMatrix::destroy(){data.reset();}void mosek::fusion::DenseMatrix::destroy() { mosek::fusion::p_DenseMatrix::_get_impl(this)->destroy(); }mosek::fusion::SparseMatrix::SparseMatrix(mosek::fusion::p_SparseMatrix *_impl) : mosek::fusion::Matrix(_impl) { /*std::cout << "SparseMatrix()" << this << std::endl; */ }mosek::fusion::SparseMatrix::~SparseMatrix() {  /* std::cout << "~SparseMatrix()" << this << std::endl << std::flush; */ }mosek::fusion::p_SparseMatrix::p_SparseMatrix  (::mosek::fusion::SparseMatrix * _pubthis) :     mosek::fusion::p_Matrix(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SparseMatrix::t mosek::fusion::p_SparseMatrix::_new_SparseMatrix  (int _5806,    int _5807,    std::shared_ptr< monty::ndarray< int,1 > > _5808,    std::shared_ptr< monty::ndarray< int,1 > > _5809,    std::shared_ptr< monty::ndarray< double,1 > > _5810,    long long _5811){ return new mosek::fusion::SparseMatrix(_5806,_5807,_5808,_5809,_5810,_5811); }mosek::fusion::SparseMatrix::SparseMatrix  (int _5806,    int _5807,    std::shared_ptr< monty::ndarray< int,1 > > _5808,    std::shared_ptr< monty::ndarray< int,1 > > _5809,    std::shared_ptr< monty::ndarray< double,1 > > _5810,    long long _5811) :    SparseMatrix(new mosek::fusion::p_SparseMatrix(this)){ mosek::fusion::p_SparseMatrix::_get_impl(this)->_initialize(_5806,_5807,_5808,_5809,_5810,_5811); }void mosek::fusion::p_SparseMatrix::_initialize  (int _5806,    int _5807,    std::shared_ptr< monty::ndarray< int,1 > > _5808,    std::shared_ptr< monty::ndarray< int,1 > > _5809,    std::shared_ptr< monty::ndarray< double,1 > > _5810,    long long _5811){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5808(_5808 ? _5808->raw() : nullptr, _5808 ? _5808->size(0) : 0);
    _checked_ptr_1<int> _ptr__5809(_5809 ? _5809->raw() : nullptr, _5809 ? _5809->size(0) : 0);
    _checked_ptr_1<double> _ptr__5810(_5810 ? _5810->raw() : nullptr, _5810 ? _5810->size(0) : 0);
    mosek::fusion::p_Matrix::_initialize(_5806,_5807);
    if ((_5811 > (int)0))
    {
      {
        if ((((int)((_5808)->size(0)) < _5811) || (((int)((_5809)->size(0)) < _5811) || ((int)((_5810)->size(0)) < _5811))))
        {
          {
            throw ::mosek::fusion::SparseFormatError(std::string ("Mismatching arrays in sparse data."));
          }
        }
        {}
        bool _5812 = false;
        long long _9598 = (long long)0;
        long long _9599 = _5811;
        for (long long _5813 = _9598; _5813 < _9599; ++_5813)
        {
          {
            if (((_ptr__5808[_5813] < (int)0) || ((_ptr__5808[_5813] >= dimi) || ((_ptr__5809[_5813] < (int)0) || (_ptr__5809[_5813] >= dimj)))))
            {
              {
                _5812 = true;
              }
            }
            {}
          }
        }
        if (_5812)
        {
          {
            throw ::mosek::fusion::SparseFormatError(std::string ("Subscript out of bounds."));
          }
        }
        {}
        std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _5814 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 >(monty::shape((int)1)));
        std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _5815 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 >(monty::shape((int)1)));
        std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _5816 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 >(monty::shape((int)1)));
        ::mosek::fusion::p_CommonTools::tripletSort(_5808,_5809,_5810,_5814,_5815,_5816,_5811,dimi,dimj);
        subi = ((*_5814)((int)0));
        subj = ((*_5815)((int)0));
        val = ((*_5816)((int)0));
        nnz = (long long)((val)->size(0));
      }
    }
    else
    {
      {
        subi = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
        subj = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
        val = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0)));
        nnz = (long long)0;
      }
    }
  }
}mosek::fusion::SparseMatrix::t mosek::fusion::p_SparseMatrix::_new_SparseMatrix  (int _5817,    int _5818,    std::shared_ptr< monty::ndarray< int,1 > > _5819,    std::shared_ptr< monty::ndarray< int,1 > > _5820,    std::shared_ptr< monty::ndarray< double,1 > > _5821){ return new mosek::fusion::SparseMatrix(_5817,_5818,_5819,_5820,_5821); }mosek::fusion::SparseMatrix::SparseMatrix  (int _5817,    int _5818,    std::shared_ptr< monty::ndarray< int,1 > > _5819,    std::shared_ptr< monty::ndarray< int,1 > > _5820,    std::shared_ptr< monty::ndarray< double,1 > > _5821) :    SparseMatrix(new mosek::fusion::p_SparseMatrix(this)){ mosek::fusion::p_SparseMatrix::_get_impl(this)->_initialize(_5817,_5818,_5819,_5820,_5821); }void mosek::fusion::p_SparseMatrix::_initialize  (int _5817,    int _5818,    std::shared_ptr< monty::ndarray< int,1 > > _5819,    std::shared_ptr< monty::ndarray< int,1 > > _5820,    std::shared_ptr< monty::ndarray< double,1 > > _5821){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5819(_5819 ? _5819->raw() : nullptr, _5819 ? _5819->size(0) : 0);
    _checked_ptr_1<int> _ptr__5820(_5820 ? _5820->raw() : nullptr, _5820 ? _5820->size(0) : 0);
    _checked_ptr_1<double> _ptr__5821(_5821 ? _5821->raw() : nullptr, _5821 ? _5821->size(0) : 0);
    mosek::fusion::p_Matrix::_initialize(_5817,_5818);
    int _5822 = (int)0;
    int _9600 = (int)0;
    int _9601 = (int)((_5821)->size(0));
    for (int _5823 = _9600; _5823 < _9601; ++_5823)
    {
      {
        if (((_ptr__5821[_5823] > (int)0) || (_ptr__5821[_5823] < (int)0)))
        {
          {
            ++ _5822;
          }
        }
        {}
      }
    }
    if (((_5822 > (int)0) && (_5822 < (int)((_5819)->size(0)))))
    {
      {
        subi = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5822)));
        subj = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5822)));
        val = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5822)));
        nnz = _5822;
        int _5824 = (int)0;
        int _9602 = (int)0;
        int _9603 = (int)((_5821)->size(0));
        for (int _5825 = _9602; _5825 < _9603; ++_5825)
        {
          {
            if (((_ptr__5821[_5825] < (int)0) || (_ptr__5821[_5825] > (int)0)))
            {
              {
                ((*val)(_5824)) = _ptr__5821[_5825];
                ((*subj)(_5824)) = _ptr__5820[_5825];
                ((*subi)(_5824)) = _ptr__5819[_5825];
                ++ _5824;
              }
            }
            {}
          }
        }
      }
    }
    else
    {
      {
        subi = _5819;
        subj = _5820;
        val = _5821;
        if ((NULL == _5819.get()))
        {
          {
            nnz = (long long)0;
          }
        }
        else
        {
          {
            nnz = (long long)((subi)->size(0));
          }
        }
      }
    }
  }
}std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_SparseMatrix::formPtrb(){
  std::shared_ptr< monty::ndarray< long long,1 > > _5826 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( dimi,(int)1 ))));
  _checked_ptr_1<long long> _ptr__5826(_5826 ? _5826->raw() : nullptr,_5826 ? _5826->size(0) : 0);
  long long _5827 = (long long)0;
  int _9604 = (int)0;
  int _9605 = dimi;
  for (int _5828 = _9604; _5828 < _9605; ++_5828)
  {
    {
      _ptr__5826[_5828] = _5827;
      {
        for(;((_5827 < nnz) && (((*subi)(_5827)) == _5828));++ _5827)
        {
          {
          }
        }
      }
    }
  }
  _ptr__5826[dimi] = _5827;
  return _5826;
}
std::string mosek::fusion::SparseMatrix :: toString() { return mosek::fusion::p_SparseMatrix::_get_impl(this)->toString(); }std::string mosek::fusion::p_SparseMatrix::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _5829 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _5829->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("SparseMatrix("))->__mosek_2fusion_2Utils_2StringBuffer__a(dimi)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(dimj)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (", ["));
  if (((NULL != subi.get()) && ((int)((subi)->size(0)) > (int)0)))
  {
    {
      _5829->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("("))->__mosek_2fusion_2Utils_2StringBuffer__a(((*subi)((int)0)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*subj)((int)0)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*val)((int)0)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
      int _9606 = (int)1;
      int _9607 = (int)((subi)->size(0));
      for (int _5830 = _9606; _5830 < _9607; ++_5830)
      {
        {
          _5829->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",("))->__mosek_2fusion_2Utils_2StringBuffer__a(((*subi)(_5830)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*subj)(_5830)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*val)(_5830)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
        }
      }
    }
  }
  {}
  _5829->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" ])"));
  return _5829->toString();
}
long long mosek::fusion::SparseMatrix :: numNonzeros() { return mosek::fusion::p_SparseMatrix::_get_impl(this)->numNonzeros(); }long long mosek::fusion::p_SparseMatrix::numNonzeros(){
  return nnz;
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::SparseMatrix :: __mosek_2fusion_2SparseMatrix__transpose() { return mosek::fusion::p_SparseMatrix::_get_impl(this)->__mosek_2fusion_2SparseMatrix__transpose(); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::SparseMatrix::transpose() { return __mosek_2fusion_2SparseMatrix__transpose(); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::SparseMatrix::__mosek_2fusion_2Matrix__transpose() { return __mosek_2fusion_2SparseMatrix__transpose(); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_SparseMatrix::__mosek_2fusion_2SparseMatrix__transpose(){
  return ::mosek::fusion::p_Matrix::sparse(dimj,dimi,subj,subi,val);
}
bool mosek::fusion::SparseMatrix :: isSparse() { return mosek::fusion::p_SparseMatrix::_get_impl(this)->isSparse(); }bool mosek::fusion::p_SparseMatrix::isSparse(){
  return true;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SparseMatrix :: getDataAsArray() { return mosek::fusion::p_SparseMatrix::_get_impl(this)->getDataAsArray(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_SparseMatrix::getDataAsArray(){
  std::shared_ptr< monty::ndarray< double,1 > > _5831 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( dimi,dimj ))));
  _checked_ptr_1<double> _ptr__5831(_5831 ? _5831->raw() : nullptr,_5831 ? _5831->size(0) : 0);
  int _9608 = (int)0;
  int _9609 = (int)((subi)->size(0));
  for (int _5832 = _9608; _5832 < _9609; ++_5832)
  {
    {
      _ptr__5831[safe_add( safe_mul( ((*subi)(_5832)),dimj ),((*subj)(_5832)) )] = ((*val)(_5832));
    }
  }
  return _5831;
}
void mosek::fusion::SparseMatrix :: getDataAsTriplets(std::shared_ptr< monty::ndarray< int,1 > > _5833,std::shared_ptr< monty::ndarray< int,1 > > _5834,std::shared_ptr< monty::ndarray< double,1 > > _5835) { mosek::fusion::p_SparseMatrix::_get_impl(this)->getDataAsTriplets(_5833,_5834,_5835); }void mosek::fusion::p_SparseMatrix::getDataAsTriplets(std::shared_ptr< monty::ndarray< int,1 > > _5833,std::shared_ptr< monty::ndarray< int,1 > > _5834,std::shared_ptr< monty::ndarray< double,1 > > _5835){
  _checked_ptr_1<int> _ptr__5833(_5833 ? _5833->raw() : nullptr, _5833 ? _5833->size(0) : 0);
  _checked_ptr_1<int> _ptr__5834(_5834 ? _5834->raw() : nullptr, _5834 ? _5834->size(0) : 0);
  _checked_ptr_1<double> _ptr__5835(_5835 ? _5835->raw() : nullptr, _5835 ? _5835->size(0) : 0);
  if ((((long long)((_5833)->size(0)) < nnz) || (((long long)((_5834)->size(0)) < nnz) || ((long long)((_5835)->size(0)) < nnz))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Output arrays are not long enough."));
    }
  }
  {}
  if (((NULL != subi.get()) && ((int)((subi)->size(0)) > (int)0)))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(subi,(long long)0,_5833,(long long)0,nnz);
      ::mosek::fusion::Utils::Tools::arraycopy(subj,(long long)0,_5834,(long long)0,nnz);
      ::mosek::fusion::Utils::Tools::arraycopy(val,(long long)0,_5835,(long long)0,nnz);
    }
  }
  {}
}
double mosek::fusion::SparseMatrix :: get(int _5836,int _5837) { return mosek::fusion::p_SparseMatrix::_get_impl(this)->get(_5836,_5837); }double mosek::fusion::p_SparseMatrix::get(int _5836,int _5837){
  if (((_5836 < (int)0) || ((_5836 >= dimi) || ((_5837 < (int)0) || (_5837 >= dimj)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Index out if bounds"));
    }
  }
  {}
  int _5838 = (int)((subi)->size(0));
  int _5839 = (int)0;
  while ( ((_5838 - _5839) > (int)1) )
  {
    {
      int _5840 = (safe_add( _5839,_5838 ) / (int)2);
      if (((((*subi)(_5840)) < _5836) || ((((*subi)(_5840)) == _5836) && (((*subj)(_5840)) < _5837))))
      {
        {
          _5839 = _5840;
        }
      }
      else if(((((*subi)(_5840)) > _5836) || ((((*subi)(_5840)) == _5836) && (((*subj)(_5840)) > _5837))))
      {
        {
          _5838 = _5840;
        }
      }
      else
      {
        {
          return ((*val)(_5840));
        }
      }
    }
  }
  if (((((*subi)(_5839)) == _5836) && (((*subj)(_5839)) == _5837)))
  {
    {
      return ((*val)(_5839));
    }
  }
  else
  {
    {
      return 0.0;
    }
  }
}
void mosek::fusion::p_SparseMatrix::destroy(){val.reset();subj.reset();subi.reset();}void mosek::fusion::SparseMatrix::destroy() { mosek::fusion::p_SparseMatrix::_get_impl(this)->destroy(); }mosek::fusion::Matrix::Matrix(mosek::fusion::p_Matrix *_impl) : _impl(_impl) { /*std::cout << "Matrix() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Matrix::~Matrix() { delete _impl; _impl = nullptr; }mosek::fusion::p_Matrix::p_Matrix  (::mosek::fusion::Matrix * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::p_Matrix::_initialize  (int _5841,    int _5842){monty::rc_reserve __reserve_this(_pubthis);   {
    if (((_5841 < (int)0) || (_5842 < (int)0)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid dimensions"));
      }
    }
    {}
    dimi = _5841;
    dimj = _5842;
  }
}std::string mosek::fusion::Matrix :: toString() { return mosek::fusion::p_Matrix::_get_impl(this)->toString(); }std::string mosek::fusion::p_Matrix::toString(){
  return std::string ("");
}
void mosek::fusion::p_Matrix::switchDims(){
  int _5843 = dimi;
  dimi = dimj;
  dimj = _5843;
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( int _5844,    monty::rc_ptr< ::mosek::fusion::Matrix > _5845) { return mosek::fusion::p_Matrix::diag(_5844,_5845); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(int _5844,monty::rc_ptr< ::mosek::fusion::Matrix > _5845){
  std::vector<monty::rc_ptr< ::mosek::fusion::Matrix >> _9610;
  for (int _5846 = (int)0, _9611 = _5844; _5846 < _9611 ; ++_5846)
  {
    _9610.push_back(_5845);
  }
  auto _9612 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 >(monty::shape(_9610.size()),_9610.begin(),_9610.end()));
  return ::mosek::fusion::p_Matrix::diag(_9612);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > > _5847) { return mosek::fusion::p_Matrix::diag(_5847); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > > _5847){
  std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > > _5848 = _5847;
  long long _5849 = (long long)0;
  int _5850 = (int)0;
  int _5851 = (int)0;
  int _9613 = (int)0;
  int _9614 = (int)((_5847)->size(0));
  for (int _5852 = _9613; _5852 < _9614; ++_5852)
  {
    {
      _5851 = safe_add( _5851,mosek::fusion::p_Matrix::_get_impl(((*_5847)(_5852)))->dimi );
      _5850 = safe_add( _5850,mosek::fusion::p_Matrix::_get_impl(((*_5847)(_5852)))->dimj );
      _5849 = safe_add( _5849,((*_5847)(_5852))->numNonzeros() );
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _5853 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5849)));
  _checked_ptr_1<int> _ptr__5853(_5853 ? _5853->raw() : nullptr,_5853 ? _5853->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5854 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5849)));
  _checked_ptr_1<int> _ptr__5854(_5854 ? _5854->raw() : nullptr,_5854 ? _5854->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5855 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5849)));
  _checked_ptr_1<double> _ptr__5855(_5855 ? _5855->raw() : nullptr,_5855 ? _5855->size(0) : 0);
  {
    int _5856 = (int)0;
    int _5857 = (int)0;
    long long _5858 = (long long)0;
    int _9615 = (int)0;
    int _9616 = (int)((_5847)->size(0));
    for (int _5859 = _9615; _5859 < _9616; ++_5859)
    {
      {
        long long _5860 = ((*_5847)(_5859))->numNonzeros();
        std::shared_ptr< monty::ndarray< double,1 > > _5861 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5860)));
        _checked_ptr_1<double> _ptr__5861(_5861 ? _5861->raw() : nullptr,_5861 ? _5861->size(0) : 0);
        std::shared_ptr< monty::ndarray< int,1 > > _5862 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5860)));
        _checked_ptr_1<int> _ptr__5862(_5862 ? _5862->raw() : nullptr,_5862 ? _5862->size(0) : 0);
        std::shared_ptr< monty::ndarray< int,1 > > _5863 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5860)));
        _checked_ptr_1<int> _ptr__5863(_5863 ? _5863->raw() : nullptr,_5863 ? _5863->size(0) : 0);
        ((*_5847)(_5859))->getDataAsTriplets(_5863,_5862,_5861);
        ::mosek::fusion::Utils::Tools::arraycopy(_5861,(long long)0,_5855,_5858,_5860);
        long long _9617 = (long long)0;
        long long _9618 = _5860;
        for (long long _5864 = _9617; _5864 < _9618; ++_5864)
        {
          {
            _ptr__5853[safe_add( _5858,_5864 )] = safe_add( _ptr__5863[_5864],_5857 );
            _ptr__5854[safe_add( _5858,_5864 )] = safe_add( _ptr__5863[_5864],_5856 );
          }
        }
        _5858 = safe_add( _5858,_5860 );
        _5857 = safe_add( _5857,mosek::fusion::p_Matrix::_get_impl(((*_5847)(_5859)))->dimi );
        _5856 = safe_add( _5856,mosek::fusion::p_Matrix::_get_impl(((*_5847)(_5859)))->dimj );
      }
    }
  }
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_5851,_5850,_5853,_5854,_5855)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::antidiag  ( int _5865,    double _5866,    int _5867) { return mosek::fusion::p_Matrix::antidiag(_5865,_5866,_5867); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::antidiag(int _5865,double _5866,int _5867){
  if (((_5867 < _5865) && (_5867 >= (int)0)))
  {
    {
      return ::mosek::fusion::p_Matrix::antidiag(::mosek::fusion::Utils::Tools::makevector(_5866,(_5865 - _5867)),_5867);
    }
  }
  else if(((_5867 > (-_5865)) && (_5867 < (int)0)))
  {
    {
      return ::mosek::fusion::p_Matrix::antidiag(::mosek::fusion::Utils::Tools::makevector(_5866,safe_add( _5865,_5867 )),_5867);
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Diagonal index out of bounds"));
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::antidiag  ( int _5868,    double _5869) { return mosek::fusion::p_Matrix::antidiag(_5868,_5869); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::antidiag(int _5868,double _5869){
  return ::mosek::fusion::p_Matrix::antidiag(::mosek::fusion::Utils::Tools::makevector(_5869,_5868),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( int _5870,    double _5871,    int _5872) { return mosek::fusion::p_Matrix::diag(_5870,_5871,_5872); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(int _5870,double _5871,int _5872){
  if (((_5872 < _5870) && (_5872 >= (int)0)))
  {
    {
      return ::mosek::fusion::p_Matrix::diag(::mosek::fusion::Utils::Tools::makevector(_5871,(_5870 - _5872)),_5872);
    }
  }
  else if(((_5872 > (-_5870)) && (_5872 < (int)0)))
  {
    {
      return ::mosek::fusion::p_Matrix::diag(::mosek::fusion::Utils::Tools::makevector(_5871,safe_add( _5870,_5872 )),_5872);
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Diagonal index out of bounds"));
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( int _5873,    double _5874) { return mosek::fusion::p_Matrix::diag(_5873,_5874); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(int _5873,double _5874){
  return ::mosek::fusion::p_Matrix::diag(::mosek::fusion::Utils::Tools::makevector(_5874,_5873),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::antidiag  ( std::shared_ptr< monty::ndarray< double,1 > > _5875,    int _5876) { return mosek::fusion::p_Matrix::antidiag(_5875,_5876); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::antidiag(std::shared_ptr< monty::ndarray< double,1 > > _5875,int _5876){
  _checked_ptr_1<double> _ptr__5875(_5875 ? _5875->raw() : nullptr, _5875 ? _5875->size(0) : 0);
  int _9619;
  bool _9620 = (_5876 > (int)0);
  if (_9620)
  {
    _9619 = _5876;
  }
  else
  {
    _9619 = (-_5876);
  }
  int _5877 = _9619;
  int _5878 = safe_add( (int)((_5875)->size(0)),_5877 );
  int _5879 = (int)((_5875)->size(0));
  if ((_5876 >= (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _5880 = ::mosek::fusion::Utils::Tools::range(_5876,safe_add( _5879,_5876 ));
      _checked_ptr_1<int> _ptr__5880(_5880 ? _5880->raw() : nullptr,_5880 ? _5880->size(0) : 0);
      std::vector<int> _9621;
      for (int _5882 = (int)1, _9622 = safe_add( _5879,(int)1 ); _5882 < _9622 ; ++_5882)
      {
        _9621.push_back((safe_add( _5879,_5876 ) - _5882));
      }
      auto _9623 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9621.size()),_9621.begin(),_9621.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _5881 = _9623;
      _checked_ptr_1<int> _ptr__5881(_5881 ? _5881->raw() : nullptr,_5881 ? _5881->size(0) : 0);
      return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_5878,_5878,_5880,_5881,_5875)).as<::mosek::fusion::Matrix>();
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _5883 = ::mosek::fusion::Utils::Tools::range((int)0,_5879);
      _checked_ptr_1<int> _ptr__5883(_5883 ? _5883->raw() : nullptr,_5883 ? _5883->size(0) : 0);
      std::vector<int> _9624;
      for (int _5885 = (int)1, _9625 = safe_add( _5879,(int)1 ); _5885 < _9625 ; ++_5885)
      {
        _9624.push_back((_5879 - _5885));
      }
      auto _9626 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9624.size()),_9624.begin(),_9624.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _5884 = _9626;
      _checked_ptr_1<int> _ptr__5884(_5884 ? _5884->raw() : nullptr,_5884 ? _5884->size(0) : 0);
      return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_5878,_5878,_5883,_5884,_5875)).as<::mosek::fusion::Matrix>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::antidiag  ( std::shared_ptr< monty::ndarray< double,1 > > _5886) { return mosek::fusion::p_Matrix::antidiag(_5886); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::antidiag(std::shared_ptr< monty::ndarray< double,1 > > _5886){
  _checked_ptr_1<double> _ptr__5886(_5886 ? _5886->raw() : nullptr, _5886 ? _5886->size(0) : 0);
  return ::mosek::fusion::p_Matrix::antidiag(_5886,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( std::shared_ptr< monty::ndarray< double,1 > > _5887,    int _5888) { return mosek::fusion::p_Matrix::diag(_5887,_5888); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(std::shared_ptr< monty::ndarray< double,1 > > _5887,int _5888){
  _checked_ptr_1<double> _ptr__5887(_5887 ? _5887->raw() : nullptr, _5887 ? _5887->size(0) : 0);
  int _9627;
  bool _9628 = (_5888 > (int)0);
  if (_9628)
  {
    _9627 = _5888;
  }
  else
  {
    _9627 = (-_5888);
  }
  int _5889 = _9627;
  int _5890 = safe_add( (int)((_5887)->size(0)),_5889 );
  int _5891 = (int)((_5887)->size(0));
  if ((_5888 >= (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _5892 = ::mosek::fusion::Utils::Tools::range((int)0,_5891);
      _checked_ptr_1<int> _ptr__5892(_5892 ? _5892->raw() : nullptr,_5892 ? _5892->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _5893 = ::mosek::fusion::Utils::Tools::range(_5889,safe_add( _5891,_5889 ));
      _checked_ptr_1<int> _ptr__5893(_5893 ? _5893->raw() : nullptr,_5893 ? _5893->size(0) : 0);
      return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_5890,_5890,_5892,_5893,_5887)).as<::mosek::fusion::Matrix>();
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _5894 = ::mosek::fusion::Utils::Tools::range(_5889,safe_add( _5891,_5889 ));
      _checked_ptr_1<int> _ptr__5894(_5894 ? _5894->raw() : nullptr,_5894 ? _5894->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _5895 = ::mosek::fusion::Utils::Tools::range((int)0,_5891);
      _checked_ptr_1<int> _ptr__5895(_5895 ? _5895->raw() : nullptr,_5895 ? _5895->size(0) : 0);
      return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_5890,_5890,_5894,_5895,_5887)).as<::mosek::fusion::Matrix>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( std::shared_ptr< monty::ndarray< double,1 > > _5896) { return mosek::fusion::p_Matrix::diag(_5896); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(std::shared_ptr< monty::ndarray< double,1 > > _5896){
  _checked_ptr_1<double> _ptr__5896(_5896 ? _5896->raw() : nullptr, _5896 ? _5896->size(0) : 0);
  return ::mosek::fusion::p_Matrix::diag(_5896,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::ones  ( int _5897,    int _5898) { return mosek::fusion::p_Matrix::ones(_5897,_5898); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::ones(int _5897,int _5898){
  return ::mosek::fusion::p_Matrix::dense(_5897,_5898,1.0);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::eye  ( int _5899) { return mosek::fusion::p_Matrix::eye(_5899); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::eye(int _5899){
  std::vector<double> _9629;
  for (int _5900 = (int)0, _9630 = _5899; _5900 < _9630 ; ++_5900)
  {
    _9629.push_back(1.0);
  }
  auto _9631 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9629.size()),_9629.begin(),_9629.end()));
  return ::mosek::fusion::p_Matrix::diag(_9631);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::dense  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5901) { return mosek::fusion::p_Matrix::dense(_5901); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::dense(monty::rc_ptr< ::mosek::fusion::Matrix > _5901){
  return (::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_5901)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::dense  ( int _5902,    int _5903,    double _5904) { return mosek::fusion::p_Matrix::dense(_5902,_5903,_5904); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::dense(int _5902,int _5903,double _5904){
  return (::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_5902,_5903,_5904)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::dense  ( int _5905,    int _5906,    std::shared_ptr< monty::ndarray< double,1 > > _5907) { return mosek::fusion::p_Matrix::dense(_5905,_5906,_5907); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::dense(int _5905,int _5906,std::shared_ptr< monty::ndarray< double,1 > > _5907){
  _checked_ptr_1<double> _ptr__5907(_5907 ? _5907->raw() : nullptr, _5907 ? _5907->size(0) : 0);
  return (::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_5905,_5906,_5907)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::dense  ( std::shared_ptr< monty::ndarray< double,2 > > _5908) { return mosek::fusion::p_Matrix::dense(_5908); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::dense(std::shared_ptr< monty::ndarray< double,2 > > _5908){
  return (::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_5908)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5909) { return mosek::fusion::p_Matrix::sparse(_5909); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(monty::rc_ptr< ::mosek::fusion::Matrix > _5909){
  std::shared_ptr< monty::ndarray< int,1 > > _5910 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5909->numNonzeros())));
  _checked_ptr_1<int> _ptr__5910(_5910 ? _5910->raw() : nullptr,_5910 ? _5910->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5911 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5909->numNonzeros())));
  _checked_ptr_1<int> _ptr__5911(_5911 ? _5911->raw() : nullptr,_5911 ? _5911->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5912 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5909->numNonzeros())));
  _checked_ptr_1<double> _ptr__5912(_5912 ? _5912->raw() : nullptr,_5912 ? _5912->size(0) : 0);
  _5909->getDataAsTriplets(_5910,_5911,_5912);
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_5909->numRows(),_5909->numColumns(),_5910,_5911,_5912)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > >,1 > > _5913) { return mosek::fusion::p_Matrix::sparse(_5913); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > >,1 > > _5913){
  int _5914 = (int)((_5913)->size(0));
  int _5915 = (int)((((*_5913)((int)0)))->size(0));
  std::shared_ptr< monty::ndarray< int,1 > > _5916 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5914)));
  _checked_ptr_1<int> _ptr__5916(_5916 ? _5916->raw() : nullptr,_5916 ? _5916->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5917 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5915)));
  _checked_ptr_1<int> _ptr__5917(_5917 ? _5917->raw() : nullptr,_5917 ? _5917->size(0) : 0);
  long long _5918 = (long long)0;
  int _5919 = (int)0;
  {
    int _5920 = (int)0;
    for(;(_5920 < _5914);++ _5920)
    {
      {
        {
          int _5921 = (int)0;
          for(;(_5921 < _5915);++ _5921)
          {
            {
              monty::rc_ptr< ::mosek::fusion::Matrix > _5922 = ((*((*_5913)(_5920)))(_5921));
              if ((NULL != _5922.get()))
              {
                {
                  if ((_ptr__5917[_5921] == (int)0))
                  {
                    {
                      _ptr__5917[_5921] = mosek::fusion::p_Matrix::_get_impl(_5922)->dimj;
                    }
                  }
                  else if((_ptr__5917[_5921] != mosek::fusion::p_Matrix::_get_impl(_5922)->dimj))
                  {
                    {
                      throw ::mosek::fusion::SparseFormatError(std::string ("Sparse matrix construction blocks are not aligned"));
                    }
                  }
                  {}
                  if ((_ptr__5916[_5920] == (int)0))
                  {
                    {
                      _ptr__5916[_5920] = mosek::fusion::p_Matrix::_get_impl(_5922)->dimi;
                    }
                  }
                  else if((_ptr__5916[_5920] != mosek::fusion::p_Matrix::_get_impl(_5922)->dimi))
                  {
                    {
                      throw ::mosek::fusion::SparseFormatError(std::string ("Sparse matrix construction blocks are not aligned"));
                    }
                  }
                  {}
                  _5918 = safe_add( _5918,_5922->numNonzeros() );
                }
              }
              {}
              ++ _5919;
            }
          }
        }
      }
    }
  }
  std::shared_ptr< monty::ndarray< double,1 > > _5923 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5918)));
  _checked_ptr_1<double> _ptr__5923(_5923 ? _5923->raw() : nullptr,_5923 ? _5923->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5924 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5918)));
  _checked_ptr_1<int> _ptr__5924(_5924 ? _5924->raw() : nullptr,_5924 ? _5924->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5925 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5918)));
  _checked_ptr_1<int> _ptr__5925(_5925 ? _5925->raw() : nullptr,_5925 ? _5925->size(0) : 0);
  int _5926 = (int)0;
  int _5927 = (int)0;
  {
    int _5928 = (int)0;
    for(;(_5928 < _5914);++ _5928)
    {
      {
        std::shared_ptr< monty::ndarray< int,1 > > _5929 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5915)));
        _checked_ptr_1<int> _ptr__5929(_5929 ? _5929->raw() : nullptr,_5929 ? _5929->size(0) : 0);
        {
          int _5930 = (int)0;
          for(;(_5930 < _ptr__5916[_5928]);++ _5930)
          {
            {
              int _5931 = (int)0;
              {
                int _5932 = (int)0;
                for(;(_5932 < _5915);++ _5932)
                {
                  {
                    monty::rc_ptr< ::mosek::fusion::Matrix > _5933 = ((*((*_5913)(_5928)))(_5932));
                    if ((NULL != _5933.get()))
                    {
                      {
                        monty::rc_ptr< ::mosek::fusion::Matrix > _9632 = _5933;
                        if (false) {}
                        else if (nullptr != dynamic_cast<::mosek::fusion::DenseMatrix*>(_9632.get()))
                        {
                          ::mosek::fusion::DenseMatrix::t _5934 (dynamic_cast<::mosek::fusion::DenseMatrix*>(_9632.get()));
                          {
                            int _5937 = _ptr__5929[_5932];
                            {
                              int _5938 = (int)0;
                              for(;(_5938 < mosek::fusion::p_Matrix::_get_impl(_5934)->dimj);++ _5938)
                              {
                                {
                                  _ptr__5923[_5926] = ((*mosek::fusion::p_DenseMatrix::_get_impl(_5934)->data)(_5937));
                                  _ptr__5924[_5926] = safe_add( _5927,_5930 );
                                  _ptr__5925[_5926] = safe_add( _5931,_5938 );
                                  ++ _5937;
                                  ++ _5926;
                                }
                              }
                            }
                            _ptr__5929[_5932] = _5937;
                          }
                        }
                        else if (nullptr != dynamic_cast<::mosek::fusion::SparseMatrix*>(_9632.get()))
                        {
                          ::mosek::fusion::SparseMatrix::t _5935 (dynamic_cast<::mosek::fusion::SparseMatrix*>(_9632.get()));
                          {
                            int _5939;
                            {
                              _5939 = _ptr__5929[_5932];
                              for(;((_5939 < mosek::fusion::p_SparseMatrix::_get_impl(_5935)->nnz) && (((*mosek::fusion::p_SparseMatrix::_get_impl(_5935)->subi)(_5939)) == _5930));++ _5939)
                              {
                                {
                                  _ptr__5923[_5926] = ((*mosek::fusion::p_SparseMatrix::_get_impl(_5935)->val)(_5939));
                                  _ptr__5925[_5926] = safe_add( ((*mosek::fusion::p_SparseMatrix::_get_impl(_5935)->subj)(_5939)),_5931 );
                                  _ptr__5924[_5926] = safe_add( _5927,_5930 );
                                  ++ _5926;
                                }
                              }
                            }
                            _ptr__5929[_5932] = _5939;
                          }
                        }
                        else
                        {
                          mosek::fusion::Matrix::t _5936 = _9632;
                          {
                            throw ::mosek::fusion::MatrixError(std::string ("Unknown matrix type."));
                          }
                        }
                      }
                    }
                    {}
                    _5931 = safe_add( _5931,_ptr__5917[_5932] );
                  }
                }
              }
            }
          }
        }
        _5927 = safe_add( _5927,_ptr__5916[_5928] );
      }
    }
  }
  int _5940 = (int)0;
  int _5941 = (int)0;
  {
    int _5942 = (int)0;
    for(;(_5942 < _5914);++ _5942)
    {
      {
        _5940 = safe_add( _5940,_ptr__5916[_5942] );
      }
    }
  }
  {
    int _5943 = (int)0;
    for(;(_5943 < _5915);++ _5943)
    {
      {
        _5941 = safe_add( _5941,_ptr__5917[_5943] );
      }
    }
  }
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_5940,_5941,_5924,_5925,_5923)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( std::shared_ptr< monty::ndarray< double,2 > > _5944) { return mosek::fusion::p_Matrix::sparse(_5944); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(std::shared_ptr< monty::ndarray< double,2 > > _5944){
  int _5945 = (int)((_5944)->size(0));
  int _5946 = (int)((_5944)->size(1));
  long long _5947 = (long long)safe_mul( _5945,_5946 );
  int _5948 = (int)0;
  std::shared_ptr< monty::ndarray< int,1 > > _5949 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5947)));
  _checked_ptr_1<int> _ptr__5949(_5949 ? _5949->raw() : nullptr,_5949 ? _5949->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5950 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5947)));
  _checked_ptr_1<int> _ptr__5950(_5950 ? _5950->raw() : nullptr,_5950 ? _5950->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5951 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5947)));
  _checked_ptr_1<double> _ptr__5951(_5951 ? _5951->raw() : nullptr,_5951 ? _5951->size(0) : 0);
  {
    int _5952 = (int)0;
    for(;(_5952 < _5945);++ _5952)
    {
      {
        {
          int _5953 = (int)0;
          for(;(_5953 < _5946);++ _5953)
          {
            {
              _ptr__5949[_5948] = _5952;
              _ptr__5950[_5948] = _5953;
              _ptr__5951[_5948] = ((*_5944)(_5952,_5953));
              ++ _5948;
            }
          }
        }
      }
    }
  }
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_5945,_5946,_5949,_5950,_5951)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( int _5954,    int _5955) { return mosek::fusion::p_Matrix::sparse(_5954,_5955); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(int _5954,int _5955){
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_5954,_5955,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),(long long)0)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( int _5956,    int _5957,    std::shared_ptr< monty::ndarray< int,1 > > _5958,    std::shared_ptr< monty::ndarray< int,1 > > _5959,    double _5960) { return mosek::fusion::p_Matrix::sparse(_5956,_5957,_5958,_5959,_5960); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(int _5956,int _5957,std::shared_ptr< monty::ndarray< int,1 > > _5958,std::shared_ptr< monty::ndarray< int,1 > > _5959,double _5960){
  _checked_ptr_1<int> _ptr__5958(_5958 ? _5958->raw() : nullptr, _5958 ? _5958->size(0) : 0);
  _checked_ptr_1<int> _ptr__5959(_5959 ? _5959->raw() : nullptr, _5959 ? _5959->size(0) : 0);
  int _5961 = (int)0;
  if ((NULL != _5958.get()))
  {
    {
      _5961 = (int)((_5958)->size(0));
    }
  }
  else if((NULL != _5959.get()))
  {
    {
      _5961 = (int)((_5959)->size(0));
    }
  }
  {}
  return ::mosek::fusion::p_Matrix::sparse(_5956,_5957,_5958,_5959,::mosek::fusion::Utils::Tools::makevector(_5960,_5961));
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( std::shared_ptr< monty::ndarray< int,1 > > _5962,    std::shared_ptr< monty::ndarray< int,1 > > _5963,    double _5964) { return mosek::fusion::p_Matrix::sparse(_5962,_5963,_5964); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(std::shared_ptr< monty::ndarray< int,1 > > _5962,std::shared_ptr< monty::ndarray< int,1 > > _5963,double _5964){
  _checked_ptr_1<int> _ptr__5962(_5962 ? _5962->raw() : nullptr, _5962 ? _5962->size(0) : 0);
  _checked_ptr_1<int> _ptr__5963(_5963 ? _5963->raw() : nullptr, _5963 ? _5963->size(0) : 0);
  int _5965 = (int)0;
  int _5966 = (int)0;
  int _5967 = (int)((_5962)->size(0));
  if ((_5967 > (int)((_5963)->size(0))))
  {
    {
      _5967 = (int)((_5963)->size(0));
    }
  }
  {}
  int _9633 = (int)0;
  int _9634 = _5967;
  for (int _5968 = _9633; _5968 < _9634; ++_5968)
  {
    {
      if ((_5966 < _ptr__5962[_5968]))
      {
        {
          _5966 = _ptr__5962[_5968];
        }
      }
      {}
      if ((_5965 < _ptr__5963[_5968]))
      {
        {
          _5965 = _ptr__5963[_5968];
        }
      }
      {}
    }
  }
  return ::mosek::fusion::p_Matrix::sparse(safe_add( _5966,(int)1 ),safe_add( _5965,(int)1 ),_5962,_5963,_5964);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( std::shared_ptr< monty::ndarray< int,1 > > _5969,    std::shared_ptr< monty::ndarray< int,1 > > _5970,    std::shared_ptr< monty::ndarray< double,1 > > _5971) { return mosek::fusion::p_Matrix::sparse(_5969,_5970,_5971); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(std::shared_ptr< monty::ndarray< int,1 > > _5969,std::shared_ptr< monty::ndarray< int,1 > > _5970,std::shared_ptr< monty::ndarray< double,1 > > _5971){
  _checked_ptr_1<int> _ptr__5969(_5969 ? _5969->raw() : nullptr, _5969 ? _5969->size(0) : 0);
  _checked_ptr_1<int> _ptr__5970(_5970 ? _5970->raw() : nullptr, _5970 ? _5970->size(0) : 0);
  _checked_ptr_1<double> _ptr__5971(_5971 ? _5971->raw() : nullptr, _5971 ? _5971->size(0) : 0);
  int _5972 = (int)0;
  int _5973 = (int)0;
  int _5974 = (int)((_5969)->size(0));
  if ((_5974 > (int)((_5970)->size(0))))
  {
    {
      _5974 = (int)((_5970)->size(0));
    }
  }
  {}
  if ((_5974 > (int)((_5971)->size(0))))
  {
    {
      _5974 = (int)((_5971)->size(0));
    }
  }
  {}
  int _9635 = (int)0;
  int _9636 = _5974;
  for (int _5975 = _9635; _5975 < _9636; ++_5975)
  {
    {
      if ((_5973 < _ptr__5969[_5975]))
      {
        {
          _5973 = _ptr__5969[_5975];
        }
      }
      {}
      if ((_5972 < _ptr__5970[_5975]))
      {
        {
          _5972 = _ptr__5970[_5975];
        }
      }
      {}
    }
  }
  return ::mosek::fusion::p_Matrix::sparse(safe_add( _5973,(int)1 ),safe_add( _5972,(int)1 ),_5969,_5970,_5971);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( int _5976,    int _5977,    std::shared_ptr< monty::ndarray< int,1 > > _5978,    std::shared_ptr< monty::ndarray< int,1 > > _5979,    std::shared_ptr< monty::ndarray< double,1 > > _5980) { return mosek::fusion::p_Matrix::sparse(_5976,_5977,_5978,_5979,_5980); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(int _5976,int _5977,std::shared_ptr< monty::ndarray< int,1 > > _5978,std::shared_ptr< monty::ndarray< int,1 > > _5979,std::shared_ptr< monty::ndarray< double,1 > > _5980){
  _checked_ptr_1<int> _ptr__5978(_5978 ? _5978->raw() : nullptr, _5978 ? _5978->size(0) : 0);
  _checked_ptr_1<int> _ptr__5979(_5979 ? _5979->raw() : nullptr, _5979 ? _5979->size(0) : 0);
  _checked_ptr_1<double> _ptr__5980(_5980 ? _5980->raw() : nullptr, _5980 ? _5980->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _9637;
  bool _9638 = (NULL != _5980.get());
  if (_9638)
  {
    _9637 = _5980;
  }
  else
  {
    _9637 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0)));
  }
  std::shared_ptr< monty::ndarray< double,1 > > _5981 = _9637;
  _checked_ptr_1<double> _ptr__5981(_5981 ? _5981->raw() : nullptr,_5981 ? _5981->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _9639;
  bool _9640 = (NULL != _5979.get());
  if (_9640)
  {
    _9639 = _5979;
  }
  else
  {
    _9639 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
  }
  std::shared_ptr< monty::ndarray< int,1 > > _5982 = _9639;
  _checked_ptr_1<int> _ptr__5982(_5982 ? _5982->raw() : nullptr,_5982 ? _5982->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _9641;
  bool _9642 = (NULL != _5978.get());
  if (_9642)
  {
    _9641 = _5978;
  }
  else
  {
    _9641 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
  }
  std::shared_ptr< monty::ndarray< int,1 > > _5983 = _9641;
  _checked_ptr_1<int> _ptr__5983(_5983 ? _5983->raw() : nullptr,_5983 ? _5983->size(0) : 0);
  long long _5984 = (long long)((_5983)->size(0));
  if ((((long long)((_5982)->size(0)) != _5984) || ((long long)((_5981)->size(0)) != _5984)))
  {
    {
      throw ::mosek::fusion::SparseFormatError(std::string ("Arrays defining sparse data have different lengths"));
    }
  }
  {}
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_5976,_5977,_5983,_5982,_5981,_5984)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix :: transpose() { return __mosek_2fusion_2Matrix__transpose(); }
int mosek::fusion::Matrix :: numColumns() { return mosek::fusion::p_Matrix::_get_impl(this)->numColumns(); }int mosek::fusion::p_Matrix::numColumns(){
  return dimj;
}
int mosek::fusion::Matrix :: numRows() { return mosek::fusion::p_Matrix::_get_impl(this)->numRows(); }int mosek::fusion::p_Matrix::numRows(){
  return dimi;
}
void mosek::fusion::p_Matrix::destroy(){}void mosek::fusion::Matrix::destroy() { mosek::fusion::p_Matrix::_get_impl(this)->destroy(); }mosek::fusion::UnimplementedError::UnimplementedError  ( const std::string &  _5990) : RuntimeException(_5990)  {
  }
mosek::fusion::FatalError::FatalError  ( const std::string &  _5991) : RuntimeException(_5991)  {
  }
mosek::fusion::UnexpectedError::UnexpectedError  ( ::mosek::fusion::FusionException _5992) : RuntimeException(_5992.toString())  {
  }
mosek::fusion::UnexpectedError::UnexpectedError  ( const std::string &  _5993) : RuntimeException(_5993)  {
  }
mosek::fusion::SparseFormatError::SparseFormatError  ( const std::string &  _5994) : mosek::fusion::FusionRuntimeException(_5994)  {
  }
mosek::fusion::SolutionError::SolutionError  ( ) : mosek::fusion::FusionException(std::string ("Solution is invalid or undefined"))  {
  }
mosek::fusion::SolutionError::SolutionError  ( const std::string &  _5995) : mosek::fusion::FusionException(_5995)  {
  }
mosek::fusion::SliceError::SliceError  ( ) : mosek::fusion::FusionRuntimeException(std::string ("Invalid slice range"))  {
  }
mosek::fusion::SliceError::SliceError  ( const std::string &  _5996) : mosek::fusion::FusionRuntimeException(_5996)  {
  }
mosek::fusion::SetDefinitionError::SetDefinitionError  ( const std::string &  _5997) : mosek::fusion::FusionRuntimeException(_5997)  {
  }
mosek::fusion::OptimizeError::OptimizeError  ( const std::string &  _5998) : mosek::fusion::FusionRuntimeException(_5998)  {
  }
mosek::fusion::NameError::NameError  ( const std::string &  _5999) : mosek::fusion::FusionRuntimeException(_5999)  {
  }
mosek::fusion::ModelError::ModelError  ( const std::string &  _6000) : mosek::fusion::FusionRuntimeException(_6000)  {
  }
mosek::fusion::MatrixError::MatrixError  ( const std::string &  _6001) : mosek::fusion::FusionRuntimeException(_6001)  {
  }
mosek::fusion::DimensionError::DimensionError  ( const std::string &  _6002) : mosek::fusion::FusionRuntimeException(_6002)  {
  }
mosek::fusion::LengthError::LengthError  ( const std::string &  _6003) : mosek::fusion::FusionRuntimeException(_6003)  {
  }
mosek::fusion::RangeError::RangeError  ( const std::string &  _6004) : mosek::fusion::FusionRuntimeException(_6004)  {
  }
mosek::fusion::IndexError::IndexError  ( const std::string &  _6005) : mosek::fusion::FusionRuntimeException(_6005)  {
  }
mosek::fusion::DomainError::DomainError  ( const std::string &  _6006) : mosek::fusion::FusionRuntimeException(_6006)  {
  }
mosek::fusion::ValueConversionError::ValueConversionError  ( const std::string &  _6007) : mosek::fusion::FusionRuntimeException(_6007)  {
  }
mosek::fusion::ParameterError::ParameterError  ( const std::string &  _6008) : mosek::fusion::FusionRuntimeException(_6008)  {
  }
mosek::fusion::ExpressionError::ExpressionError  ( const std::string &  _6009) : mosek::fusion::FusionRuntimeException(_6009)  {
  }
mosek::fusion::IOError::IOError  ( const std::string &  _6010) : mosek::fusion::FusionRuntimeException(_6010)  {
  }
mosek::fusion::FusionRuntimeException::FusionRuntimeException  ( const std::string &  _6011) : RuntimeException(_6011)  {
    msg = _6011;
  }
std::string mosek::fusion::FusionRuntimeException::toString(){
  return msg;
}
mosek::fusion::FusionException::FusionException  ( const std::string &  _6012) : Exception(_6012)  {
    msg = _6012;
  }
std::string mosek::fusion::FusionException::toString(){
  return msg;
}
mosek::fusion::LinkedBlocks::LinkedBlocks(mosek::fusion::p_LinkedBlocks *_impl) : _impl(_impl) { /*std::cout << "LinkedBlocks() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::LinkedBlocks::~LinkedBlocks() { delete _impl; _impl = nullptr; }mosek::fusion::p_LinkedBlocks::p_LinkedBlocks  (::mosek::fusion::LinkedBlocks * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::LinkedBlocks::t mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks  (){ return new mosek::fusion::LinkedBlocks(); }mosek::fusion::LinkedBlocks::LinkedBlocks  () :    LinkedBlocks(new mosek::fusion::p_LinkedBlocks(this)){ mosek::fusion::p_LinkedBlocks::_get_impl(this)->_initialize(); }void mosek::fusion::p_LinkedBlocks::_initialize  (){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_LinkedBlocks::_initialize((int)0);
  }
}mosek::fusion::LinkedBlocks::t mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks  (int _6013){ return new mosek::fusion::LinkedBlocks(_6013); }mosek::fusion::LinkedBlocks::LinkedBlocks  (int _6013) :    LinkedBlocks(new mosek::fusion::p_LinkedBlocks(this)){ mosek::fusion::p_LinkedBlocks::_get_impl(this)->_initialize(_6013); }void mosek::fusion::p_LinkedBlocks::_initialize  (int _6013){monty::rc_reserve __reserve_this(_pubthis);   {
    ints = ::mosek::fusion::p_LinkedInts::_new_LinkedInts(_6013);
    blocks = ::mosek::fusion::p_LinkedInts::_new_LinkedInts((int)128);
    bsize = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)128)));
    bfirst = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)128)));
  }
}mosek::fusion::LinkedBlocks::t mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks  (monty::rc_ptr< ::mosek::fusion::LinkedBlocks > _6014){ return new mosek::fusion::LinkedBlocks(_6014); }mosek::fusion::LinkedBlocks::LinkedBlocks  (monty::rc_ptr< ::mosek::fusion::LinkedBlocks > _6014) :    LinkedBlocks(new mosek::fusion::p_LinkedBlocks(this)){ mosek::fusion::p_LinkedBlocks::_get_impl(this)->_initialize(_6014); }void mosek::fusion::p_LinkedBlocks::_initialize  (monty::rc_ptr< ::mosek::fusion::LinkedBlocks > _6014){monty::rc_reserve __reserve_this(_pubthis);   {
    ints = ::mosek::fusion::p_LinkedInts::_new_LinkedInts(mosek::fusion::p_LinkedBlocks::_get_impl(_6014)->ints);
    blocks = ::mosek::fusion::p_LinkedInts::_new_LinkedInts(mosek::fusion::p_LinkedBlocks::_get_impl(_6014)->blocks);
    bsize = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinkedBlocks::_get_impl(_6014)->bsize);
    bfirst = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinkedBlocks::_get_impl(_6014)->bfirst);
  }
}void mosek::fusion::LinkedBlocks :: free(int _6015) { mosek::fusion::p_LinkedBlocks::_get_impl(this)->free(_6015); }void mosek::fusion::p_LinkedBlocks::free(int _6015){
  int _6016 = ((*bfirst)(_6015));
  ints->free(_6015,((*bsize)(_6015)));
  ((*bsize)(_6015)) = (-(int)1);
  ((*bfirst)(_6015)) = (-(int)1);
  blocks->free(_6016,(int)1);
}
int mosek::fusion::LinkedBlocks :: alloc(int _6017) { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->alloc(_6017); }int mosek::fusion::p_LinkedBlocks::alloc(int _6017){
  int _9643;
  bool _9644 = (_6017 > (int)0);
  if (_9644)
  {
    _9643 = ints->alloc(_6017);
  }
  else
  {
    _9643 = (-(int)1);
  }
  int _6018 = _9643;
  int _6019 = blocks->alloc();
  if ((blocks->capacity() > (int)((bsize)->size(0))))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _6020 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(blocks->capacity())));
      _checked_ptr_1<int> _ptr__6020(_6020 ? _6020->raw() : nullptr,_6020 ? _6020->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _6021 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(blocks->capacity())));
      _checked_ptr_1<int> _ptr__6021(_6021 ? _6021->raw() : nullptr,_6021 ? _6021->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(bsize,(int)0,_6020,(int)0,(int)((bsize)->size(0)));
      ::mosek::fusion::Utils::Tools::arraycopy(bfirst,(int)0,_6021,(int)0,(int)((bfirst)->size(0)));
      bsize = _6020;
      bfirst = _6021;
    }
  }
  {}
  ((*bfirst)(_6019)) = _6018;
  ((*bsize)(_6019)) = _6017;
  return _6019;
}
int mosek::fusion::LinkedBlocks :: maxidx(int _6022) { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->maxidx(_6022); }int mosek::fusion::p_LinkedBlocks::maxidx(int _6022){
  return ints->maxidx(((*bfirst)(_6022)),((*bsize)(_6022)));
}
void mosek::fusion::LinkedBlocks :: get(int _6023,std::shared_ptr< monty::ndarray< int,1 > > _6024,int _6025) { mosek::fusion::p_LinkedBlocks::_get_impl(this)->get(_6023,_6024,_6025); }void mosek::fusion::p_LinkedBlocks::get(int _6023,std::shared_ptr< monty::ndarray< int,1 > > _6024,int _6025){
  _checked_ptr_1<int> _ptr__6024(_6024 ? _6024->raw() : nullptr, _6024 ? _6024->size(0) : 0);
  ints->get(((*bfirst)(_6023)),((*bsize)(_6023)),_6024,_6025);
}
int mosek::fusion::LinkedBlocks :: numblocks() { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->numblocks(); }int mosek::fusion::p_LinkedBlocks::numblocks(){
  return (int)((bsize)->size(0));
}
int mosek::fusion::LinkedBlocks :: blocksize(int _6026) { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->blocksize(_6026); }int mosek::fusion::p_LinkedBlocks::blocksize(int _6026){
  return ((*bsize)(_6026));
}
int mosek::fusion::LinkedBlocks :: capacity() { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->capacity(); }int mosek::fusion::p_LinkedBlocks::capacity(){
  return ints->capacity();
}
bool mosek::fusion::LinkedBlocks :: validate() { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->validate(); }bool mosek::fusion::p_LinkedBlocks::validate(){
  return (ints->validate() && blocks->validate());
}
void mosek::fusion::p_LinkedBlocks::destroy(){bfirst.reset();bsize.reset();blocks.reset();ints.reset();}void mosek::fusion::LinkedBlocks::destroy() { mosek::fusion::p_LinkedBlocks::_get_impl(this)->destroy(); }mosek::fusion::LinkedInts::LinkedInts(mosek::fusion::p_LinkedInts *_impl) : _impl(_impl) { /*std::cout << "LinkedInts() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::LinkedInts::~LinkedInts() { delete _impl; _impl = nullptr; }mosek::fusion::p_LinkedInts::p_LinkedInts  (::mosek::fusion::LinkedInts * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::LinkedInts::t mosek::fusion::p_LinkedInts::_new_LinkedInts  (int _6027){ return new mosek::fusion::LinkedInts(_6027); }mosek::fusion::LinkedInts::LinkedInts  (int _6027) :    LinkedInts(new mosek::fusion::p_LinkedInts(this)){ mosek::fusion::p_LinkedInts::_get_impl(this)->_initialize(_6027); }void mosek::fusion::p_LinkedInts::_initialize  (int _6027){monty::rc_reserve __reserve_this(_pubthis);   {
    int _9645;
    bool _9646 = (_6027 > (int)0);
    if (_9646)
    {
      _9645 = _6027;
    }
    else
    {
      _9645 = (int)128;
    }
    int _6028 = _9645;
    next = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6028)));
    prev = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6028)));
    first_used = (-(int)1);
    first_free = (int)0;
    last_free = (_6028 - (int)1);
    int _9647 = (int)1;
    int _9648 = _6028;
    for (int _6029 = _9647; _6029 < _9648; ++_6029)
    {
      {
        ((*prev)(_6029)) = (_6029 - (int)1);
        ((*next)((_6029 - (int)1))) = _6029;
      }
    }
    ((*prev)((int)0)) = (-(int)1);
    ((*next)((_6028 - (int)1))) = (-(int)1);
    nfree = _6028;
  }
}mosek::fusion::LinkedInts::t mosek::fusion::p_LinkedInts::_new_LinkedInts  (){ return new mosek::fusion::LinkedInts(); }mosek::fusion::LinkedInts::LinkedInts  () :    LinkedInts(new mosek::fusion::p_LinkedInts(this)){ mosek::fusion::p_LinkedInts::_get_impl(this)->_initialize(); }void mosek::fusion::p_LinkedInts::_initialize  (){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_LinkedInts::_initialize((int)128);
  }
}mosek::fusion::LinkedInts::t mosek::fusion::p_LinkedInts::_new_LinkedInts  (monty::rc_ptr< ::mosek::fusion::LinkedInts > _6030){ return new mosek::fusion::LinkedInts(_6030); }mosek::fusion::LinkedInts::LinkedInts  (monty::rc_ptr< ::mosek::fusion::LinkedInts > _6030) :    LinkedInts(new mosek::fusion::p_LinkedInts(this)){ mosek::fusion::p_LinkedInts::_get_impl(this)->_initialize(_6030); }void mosek::fusion::p_LinkedInts::_initialize  (monty::rc_ptr< ::mosek::fusion::LinkedInts > _6030){monty::rc_reserve __reserve_this(_pubthis);   {
    next = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinkedInts::_get_impl(_6030)->next);
    prev = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinkedInts::_get_impl(_6030)->prev);
    first_used = mosek::fusion::p_LinkedInts::_get_impl(_6030)->first_used;
    first_free = mosek::fusion::p_LinkedInts::_get_impl(_6030)->first_free;
    last_free = mosek::fusion::p_LinkedInts::_get_impl(_6030)->last_free;
    nfree = mosek::fusion::p_LinkedInts::_get_impl(_6030)->nfree;
  }
}void mosek::fusion::LinkedInts :: free(int _6031,int _6032) { mosek::fusion::p_LinkedInts::_get_impl(this)->free(_6031,_6032); }void mosek::fusion::p_LinkedInts::free(int _6031,int _6032){
  int _6033 = _6031;
  int _6034 = _6033;
  int _9649 = (int)0;
  int _9650 = (_6032 - (int)1);
  for (int _6035 = _9649; _6035 < _9650; ++_6035)
  {
    {
      _6034 = ((*next)(_6034));
    }
  }
  int _6036 = ((*prev)(_6033));
  int _6037 = ((*next)(_6034));
  if ((_6036 >= (int)0))
  {
    {
      ((*next)(_6036)) = _6037;
    }
  }
  {}
  if ((_6037 >= (int)0))
  {
    {
      ((*prev)(_6037)) = _6036;
    }
  }
  {}
  ((*prev)(_6033)) = (-(int)1);
  ((*next)(_6034)) = first_free;
  if ((first_free >= (int)0))
  {
    {
      ((*prev)(first_free)) = _6034;
    }
  }
  {}
  first_free = _6033;
  nfree += _6032;
}
int mosek::fusion::LinkedInts :: alloc() { return mosek::fusion::p_LinkedInts::_get_impl(this)->alloc(); }int mosek::fusion::p_LinkedInts::alloc(){
  return allocblock((int)1);
}
int mosek::fusion::LinkedInts :: alloc(int _6038) { return mosek::fusion::p_LinkedInts::_get_impl(this)->alloc(_6038); }int mosek::fusion::p_LinkedInts::alloc(int _6038){
  return allocblock(_6038);
}
void mosek::fusion::LinkedInts :: alloc(int _6039,std::shared_ptr< monty::ndarray< int,1 > > _6040,int _6041) { mosek::fusion::p_LinkedInts::_get_impl(this)->alloc(_6039,_6040,_6041); }void mosek::fusion::p_LinkedInts::alloc(int _6039,std::shared_ptr< monty::ndarray< int,1 > > _6040,int _6041){
  _checked_ptr_1<int> _ptr__6040(_6040 ? _6040->raw() : nullptr, _6040 ? _6040->size(0) : 0);
  int _6042 = allocblock(_6039);
  int _9651 = (int)0;
  int _9652 = _6039;
  for (int _6043 = _9651; _6043 < _9652; ++_6043)
  {
    {
      _ptr__6040[safe_add( _6043,_6041 )] = _6042;
      _6042 = ((*next)(_6042));
    }
  }
}
void mosek::fusion::LinkedInts :: get(int _6044,int _6045,std::shared_ptr< monty::ndarray< int,1 > > _6046,int _6047) { mosek::fusion::p_LinkedInts::_get_impl(this)->get(_6044,_6045,_6046,_6047); }void mosek::fusion::p_LinkedInts::get(int _6044,int _6045,std::shared_ptr< monty::ndarray< int,1 > > _6046,int _6047){
  _checked_ptr_1<int> _ptr__6046(_6046 ? _6046->raw() : nullptr, _6046 ? _6046->size(0) : 0);
  int _6048 = _6044;
  int _9653 = (int)0;
  int _9654 = _6045;
  for (int _6049 = _9653; _6049 < _9654; ++_6049)
  {
    {
      _ptr__6046[safe_add( _6049,_6047 )] = _6048;
      _6048 = ((*next)(_6048));
    }
  }
}
int mosek::fusion::LinkedInts :: maxidx(int _6050,int _6051) { return mosek::fusion::p_LinkedInts::_get_impl(this)->maxidx(_6050,_6051); }int mosek::fusion::p_LinkedInts::maxidx(int _6050,int _6051){
  int _6052 = _6050;
  int _6053 = _6050;
  int _9655 = (int)1;
  int _9656 = _6051;
  for (int _6054 = _9655; _6054 < _9656; ++_6054)
  {
    {
      _6053 = ((*next)(_6053));
      if ((_6052 < _6053))
      {
        {
          _6052 = _6053;
        }
      }
      {}
    }
  }
  return _6052;
}
int mosek::fusion::p_LinkedInts::allocblock(int _6055){
  int _6056 = (int)((next)->size(0));
  if ((nfree < _6055))
  {
    {
      int _6057 = (_6055 - nfree);
      if ((_6057 < _6056))
      {
        {
          _6057 = _6056;
        }
      }
      {}
      recap(safe_add( _6057,_6056 ));
    }
  }
  {}
  int _6058 = first_free;
  int _6059 = _6058;
  int _9657 = (int)0;
  int _9658 = (_6055 - (int)1);
  for (int _6060 = _9657; _6060 < _9658; ++_6060)
  {
    {
      _6059 = ((*next)(_6059));
    }
  }
  first_free = ((*next)(_6059));
  if ((first_free < (int)0))
  {
    {
      last_free = (-(int)1);
    }
  }
  else
  {
    {
      ((*prev)(first_free)) = (-(int)1);
    }
  }
  ((*next)(_6059)) = first_used;
  if ((first_used >= (int)0))
  {
    {
      ((*prev)(first_used)) = _6059;
    }
  }
  {}
  first_used = _6058;
  nfree -= _6055;
  return _6058;
}
void mosek::fusion::p_LinkedInts::recap(int _6061){
  int _6062 = (int)((next)->size(0));
  if ((_6061 > _6062))
  {
    {
      next = ::mosek::fusion::p_CommonTools::resize(next,_6061);
      prev = ::mosek::fusion::p_CommonTools::resize(prev,_6061);
      int _9659 = _6062;
      int _9660 = (_6061 - (int)1);
      for (int _6063 = _9659; _6063 < _9660; ++_6063)
      {
        {
          ((*next)(_6063)) = safe_add( _6063,(int)1 );
          ((*prev)(safe_add( _6063,(int)1 ))) = _6063;
        }
      }
      ((*next)((_6061 - (int)1))) = (-(int)1);
      ((*prev)(_6062)) = last_free;
      if ((last_free < (int)0))
      {
        {
          first_free = _6062;
        }
      }
      else
      {
        {
          ((*next)(last_free)) = _6062;
        }
      }
      last_free = (_6061 - (int)1);
      nfree += (_6061 - _6062);
    }
  }
  {}
}
int mosek::fusion::LinkedInts :: capacity() { return mosek::fusion::p_LinkedInts::_get_impl(this)->capacity(); }int mosek::fusion::p_LinkedInts::capacity(){
  return (int)((next)->size(0));
}
bool mosek::fusion::LinkedInts :: validate() { return mosek::fusion::p_LinkedInts::_get_impl(this)->validate(); }bool mosek::fusion::p_LinkedInts::validate(){
  std::shared_ptr< monty::ndarray< bool,1 > > _6064 = std::shared_ptr< monty::ndarray< bool,1 > >(new monty::ndarray< bool,1 >(monty::shape((int)((next)->size(0)))));
  int _6065 = first_used;
  while ( (_6065 >= (int)0) )
  {
    {
      ((*_6064)(_6065)) = true;
      _6065 = ((*next)(_6065));
      if (((_6065 >= (int)0) && ((*_6064)(_6065))))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("used list/next is inconsistent"));
        }
      }
      {}
    }
  }
  _6065 = first_free;
  int _6066 = (int)0;
  while ( (_6065 >= (int)0) )
  {
    {
      ++ _6066;
      ((*_6064)(_6065)) = true;
      _6065 = ((*next)(_6065));
      if (((_6065 >= (int)0) && ((*_6064)(_6065))))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("free list/next is inconsistent"));
        }
      }
      {}
    }
  }
  if ((_6066 != nfree))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("free next list did not contain nfree elements"));
    }
  }
  {}
  int _9661 = (int)0;
  int _9662 = (int)((_6064)->size(0));
  for (int _6067 = _9661; _6067 < _9662; ++_6067)
  {
    {
      if ((!((*_6064)(_6065))))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("elements missing from used+free list"));
        }
      }
      {}
    }
  }
  int _9663 = (int)0;
  int _9664 = (int)((_6064)->size(0));
  for (int _6068 = _9663; _6068 < _9664; ++_6068)
  {
    {
      ((*_6064)(_6068)) = false;
    }
  }
  _6065 = last_free;
  int _6069 = (int)0;
  while ( (_6065 >= (int)0) )
  {
    {
      ++ _6069;
      ((*_6064)(_6065)) = true;
      _6065 = ((*prev)(_6065));
      if (((_6065 >= (int)0) && ((*_6064)(_6065))))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("prev list is inconsistent"));
        }
      }
      {}
    }
  }
  if ((_6069 != nfree))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("free prev list did not contain nfree elements"));
    }
  }
  {}
  return true;
}
void mosek::fusion::p_LinkedInts::destroy(){prev.reset();next.reset();}void mosek::fusion::LinkedInts::destroy() { mosek::fusion::p_LinkedInts::_get_impl(this)->destroy(); }mosek::fusion::Parameters::Parameters(mosek::fusion::p_Parameters *_impl) : _impl(_impl) { /*std::cout << "Parameters() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Parameters::~Parameters() { delete _impl; _impl = nullptr; }mosek::fusion::p_Parameters::p_Parameters  (::mosek::fusion::Parameters * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::Parameters::setParameter  ( monty::rc_ptr< ::mosek::fusion::Model > _6070,    const std::string & _6071,    double _6072) { mosek::fusion::p_Parameters::setParameter(_6070,_6071,_6072); }void mosek::fusion::p_Parameters::setParameter(monty::rc_ptr< ::mosek::fusion::Model > _6070,const std::string & _6071,double _6072){
  if (false)
  {
    {
    }
  }
  else if((_6071 == std::string ("autoUpdateSolInfo")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (autoUpdateSolInfo)"));
    }
  }
  else if((_6071 == std::string ("removeUnusedSolutions")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (removeUnusedSolutions)"));
    }
  }
  {}
  if ((_6071 == std::string ("numThreads")))
  {
    {
      if (((_6072 - (int)_6072) == 0.0))
      {
        {
          double _6073 = _6072;
          if (((int)0 <= _6073))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_IPAR_NUM_THREADS"),_6073);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));
        }
      }
    }
  }
  else if((_6071 == std::string ("intpntMultiThread")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMultiThread)"));
    }
  }
  {}
  if ((_6071 == std::string ("mtSpincount")))
  {
    {
      if (((_6072 - (int)_6072) == 0.0))
      {
        {
          double _6074 = _6072;
          if ((((int)0 <= _6074) && (_6074 <= (int)1000000000)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_IPAR_MT_SPINCOUNT"),_6074);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));
        }
      }
    }
  }
  else if((_6071 == std::string ("optimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizer)"));
    }
  }
  {}
  if ((_6071 == std::string ("biMaxIterations")))
  {
    {
      if (((_6072 - (int)_6072) == 0.0))
      {
        {
          double _6075 = _6072;
          if (((int)0 <= _6075))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_IPAR_BI_MAX_ITERATIONS"),_6075);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("licenseTrhExpiryWrn")))
  {
    {
      if (((_6072 - (int)_6072) == 0.0))
      {
        {
          double _6076 = _6072;
          if (((int)0 <= _6076))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_TRH_EXPIRY_WRN"),_6076);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("logCutSecondOpt")))
  {
    {
      if (((_6072 - (int)_6072) == 0.0))
      {
        {
          double _6077 = _6072;
          if (((int)0 <= _6077))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_IPAR_LOG_CUT_SECOND_OPT"),_6077);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("logResponse")))
  {
    {
      if (((_6072 - (int)_6072) == 0.0))
      {
        {
          double _6078 = _6072;
          if (((int)0 <= _6078))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_IPAR_LOG_RESPONSE"),_6078);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));
        }
      }
    }
  }
  else if((_6071 == std::string ("logLocalInfo")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logLocalInfo)"));
    }
  }
  {}
  if ((_6071 == std::string ("logBi")))
  {
    {
      if (((_6072 - (int)_6072) == 0.0))
      {
        {
          double _6079 = _6072;
          if (((int)0 <= _6079))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI"),_6079);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("logBiFreq")))
  {
    {
      if (((_6072 - (int)_6072) == 0.0))
      {
        {
          double _6080 = _6072;
          if (((int)0 <= _6080))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI_FREQ"),_6080);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));
        }
      }
    }
  }
  else if((_6071 == std::string ("biCleanOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biCleanOptimizer)"));
    }
  }
  else if((_6071 == std::string ("intpntStartingPoint")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntStartingPoint)"));
    }
  }
  else if((_6071 == std::string ("intpntDiffStep")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntDiffStep)"));
    }
  }
  else if((_6071 == std::string ("intpntScaling")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntScaling)"));
    }
  }
  else if((_6071 == std::string ("intpntSolveForm")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntSolveForm)"));
    }
  }
  {}
  if ((_6071 == std::string ("logIntpnt")))
  {
    {
      if (((_6072 - (int)_6072) == 0.0))
      {
        {
          double _6081 = _6072;
          if (((int)0 <= _6081))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_IPAR_LOG_INTPNT"),_6081);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("intpntMaxIterations")))
  {
    {
      if (((_6072 - (int)_6072) == 0.0))
      {
        {
          double _6082 = _6072;
          if (((int)0 <= _6082))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_ITERATIONS"),_6082);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("intpntOffColTrh")))
  {
    {
      if (((_6072 - (int)_6072) == 0.0))
      {
        {
          double _6083 = _6072;
          if (((int)0 <= _6083))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_OFF_COL_TRH"),_6083);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));
        }
      }
    }
  }
  else if((_6071 == std::string ("intpntOrderMethod")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderMethod)"));
    }
  }
  {}
  if ((_6071 == std::string ("intpntOrderGpNumSeeds")))
  {
    {
      if (((_6072 - (int)_6072) == 0.0))
      {
        {
          double _6084 = _6072;
          if (((int)0 <= _6084))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_ORDER_GP_NUM_SEEDS"),_6084);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderGpNumSeeds)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderGpNumSeeds)"));
        }
      }
    }
  }
  else if((_6071 == std::string ("intpntBasis")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntBasis)"));
    }
  }
  else if((_6071 == std::string ("biIgnoreMaxIter")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreMaxIter)"));
    }
  }
  else if((_6071 == std::string ("biIgnoreNumError")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreNumError)"));
    }
  }
  {}
  if ((_6071 == std::string ("intpntMaxNumCor")))
  {
    {
      if (((_6072 - (int)_6072) == 0.0))
      {
        {
          double _6085 = _6072;
          if (((-(int)1) <= _6085))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_NUM_COR"),_6085);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));
        }
      }
    }
  }
  else if((_6071 == std::string ("presolveUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveUse)"));
    }
  }
  {}
  if ((_6071 == std::string ("presolveLevel")))
  {
    {
      if (((_6072 - (int)_6072) == 0.0))
      {
        {
          double _6086 = _6072;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LEVEL"),_6086);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("logPresolve")))
  {
    {
      if (((_6072 - (int)_6072) == 0.0))
      {
        {
          double _6087 = _6072;
          if (((int)0 <= _6087))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_IPAR_LOG_PRESOLVE"),_6087);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));
        }
      }
    }
  }
  else if((_6071 == std::string ("presolveLindepUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepUse)"));
    }
  }
  {}
  if ((_6071 == std::string ("presolveMaxNumPass")))
  {
    {
      if (((_6072 - (int)_6072) == 0.0))
      {
        {
          double _6088 = _6072;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_MAX_NUM_PASS"),_6088);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumPass)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumPass)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("presolveEliminatorMaxNumTries")))
  {
    {
      if (((_6072 - (int)_6072) == 0.0))
      {
        {
          double _6089 = _6072;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_NUM_TRIES"),_6089);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("presolveEliminatorMaxFill")))
  {
    {
      if (((_6072 - (int)_6072) == 0.0))
      {
        {
          double _6090 = _6072;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_FILL"),_6090);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("simPrimalCrash")))
  {
    {
      if (((_6072 - (int)_6072) == 0.0))
      {
        {
          double _6091 = _6072;
          if (((int)0 <= _6091))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_CRASH"),_6091);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("logSim")))
  {
    {
      if (((_6072 - (int)_6072) == 0.0))
      {
        {
          double _6092 = _6072;
          if (((int)0 <= _6092))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM"),_6092);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("logSimMinor")))
  {
    {
      if (((_6072 - (int)_6072) == 0.0))
      {
        {
          double _6093 = _6072;
          if (((int)0 <= _6093))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_MINOR"),_6093);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("logSimFreq")))
  {
    {
      if (((_6072 - (int)_6072) == 0.0))
      {
        {
          double _6094 = _6072;
          if (((int)0 <= _6094))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_FREQ"),_6094);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("simPrimalRestrictSelection")))
  {
    {
      if (((_6072 - (int)_6072) == 0.0))
      {
        {
          double _6095 = _6072;
          if ((((int)0 <= _6095) && (_6095 <= (int)100)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_RESTRICT_SELECTION"),_6095);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));
        }
      }
    }
  }
  else if((_6071 == std::string ("simPrimalSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalSelection)"));
    }
  }
  {}
  if ((_6071 == std::string ("simDualRestrictSelection")))
  {
    {
      if (((_6072 - (int)_6072) == 0.0))
      {
        {
          double _6096 = _6072;
          if ((((int)0 <= _6096) && (_6096 <= (int)100)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_RESTRICT_SELECTION"),_6096);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));
        }
      }
    }
  }
  else if((_6071 == std::string ("simDualSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualSelection)"));
    }
  }
  {}
  if ((_6071 == std::string ("simMaxIterations")))
  {
    {
      if (((_6072 - (int)_6072) == 0.0))
      {
        {
          double _6097 = _6072;
          if (((int)0 <= _6097))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_ITERATIONS"),_6097);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));
        }
      }
    }
  }
  else if((_6071 == std::string ("simHotstartLu")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstartLu)"));
    }
  }
  {}
  if ((_6071 == std::string ("simRefactorFreq")))
  {
    {
      if (((_6072 - (int)_6072) == 0.0))
      {
        {
          double _6098 = _6072;
          if (((int)0 <= _6098))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_IPAR_SIM_REFACTOR_FREQ"),_6098);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("simSeed")))
  {
    {
      if (((_6072 - (int)_6072) == 0.0))
      {
        {
          double _6099 = _6072;
          if ((((int)0 <= _6099) && (_6099 <= (int)32749)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_IPAR_SIM_SEED"),_6099);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSeed)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSeed)"));
        }
      }
    }
  }
  else if((_6071 == std::string ("mioMode")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMode)"));
    }
  }
  {}
  if ((_6071 == std::string ("logMio")))
  {
    {
      if (((_6072 - (int)_6072) == 0.0))
      {
        {
          double _6100 = _6072;
          if (((int)0 <= _6100))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO"),_6100);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("logMioFreq")))
  {
    {
      if (((_6072 - (int)_6072) == 0.0))
      {
        {
          double _6101 = _6072;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO_FREQ"),_6101);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("mioMaxNumRelaxs")))
  {
    {
      if (((_6072 - (int)_6072) == 0.0))
      {
        {
          double _6102 = _6072;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_RELAXS"),_6102);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("mioMaxNumBranches")))
  {
    {
      if (((_6072 - (int)_6072) == 0.0))
      {
        {
          double _6103 = _6072;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_BRANCHES"),_6103);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("mioMaxNumRootCutRounds")))
  {
    {
      if (((_6072 - (int)_6072) == 0.0))
      {
        {
          double _6104 = _6072;
          if (((int)0 <= _6104))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_ROOT_CUT_ROUNDS"),_6104);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRootCutRounds)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRootCutRounds)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("mioMaxNumSolutions")))
  {
    {
      if (((_6072 - (int)_6072) == 0.0))
      {
        {
          double _6105 = _6072;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_SOLUTIONS"),_6105);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));
        }
      }
    }
  }
  else if((_6071 == std::string ("mioNodeSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeSelection)"));
    }
  }
  {}
  if ((_6071 == std::string ("mioHeuristicLevel")))
  {
    {
      if (((_6072 - (int)_6072) == 0.0))
      {
        {
          double _6106 = _6072;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_IPAR_MIO_HEURISTIC_LEVEL"),_6106);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("mioProbingLevel")))
  {
    {
      if (((_6072 - (int)_6072) == 0.0))
      {
        {
          double _6107 = _6072;
          if ((((-(int)1) <= _6107) && (_6107 <= (int)3)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_IPAR_MIO_PROBING_LEVEL"),_6107);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("mioCutSelectionLevel")))
  {
    {
      if (((_6072 - (int)_6072) == 0.0))
      {
        {
          double _6108 = _6072;
          if ((((-(int)1) <= _6108) && (_6108 <= (int)1)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_SELECTION_LEVEL"),_6108);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("mioVbDetectionLevel")))
  {
    {
      if (((_6072 - (int)_6072) == 0.0))
      {
        {
          double _6109 = _6072;
          if ((((-(int)1) <= _6109) && (_6109 <= (int)2)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_IPAR_MIO_VB_DETECTION_LEVEL"),_6109);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));
        }
      }
    }
  }
  else if((_6071 == std::string ("mioBranchDir")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioBranchDir)"));
    }
  }
  else if((_6071 == std::string ("mioRootOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootOptimizer)"));
    }
  }
  else if((_6071 == std::string ("mioNodeOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeOptimizer)"));
    }
  }
  else if((_6071 == std::string ("mioPerspectiveReformulate")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPerspectiveReformulate)"));
    }
  }
  else if((_6071 == std::string ("mioPropagateObjectiveConstraint")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPropagateObjectiveConstraint)"));
    }
  }
  {}
  if ((_6071 == std::string ("mioSeed")))
  {
    {
      if (((_6072 - (int)_6072) == 0.0))
      {
        {
          double _6110 = _6072;
          if (((int)0 <= _6110))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_IPAR_MIO_SEED"),_6110);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSeed)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSeed)"));
        }
      }
    }
  }
  else if((_6071 == std::string ("mioConicOuterApproximation")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioConicOuterApproximation)"));
    }
  }
  else if((_6071 == std::string ("writeLpQuotedNames")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpQuotedNames)"));
    }
  }
  {}
  if ((_6071 == std::string ("writeLpLineWidth")))
  {
    {
      if (((_6072 - (int)_6072) == 0.0))
      {
        {
          double _6111 = _6072;
          if (((int)40 <= _6111))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_LINE_WIDTH"),_6111);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("writeLpTermsPerLine")))
  {
    {
      if (((_6072 - (int)_6072) == 0.0))
      {
        {
          double _6112 = _6072;
          if (((int)0 <= _6112))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_TERMS_PER_LINE"),_6112);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpTermsPerLine)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpTermsPerLine)"));
        }
      }
    }
  }
  else if((_6071 == std::string ("writeLpFullObj")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpFullObj)"));
    }
  }
  {}
  if ((_6071 == std::string ("logInfeasAna")))
  {
    {
      if (((_6072 - (int)_6072) == 0.0))
      {
        {
          double _6113 = _6072;
          if (((int)0 <= _6113))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_IPAR_LOG_INFEAS_ANA"),_6113);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));
        }
      }
    }
  }
  else if((_6071 == std::string ("licenseWait")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseWait)"));
    }
  }
  else if((_6071 == std::string ("licenseSuppressExpireWrns")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseSuppressExpireWrns)"));
    }
  }
  {}
  if ((_6071 == std::string ("licensePauseTime")))
  {
    {
      if (((_6072 - (int)_6072) == 0.0))
      {
        {
          double _6114 = _6072;
          if ((((int)0 <= _6114) && (_6114 <= (int)1000000)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_PAUSE_TIME"),_6114);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));
        }
      }
    }
  }
  else if((_6071 == std::string ("licenseDebug")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseDebug)"));
    }
  }
  {}
  if ((_6071 == std::string ("log")))
  {
    {
      if (((_6072 - (int)_6072) == 0.0))
      {
        {
          double _6115 = _6072;
          if (((int)0 <= _6115))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_IPAR_LOG"),_6115);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("logExpand")))
  {
    {
      if (((_6072 - (int)_6072) == 0.0))
      {
        {
          double _6116 = _6072;
          if (((int)0 <= _6116))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_IPAR_LOG_EXPAND"),_6116);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("logFile")))
  {
    {
      if (((_6072 - (int)_6072) == 0.0))
      {
        {
          double _6117 = _6072;
          if (((int)0 <= _6117))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_IPAR_LOG_FILE"),_6117);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("logOrder")))
  {
    {
      if (((_6072 - (int)_6072) == 0.0))
      {
        {
          double _6118 = _6072;
          if (((int)0 <= _6118))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_IPAR_LOG_ORDER"),_6118);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));
        }
      }
    }
  }
  else if((_6071 == std::string ("simScaling")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScaling)"));
    }
  }
  else if((_6071 == std::string ("simScalingMethod")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScalingMethod)"));
    }
  }
  {}
  if ((_6071 == std::string ("simPrimalPhaseoneMethod")))
  {
    {
      if (((_6072 - (int)_6072) == 0.0))
      {
        {
          double _6119 = _6072;
          if ((((int)0 <= _6119) && (_6119 <= (int)10)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_PHASEONE_METHOD"),_6119);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("simDualPhaseoneMethod")))
  {
    {
      if (((_6072 - (int)_6072) == 0.0))
      {
        {
          double _6120 = _6072;
          if ((((int)0 <= _6120) && (_6120 <= (int)10)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_PHASEONE_METHOD"),_6120);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("simMaxNumSetbacks")))
  {
    {
      if (((_6072 - (int)_6072) == 0.0))
      {
        {
          double _6121 = _6072;
          if (((int)0 <= _6121))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_NUM_SETBACKS"),_6121);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));
        }
      }
    }
  }
  else if((_6071 == std::string ("simHotstart")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstart)"));
    }
  }
  else if((_6071 == std::string ("simBasisFactorUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simBasisFactorUse)"));
    }
  }
  else if((_6071 == std::string ("simDegen")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDegen)"));
    }
  }
  else if((_6071 == std::string ("simReformulation")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simReformulation)"));
    }
  }
  else if((_6071 == std::string ("simExploitDupvec")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simExploitDupvec)"));
    }
  }
  else if((_6071 == std::string ("simSaveLu")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSaveLu)"));
    }
  }
  else if((_6071 == std::string ("simNonSingular")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simNonSingular)"));
    }
  }
  {}
  if ((_6071 == std::string ("simDualCrash")))
  {
    {
      if (((_6072 - (int)_6072) == 0.0))
      {
        {
          double _6122 = _6072;
          if (((int)0 <= _6122))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_CRASH"),_6122);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));
        }
      }
    }
  }
  else if((_6071 == std::string ("infeasPreferPrimal")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (infeasPreferPrimal)"));
    }
  }
  {}
  if ((_6071 == std::string ("mioRootRepeatPresolveLevel")))
  {
    {
      if (((_6072 - (int)_6072) == 0.0))
      {
        {
          double _6123 = _6072;
          if ((((-(int)1) <= _6123) && (_6123 <= (int)1)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_IPAR_MIO_ROOT_REPEAT_PRESOLVE_LEVEL"),_6123);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));
        }
      }
    }
  }
  else if((_6071 == std::string ("mioCutCmir")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutCmir)"));
    }
  }
  else if((_6071 == std::string ("mioCutClique")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutClique)"));
    }
  }
  else if((_6071 == std::string ("mioCutImpliedBound")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutImpliedBound)"));
    }
  }
  else if((_6071 == std::string ("mioCutKnapsackCover")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutKnapsackCover)"));
    }
  }
  else if((_6071 == std::string ("mioCutGmi")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutGmi)"));
    }
  }
  {}
  if ((_6071 == std::string ("presolveLindepRelWorkTrh")))
  {
    {
      if (((_6072 - (int)_6072) == 0.0))
      {
        {
          double _6124 = _6072;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_REL_WORK_TRH"),_6124);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("presolveLindepAbsWorkTrh")))
  {
    {
      if (((_6072 - (int)_6072) == 0.0))
      {
        {
          double _6125 = _6072;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_ABS_WORK_TRH"),_6125);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));
        }
      }
    }
  }
  else if((_6071 == std::string ("cacheLicense")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (cacheLicense)"));
    }
  }
  else if((_6071 == std::string ("intpntRegularizationUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntRegularizationUse)"));
    }
  }
  else if((_6071 == std::string ("simSolveForm")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSolveForm)"));
    }
  }
  else if((_6071 == std::string ("simSwitchOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSwitchOptimizer)"));
    }
  }
  {}
  if ((_6071 == std::string ("mioRinsMaxNodes")))
  {
    {
      if (((_6072 - (int)_6072) == 0.0))
      {
        {
          double _6126 = _6072;
          if (((-(int)1) <= _6126))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_IPAR_MIO_RINS_MAX_NODES"),_6126);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("mioFeaspumpLevel")))
  {
    {
      if (((_6072 - (int)_6072) == 0.0))
      {
        {
          double _6127 = _6072;
          if ((((-(int)1) <= _6127) && (_6127 <= (int)2)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_IPAR_MIO_FEASPUMP_LEVEL"),_6127);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioFeaspumpLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioFeaspumpLevel)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("optimizerMaxTime")))
  {
    {
      double _6128 = _6072;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_DPAR_OPTIMIZER_MAX_TIME"),_6128);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("lowerObjCut")))
  {
    {
      double _6129 = _6072;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT"),_6129);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCut)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("upperObjCut")))
  {
    {
      double _6130 = _6072;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT"),_6130);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCut)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("upperObjCutFiniteTrh")))
  {
    {
      double _6131 = _6072;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT_FINITE_TRH"),_6131);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("lowerObjCutFiniteTrh")))
  {
    {
      double _6132 = _6072;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT_FINITE_TRH"),_6132);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("intpntTolRelGap")))
  {
    {
      double _6133 = _6072;
      if ((1.000000e-14 <= _6133))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_GAP"),_6133);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("intpntTolStepSize")))
  {
    {
      double _6134 = _6072;
      if (((0.000000e+00 <= _6134) && (_6134 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_STEP_SIZE"),_6134);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolStepSize)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("simLuTolRelPiv")))
  {
    {
      double _6135 = _6072;
      if (((1.000000e-06 <= _6135) && (_6135 <= 9.999990e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_DPAR_SIM_LU_TOL_REL_PIV"),_6135);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simLuTolRelPiv)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("intpntTolRelStep")))
  {
    {
      double _6136 = _6072;
      if (((1.000000e-04 <= _6136) && (_6136 <= 9.999990e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_STEP"),_6136);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelStep)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("intpntTolPath")))
  {
    {
      double _6137 = _6072;
      if (((0.000000e+00 <= _6137) && (_6137 <= 9.999000e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PATH"),_6137);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPath)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("intpntTolPfeas")))
  {
    {
      double _6138 = _6072;
      if (((0.000000e+00 <= _6138) && (_6138 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PFEAS"),_6138);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("intpntTolDfeas")))
  {
    {
      double _6139 = _6072;
      if (((0.000000e+00 <= _6139) && (_6139 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DFEAS"),_6139);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("intpntTolMuRed")))
  {
    {
      double _6140 = _6072;
      if (((0.000000e+00 <= _6140) && (_6140 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_MU_RED"),_6140);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("intpntTolInfeas")))
  {
    {
      double _6141 = _6072;
      if (((0.000000e+00 <= _6141) && (_6141 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_INFEAS"),_6141);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("intpntCoTolRelGap")))
  {
    {
      double _6142 = _6072;
      if (((0.000000e+00 <= _6142) && (_6142 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_REL_GAP"),_6142);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("intpntCoTolPfeas")))
  {
    {
      double _6143 = _6072;
      if (((0.000000e+00 <= _6143) && (_6143 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_PFEAS"),_6143);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("intpntCoTolDfeas")))
  {
    {
      double _6144 = _6072;
      if (((0.000000e+00 <= _6144) && (_6144 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_DFEAS"),_6144);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("intpntCoTolMuRed")))
  {
    {
      double _6145 = _6072;
      if (((0.000000e+00 <= _6145) && (_6145 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_MU_RED"),_6145);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("intpntCoTolNearRel")))
  {
    {
      double _6146 = _6072;
      if ((1.000000e+00 <= _6146))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_NEAR_REL"),_6146);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolNearRel)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("intpntCoTolInfeas")))
  {
    {
      double _6147 = _6072;
      if (((0.000000e+00 <= _6147) && (_6147 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_INFEAS"),_6147);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("intpntTolPsafe")))
  {
    {
      double _6148 = _6072;
      if ((1.000000e-04 <= _6148))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PSAFE"),_6148);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPsafe)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("intpntTolDsafe")))
  {
    {
      double _6149 = _6072;
      if ((1.000000e-04 <= _6149))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DSAFE"),_6149);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDsafe)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("mioMaxTime")))
  {
    {
      double _6150 = _6072;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_DPAR_MIO_MAX_TIME"),_6150);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("mioRelGapConst")))
  {
    {
      double _6151 = _6072;
      if ((1.000000e-15 <= _6151))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_DPAR_MIO_REL_GAP_CONST"),_6151);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRelGapConst)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("mioTolRelGap")))
  {
    {
      double _6152 = _6072;
      if ((0.000000e+00 <= _6152))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_GAP"),_6152);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("mioTolAbsGap")))
  {
    {
      double _6153 = _6072;
      if ((0.000000e+00 <= _6153))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_GAP"),_6153);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsGap)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("mioTolAbsRelaxInt")))
  {
    {
      double _6154 = _6072;
      if ((1.000000e-09 <= _6154))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_RELAX_INT"),_6154);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsRelaxInt)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("basisTolX")))
  {
    {
      double _6155 = _6072;
      if ((1.000000e-09 <= _6155))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_X"),_6155);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolX)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("basisTolS")))
  {
    {
      double _6156 = _6072;
      if ((1.000000e-09 <= _6156))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_S"),_6156);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolS)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("basisRelTolS")))
  {
    {
      double _6157 = _6072;
      if ((0.000000e+00 <= _6157))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_DPAR_BASIS_REL_TOL_S"),_6157);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisRelTolS)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("presolveTolX")))
  {
    {
      double _6158 = _6072;
      if ((0.000000e+00 <= _6158))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_X"),_6158);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolX)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("presolveTolS")))
  {
    {
      double _6159 = _6072;
      if ((0.000000e+00 <= _6159))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_S"),_6159);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolS)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("presolveTolAij")))
  {
    {
      double _6160 = _6072;
      if ((1.000000e-15 <= _6160))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_AIJ"),_6160);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAij)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("presolveTolAbsLindep")))
  {
    {
      double _6161 = _6072;
      if ((0.000000e+00 <= _6161))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_ABS_LINDEP"),_6161);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAbsLindep)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("presolveTolRelLindep")))
  {
    {
      double _6162 = _6072;
      if ((0.000000e+00 <= _6162))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_REL_LINDEP"),_6162);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolRelLindep)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("simplexAbsTolPiv")))
  {
    {
      double _6163 = _6072;
      if ((1.000000e-12 <= _6163))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_DPAR_SIMPLEX_ABS_TOL_PIV"),_6163);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simplexAbsTolPiv)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("mioTolFeas")))
  {
    {
      double _6164 = _6072;
      if (((1.000000e-09 <= _6164) && (_6164 <= 1.000000e-03)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_FEAS"),_6164);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolFeas)"));
        }
      }
    }
  }
  {}
  if ((_6071 == std::string ("mioTolRelDualBoundImprovement")))
  {
    {
      double _6165 = _6072;
      if (((0.000000e+00 <= _6165) && (_6165 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6070.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_DUAL_BOUND_IMPROVEMENT"),_6165);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelDualBoundImprovement)"));
        }
      }
    }
  }
  else if((_6071 == std::string ("dataFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (dataFileName)"));
    }
  }
  else if((_6071 == std::string ("basSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basSolFileName)"));
    }
  }
  else if((_6071 == std::string ("itrSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (itrSolFileName)"));
    }
  }
  else if((_6071 == std::string ("intSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intSolFileName)"));
    }
  }
  else if((_6071 == std::string ("writeLpGenVarName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpGenVarName)"));
    }
  }
  else if((_6071 == std::string ("remoteAccessToken")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (remoteAccessToken)"));
    }
  }
  {}
  throw ::mosek::fusion::ParameterError(std::string ("Unknown parameter"));
}
void mosek::fusion::Parameters::setParameter  ( monty::rc_ptr< ::mosek::fusion::Model > _6166,    const std::string & _6167,    int _6168) { mosek::fusion::p_Parameters::setParameter(_6166,_6167,_6168); }void mosek::fusion::p_Parameters::setParameter(monty::rc_ptr< ::mosek::fusion::Model > _6166,const std::string & _6167,int _6168){
  if (false)
  {
    {
    }
  }
  else if((_6167 == std::string ("autoUpdateSolInfo")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (autoUpdateSolInfo)"));
    }
  }
  else if((_6167 == std::string ("removeUnusedSolutions")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (removeUnusedSolutions)"));
    }
  }
  {}
  if ((_6167 == std::string ("numThreads")))
  {
    {
      int _6169 = _6168;
      if (((int)0 <= _6169))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_IPAR_NUM_THREADS"),_6169);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));
        }
      }
    }
  }
  else if((_6167 == std::string ("intpntMultiThread")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMultiThread)"));
    }
  }
  {}
  if ((_6167 == std::string ("mtSpincount")))
  {
    {
      int _6170 = _6168;
      if ((((int)0 <= _6170) && (_6170 <= (int)1000000000)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_IPAR_MT_SPINCOUNT"),_6170);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));
        }
      }
    }
  }
  else if((_6167 == std::string ("optimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizer)"));
    }
  }
  {}
  if ((_6167 == std::string ("biMaxIterations")))
  {
    {
      int _6171 = _6168;
      if (((int)0 <= _6171))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_IPAR_BI_MAX_ITERATIONS"),_6171);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("licenseTrhExpiryWrn")))
  {
    {
      int _6172 = _6168;
      if (((int)0 <= _6172))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_TRH_EXPIRY_WRN"),_6172);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("logCutSecondOpt")))
  {
    {
      int _6173 = _6168;
      if (((int)0 <= _6173))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_IPAR_LOG_CUT_SECOND_OPT"),_6173);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("logResponse")))
  {
    {
      int _6174 = _6168;
      if (((int)0 <= _6174))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_IPAR_LOG_RESPONSE"),_6174);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));
        }
      }
    }
  }
  else if((_6167 == std::string ("logLocalInfo")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logLocalInfo)"));
    }
  }
  {}
  if ((_6167 == std::string ("logBi")))
  {
    {
      int _6175 = _6168;
      if (((int)0 <= _6175))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI"),_6175);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("logBiFreq")))
  {
    {
      int _6176 = _6168;
      if (((int)0 <= _6176))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI_FREQ"),_6176);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));
        }
      }
    }
  }
  else if((_6167 == std::string ("biCleanOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biCleanOptimizer)"));
    }
  }
  else if((_6167 == std::string ("intpntStartingPoint")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntStartingPoint)"));
    }
  }
  else if((_6167 == std::string ("intpntDiffStep")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntDiffStep)"));
    }
  }
  else if((_6167 == std::string ("intpntScaling")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntScaling)"));
    }
  }
  else if((_6167 == std::string ("intpntSolveForm")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntSolveForm)"));
    }
  }
  {}
  if ((_6167 == std::string ("logIntpnt")))
  {
    {
      int _6177 = _6168;
      if (((int)0 <= _6177))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_IPAR_LOG_INTPNT"),_6177);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("intpntMaxIterations")))
  {
    {
      int _6178 = _6168;
      if (((int)0 <= _6178))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_ITERATIONS"),_6178);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("intpntOffColTrh")))
  {
    {
      int _6179 = _6168;
      if (((int)0 <= _6179))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_OFF_COL_TRH"),_6179);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));
        }
      }
    }
  }
  else if((_6167 == std::string ("intpntOrderMethod")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderMethod)"));
    }
  }
  {}
  if ((_6167 == std::string ("intpntOrderGpNumSeeds")))
  {
    {
      int _6180 = _6168;
      if (((int)0 <= _6180))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_ORDER_GP_NUM_SEEDS"),_6180);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderGpNumSeeds)"));
        }
      }
    }
  }
  else if((_6167 == std::string ("intpntBasis")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntBasis)"));
    }
  }
  else if((_6167 == std::string ("biIgnoreMaxIter")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreMaxIter)"));
    }
  }
  else if((_6167 == std::string ("biIgnoreNumError")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreNumError)"));
    }
  }
  {}
  if ((_6167 == std::string ("intpntMaxNumCor")))
  {
    {
      int _6181 = _6168;
      if (((-(int)1) <= _6181))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_NUM_COR"),_6181);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));
        }
      }
    }
  }
  else if((_6167 == std::string ("presolveUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveUse)"));
    }
  }
  {}
  if ((_6167 == std::string ("presolveLevel")))
  {
    {
      int _6182 = _6168;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LEVEL"),_6182);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("logPresolve")))
  {
    {
      int _6183 = _6168;
      if (((int)0 <= _6183))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_IPAR_LOG_PRESOLVE"),_6183);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));
        }
      }
    }
  }
  else if((_6167 == std::string ("presolveLindepUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepUse)"));
    }
  }
  {}
  if ((_6167 == std::string ("presolveMaxNumPass")))
  {
    {
      int _6184 = _6168;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_MAX_NUM_PASS"),_6184);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumPass)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("presolveEliminatorMaxNumTries")))
  {
    {
      int _6185 = _6168;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_NUM_TRIES"),_6185);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("presolveEliminatorMaxFill")))
  {
    {
      int _6186 = _6168;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_FILL"),_6186);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("simPrimalCrash")))
  {
    {
      int _6187 = _6168;
      if (((int)0 <= _6187))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_CRASH"),_6187);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("logSim")))
  {
    {
      int _6188 = _6168;
      if (((int)0 <= _6188))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM"),_6188);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("logSimMinor")))
  {
    {
      int _6189 = _6168;
      if (((int)0 <= _6189))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_MINOR"),_6189);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("logSimFreq")))
  {
    {
      int _6190 = _6168;
      if (((int)0 <= _6190))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_FREQ"),_6190);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("simPrimalRestrictSelection")))
  {
    {
      int _6191 = _6168;
      if ((((int)0 <= _6191) && (_6191 <= (int)100)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_RESTRICT_SELECTION"),_6191);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));
        }
      }
    }
  }
  else if((_6167 == std::string ("simPrimalSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalSelection)"));
    }
  }
  {}
  if ((_6167 == std::string ("simDualRestrictSelection")))
  {
    {
      int _6192 = _6168;
      if ((((int)0 <= _6192) && (_6192 <= (int)100)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_RESTRICT_SELECTION"),_6192);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));
        }
      }
    }
  }
  else if((_6167 == std::string ("simDualSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualSelection)"));
    }
  }
  {}
  if ((_6167 == std::string ("simMaxIterations")))
  {
    {
      int _6193 = _6168;
      if (((int)0 <= _6193))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_ITERATIONS"),_6193);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));
        }
      }
    }
  }
  else if((_6167 == std::string ("simHotstartLu")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstartLu)"));
    }
  }
  {}
  if ((_6167 == std::string ("simRefactorFreq")))
  {
    {
      int _6194 = _6168;
      if (((int)0 <= _6194))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_IPAR_SIM_REFACTOR_FREQ"),_6194);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("simSeed")))
  {
    {
      int _6195 = _6168;
      if ((((int)0 <= _6195) && (_6195 <= (int)32749)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_IPAR_SIM_SEED"),_6195);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSeed)"));
        }
      }
    }
  }
  else if((_6167 == std::string ("mioMode")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMode)"));
    }
  }
  {}
  if ((_6167 == std::string ("logMio")))
  {
    {
      int _6196 = _6168;
      if (((int)0 <= _6196))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO"),_6196);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("logMioFreq")))
  {
    {
      int _6197 = _6168;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO_FREQ"),_6197);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("mioMaxNumRelaxs")))
  {
    {
      int _6198 = _6168;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_RELAXS"),_6198);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("mioMaxNumBranches")))
  {
    {
      int _6199 = _6168;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_BRANCHES"),_6199);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("mioMaxNumRootCutRounds")))
  {
    {
      int _6200 = _6168;
      if (((int)0 <= _6200))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_ROOT_CUT_ROUNDS"),_6200);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRootCutRounds)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("mioMaxNumSolutions")))
  {
    {
      int _6201 = _6168;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_SOLUTIONS"),_6201);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));
        }
      }
    }
  }
  else if((_6167 == std::string ("mioNodeSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeSelection)"));
    }
  }
  {}
  if ((_6167 == std::string ("mioHeuristicLevel")))
  {
    {
      int _6202 = _6168;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_IPAR_MIO_HEURISTIC_LEVEL"),_6202);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("mioProbingLevel")))
  {
    {
      int _6203 = _6168;
      if ((((-(int)1) <= _6203) && (_6203 <= (int)3)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_IPAR_MIO_PROBING_LEVEL"),_6203);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("mioCutSelectionLevel")))
  {
    {
      int _6204 = _6168;
      if ((((-(int)1) <= _6204) && (_6204 <= (int)1)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_SELECTION_LEVEL"),_6204);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("mioVbDetectionLevel")))
  {
    {
      int _6205 = _6168;
      if ((((-(int)1) <= _6205) && (_6205 <= (int)2)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_IPAR_MIO_VB_DETECTION_LEVEL"),_6205);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));
        }
      }
    }
  }
  else if((_6167 == std::string ("mioBranchDir")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioBranchDir)"));
    }
  }
  else if((_6167 == std::string ("mioRootOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootOptimizer)"));
    }
  }
  else if((_6167 == std::string ("mioNodeOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeOptimizer)"));
    }
  }
  else if((_6167 == std::string ("mioPerspectiveReformulate")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPerspectiveReformulate)"));
    }
  }
  else if((_6167 == std::string ("mioPropagateObjectiveConstraint")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPropagateObjectiveConstraint)"));
    }
  }
  {}
  if ((_6167 == std::string ("mioSeed")))
  {
    {
      int _6206 = _6168;
      if (((int)0 <= _6206))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_IPAR_MIO_SEED"),_6206);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSeed)"));
        }
      }
    }
  }
  else if((_6167 == std::string ("mioConicOuterApproximation")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioConicOuterApproximation)"));
    }
  }
  else if((_6167 == std::string ("writeLpQuotedNames")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpQuotedNames)"));
    }
  }
  {}
  if ((_6167 == std::string ("writeLpLineWidth")))
  {
    {
      int _6207 = _6168;
      if (((int)40 <= _6207))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_LINE_WIDTH"),_6207);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("writeLpTermsPerLine")))
  {
    {
      int _6208 = _6168;
      if (((int)0 <= _6208))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_TERMS_PER_LINE"),_6208);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpTermsPerLine)"));
        }
      }
    }
  }
  else if((_6167 == std::string ("writeLpFullObj")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpFullObj)"));
    }
  }
  {}
  if ((_6167 == std::string ("logInfeasAna")))
  {
    {
      int _6209 = _6168;
      if (((int)0 <= _6209))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_IPAR_LOG_INFEAS_ANA"),_6209);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));
        }
      }
    }
  }
  else if((_6167 == std::string ("licenseWait")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseWait)"));
    }
  }
  else if((_6167 == std::string ("licenseSuppressExpireWrns")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseSuppressExpireWrns)"));
    }
  }
  {}
  if ((_6167 == std::string ("licensePauseTime")))
  {
    {
      int _6210 = _6168;
      if ((((int)0 <= _6210) && (_6210 <= (int)1000000)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_PAUSE_TIME"),_6210);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));
        }
      }
    }
  }
  else if((_6167 == std::string ("licenseDebug")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseDebug)"));
    }
  }
  {}
  if ((_6167 == std::string ("log")))
  {
    {
      int _6211 = _6168;
      if (((int)0 <= _6211))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_IPAR_LOG"),_6211);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("logExpand")))
  {
    {
      int _6212 = _6168;
      if (((int)0 <= _6212))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_IPAR_LOG_EXPAND"),_6212);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("logFile")))
  {
    {
      int _6213 = _6168;
      if (((int)0 <= _6213))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_IPAR_LOG_FILE"),_6213);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("logOrder")))
  {
    {
      int _6214 = _6168;
      if (((int)0 <= _6214))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_IPAR_LOG_ORDER"),_6214);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));
        }
      }
    }
  }
  else if((_6167 == std::string ("simScaling")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScaling)"));
    }
  }
  else if((_6167 == std::string ("simScalingMethod")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScalingMethod)"));
    }
  }
  {}
  if ((_6167 == std::string ("simPrimalPhaseoneMethod")))
  {
    {
      int _6215 = _6168;
      if ((((int)0 <= _6215) && (_6215 <= (int)10)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_PHASEONE_METHOD"),_6215);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("simDualPhaseoneMethod")))
  {
    {
      int _6216 = _6168;
      if ((((int)0 <= _6216) && (_6216 <= (int)10)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_PHASEONE_METHOD"),_6216);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("simMaxNumSetbacks")))
  {
    {
      int _6217 = _6168;
      if (((int)0 <= _6217))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_NUM_SETBACKS"),_6217);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));
        }
      }
    }
  }
  else if((_6167 == std::string ("simHotstart")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstart)"));
    }
  }
  else if((_6167 == std::string ("simBasisFactorUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simBasisFactorUse)"));
    }
  }
  else if((_6167 == std::string ("simDegen")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDegen)"));
    }
  }
  else if((_6167 == std::string ("simReformulation")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simReformulation)"));
    }
  }
  else if((_6167 == std::string ("simExploitDupvec")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simExploitDupvec)"));
    }
  }
  else if((_6167 == std::string ("simSaveLu")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSaveLu)"));
    }
  }
  else if((_6167 == std::string ("simNonSingular")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simNonSingular)"));
    }
  }
  {}
  if ((_6167 == std::string ("simDualCrash")))
  {
    {
      int _6218 = _6168;
      if (((int)0 <= _6218))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_CRASH"),_6218);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));
        }
      }
    }
  }
  else if((_6167 == std::string ("infeasPreferPrimal")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (infeasPreferPrimal)"));
    }
  }
  {}
  if ((_6167 == std::string ("mioRootRepeatPresolveLevel")))
  {
    {
      int _6219 = _6168;
      if ((((-(int)1) <= _6219) && (_6219 <= (int)1)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_IPAR_MIO_ROOT_REPEAT_PRESOLVE_LEVEL"),_6219);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));
        }
      }
    }
  }
  else if((_6167 == std::string ("mioCutCmir")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutCmir)"));
    }
  }
  else if((_6167 == std::string ("mioCutClique")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutClique)"));
    }
  }
  else if((_6167 == std::string ("mioCutImpliedBound")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutImpliedBound)"));
    }
  }
  else if((_6167 == std::string ("mioCutKnapsackCover")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutKnapsackCover)"));
    }
  }
  else if((_6167 == std::string ("mioCutGmi")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutGmi)"));
    }
  }
  {}
  if ((_6167 == std::string ("presolveLindepRelWorkTrh")))
  {
    {
      int _6220 = _6168;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_REL_WORK_TRH"),_6220);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("presolveLindepAbsWorkTrh")))
  {
    {
      int _6221 = _6168;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_ABS_WORK_TRH"),_6221);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));
        }
      }
    }
  }
  else if((_6167 == std::string ("cacheLicense")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (cacheLicense)"));
    }
  }
  else if((_6167 == std::string ("intpntRegularizationUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntRegularizationUse)"));
    }
  }
  else if((_6167 == std::string ("simSolveForm")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSolveForm)"));
    }
  }
  else if((_6167 == std::string ("simSwitchOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSwitchOptimizer)"));
    }
  }
  {}
  if ((_6167 == std::string ("mioRinsMaxNodes")))
  {
    {
      int _6222 = _6168;
      if (((-(int)1) <= _6222))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_IPAR_MIO_RINS_MAX_NODES"),_6222);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("mioFeaspumpLevel")))
  {
    {
      int _6223 = _6168;
      if ((((-(int)1) <= _6223) && (_6223 <= (int)2)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_IPAR_MIO_FEASPUMP_LEVEL"),_6223);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioFeaspumpLevel)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("optimizerMaxTime")))
  {
    {
      double _6224 = (double)_6168;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_DPAR_OPTIMIZER_MAX_TIME"),_6224);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("lowerObjCut")))
  {
    {
      double _6225 = (double)_6168;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT"),_6225);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCut)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("upperObjCut")))
  {
    {
      double _6226 = (double)_6168;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT"),_6226);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCut)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("upperObjCutFiniteTrh")))
  {
    {
      double _6227 = (double)_6168;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT_FINITE_TRH"),_6227);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("lowerObjCutFiniteTrh")))
  {
    {
      double _6228 = (double)_6168;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT_FINITE_TRH"),_6228);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("intpntTolRelGap")))
  {
    {
      double _6229 = (double)_6168;
      if ((1.000000e-14 <= _6229))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_GAP"),_6229);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("intpntTolStepSize")))
  {
    {
      double _6230 = (double)_6168;
      if (((0.000000e+00 <= _6230) && (_6230 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_STEP_SIZE"),_6230);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolStepSize)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("simLuTolRelPiv")))
  {
    {
      double _6231 = (double)_6168;
      if (((1.000000e-06 <= _6231) && (_6231 <= 9.999990e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_DPAR_SIM_LU_TOL_REL_PIV"),_6231);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simLuTolRelPiv)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("intpntTolRelStep")))
  {
    {
      double _6232 = (double)_6168;
      if (((1.000000e-04 <= _6232) && (_6232 <= 9.999990e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_STEP"),_6232);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelStep)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("intpntTolPath")))
  {
    {
      double _6233 = (double)_6168;
      if (((0.000000e+00 <= _6233) && (_6233 <= 9.999000e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PATH"),_6233);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPath)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("intpntTolPfeas")))
  {
    {
      double _6234 = (double)_6168;
      if (((0.000000e+00 <= _6234) && (_6234 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PFEAS"),_6234);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("intpntTolDfeas")))
  {
    {
      double _6235 = (double)_6168;
      if (((0.000000e+00 <= _6235) && (_6235 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DFEAS"),_6235);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("intpntTolMuRed")))
  {
    {
      double _6236 = (double)_6168;
      if (((0.000000e+00 <= _6236) && (_6236 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_MU_RED"),_6236);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("intpntTolInfeas")))
  {
    {
      double _6237 = (double)_6168;
      if (((0.000000e+00 <= _6237) && (_6237 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_INFEAS"),_6237);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("intpntCoTolRelGap")))
  {
    {
      double _6238 = (double)_6168;
      if (((0.000000e+00 <= _6238) && (_6238 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_REL_GAP"),_6238);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("intpntCoTolPfeas")))
  {
    {
      double _6239 = (double)_6168;
      if (((0.000000e+00 <= _6239) && (_6239 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_PFEAS"),_6239);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("intpntCoTolDfeas")))
  {
    {
      double _6240 = (double)_6168;
      if (((0.000000e+00 <= _6240) && (_6240 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_DFEAS"),_6240);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("intpntCoTolMuRed")))
  {
    {
      double _6241 = (double)_6168;
      if (((0.000000e+00 <= _6241) && (_6241 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_MU_RED"),_6241);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("intpntCoTolNearRel")))
  {
    {
      double _6242 = (double)_6168;
      if ((1.000000e+00 <= _6242))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_NEAR_REL"),_6242);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolNearRel)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("intpntCoTolInfeas")))
  {
    {
      double _6243 = (double)_6168;
      if (((0.000000e+00 <= _6243) && (_6243 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_INFEAS"),_6243);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("intpntTolPsafe")))
  {
    {
      double _6244 = (double)_6168;
      if ((1.000000e-04 <= _6244))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PSAFE"),_6244);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPsafe)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("intpntTolDsafe")))
  {
    {
      double _6245 = (double)_6168;
      if ((1.000000e-04 <= _6245))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DSAFE"),_6245);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDsafe)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("mioMaxTime")))
  {
    {
      double _6246 = (double)_6168;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_DPAR_MIO_MAX_TIME"),_6246);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("mioRelGapConst")))
  {
    {
      double _6247 = (double)_6168;
      if ((1.000000e-15 <= _6247))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_DPAR_MIO_REL_GAP_CONST"),_6247);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRelGapConst)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("mioTolRelGap")))
  {
    {
      double _6248 = (double)_6168;
      if ((0.000000e+00 <= _6248))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_GAP"),_6248);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("mioTolAbsGap")))
  {
    {
      double _6249 = (double)_6168;
      if ((0.000000e+00 <= _6249))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_GAP"),_6249);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsGap)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("mioTolAbsRelaxInt")))
  {
    {
      double _6250 = (double)_6168;
      if ((1.000000e-09 <= _6250))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_RELAX_INT"),_6250);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsRelaxInt)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("basisTolX")))
  {
    {
      double _6251 = (double)_6168;
      if ((1.000000e-09 <= _6251))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_X"),_6251);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolX)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("basisTolS")))
  {
    {
      double _6252 = (double)_6168;
      if ((1.000000e-09 <= _6252))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_S"),_6252);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolS)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("basisRelTolS")))
  {
    {
      double _6253 = (double)_6168;
      if ((0.000000e+00 <= _6253))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_DPAR_BASIS_REL_TOL_S"),_6253);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisRelTolS)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("presolveTolX")))
  {
    {
      double _6254 = (double)_6168;
      if ((0.000000e+00 <= _6254))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_X"),_6254);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolX)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("presolveTolS")))
  {
    {
      double _6255 = (double)_6168;
      if ((0.000000e+00 <= _6255))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_S"),_6255);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolS)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("presolveTolAij")))
  {
    {
      double _6256 = (double)_6168;
      if ((1.000000e-15 <= _6256))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_AIJ"),_6256);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAij)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("presolveTolAbsLindep")))
  {
    {
      double _6257 = (double)_6168;
      if ((0.000000e+00 <= _6257))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_ABS_LINDEP"),_6257);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAbsLindep)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("presolveTolRelLindep")))
  {
    {
      double _6258 = (double)_6168;
      if ((0.000000e+00 <= _6258))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_REL_LINDEP"),_6258);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolRelLindep)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("simplexAbsTolPiv")))
  {
    {
      double _6259 = (double)_6168;
      if ((1.000000e-12 <= _6259))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_DPAR_SIMPLEX_ABS_TOL_PIV"),_6259);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simplexAbsTolPiv)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("mioTolFeas")))
  {
    {
      double _6260 = (double)_6168;
      if (((1.000000e-09 <= _6260) && (_6260 <= 1.000000e-03)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_FEAS"),_6260);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolFeas)"));
        }
      }
    }
  }
  {}
  if ((_6167 == std::string ("mioTolRelDualBoundImprovement")))
  {
    {
      double _6261 = (double)_6168;
      if (((0.000000e+00 <= _6261) && (_6261 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6166.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_DUAL_BOUND_IMPROVEMENT"),_6261);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelDualBoundImprovement)"));
        }
      }
    }
  }
  else if((_6167 == std::string ("dataFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (dataFileName)"));
    }
  }
  else if((_6167 == std::string ("basSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basSolFileName)"));
    }
  }
  else if((_6167 == std::string ("itrSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (itrSolFileName)"));
    }
  }
  else if((_6167 == std::string ("intSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intSolFileName)"));
    }
  }
  else if((_6167 == std::string ("writeLpGenVarName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpGenVarName)"));
    }
  }
  else if((_6167 == std::string ("remoteAccessToken")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (remoteAccessToken)"));
    }
  }
  {}
  throw ::mosek::fusion::ParameterError(std::string ("Unknown parameter"));
}
void mosek::fusion::Parameters::setParameter  ( monty::rc_ptr< ::mosek::fusion::Model > _6262,    const std::string & _6263,    const std::string & _6264) { mosek::fusion::p_Parameters::setParameter(_6262,_6263,_6264); }void mosek::fusion::p_Parameters::setParameter(monty::rc_ptr< ::mosek::fusion::Model > _6262,const std::string & _6263,const std::string & _6264){
  if (false)
  {
    {
    }
  }
  {}
  if ((_6263 == std::string ("autoUpdateSolInfo")))
  {
    {
      int _6265 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6264);
      if ((_6265 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (autoUpdateSolInfo)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_AUTO_UPDATE_SOL_INFO"),_6265);
      return;
    }
  }
  {}
  if ((_6263 == std::string ("removeUnusedSolutions")))
  {
    {
      int _6266 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6264);
      if ((_6266 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (removeUnusedSolutions)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_REMOVE_UNUSED_SOLUTIONS"),_6266);
      return;
    }
  }
  {}
  if ((_6263 == std::string ("numThreads")))
  {
    {
      try
      {
        {
          int _6268 = ::mosek::fusion::Utils::Tools::toInt(_6264);
          if (((int)0 <= _6268))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_NUM_THREADS"),_6268);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6267)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("intpntMultiThread")))
  {
    {
      int _6269 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6264);
      if ((_6269 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMultiThread)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MULTI_THREAD"),_6269);
      return;
    }
  }
  {}
  if ((_6263 == std::string ("mtSpincount")))
  {
    {
      try
      {
        {
          int _6271 = ::mosek::fusion::Utils::Tools::toInt(_6264);
          if ((((int)0 <= _6271) && (_6271 <= (int)1000000000)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_MT_SPINCOUNT"),_6271);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6270)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("optimizer")))
  {
    {
      int _6272 = ::mosek::fusion::p_Parameters::string_to_optimizertype_value(_6264);
      if ((_6272 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizer)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_OPTIMIZER"),_6272);
      return;
    }
  }
  {}
  if ((_6263 == std::string ("biMaxIterations")))
  {
    {
      try
      {
        {
          int _6274 = ::mosek::fusion::Utils::Tools::toInt(_6264);
          if (((int)0 <= _6274))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_BI_MAX_ITERATIONS"),_6274);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6273)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("licenseTrhExpiryWrn")))
  {
    {
      try
      {
        {
          int _6276 = ::mosek::fusion::Utils::Tools::toInt(_6264);
          if (((int)0 <= _6276))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_TRH_EXPIRY_WRN"),_6276);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6275)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("logCutSecondOpt")))
  {
    {
      try
      {
        {
          int _6278 = ::mosek::fusion::Utils::Tools::toInt(_6264);
          if (((int)0 <= _6278))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_LOG_CUT_SECOND_OPT"),_6278);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6277)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("logResponse")))
  {
    {
      try
      {
        {
          int _6280 = ::mosek::fusion::Utils::Tools::toInt(_6264);
          if (((int)0 <= _6280))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_LOG_RESPONSE"),_6280);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6279)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("logLocalInfo")))
  {
    {
      int _6281 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6264);
      if ((_6281 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logLocalInfo)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_LOG_LOCAL_INFO"),_6281);
      return;
    }
  }
  {}
  if ((_6263 == std::string ("logBi")))
  {
    {
      try
      {
        {
          int _6283 = ::mosek::fusion::Utils::Tools::toInt(_6264);
          if (((int)0 <= _6283))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI"),_6283);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6282)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("logBiFreq")))
  {
    {
      try
      {
        {
          int _6285 = ::mosek::fusion::Utils::Tools::toInt(_6264);
          if (((int)0 <= _6285))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI_FREQ"),_6285);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6284)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("biCleanOptimizer")))
  {
    {
      int _6286 = ::mosek::fusion::p_Parameters::string_to_optimizertype_value(_6264);
      if ((_6286 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biCleanOptimizer)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_BI_CLEAN_OPTIMIZER"),_6286);
      return;
    }
  }
  {}
  if ((_6263 == std::string ("intpntStartingPoint")))
  {
    {
      int _6287 = ::mosek::fusion::p_Parameters::string_to_startpointtype_value(_6264);
      if ((_6287 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntStartingPoint)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_STARTING_POINT"),_6287);
      return;
    }
  }
  {}
  if ((_6263 == std::string ("intpntDiffStep")))
  {
    {
      int _6288 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6264);
      if ((_6288 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntDiffStep)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_DIFF_STEP"),_6288);
      return;
    }
  }
  {}
  if ((_6263 == std::string ("intpntScaling")))
  {
    {
      int _6289 = ::mosek::fusion::p_Parameters::string_to_scalingtype_value(_6264);
      if ((_6289 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntScaling)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_SCALING"),_6289);
      return;
    }
  }
  {}
  if ((_6263 == std::string ("intpntSolveForm")))
  {
    {
      int _6290 = ::mosek::fusion::p_Parameters::string_to_solveform_value(_6264);
      if ((_6290 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntSolveForm)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_SOLVE_FORM"),_6290);
      return;
    }
  }
  {}
  if ((_6263 == std::string ("logIntpnt")))
  {
    {
      try
      {
        {
          int _6292 = ::mosek::fusion::Utils::Tools::toInt(_6264);
          if (((int)0 <= _6292))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_LOG_INTPNT"),_6292);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6291)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("intpntMaxIterations")))
  {
    {
      try
      {
        {
          int _6294 = ::mosek::fusion::Utils::Tools::toInt(_6264);
          if (((int)0 <= _6294))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_ITERATIONS"),_6294);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6293)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("intpntOffColTrh")))
  {
    {
      try
      {
        {
          int _6296 = ::mosek::fusion::Utils::Tools::toInt(_6264);
          if (((int)0 <= _6296))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_OFF_COL_TRH"),_6296);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6295)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("intpntOrderMethod")))
  {
    {
      int _6297 = ::mosek::fusion::p_Parameters::string_to_orderingtype_value(_6264);
      if ((_6297 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderMethod)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_ORDER_METHOD"),_6297);
      return;
    }
  }
  {}
  if ((_6263 == std::string ("intpntOrderGpNumSeeds")))
  {
    {
      try
      {
        {
          int _6299 = ::mosek::fusion::Utils::Tools::toInt(_6264);
          if (((int)0 <= _6299))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_ORDER_GP_NUM_SEEDS"),_6299);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderGpNumSeeds)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6298)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderGpNumSeeds)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("intpntBasis")))
  {
    {
      int _6300 = ::mosek::fusion::p_Parameters::string_to_basindtype_value(_6264);
      if ((_6300 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntBasis)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_BASIS"),_6300);
      return;
    }
  }
  {}
  if ((_6263 == std::string ("biIgnoreMaxIter")))
  {
    {
      int _6301 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6264);
      if ((_6301 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreMaxIter)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_BI_IGNORE_MAX_ITER"),_6301);
      return;
    }
  }
  {}
  if ((_6263 == std::string ("biIgnoreNumError")))
  {
    {
      int _6302 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6264);
      if ((_6302 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreNumError)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_BI_IGNORE_NUM_ERROR"),_6302);
      return;
    }
  }
  {}
  if ((_6263 == std::string ("intpntMaxNumCor")))
  {
    {
      try
      {
        {
          int _6304 = ::mosek::fusion::Utils::Tools::toInt(_6264);
          if (((-(int)1) <= _6304))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_NUM_COR"),_6304);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6303)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("presolveUse")))
  {
    {
      int _6305 = ::mosek::fusion::p_Parameters::string_to_presolvemode_value(_6264);
      if ((_6305 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveUse)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_USE"),_6305);
      return;
    }
  }
  {}
  if ((_6263 == std::string ("presolveLevel")))
  {
    {
      try
      {
        {
          int _6307 = ::mosek::fusion::Utils::Tools::toInt(_6264);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LEVEL"),_6307);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6306)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("logPresolve")))
  {
    {
      try
      {
        {
          int _6309 = ::mosek::fusion::Utils::Tools::toInt(_6264);
          if (((int)0 <= _6309))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_LOG_PRESOLVE"),_6309);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6308)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("presolveLindepUse")))
  {
    {
      int _6310 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6264);
      if ((_6310 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepUse)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_USE"),_6310);
      return;
    }
  }
  {}
  if ((_6263 == std::string ("presolveMaxNumPass")))
  {
    {
      try
      {
        {
          int _6312 = ::mosek::fusion::Utils::Tools::toInt(_6264);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_MAX_NUM_PASS"),_6312);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumPass)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6311)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumPass)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("presolveEliminatorMaxNumTries")))
  {
    {
      try
      {
        {
          int _6314 = ::mosek::fusion::Utils::Tools::toInt(_6264);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_NUM_TRIES"),_6314);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6313)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("presolveEliminatorMaxFill")))
  {
    {
      try
      {
        {
          int _6316 = ::mosek::fusion::Utils::Tools::toInt(_6264);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_FILL"),_6316);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6315)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("simPrimalCrash")))
  {
    {
      try
      {
        {
          int _6318 = ::mosek::fusion::Utils::Tools::toInt(_6264);
          if (((int)0 <= _6318))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_CRASH"),_6318);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6317)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("logSim")))
  {
    {
      try
      {
        {
          int _6320 = ::mosek::fusion::Utils::Tools::toInt(_6264);
          if (((int)0 <= _6320))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM"),_6320);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6319)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("logSimMinor")))
  {
    {
      try
      {
        {
          int _6322 = ::mosek::fusion::Utils::Tools::toInt(_6264);
          if (((int)0 <= _6322))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_MINOR"),_6322);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6321)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("logSimFreq")))
  {
    {
      try
      {
        {
          int _6324 = ::mosek::fusion::Utils::Tools::toInt(_6264);
          if (((int)0 <= _6324))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_FREQ"),_6324);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6323)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("simPrimalRestrictSelection")))
  {
    {
      try
      {
        {
          int _6326 = ::mosek::fusion::Utils::Tools::toInt(_6264);
          if ((((int)0 <= _6326) && (_6326 <= (int)100)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_RESTRICT_SELECTION"),_6326);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6325)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("simPrimalSelection")))
  {
    {
      int _6327 = ::mosek::fusion::p_Parameters::string_to_simseltype_value(_6264);
      if ((_6327 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalSelection)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_SELECTION"),_6327);
      return;
    }
  }
  {}
  if ((_6263 == std::string ("simDualRestrictSelection")))
  {
    {
      try
      {
        {
          int _6329 = ::mosek::fusion::Utils::Tools::toInt(_6264);
          if ((((int)0 <= _6329) && (_6329 <= (int)100)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_RESTRICT_SELECTION"),_6329);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6328)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("simDualSelection")))
  {
    {
      int _6330 = ::mosek::fusion::p_Parameters::string_to_simseltype_value(_6264);
      if ((_6330 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualSelection)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_SELECTION"),_6330);
      return;
    }
  }
  {}
  if ((_6263 == std::string ("simMaxIterations")))
  {
    {
      try
      {
        {
          int _6332 = ::mosek::fusion::Utils::Tools::toInt(_6264);
          if (((int)0 <= _6332))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_ITERATIONS"),_6332);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6331)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("simHotstartLu")))
  {
    {
      int _6333 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6264);
      if ((_6333 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstartLu)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_SIM_HOTSTART_LU"),_6333);
      return;
    }
  }
  {}
  if ((_6263 == std::string ("simRefactorFreq")))
  {
    {
      try
      {
        {
          int _6335 = ::mosek::fusion::Utils::Tools::toInt(_6264);
          if (((int)0 <= _6335))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_SIM_REFACTOR_FREQ"),_6335);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6334)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("simSeed")))
  {
    {
      try
      {
        {
          int _6337 = ::mosek::fusion::Utils::Tools::toInt(_6264);
          if ((((int)0 <= _6337) && (_6337 <= (int)32749)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_SIM_SEED"),_6337);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSeed)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6336)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSeed)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("mioMode")))
  {
    {
      int _6338 = ::mosek::fusion::p_Parameters::string_to_miomode_value(_6264);
      if ((_6338 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMode)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_MIO_MODE"),_6338);
      return;
    }
  }
  {}
  if ((_6263 == std::string ("logMio")))
  {
    {
      try
      {
        {
          int _6340 = ::mosek::fusion::Utils::Tools::toInt(_6264);
          if (((int)0 <= _6340))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO"),_6340);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6339)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("logMioFreq")))
  {
    {
      try
      {
        {
          int _6342 = ::mosek::fusion::Utils::Tools::toInt(_6264);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO_FREQ"),_6342);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6341)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("mioMaxNumRelaxs")))
  {
    {
      try
      {
        {
          int _6344 = ::mosek::fusion::Utils::Tools::toInt(_6264);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_RELAXS"),_6344);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6343)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("mioMaxNumBranches")))
  {
    {
      try
      {
        {
          int _6346 = ::mosek::fusion::Utils::Tools::toInt(_6264);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_BRANCHES"),_6346);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6345)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("mioMaxNumRootCutRounds")))
  {
    {
      try
      {
        {
          int _6348 = ::mosek::fusion::Utils::Tools::toInt(_6264);
          if (((int)0 <= _6348))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_ROOT_CUT_ROUNDS"),_6348);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRootCutRounds)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6347)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRootCutRounds)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("mioMaxNumSolutions")))
  {
    {
      try
      {
        {
          int _6350 = ::mosek::fusion::Utils::Tools::toInt(_6264);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_SOLUTIONS"),_6350);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6349)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("mioNodeSelection")))
  {
    {
      int _6351 = ::mosek::fusion::p_Parameters::string_to_mionodeseltype_value(_6264);
      if ((_6351 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeSelection)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_MIO_NODE_SELECTION"),_6351);
      return;
    }
  }
  {}
  if ((_6263 == std::string ("mioHeuristicLevel")))
  {
    {
      try
      {
        {
          int _6353 = ::mosek::fusion::Utils::Tools::toInt(_6264);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_MIO_HEURISTIC_LEVEL"),_6353);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6352)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("mioProbingLevel")))
  {
    {
      try
      {
        {
          int _6355 = ::mosek::fusion::Utils::Tools::toInt(_6264);
          if ((((-(int)1) <= _6355) && (_6355 <= (int)3)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_MIO_PROBING_LEVEL"),_6355);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6354)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("mioCutSelectionLevel")))
  {
    {
      try
      {
        {
          int _6357 = ::mosek::fusion::Utils::Tools::toInt(_6264);
          if ((((-(int)1) <= _6357) && (_6357 <= (int)1)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_SELECTION_LEVEL"),_6357);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6356)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("mioVbDetectionLevel")))
  {
    {
      try
      {
        {
          int _6359 = ::mosek::fusion::Utils::Tools::toInt(_6264);
          if ((((-(int)1) <= _6359) && (_6359 <= (int)2)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_MIO_VB_DETECTION_LEVEL"),_6359);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6358)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("mioBranchDir")))
  {
    {
      int _6360 = ::mosek::fusion::p_Parameters::string_to_branchdir_value(_6264);
      if ((_6360 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioBranchDir)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_MIO_BRANCH_DIR"),_6360);
      return;
    }
  }
  {}
  if ((_6263 == std::string ("mioRootOptimizer")))
  {
    {
      int _6361 = ::mosek::fusion::p_Parameters::string_to_optimizertype_value(_6264);
      if ((_6361 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootOptimizer)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_MIO_ROOT_OPTIMIZER"),_6361);
      return;
    }
  }
  {}
  if ((_6263 == std::string ("mioNodeOptimizer")))
  {
    {
      int _6362 = ::mosek::fusion::p_Parameters::string_to_optimizertype_value(_6264);
      if ((_6362 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeOptimizer)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_MIO_NODE_OPTIMIZER"),_6362);
      return;
    }
  }
  {}
  if ((_6263 == std::string ("mioPerspectiveReformulate")))
  {
    {
      int _6363 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6264);
      if ((_6363 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPerspectiveReformulate)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_MIO_PERSPECTIVE_REFORMULATE"),_6363);
      return;
    }
  }
  {}
  if ((_6263 == std::string ("mioPropagateObjectiveConstraint")))
  {
    {
      int _6364 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6264);
      if ((_6364 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPropagateObjectiveConstraint)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_MIO_PROPAGATE_OBJECTIVE_CONSTRAINT"),_6364);
      return;
    }
  }
  {}
  if ((_6263 == std::string ("mioSeed")))
  {
    {
      try
      {
        {
          int _6366 = ::mosek::fusion::Utils::Tools::toInt(_6264);
          if (((int)0 <= _6366))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_MIO_SEED"),_6366);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSeed)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6365)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSeed)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("mioConicOuterApproximation")))
  {
    {
      int _6367 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6264);
      if ((_6367 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioConicOuterApproximation)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_MIO_CONIC_OUTER_APPROXIMATION"),_6367);
      return;
    }
  }
  {}
  if ((_6263 == std::string ("writeLpQuotedNames")))
  {
    {
      int _6368 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6264);
      if ((_6368 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpQuotedNames)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_QUOTED_NAMES"),_6368);
      return;
    }
  }
  {}
  if ((_6263 == std::string ("writeLpLineWidth")))
  {
    {
      try
      {
        {
          int _6370 = ::mosek::fusion::Utils::Tools::toInt(_6264);
          if (((int)40 <= _6370))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_LINE_WIDTH"),_6370);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6369)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("writeLpTermsPerLine")))
  {
    {
      try
      {
        {
          int _6372 = ::mosek::fusion::Utils::Tools::toInt(_6264);
          if (((int)0 <= _6372))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_TERMS_PER_LINE"),_6372);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpTermsPerLine)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6371)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpTermsPerLine)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("writeLpFullObj")))
  {
    {
      int _6373 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6264);
      if ((_6373 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpFullObj)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_FULL_OBJ"),_6373);
      return;
    }
  }
  {}
  if ((_6263 == std::string ("logInfeasAna")))
  {
    {
      try
      {
        {
          int _6375 = ::mosek::fusion::Utils::Tools::toInt(_6264);
          if (((int)0 <= _6375))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_LOG_INFEAS_ANA"),_6375);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6374)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("licenseWait")))
  {
    {
      int _6376 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6264);
      if ((_6376 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseWait)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_WAIT"),_6376);
      return;
    }
  }
  {}
  if ((_6263 == std::string ("licenseSuppressExpireWrns")))
  {
    {
      int _6377 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6264);
      if ((_6377 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseSuppressExpireWrns)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_SUPPRESS_EXPIRE_WRNS"),_6377);
      return;
    }
  }
  {}
  if ((_6263 == std::string ("licensePauseTime")))
  {
    {
      try
      {
        {
          int _6379 = ::mosek::fusion::Utils::Tools::toInt(_6264);
          if ((((int)0 <= _6379) && (_6379 <= (int)1000000)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_PAUSE_TIME"),_6379);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6378)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("licenseDebug")))
  {
    {
      int _6380 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6264);
      if ((_6380 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseDebug)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_DEBUG"),_6380);
      return;
    }
  }
  {}
  if ((_6263 == std::string ("log")))
  {
    {
      try
      {
        {
          int _6382 = ::mosek::fusion::Utils::Tools::toInt(_6264);
          if (((int)0 <= _6382))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_LOG"),_6382);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6381)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("logExpand")))
  {
    {
      try
      {
        {
          int _6384 = ::mosek::fusion::Utils::Tools::toInt(_6264);
          if (((int)0 <= _6384))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_LOG_EXPAND"),_6384);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6383)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("logFile")))
  {
    {
      try
      {
        {
          int _6386 = ::mosek::fusion::Utils::Tools::toInt(_6264);
          if (((int)0 <= _6386))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_LOG_FILE"),_6386);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6385)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("logOrder")))
  {
    {
      try
      {
        {
          int _6388 = ::mosek::fusion::Utils::Tools::toInt(_6264);
          if (((int)0 <= _6388))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_LOG_ORDER"),_6388);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6387)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("simScaling")))
  {
    {
      int _6389 = ::mosek::fusion::p_Parameters::string_to_scalingtype_value(_6264);
      if ((_6389 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScaling)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_SIM_SCALING"),_6389);
      return;
    }
  }
  {}
  if ((_6263 == std::string ("simScalingMethod")))
  {
    {
      int _6390 = ::mosek::fusion::p_Parameters::string_to_scalingmethod_value(_6264);
      if ((_6390 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScalingMethod)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_SIM_SCALING_METHOD"),_6390);
      return;
    }
  }
  {}
  if ((_6263 == std::string ("simPrimalPhaseoneMethod")))
  {
    {
      try
      {
        {
          int _6392 = ::mosek::fusion::Utils::Tools::toInt(_6264);
          if ((((int)0 <= _6392) && (_6392 <= (int)10)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_PHASEONE_METHOD"),_6392);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6391)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("simDualPhaseoneMethod")))
  {
    {
      try
      {
        {
          int _6394 = ::mosek::fusion::Utils::Tools::toInt(_6264);
          if ((((int)0 <= _6394) && (_6394 <= (int)10)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_PHASEONE_METHOD"),_6394);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6393)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("simMaxNumSetbacks")))
  {
    {
      try
      {
        {
          int _6396 = ::mosek::fusion::Utils::Tools::toInt(_6264);
          if (((int)0 <= _6396))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_NUM_SETBACKS"),_6396);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6395)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("simHotstart")))
  {
    {
      int _6397 = ::mosek::fusion::p_Parameters::string_to_simhotstart_value(_6264);
      if ((_6397 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstart)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_SIM_HOTSTART"),_6397);
      return;
    }
  }
  {}
  if ((_6263 == std::string ("simBasisFactorUse")))
  {
    {
      int _6398 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6264);
      if ((_6398 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simBasisFactorUse)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_SIM_BASIS_FACTOR_USE"),_6398);
      return;
    }
  }
  {}
  if ((_6263 == std::string ("simDegen")))
  {
    {
      int _6399 = ::mosek::fusion::p_Parameters::string_to_simdegen_value(_6264);
      if ((_6399 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDegen)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_SIM_DEGEN"),_6399);
      return;
    }
  }
  {}
  if ((_6263 == std::string ("simReformulation")))
  {
    {
      int _6400 = ::mosek::fusion::p_Parameters::string_to_simreform_value(_6264);
      if ((_6400 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simReformulation)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_SIM_REFORMULATION"),_6400);
      return;
    }
  }
  {}
  if ((_6263 == std::string ("simExploitDupvec")))
  {
    {
      int _6401 = ::mosek::fusion::p_Parameters::string_to_simdupvec_value(_6264);
      if ((_6401 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simExploitDupvec)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_SIM_EXPLOIT_DUPVEC"),_6401);
      return;
    }
  }
  {}
  if ((_6263 == std::string ("simSaveLu")))
  {
    {
      int _6402 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6264);
      if ((_6402 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSaveLu)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_SIM_SAVE_LU"),_6402);
      return;
    }
  }
  {}
  if ((_6263 == std::string ("simNonSingular")))
  {
    {
      int _6403 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6264);
      if ((_6403 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simNonSingular)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_SIM_NON_SINGULAR"),_6403);
      return;
    }
  }
  {}
  if ((_6263 == std::string ("simDualCrash")))
  {
    {
      try
      {
        {
          int _6405 = ::mosek::fusion::Utils::Tools::toInt(_6264);
          if (((int)0 <= _6405))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_CRASH"),_6405);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6404)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("infeasPreferPrimal")))
  {
    {
      int _6406 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6264);
      if ((_6406 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (infeasPreferPrimal)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_INFEAS_PREFER_PRIMAL"),_6406);
      return;
    }
  }
  {}
  if ((_6263 == std::string ("mioRootRepeatPresolveLevel")))
  {
    {
      try
      {
        {
          int _6408 = ::mosek::fusion::Utils::Tools::toInt(_6264);
          if ((((-(int)1) <= _6408) && (_6408 <= (int)1)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_MIO_ROOT_REPEAT_PRESOLVE_LEVEL"),_6408);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6407)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("mioCutCmir")))
  {
    {
      int _6409 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6264);
      if ((_6409 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutCmir)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_CMIR"),_6409);
      return;
    }
  }
  {}
  if ((_6263 == std::string ("mioCutClique")))
  {
    {
      int _6410 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6264);
      if ((_6410 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutClique)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_CLIQUE"),_6410);
      return;
    }
  }
  {}
  if ((_6263 == std::string ("mioCutImpliedBound")))
  {
    {
      int _6411 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6264);
      if ((_6411 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutImpliedBound)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_IMPLIED_BOUND"),_6411);
      return;
    }
  }
  {}
  if ((_6263 == std::string ("mioCutKnapsackCover")))
  {
    {
      int _6412 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6264);
      if ((_6412 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutKnapsackCover)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_KNAPSACK_COVER"),_6412);
      return;
    }
  }
  {}
  if ((_6263 == std::string ("mioCutGmi")))
  {
    {
      int _6413 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6264);
      if ((_6413 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutGmi)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_GMI"),_6413);
      return;
    }
  }
  {}
  if ((_6263 == std::string ("presolveLindepRelWorkTrh")))
  {
    {
      try
      {
        {
          int _6415 = ::mosek::fusion::Utils::Tools::toInt(_6264);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_REL_WORK_TRH"),_6415);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6414)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("presolveLindepAbsWorkTrh")))
  {
    {
      try
      {
        {
          int _6417 = ::mosek::fusion::Utils::Tools::toInt(_6264);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_ABS_WORK_TRH"),_6417);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6416)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("cacheLicense")))
  {
    {
      int _6418 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6264);
      if ((_6418 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (cacheLicense)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_CACHE_LICENSE"),_6418);
      return;
    }
  }
  {}
  if ((_6263 == std::string ("intpntRegularizationUse")))
  {
    {
      int _6419 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6264);
      if ((_6419 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntRegularizationUse)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_REGULARIZATION_USE"),_6419);
      return;
    }
  }
  {}
  if ((_6263 == std::string ("simSolveForm")))
  {
    {
      int _6420 = ::mosek::fusion::p_Parameters::string_to_solveform_value(_6264);
      if ((_6420 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSolveForm)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_SIM_SOLVE_FORM"),_6420);
      return;
    }
  }
  {}
  if ((_6263 == std::string ("simSwitchOptimizer")))
  {
    {
      int _6421 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6264);
      if ((_6421 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSwitchOptimizer)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_SIM_SWITCH_OPTIMIZER"),_6421);
      return;
    }
  }
  {}
  if ((_6263 == std::string ("mioRinsMaxNodes")))
  {
    {
      try
      {
        {
          int _6423 = ::mosek::fusion::Utils::Tools::toInt(_6264);
          if (((-(int)1) <= _6423))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_MIO_RINS_MAX_NODES"),_6423);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6422)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("mioFeaspumpLevel")))
  {
    {
      try
      {
        {
          int _6425 = ::mosek::fusion::Utils::Tools::toInt(_6264);
          if ((((-(int)1) <= _6425) && (_6425 <= (int)2)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_IPAR_MIO_FEASPUMP_LEVEL"),_6425);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioFeaspumpLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6424)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioFeaspumpLevel)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("optimizerMaxTime")))
  {
    {
      try
      {
        {
          double _6427 = ::mosek::fusion::Utils::Tools::toDouble(_6264);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_DPAR_OPTIMIZER_MAX_TIME"),_6427);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTime)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6426)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("lowerObjCut")))
  {
    {
      try
      {
        {
          double _6429 = ::mosek::fusion::Utils::Tools::toDouble(_6264);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT"),_6429);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCut)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6428)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCut)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("upperObjCut")))
  {
    {
      try
      {
        {
          double _6431 = ::mosek::fusion::Utils::Tools::toDouble(_6264);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT"),_6431);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCut)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6430)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCut)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("upperObjCutFiniteTrh")))
  {
    {
      try
      {
        {
          double _6433 = ::mosek::fusion::Utils::Tools::toDouble(_6264);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT_FINITE_TRH"),_6433);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCutFiniteTrh)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6432)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("lowerObjCutFiniteTrh")))
  {
    {
      try
      {
        {
          double _6435 = ::mosek::fusion::Utils::Tools::toDouble(_6264);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT_FINITE_TRH"),_6435);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCutFiniteTrh)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6434)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("intpntTolRelGap")))
  {
    {
      try
      {
        {
          double _6437 = ::mosek::fusion::Utils::Tools::toDouble(_6264);
          if ((1.000000e-14 <= _6437))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_GAP"),_6437);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelGap)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6436)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("intpntTolStepSize")))
  {
    {
      try
      {
        {
          double _6439 = ::mosek::fusion::Utils::Tools::toDouble(_6264);
          if (((0.000000e+00 <= _6439) && (_6439 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_STEP_SIZE"),_6439);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolStepSize)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6438)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolStepSize)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("simLuTolRelPiv")))
  {
    {
      try
      {
        {
          double _6441 = ::mosek::fusion::Utils::Tools::toDouble(_6264);
          if (((1.000000e-06 <= _6441) && (_6441 <= 9.999990e-01)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_DPAR_SIM_LU_TOL_REL_PIV"),_6441);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simLuTolRelPiv)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6440)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simLuTolRelPiv)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("intpntTolRelStep")))
  {
    {
      try
      {
        {
          double _6443 = ::mosek::fusion::Utils::Tools::toDouble(_6264);
          if (((1.000000e-04 <= _6443) && (_6443 <= 9.999990e-01)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_STEP"),_6443);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelStep)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6442)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelStep)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("intpntTolPath")))
  {
    {
      try
      {
        {
          double _6445 = ::mosek::fusion::Utils::Tools::toDouble(_6264);
          if (((0.000000e+00 <= _6445) && (_6445 <= 9.999000e-01)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PATH"),_6445);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPath)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6444)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPath)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("intpntTolPfeas")))
  {
    {
      try
      {
        {
          double _6447 = ::mosek::fusion::Utils::Tools::toDouble(_6264);
          if (((0.000000e+00 <= _6447) && (_6447 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PFEAS"),_6447);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6446)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("intpntTolDfeas")))
  {
    {
      try
      {
        {
          double _6449 = ::mosek::fusion::Utils::Tools::toDouble(_6264);
          if (((0.000000e+00 <= _6449) && (_6449 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DFEAS"),_6449);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6448)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("intpntTolMuRed")))
  {
    {
      try
      {
        {
          double _6451 = ::mosek::fusion::Utils::Tools::toDouble(_6264);
          if (((0.000000e+00 <= _6451) && (_6451 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_MU_RED"),_6451);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolMuRed)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6450)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("intpntTolInfeas")))
  {
    {
      try
      {
        {
          double _6453 = ::mosek::fusion::Utils::Tools::toDouble(_6264);
          if (((0.000000e+00 <= _6453) && (_6453 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_INFEAS"),_6453);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolInfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6452)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("intpntCoTolRelGap")))
  {
    {
      try
      {
        {
          double _6455 = ::mosek::fusion::Utils::Tools::toDouble(_6264);
          if (((0.000000e+00 <= _6455) && (_6455 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_REL_GAP"),_6455);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolRelGap)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6454)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("intpntCoTolPfeas")))
  {
    {
      try
      {
        {
          double _6457 = ::mosek::fusion::Utils::Tools::toDouble(_6264);
          if (((0.000000e+00 <= _6457) && (_6457 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_PFEAS"),_6457);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolPfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6456)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("intpntCoTolDfeas")))
  {
    {
      try
      {
        {
          double _6459 = ::mosek::fusion::Utils::Tools::toDouble(_6264);
          if (((0.000000e+00 <= _6459) && (_6459 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_DFEAS"),_6459);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolDfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6458)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("intpntCoTolMuRed")))
  {
    {
      try
      {
        {
          double _6461 = ::mosek::fusion::Utils::Tools::toDouble(_6264);
          if (((0.000000e+00 <= _6461) && (_6461 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_MU_RED"),_6461);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolMuRed)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6460)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("intpntCoTolNearRel")))
  {
    {
      try
      {
        {
          double _6463 = ::mosek::fusion::Utils::Tools::toDouble(_6264);
          if ((1.000000e+00 <= _6463))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_NEAR_REL"),_6463);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolNearRel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6462)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolNearRel)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("intpntCoTolInfeas")))
  {
    {
      try
      {
        {
          double _6465 = ::mosek::fusion::Utils::Tools::toDouble(_6264);
          if (((0.000000e+00 <= _6465) && (_6465 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_INFEAS"),_6465);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolInfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6464)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("intpntTolPsafe")))
  {
    {
      try
      {
        {
          double _6467 = ::mosek::fusion::Utils::Tools::toDouble(_6264);
          if ((1.000000e-04 <= _6467))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PSAFE"),_6467);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPsafe)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6466)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPsafe)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("intpntTolDsafe")))
  {
    {
      try
      {
        {
          double _6469 = ::mosek::fusion::Utils::Tools::toDouble(_6264);
          if ((1.000000e-04 <= _6469))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DSAFE"),_6469);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDsafe)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6468)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDsafe)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("mioMaxTime")))
  {
    {
      try
      {
        {
          double _6471 = ::mosek::fusion::Utils::Tools::toDouble(_6264);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_DPAR_MIO_MAX_TIME"),_6471);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxTime)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6470)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("mioRelGapConst")))
  {
    {
      try
      {
        {
          double _6473 = ::mosek::fusion::Utils::Tools::toDouble(_6264);
          if ((1.000000e-15 <= _6473))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_DPAR_MIO_REL_GAP_CONST"),_6473);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRelGapConst)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6472)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRelGapConst)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("mioTolRelGap")))
  {
    {
      try
      {
        {
          double _6475 = ::mosek::fusion::Utils::Tools::toDouble(_6264);
          if ((0.000000e+00 <= _6475))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_GAP"),_6475);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelGap)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6474)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("mioTolAbsGap")))
  {
    {
      try
      {
        {
          double _6477 = ::mosek::fusion::Utils::Tools::toDouble(_6264);
          if ((0.000000e+00 <= _6477))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_GAP"),_6477);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsGap)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6476)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsGap)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("mioTolAbsRelaxInt")))
  {
    {
      try
      {
        {
          double _6479 = ::mosek::fusion::Utils::Tools::toDouble(_6264);
          if ((1.000000e-09 <= _6479))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_RELAX_INT"),_6479);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsRelaxInt)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6478)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsRelaxInt)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("basisTolX")))
  {
    {
      try
      {
        {
          double _6481 = ::mosek::fusion::Utils::Tools::toDouble(_6264);
          if ((1.000000e-09 <= _6481))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_X"),_6481);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolX)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6480)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolX)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("basisTolS")))
  {
    {
      try
      {
        {
          double _6483 = ::mosek::fusion::Utils::Tools::toDouble(_6264);
          if ((1.000000e-09 <= _6483))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_S"),_6483);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolS)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6482)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolS)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("basisRelTolS")))
  {
    {
      try
      {
        {
          double _6485 = ::mosek::fusion::Utils::Tools::toDouble(_6264);
          if ((0.000000e+00 <= _6485))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_DPAR_BASIS_REL_TOL_S"),_6485);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisRelTolS)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6484)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisRelTolS)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("presolveTolX")))
  {
    {
      try
      {
        {
          double _6487 = ::mosek::fusion::Utils::Tools::toDouble(_6264);
          if ((0.000000e+00 <= _6487))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_X"),_6487);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolX)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6486)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolX)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("presolveTolS")))
  {
    {
      try
      {
        {
          double _6489 = ::mosek::fusion::Utils::Tools::toDouble(_6264);
          if ((0.000000e+00 <= _6489))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_S"),_6489);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolS)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6488)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolS)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("presolveTolAij")))
  {
    {
      try
      {
        {
          double _6491 = ::mosek::fusion::Utils::Tools::toDouble(_6264);
          if ((1.000000e-15 <= _6491))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_AIJ"),_6491);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAij)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6490)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAij)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("presolveTolAbsLindep")))
  {
    {
      try
      {
        {
          double _6493 = ::mosek::fusion::Utils::Tools::toDouble(_6264);
          if ((0.000000e+00 <= _6493))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_ABS_LINDEP"),_6493);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAbsLindep)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6492)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAbsLindep)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("presolveTolRelLindep")))
  {
    {
      try
      {
        {
          double _6495 = ::mosek::fusion::Utils::Tools::toDouble(_6264);
          if ((0.000000e+00 <= _6495))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_REL_LINDEP"),_6495);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolRelLindep)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6494)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolRelLindep)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("simplexAbsTolPiv")))
  {
    {
      try
      {
        {
          double _6497 = ::mosek::fusion::Utils::Tools::toDouble(_6264);
          if ((1.000000e-12 <= _6497))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_DPAR_SIMPLEX_ABS_TOL_PIV"),_6497);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simplexAbsTolPiv)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6496)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simplexAbsTolPiv)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("mioTolFeas")))
  {
    {
      try
      {
        {
          double _6499 = ::mosek::fusion::Utils::Tools::toDouble(_6264);
          if (((1.000000e-09 <= _6499) && (_6499 <= 1.000000e-03)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_FEAS"),_6499);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolFeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6498)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolFeas)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("mioTolRelDualBoundImprovement")))
  {
    {
      try
      {
        {
          double _6501 = ::mosek::fusion::Utils::Tools::toDouble(_6264);
          if (((0.000000e+00 <= _6501) && (_6501 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_DUAL_BOUND_IMPROVEMENT"),_6501);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelDualBoundImprovement)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6500)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelDualBoundImprovement)"));
        }
      }
    }
  }
  {}
  if ((_6263 == std::string ("dataFileName")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_SPAR_DATA_FILE_NAME"),_6264);
      return;
    }
  }
  {}
  if ((_6263 == std::string ("basSolFileName")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_SPAR_BAS_SOL_FILE_NAME"),_6264);
      return;
    }
  }
  {}
  if ((_6263 == std::string ("itrSolFileName")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_SPAR_ITR_SOL_FILE_NAME"),_6264);
      return;
    }
  }
  {}
  if ((_6263 == std::string ("intSolFileName")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_SPAR_INT_SOL_FILE_NAME"),_6264);
      return;
    }
  }
  {}
  if ((_6263 == std::string ("writeLpGenVarName")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_SPAR_WRITE_LP_GEN_VAR_NAME"),_6264);
      return;
    }
  }
  {}
  if ((_6263 == std::string ("remoteAccessToken")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_6262.get())->task_put_param(std::string ("MSK_SPAR_REMOTE_ACCESS_TOKEN"),_6264);
      return;
    }
  }
  {}
  throw ::mosek::fusion::ParameterError(std::string ("Unknown parameter"));
}
int mosek::fusion::p_Parameters::string_to_variabletype_value(const std::string & _6502){
  if ((_6502 == std::string ("typeCont")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6502 == std::string ("typeInt")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_nametype_value(const std::string & _6503){
  if ((_6503 == std::string ("gen")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6503 == std::string ("mps")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6503 == std::string ("lp")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_iomode_value(const std::string & _6504){
  if ((_6504 == std::string ("read")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6504 == std::string ("write")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6504 == std::string ("readwrite")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_presolvemode_value(const std::string & _6505){
  if ((_6505 == std::string ("off")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6505 == std::string ("on")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6505 == std::string ("free")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_rescode_value(const std::string & _6506){
  if ((_6506 == std::string ("ok")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6506 == std::string ("wrnOpenParamFile")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_6506 == std::string ("wrnLargeBound")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_6506 == std::string ("wrnLargeLoBound")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_6506 == std::string ("wrnLargeUpBound")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_6506 == std::string ("wrnLargeConFx")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_6506 == std::string ("wrnLargeCj")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_6506 == std::string ("wrnLargeAij")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_6506 == std::string ("wrnZeroAij")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_6506 == std::string ("wrnNameMaxLen")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_6506 == std::string ("wrnSparMaxLen")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_6506 == std::string ("wrnMpsSplitRhsVector")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_6506 == std::string ("wrnMpsSplitRanVector")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_6506 == std::string ("wrnMpsSplitBouVector")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_6506 == std::string ("wrnLpOldQuadFormat")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_6506 == std::string ("wrnLpDropVariable")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_6506 == std::string ("wrnNzInUprTri")))
  {
    {
      return (int)200;
    }
  }
  {}
  if ((_6506 == std::string ("wrnDroppedNzQobj")))
  {
    {
      return (int)201;
    }
  }
  {}
  if ((_6506 == std::string ("wrnIgnoreInteger")))
  {
    {
      return (int)250;
    }
  }
  {}
  if ((_6506 == std::string ("wrnNoGlobalOptimizer")))
  {
    {
      return (int)251;
    }
  }
  {}
  if ((_6506 == std::string ("wrnMioInfeasibleFinal")))
  {
    {
      return (int)270;
    }
  }
  {}
  if ((_6506 == std::string ("wrnSolFilter")))
  {
    {
      return (int)300;
    }
  }
  {}
  if ((_6506 == std::string ("wrnUndefSolFileName")))
  {
    {
      return (int)350;
    }
  }
  {}
  if ((_6506 == std::string ("wrnSolFileIgnoredCon")))
  {
    {
      return (int)351;
    }
  }
  {}
  if ((_6506 == std::string ("wrnSolFileIgnoredVar")))
  {
    {
      return (int)352;
    }
  }
  {}
  if ((_6506 == std::string ("wrnTooFewBasisVars")))
  {
    {
      return (int)400;
    }
  }
  {}
  if ((_6506 == std::string ("wrnTooManyBasisVars")))
  {
    {
      return (int)405;
    }
  }
  {}
  if ((_6506 == std::string ("wrnLicenseExpire")))
  {
    {
      return (int)500;
    }
  }
  {}
  if ((_6506 == std::string ("wrnLicenseServer")))
  {
    {
      return (int)501;
    }
  }
  {}
  if ((_6506 == std::string ("wrnEmptyName")))
  {
    {
      return (int)502;
    }
  }
  {}
  if ((_6506 == std::string ("wrnUsingGenericNames")))
  {
    {
      return (int)503;
    }
  }
  {}
  if ((_6506 == std::string ("wrnLicenseFeatureExpire")))
  {
    {
      return (int)505;
    }
  }
  {}
  if ((_6506 == std::string ("wrnParamNameDou")))
  {
    {
      return (int)510;
    }
  }
  {}
  if ((_6506 == std::string ("wrnParamNameInt")))
  {
    {
      return (int)511;
    }
  }
  {}
  if ((_6506 == std::string ("wrnParamNameStr")))
  {
    {
      return (int)512;
    }
  }
  {}
  if ((_6506 == std::string ("wrnParamStrValue")))
  {
    {
      return (int)515;
    }
  }
  {}
  if ((_6506 == std::string ("wrnParamIgnoredCmio")))
  {
    {
      return (int)516;
    }
  }
  {}
  if ((_6506 == std::string ("wrnZerosInSparseRow")))
  {
    {
      return (int)705;
    }
  }
  {}
  if ((_6506 == std::string ("wrnZerosInSparseCol")))
  {
    {
      return (int)710;
    }
  }
  {}
  if ((_6506 == std::string ("wrnIncompleteLinearDependencyCheck")))
  {
    {
      return (int)800;
    }
  }
  {}
  if ((_6506 == std::string ("wrnEliminatorSpace")))
  {
    {
      return (int)801;
    }
  }
  {}
  if ((_6506 == std::string ("wrnPresolveOutofspace")))
  {
    {
      return (int)802;
    }
  }
  {}
  if ((_6506 == std::string ("wrnWriteChangedNames")))
  {
    {
      return (int)803;
    }
  }
  {}
  if ((_6506 == std::string ("wrnWriteDiscardedCfix")))
  {
    {
      return (int)804;
    }
  }
  {}
  if ((_6506 == std::string ("wrnDuplicateConstraintNames")))
  {
    {
      return (int)850;
    }
  }
  {}
  if ((_6506 == std::string ("wrnDuplicateVariableNames")))
  {
    {
      return (int)851;
    }
  }
  {}
  if ((_6506 == std::string ("wrnDuplicateBarvariableNames")))
  {
    {
      return (int)852;
    }
  }
  {}
  if ((_6506 == std::string ("wrnDuplicateConeNames")))
  {
    {
      return (int)853;
    }
  }
  {}
  if ((_6506 == std::string ("wrnAnaLargeBounds")))
  {
    {
      return (int)900;
    }
  }
  {}
  if ((_6506 == std::string ("wrnAnaCZero")))
  {
    {
      return (int)901;
    }
  }
  {}
  if ((_6506 == std::string ("wrnAnaEmptyCols")))
  {
    {
      return (int)902;
    }
  }
  {}
  if ((_6506 == std::string ("wrnAnaCloseBounds")))
  {
    {
      return (int)903;
    }
  }
  {}
  if ((_6506 == std::string ("wrnAnaAlmostIntBounds")))
  {
    {
      return (int)904;
    }
  }
  {}
  if ((_6506 == std::string ("wrnQuadConesWithRootFixedAtZero")))
  {
    {
      return (int)930;
    }
  }
  {}
  if ((_6506 == std::string ("wrnRquadConesWithRootFixedAtZero")))
  {
    {
      return (int)931;
    }
  }
  {}
  if ((_6506 == std::string ("wrnExpConesWithVariablesFixedAtZero")))
  {
    {
      return (int)932;
    }
  }
  {}
  if ((_6506 == std::string ("wrnPowConesWithRootFixedAtZero")))
  {
    {
      return (int)933;
    }
  }
  {}
  if ((_6506 == std::string ("wrnNoDualizer")))
  {
    {
      return (int)950;
    }
  }
  {}
  if ((_6506 == std::string ("wrnSymMatLarge")))
  {
    {
      return (int)960;
    }
  }
  {}
  if ((_6506 == std::string ("errLicense")))
  {
    {
      return (int)1000;
    }
  }
  {}
  if ((_6506 == std::string ("errLicenseExpired")))
  {
    {
      return (int)1001;
    }
  }
  {}
  if ((_6506 == std::string ("errLicenseVersion")))
  {
    {
      return (int)1002;
    }
  }
  {}
  if ((_6506 == std::string ("errSizeLicense")))
  {
    {
      return (int)1005;
    }
  }
  {}
  if ((_6506 == std::string ("errProbLicense")))
  {
    {
      return (int)1006;
    }
  }
  {}
  if ((_6506 == std::string ("errFileLicense")))
  {
    {
      return (int)1007;
    }
  }
  {}
  if ((_6506 == std::string ("errMissingLicenseFile")))
  {
    {
      return (int)1008;
    }
  }
  {}
  if ((_6506 == std::string ("errSizeLicenseCon")))
  {
    {
      return (int)1010;
    }
  }
  {}
  if ((_6506 == std::string ("errSizeLicenseVar")))
  {
    {
      return (int)1011;
    }
  }
  {}
  if ((_6506 == std::string ("errSizeLicenseIntvar")))
  {
    {
      return (int)1012;
    }
  }
  {}
  if ((_6506 == std::string ("errOptimizerLicense")))
  {
    {
      return (int)1013;
    }
  }
  {}
  if ((_6506 == std::string ("errFlexlm")))
  {
    {
      return (int)1014;
    }
  }
  {}
  if ((_6506 == std::string ("errLicenseServer")))
  {
    {
      return (int)1015;
    }
  }
  {}
  if ((_6506 == std::string ("errLicenseMax")))
  {
    {
      return (int)1016;
    }
  }
  {}
  if ((_6506 == std::string ("errLicenseMoseklmDaemon")))
  {
    {
      return (int)1017;
    }
  }
  {}
  if ((_6506 == std::string ("errLicenseFeature")))
  {
    {
      return (int)1018;
    }
  }
  {}
  if ((_6506 == std::string ("errPlatformNotLicensed")))
  {
    {
      return (int)1019;
    }
  }
  {}
  if ((_6506 == std::string ("errLicenseCannotAllocate")))
  {
    {
      return (int)1020;
    }
  }
  {}
  if ((_6506 == std::string ("errLicenseCannotConnect")))
  {
    {
      return (int)1021;
    }
  }
  {}
  if ((_6506 == std::string ("errLicenseInvalidHostid")))
  {
    {
      return (int)1025;
    }
  }
  {}
  if ((_6506 == std::string ("errLicenseServerVersion")))
  {
    {
      return (int)1026;
    }
  }
  {}
  if ((_6506 == std::string ("errLicenseNoServerSupport")))
  {
    {
      return (int)1027;
    }
  }
  {}
  if ((_6506 == std::string ("errLicenseNoServerLine")))
  {
    {
      return (int)1028;
    }
  }
  {}
  if ((_6506 == std::string ("errOlderDll")))
  {
    {
      return (int)1035;
    }
  }
  {}
  if ((_6506 == std::string ("errNewerDll")))
  {
    {
      return (int)1036;
    }
  }
  {}
  if ((_6506 == std::string ("errLinkFileDll")))
  {
    {
      return (int)1040;
    }
  }
  {}
  if ((_6506 == std::string ("errThreadMutexInit")))
  {
    {
      return (int)1045;
    }
  }
  {}
  if ((_6506 == std::string ("errThreadMutexLock")))
  {
    {
      return (int)1046;
    }
  }
  {}
  if ((_6506 == std::string ("errThreadMutexUnlock")))
  {
    {
      return (int)1047;
    }
  }
  {}
  if ((_6506 == std::string ("errThreadCreate")))
  {
    {
      return (int)1048;
    }
  }
  {}
  if ((_6506 == std::string ("errThreadCondInit")))
  {
    {
      return (int)1049;
    }
  }
  {}
  if ((_6506 == std::string ("errUnknown")))
  {
    {
      return (int)1050;
    }
  }
  {}
  if ((_6506 == std::string ("errSpace")))
  {
    {
      return (int)1051;
    }
  }
  {}
  if ((_6506 == std::string ("errFileOpen")))
  {
    {
      return (int)1052;
    }
  }
  {}
  if ((_6506 == std::string ("errFileRead")))
  {
    {
      return (int)1053;
    }
  }
  {}
  if ((_6506 == std::string ("errFileWrite")))
  {
    {
      return (int)1054;
    }
  }
  {}
  if ((_6506 == std::string ("errDataFileExt")))
  {
    {
      return (int)1055;
    }
  }
  {}
  if ((_6506 == std::string ("errInvalidFileName")))
  {
    {
      return (int)1056;
    }
  }
  {}
  if ((_6506 == std::string ("errInvalidSolFileName")))
  {
    {
      return (int)1057;
    }
  }
  {}
  if ((_6506 == std::string ("errEndOfFile")))
  {
    {
      return (int)1059;
    }
  }
  {}
  if ((_6506 == std::string ("errNullEnv")))
  {
    {
      return (int)1060;
    }
  }
  {}
  if ((_6506 == std::string ("errNullTask")))
  {
    {
      return (int)1061;
    }
  }
  {}
  if ((_6506 == std::string ("errInvalidStream")))
  {
    {
      return (int)1062;
    }
  }
  {}
  if ((_6506 == std::string ("errNoInitEnv")))
  {
    {
      return (int)1063;
    }
  }
  {}
  if ((_6506 == std::string ("errInvalidTask")))
  {
    {
      return (int)1064;
    }
  }
  {}
  if ((_6506 == std::string ("errNullPointer")))
  {
    {
      return (int)1065;
    }
  }
  {}
  if ((_6506 == std::string ("errLivingTasks")))
  {
    {
      return (int)1066;
    }
  }
  {}
  if ((_6506 == std::string ("errBlankName")))
  {
    {
      return (int)1070;
    }
  }
  {}
  if ((_6506 == std::string ("errDupName")))
  {
    {
      return (int)1071;
    }
  }
  {}
  if ((_6506 == std::string ("errFormatString")))
  {
    {
      return (int)1072;
    }
  }
  {}
  if ((_6506 == std::string ("errInvalidObjName")))
  {
    {
      return (int)1075;
    }
  }
  {}
  if ((_6506 == std::string ("errInvalidConName")))
  {
    {
      return (int)1076;
    }
  }
  {}
  if ((_6506 == std::string ("errInvalidVarName")))
  {
    {
      return (int)1077;
    }
  }
  {}
  if ((_6506 == std::string ("errInvalidConeName")))
  {
    {
      return (int)1078;
    }
  }
  {}
  if ((_6506 == std::string ("errInvalidBarvarName")))
  {
    {
      return (int)1079;
    }
  }
  {}
  if ((_6506 == std::string ("errSpaceLeaking")))
  {
    {
      return (int)1080;
    }
  }
  {}
  if ((_6506 == std::string ("errSpaceNoInfo")))
  {
    {
      return (int)1081;
    }
  }
  {}
  if ((_6506 == std::string ("errReadFormat")))
  {
    {
      return (int)1090;
    }
  }
  {}
  if ((_6506 == std::string ("errMpsFile")))
  {
    {
      return (int)1100;
    }
  }
  {}
  if ((_6506 == std::string ("errMpsInvField")))
  {
    {
      return (int)1101;
    }
  }
  {}
  if ((_6506 == std::string ("errMpsInvMarker")))
  {
    {
      return (int)1102;
    }
  }
  {}
  if ((_6506 == std::string ("errMpsNullConName")))
  {
    {
      return (int)1103;
    }
  }
  {}
  if ((_6506 == std::string ("errMpsNullVarName")))
  {
    {
      return (int)1104;
    }
  }
  {}
  if ((_6506 == std::string ("errMpsUndefConName")))
  {
    {
      return (int)1105;
    }
  }
  {}
  if ((_6506 == std::string ("errMpsUndefVarName")))
  {
    {
      return (int)1106;
    }
  }
  {}
  if ((_6506 == std::string ("errMpsInvConKey")))
  {
    {
      return (int)1107;
    }
  }
  {}
  if ((_6506 == std::string ("errMpsInvBoundKey")))
  {
    {
      return (int)1108;
    }
  }
  {}
  if ((_6506 == std::string ("errMpsInvSecName")))
  {
    {
      return (int)1109;
    }
  }
  {}
  if ((_6506 == std::string ("errMpsNoObjective")))
  {
    {
      return (int)1110;
    }
  }
  {}
  if ((_6506 == std::string ("errMpsSplittedVar")))
  {
    {
      return (int)1111;
    }
  }
  {}
  if ((_6506 == std::string ("errMpsMulConName")))
  {
    {
      return (int)1112;
    }
  }
  {}
  if ((_6506 == std::string ("errMpsMulQsec")))
  {
    {
      return (int)1113;
    }
  }
  {}
  if ((_6506 == std::string ("errMpsMulQobj")))
  {
    {
      return (int)1114;
    }
  }
  {}
  if ((_6506 == std::string ("errMpsInvSecOrder")))
  {
    {
      return (int)1115;
    }
  }
  {}
  if ((_6506 == std::string ("errMpsMulCsec")))
  {
    {
      return (int)1116;
    }
  }
  {}
  if ((_6506 == std::string ("errMpsConeType")))
  {
    {
      return (int)1117;
    }
  }
  {}
  if ((_6506 == std::string ("errMpsConeOverlap")))
  {
    {
      return (int)1118;
    }
  }
  {}
  if ((_6506 == std::string ("errMpsConeRepeat")))
  {
    {
      return (int)1119;
    }
  }
  {}
  if ((_6506 == std::string ("errMpsNonSymmetricQ")))
  {
    {
      return (int)1120;
    }
  }
  {}
  if ((_6506 == std::string ("errMpsDuplicateQElement")))
  {
    {
      return (int)1121;
    }
  }
  {}
  if ((_6506 == std::string ("errMpsInvalidObjsense")))
  {
    {
      return (int)1122;
    }
  }
  {}
  if ((_6506 == std::string ("errMpsTabInField2")))
  {
    {
      return (int)1125;
    }
  }
  {}
  if ((_6506 == std::string ("errMpsTabInField3")))
  {
    {
      return (int)1126;
    }
  }
  {}
  if ((_6506 == std::string ("errMpsTabInField5")))
  {
    {
      return (int)1127;
    }
  }
  {}
  if ((_6506 == std::string ("errMpsInvalidObjName")))
  {
    {
      return (int)1128;
    }
  }
  {}
  if ((_6506 == std::string ("errLpIncompatible")))
  {
    {
      return (int)1150;
    }
  }
  {}
  if ((_6506 == std::string ("errLpEmpty")))
  {
    {
      return (int)1151;
    }
  }
  {}
  if ((_6506 == std::string ("errLpDupSlackName")))
  {
    {
      return (int)1152;
    }
  }
  {}
  if ((_6506 == std::string ("errWriteMpsInvalidName")))
  {
    {
      return (int)1153;
    }
  }
  {}
  if ((_6506 == std::string ("errLpInvalidVarName")))
  {
    {
      return (int)1154;
    }
  }
  {}
  if ((_6506 == std::string ("errLpFreeConstraint")))
  {
    {
      return (int)1155;
    }
  }
  {}
  if ((_6506 == std::string ("errWriteOpfInvalidVarName")))
  {
    {
      return (int)1156;
    }
  }
  {}
  if ((_6506 == std::string ("errLpFileFormat")))
  {
    {
      return (int)1157;
    }
  }
  {}
  if ((_6506 == std::string ("errWriteLpFormat")))
  {
    {
      return (int)1158;
    }
  }
  {}
  if ((_6506 == std::string ("errReadLpMissingEndTag")))
  {
    {
      return (int)1159;
    }
  }
  {}
  if ((_6506 == std::string ("errLpFormat")))
  {
    {
      return (int)1160;
    }
  }
  {}
  if ((_6506 == std::string ("errWriteLpNonUniqueName")))
  {
    {
      return (int)1161;
    }
  }
  {}
  if ((_6506 == std::string ("errReadLpNonexistingName")))
  {
    {
      return (int)1162;
    }
  }
  {}
  if ((_6506 == std::string ("errLpWriteConicProblem")))
  {
    {
      return (int)1163;
    }
  }
  {}
  if ((_6506 == std::string ("errLpWriteGecoProblem")))
  {
    {
      return (int)1164;
    }
  }
  {}
  if ((_6506 == std::string ("errWritingFile")))
  {
    {
      return (int)1166;
    }
  }
  {}
  if ((_6506 == std::string ("errPtfFormat")))
  {
    {
      return (int)1167;
    }
  }
  {}
  if ((_6506 == std::string ("errOpfFormat")))
  {
    {
      return (int)1168;
    }
  }
  {}
  if ((_6506 == std::string ("errOpfNewVariable")))
  {
    {
      return (int)1169;
    }
  }
  {}
  if ((_6506 == std::string ("errInvalidNameInSolFile")))
  {
    {
      return (int)1170;
    }
  }
  {}
  if ((_6506 == std::string ("errLpInvalidConName")))
  {
    {
      return (int)1171;
    }
  }
  {}
  if ((_6506 == std::string ("errOpfPrematureEof")))
  {
    {
      return (int)1172;
    }
  }
  {}
  if ((_6506 == std::string ("errJsonSyntax")))
  {
    {
      return (int)1175;
    }
  }
  {}
  if ((_6506 == std::string ("errJsonString")))
  {
    {
      return (int)1176;
    }
  }
  {}
  if ((_6506 == std::string ("errJsonNumberOverflow")))
  {
    {
      return (int)1177;
    }
  }
  {}
  if ((_6506 == std::string ("errJsonFormat")))
  {
    {
      return (int)1178;
    }
  }
  {}
  if ((_6506 == std::string ("errJsonData")))
  {
    {
      return (int)1179;
    }
  }
  {}
  if ((_6506 == std::string ("errJsonMissingData")))
  {
    {
      return (int)1180;
    }
  }
  {}
  if ((_6506 == std::string ("errArgumentLenneq")))
  {
    {
      return (int)1197;
    }
  }
  {}
  if ((_6506 == std::string ("errArgumentType")))
  {
    {
      return (int)1198;
    }
  }
  {}
  if ((_6506 == std::string ("errNumArguments")))
  {
    {
      return (int)1199;
    }
  }
  {}
  if ((_6506 == std::string ("errInArgument")))
  {
    {
      return (int)1200;
    }
  }
  {}
  if ((_6506 == std::string ("errArgumentDimension")))
  {
    {
      return (int)1201;
    }
  }
  {}
  if ((_6506 == std::string ("errShapeIsTooLarge")))
  {
    {
      return (int)1202;
    }
  }
  {}
  if ((_6506 == std::string ("errIndexIsTooSmall")))
  {
    {
      return (int)1203;
    }
  }
  {}
  if ((_6506 == std::string ("errIndexIsTooLarge")))
  {
    {
      return (int)1204;
    }
  }
  {}
  if ((_6506 == std::string ("errParamName")))
  {
    {
      return (int)1205;
    }
  }
  {}
  if ((_6506 == std::string ("errParamNameDou")))
  {
    {
      return (int)1206;
    }
  }
  {}
  if ((_6506 == std::string ("errParamNameInt")))
  {
    {
      return (int)1207;
    }
  }
  {}
  if ((_6506 == std::string ("errParamNameStr")))
  {
    {
      return (int)1208;
    }
  }
  {}
  if ((_6506 == std::string ("errParamIndex")))
  {
    {
      return (int)1210;
    }
  }
  {}
  if ((_6506 == std::string ("errParamIsTooLarge")))
  {
    {
      return (int)1215;
    }
  }
  {}
  if ((_6506 == std::string ("errParamIsTooSmall")))
  {
    {
      return (int)1216;
    }
  }
  {}
  if ((_6506 == std::string ("errParamValueStr")))
  {
    {
      return (int)1217;
    }
  }
  {}
  if ((_6506 == std::string ("errParamType")))
  {
    {
      return (int)1218;
    }
  }
  {}
  if ((_6506 == std::string ("errInfDouIndex")))
  {
    {
      return (int)1219;
    }
  }
  {}
  if ((_6506 == std::string ("errInfIntIndex")))
  {
    {
      return (int)1220;
    }
  }
  {}
  if ((_6506 == std::string ("errIndexArrIsTooSmall")))
  {
    {
      return (int)1221;
    }
  }
  {}
  if ((_6506 == std::string ("errIndexArrIsTooLarge")))
  {
    {
      return (int)1222;
    }
  }
  {}
  if ((_6506 == std::string ("errInfLintIndex")))
  {
    {
      return (int)1225;
    }
  }
  {}
  if ((_6506 == std::string ("errArgIsTooSmall")))
  {
    {
      return (int)1226;
    }
  }
  {}
  if ((_6506 == std::string ("errArgIsTooLarge")))
  {
    {
      return (int)1227;
    }
  }
  {}
  if ((_6506 == std::string ("errInvalidWhichsol")))
  {
    {
      return (int)1228;
    }
  }
  {}
  if ((_6506 == std::string ("errInfDouName")))
  {
    {
      return (int)1230;
    }
  }
  {}
  if ((_6506 == std::string ("errInfIntName")))
  {
    {
      return (int)1231;
    }
  }
  {}
  if ((_6506 == std::string ("errInfType")))
  {
    {
      return (int)1232;
    }
  }
  {}
  if ((_6506 == std::string ("errInfLintName")))
  {
    {
      return (int)1234;
    }
  }
  {}
  if ((_6506 == std::string ("errIndex")))
  {
    {
      return (int)1235;
    }
  }
  {}
  if ((_6506 == std::string ("errWhichsol")))
  {
    {
      return (int)1236;
    }
  }
  {}
  if ((_6506 == std::string ("errSolitem")))
  {
    {
      return (int)1237;
    }
  }
  {}
  if ((_6506 == std::string ("errWhichitemNotAllowed")))
  {
    {
      return (int)1238;
    }
  }
  {}
  if ((_6506 == std::string ("errMaxnumcon")))
  {
    {
      return (int)1240;
    }
  }
  {}
  if ((_6506 == std::string ("errMaxnumvar")))
  {
    {
      return (int)1241;
    }
  }
  {}
  if ((_6506 == std::string ("errMaxnumbarvar")))
  {
    {
      return (int)1242;
    }
  }
  {}
  if ((_6506 == std::string ("errMaxnumqnz")))
  {
    {
      return (int)1243;
    }
  }
  {}
  if ((_6506 == std::string ("errTooSmallMaxNumNz")))
  {
    {
      return (int)1245;
    }
  }
  {}
  if ((_6506 == std::string ("errInvalidIdx")))
  {
    {
      return (int)1246;
    }
  }
  {}
  if ((_6506 == std::string ("errInvalidMaxNum")))
  {
    {
      return (int)1247;
    }
  }
  {}
  if ((_6506 == std::string ("errNumconlim")))
  {
    {
      return (int)1250;
    }
  }
  {}
  if ((_6506 == std::string ("errNumvarlim")))
  {
    {
      return (int)1251;
    }
  }
  {}
  if ((_6506 == std::string ("errTooSmallMaxnumanz")))
  {
    {
      return (int)1252;
    }
  }
  {}
  if ((_6506 == std::string ("errInvAptre")))
  {
    {
      return (int)1253;
    }
  }
  {}
  if ((_6506 == std::string ("errMulAElement")))
  {
    {
      return (int)1254;
    }
  }
  {}
  if ((_6506 == std::string ("errInvBk")))
  {
    {
      return (int)1255;
    }
  }
  {}
  if ((_6506 == std::string ("errInvBkc")))
  {
    {
      return (int)1256;
    }
  }
  {}
  if ((_6506 == std::string ("errInvBkx")))
  {
    {
      return (int)1257;
    }
  }
  {}
  if ((_6506 == std::string ("errInvVarType")))
  {
    {
      return (int)1258;
    }
  }
  {}
  if ((_6506 == std::string ("errSolverProbtype")))
  {
    {
      return (int)1259;
    }
  }
  {}
  if ((_6506 == std::string ("errObjectiveRange")))
  {
    {
      return (int)1260;
    }
  }
  {}
  if ((_6506 == std::string ("errUndefSolution")))
  {
    {
      return (int)1265;
    }
  }
  {}
  if ((_6506 == std::string ("errBasis")))
  {
    {
      return (int)1266;
    }
  }
  {}
  if ((_6506 == std::string ("errInvSkc")))
  {
    {
      return (int)1267;
    }
  }
  {}
  if ((_6506 == std::string ("errInvSkx")))
  {
    {
      return (int)1268;
    }
  }
  {}
  if ((_6506 == std::string ("errInvSkn")))
  {
    {
      return (int)1274;
    }
  }
  {}
  if ((_6506 == std::string ("errInvSkStr")))
  {
    {
      return (int)1269;
    }
  }
  {}
  if ((_6506 == std::string ("errInvSk")))
  {
    {
      return (int)1270;
    }
  }
  {}
  if ((_6506 == std::string ("errInvConeTypeStr")))
  {
    {
      return (int)1271;
    }
  }
  {}
  if ((_6506 == std::string ("errInvConeType")))
  {
    {
      return (int)1272;
    }
  }
  {}
  if ((_6506 == std::string ("errInvalidSurplus")))
  {
    {
      return (int)1275;
    }
  }
  {}
  if ((_6506 == std::string ("errInvNameItem")))
  {
    {
      return (int)1280;
    }
  }
  {}
  if ((_6506 == std::string ("errProItem")))
  {
    {
      return (int)1281;
    }
  }
  {}
  if ((_6506 == std::string ("errInvalidFormatType")))
  {
    {
      return (int)1283;
    }
  }
  {}
  if ((_6506 == std::string ("errFirsti")))
  {
    {
      return (int)1285;
    }
  }
  {}
  if ((_6506 == std::string ("errLasti")))
  {
    {
      return (int)1286;
    }
  }
  {}
  if ((_6506 == std::string ("errFirstj")))
  {
    {
      return (int)1287;
    }
  }
  {}
  if ((_6506 == std::string ("errLastj")))
  {
    {
      return (int)1288;
    }
  }
  {}
  if ((_6506 == std::string ("errMaxLenIsTooSmall")))
  {
    {
      return (int)1289;
    }
  }
  {}
  if ((_6506 == std::string ("errNonlinearEquality")))
  {
    {
      return (int)1290;
    }
  }
  {}
  if ((_6506 == std::string ("errNonconvex")))
  {
    {
      return (int)1291;
    }
  }
  {}
  if ((_6506 == std::string ("errNonlinearRanged")))
  {
    {
      return (int)1292;
    }
  }
  {}
  if ((_6506 == std::string ("errConQNotPsd")))
  {
    {
      return (int)1293;
    }
  }
  {}
  if ((_6506 == std::string ("errConQNotNsd")))
  {
    {
      return (int)1294;
    }
  }
  {}
  if ((_6506 == std::string ("errObjQNotPsd")))
  {
    {
      return (int)1295;
    }
  }
  {}
  if ((_6506 == std::string ("errObjQNotNsd")))
  {
    {
      return (int)1296;
    }
  }
  {}
  if ((_6506 == std::string ("errArgumentPermArray")))
  {
    {
      return (int)1299;
    }
  }
  {}
  if ((_6506 == std::string ("errConeIndex")))
  {
    {
      return (int)1300;
    }
  }
  {}
  if ((_6506 == std::string ("errConeSize")))
  {
    {
      return (int)1301;
    }
  }
  {}
  if ((_6506 == std::string ("errConeOverlap")))
  {
    {
      return (int)1302;
    }
  }
  {}
  if ((_6506 == std::string ("errConeRepVar")))
  {
    {
      return (int)1303;
    }
  }
  {}
  if ((_6506 == std::string ("errMaxnumcone")))
  {
    {
      return (int)1304;
    }
  }
  {}
  if ((_6506 == std::string ("errConeType")))
  {
    {
      return (int)1305;
    }
  }
  {}
  if ((_6506 == std::string ("errConeTypeStr")))
  {
    {
      return (int)1306;
    }
  }
  {}
  if ((_6506 == std::string ("errConeOverlapAppend")))
  {
    {
      return (int)1307;
    }
  }
  {}
  if ((_6506 == std::string ("errRemoveConeVariable")))
  {
    {
      return (int)1310;
    }
  }
  {}
  if ((_6506 == std::string ("errAppendingTooBigCone")))
  {
    {
      return (int)1311;
    }
  }
  {}
  if ((_6506 == std::string ("errConeParameter")))
  {
    {
      return (int)1320;
    }
  }
  {}
  if ((_6506 == std::string ("errSolFileInvalidNumber")))
  {
    {
      return (int)1350;
    }
  }
  {}
  if ((_6506 == std::string ("errHugeC")))
  {
    {
      return (int)1375;
    }
  }
  {}
  if ((_6506 == std::string ("errHugeAij")))
  {
    {
      return (int)1380;
    }
  }
  {}
  if ((_6506 == std::string ("errDuplicateAij")))
  {
    {
      return (int)1385;
    }
  }
  {}
  if ((_6506 == std::string ("errLowerBoundIsANan")))
  {
    {
      return (int)1390;
    }
  }
  {}
  if ((_6506 == std::string ("errUpperBoundIsANan")))
  {
    {
      return (int)1391;
    }
  }
  {}
  if ((_6506 == std::string ("errInfiniteBound")))
  {
    {
      return (int)1400;
    }
  }
  {}
  if ((_6506 == std::string ("errInvQobjSubi")))
  {
    {
      return (int)1401;
    }
  }
  {}
  if ((_6506 == std::string ("errInvQobjSubj")))
  {
    {
      return (int)1402;
    }
  }
  {}
  if ((_6506 == std::string ("errInvQobjVal")))
  {
    {
      return (int)1403;
    }
  }
  {}
  if ((_6506 == std::string ("errInvQconSubk")))
  {
    {
      return (int)1404;
    }
  }
  {}
  if ((_6506 == std::string ("errInvQconSubi")))
  {
    {
      return (int)1405;
    }
  }
  {}
  if ((_6506 == std::string ("errInvQconSubj")))
  {
    {
      return (int)1406;
    }
  }
  {}
  if ((_6506 == std::string ("errInvQconVal")))
  {
    {
      return (int)1407;
    }
  }
  {}
  if ((_6506 == std::string ("errQconSubiTooSmall")))
  {
    {
      return (int)1408;
    }
  }
  {}
  if ((_6506 == std::string ("errQconSubiTooLarge")))
  {
    {
      return (int)1409;
    }
  }
  {}
  if ((_6506 == std::string ("errQobjUpperTriangle")))
  {
    {
      return (int)1415;
    }
  }
  {}
  if ((_6506 == std::string ("errQconUpperTriangle")))
  {
    {
      return (int)1417;
    }
  }
  {}
  if ((_6506 == std::string ("errFixedBoundValues")))
  {
    {
      return (int)1420;
    }
  }
  {}
  if ((_6506 == std::string ("errTooSmallATruncationValue")))
  {
    {
      return (int)1421;
    }
  }
  {}
  if ((_6506 == std::string ("errInvalidObjectiveSense")))
  {
    {
      return (int)1445;
    }
  }
  {}
  if ((_6506 == std::string ("errUndefinedObjectiveSense")))
  {
    {
      return (int)1446;
    }
  }
  {}
  if ((_6506 == std::string ("errYIsUndefined")))
  {
    {
      return (int)1449;
    }
  }
  {}
  if ((_6506 == std::string ("errNanInDoubleData")))
  {
    {
      return (int)1450;
    }
  }
  {}
  if ((_6506 == std::string ("errNanInBlc")))
  {
    {
      return (int)1461;
    }
  }
  {}
  if ((_6506 == std::string ("errNanInBuc")))
  {
    {
      return (int)1462;
    }
  }
  {}
  if ((_6506 == std::string ("errNanInC")))
  {
    {
      return (int)1470;
    }
  }
  {}
  if ((_6506 == std::string ("errNanInBlx")))
  {
    {
      return (int)1471;
    }
  }
  {}
  if ((_6506 == std::string ("errNanInBux")))
  {
    {
      return (int)1472;
    }
  }
  {}
  if ((_6506 == std::string ("errInvalidAij")))
  {
    {
      return (int)1473;
    }
  }
  {}
  if ((_6506 == std::string ("errSymMatInvalid")))
  {
    {
      return (int)1480;
    }
  }
  {}
  if ((_6506 == std::string ("errSymMatHuge")))
  {
    {
      return (int)1482;
    }
  }
  {}
  if ((_6506 == std::string ("errInvProblem")))
  {
    {
      return (int)1500;
    }
  }
  {}
  if ((_6506 == std::string ("errMixedConicAndNl")))
  {
    {
      return (int)1501;
    }
  }
  {}
  if ((_6506 == std::string ("errGlobalInvConicProblem")))
  {
    {
      return (int)1503;
    }
  }
  {}
  if ((_6506 == std::string ("errInvOptimizer")))
  {
    {
      return (int)1550;
    }
  }
  {}
  if ((_6506 == std::string ("errMioNoOptimizer")))
  {
    {
      return (int)1551;
    }
  }
  {}
  if ((_6506 == std::string ("errNoOptimizerVarType")))
  {
    {
      return (int)1552;
    }
  }
  {}
  if ((_6506 == std::string ("errFinalSolution")))
  {
    {
      return (int)1560;
    }
  }
  {}
  if ((_6506 == std::string ("errFirst")))
  {
    {
      return (int)1570;
    }
  }
  {}
  if ((_6506 == std::string ("errLast")))
  {
    {
      return (int)1571;
    }
  }
  {}
  if ((_6506 == std::string ("errSliceSize")))
  {
    {
      return (int)1572;
    }
  }
  {}
  if ((_6506 == std::string ("errNegativeSurplus")))
  {
    {
      return (int)1573;
    }
  }
  {}
  if ((_6506 == std::string ("errNegativeAppend")))
  {
    {
      return (int)1578;
    }
  }
  {}
  if ((_6506 == std::string ("errPostsolve")))
  {
    {
      return (int)1580;
    }
  }
  {}
  if ((_6506 == std::string ("errOverflow")))
  {
    {
      return (int)1590;
    }
  }
  {}
  if ((_6506 == std::string ("errNoBasisSol")))
  {
    {
      return (int)1600;
    }
  }
  {}
  if ((_6506 == std::string ("errBasisFactor")))
  {
    {
      return (int)1610;
    }
  }
  {}
  if ((_6506 == std::string ("errBasisSingular")))
  {
    {
      return (int)1615;
    }
  }
  {}
  if ((_6506 == std::string ("errFactor")))
  {
    {
      return (int)1650;
    }
  }
  {}
  if ((_6506 == std::string ("errFeasrepairCannotRelax")))
  {
    {
      return (int)1700;
    }
  }
  {}
  if ((_6506 == std::string ("errFeasrepairSolvingRelaxed")))
  {
    {
      return (int)1701;
    }
  }
  {}
  if ((_6506 == std::string ("errFeasrepairInconsistentBound")))
  {
    {
      return (int)1702;
    }
  }
  {}
  if ((_6506 == std::string ("errRepairInvalidProblem")))
  {
    {
      return (int)1710;
    }
  }
  {}
  if ((_6506 == std::string ("errRepairOptimizationFailed")))
  {
    {
      return (int)1711;
    }
  }
  {}
  if ((_6506 == std::string ("errNameMaxLen")))
  {
    {
      return (int)1750;
    }
  }
  {}
  if ((_6506 == std::string ("errNameIsNull")))
  {
    {
      return (int)1760;
    }
  }
  {}
  if ((_6506 == std::string ("errInvalidCompression")))
  {
    {
      return (int)1800;
    }
  }
  {}
  if ((_6506 == std::string ("errInvalidIomode")))
  {
    {
      return (int)1801;
    }
  }
  {}
  if ((_6506 == std::string ("errNoPrimalInfeasCer")))
  {
    {
      return (int)2000;
    }
  }
  {}
  if ((_6506 == std::string ("errNoDualInfeasCer")))
  {
    {
      return (int)2001;
    }
  }
  {}
  if ((_6506 == std::string ("errNoSolutionInCallback")))
  {
    {
      return (int)2500;
    }
  }
  {}
  if ((_6506 == std::string ("errInvMarki")))
  {
    {
      return (int)2501;
    }
  }
  {}
  if ((_6506 == std::string ("errInvMarkj")))
  {
    {
      return (int)2502;
    }
  }
  {}
  if ((_6506 == std::string ("errInvNumi")))
  {
    {
      return (int)2503;
    }
  }
  {}
  if ((_6506 == std::string ("errInvNumj")))
  {
    {
      return (int)2504;
    }
  }
  {}
  if ((_6506 == std::string ("errTaskIncompatible")))
  {
    {
      return (int)2560;
    }
  }
  {}
  if ((_6506 == std::string ("errTaskInvalid")))
  {
    {
      return (int)2561;
    }
  }
  {}
  if ((_6506 == std::string ("errTaskWrite")))
  {
    {
      return (int)2562;
    }
  }
  {}
  if ((_6506 == std::string ("errLuMaxNumTries")))
  {
    {
      return (int)2800;
    }
  }
  {}
  if ((_6506 == std::string ("errInvalidUtf8")))
  {
    {
      return (int)2900;
    }
  }
  {}
  if ((_6506 == std::string ("errInvalidWchar")))
  {
    {
      return (int)2901;
    }
  }
  {}
  if ((_6506 == std::string ("errNoDualForItgSol")))
  {
    {
      return (int)2950;
    }
  }
  {}
  if ((_6506 == std::string ("errNoSnxForBasSol")))
  {
    {
      return (int)2953;
    }
  }
  {}
  if ((_6506 == std::string ("errInternal")))
  {
    {
      return (int)3000;
    }
  }
  {}
  if ((_6506 == std::string ("errApiArrayTooSmall")))
  {
    {
      return (int)3001;
    }
  }
  {}
  if ((_6506 == std::string ("errApiCbConnect")))
  {
    {
      return (int)3002;
    }
  }
  {}
  if ((_6506 == std::string ("errApiFatalError")))
  {
    {
      return (int)3005;
    }
  }
  {}
  if ((_6506 == std::string ("errApiInternal")))
  {
    {
      return (int)3999;
    }
  }
  {}
  if ((_6506 == std::string ("errSenFormat")))
  {
    {
      return (int)3050;
    }
  }
  {}
  if ((_6506 == std::string ("errSenUndefName")))
  {
    {
      return (int)3051;
    }
  }
  {}
  if ((_6506 == std::string ("errSenIndexRange")))
  {
    {
      return (int)3052;
    }
  }
  {}
  if ((_6506 == std::string ("errSenBoundInvalidUp")))
  {
    {
      return (int)3053;
    }
  }
  {}
  if ((_6506 == std::string ("errSenBoundInvalidLo")))
  {
    {
      return (int)3054;
    }
  }
  {}
  if ((_6506 == std::string ("errSenIndexInvalid")))
  {
    {
      return (int)3055;
    }
  }
  {}
  if ((_6506 == std::string ("errSenInvalidRegexp")))
  {
    {
      return (int)3056;
    }
  }
  {}
  if ((_6506 == std::string ("errSenSolutionStatus")))
  {
    {
      return (int)3057;
    }
  }
  {}
  if ((_6506 == std::string ("errSenNumerical")))
  {
    {
      return (int)3058;
    }
  }
  {}
  if ((_6506 == std::string ("errSenUnhandledProblemType")))
  {
    {
      return (int)3080;
    }
  }
  {}
  if ((_6506 == std::string ("errUnbStepSize")))
  {
    {
      return (int)3100;
    }
  }
  {}
  if ((_6506 == std::string ("errIdenticalTasks")))
  {
    {
      return (int)3101;
    }
  }
  {}
  if ((_6506 == std::string ("errAdInvalidCodelist")))
  {
    {
      return (int)3102;
    }
  }
  {}
  if ((_6506 == std::string ("errInternalTestFailed")))
  {
    {
      return (int)3500;
    }
  }
  {}
  if ((_6506 == std::string ("errXmlInvalidProblemType")))
  {
    {
      return (int)3600;
    }
  }
  {}
  if ((_6506 == std::string ("errInvalidAmplStub")))
  {
    {
      return (int)3700;
    }
  }
  {}
  if ((_6506 == std::string ("errInt64ToInt32Cast")))
  {
    {
      return (int)3800;
    }
  }
  {}
  if ((_6506 == std::string ("errSizeLicenseNumcores")))
  {
    {
      return (int)3900;
    }
  }
  {}
  if ((_6506 == std::string ("errInfeasUndefined")))
  {
    {
      return (int)3910;
    }
  }
  {}
  if ((_6506 == std::string ("errNoBarxForSolution")))
  {
    {
      return (int)3915;
    }
  }
  {}
  if ((_6506 == std::string ("errNoBarsForSolution")))
  {
    {
      return (int)3916;
    }
  }
  {}
  if ((_6506 == std::string ("errBarVarDim")))
  {
    {
      return (int)3920;
    }
  }
  {}
  if ((_6506 == std::string ("errSymMatInvalidRowIndex")))
  {
    {
      return (int)3940;
    }
  }
  {}
  if ((_6506 == std::string ("errSymMatInvalidColIndex")))
  {
    {
      return (int)3941;
    }
  }
  {}
  if ((_6506 == std::string ("errSymMatNotLowerTringular")))
  {
    {
      return (int)3942;
    }
  }
  {}
  if ((_6506 == std::string ("errSymMatInvalidValue")))
  {
    {
      return (int)3943;
    }
  }
  {}
  if ((_6506 == std::string ("errSymMatDuplicate")))
  {
    {
      return (int)3944;
    }
  }
  {}
  if ((_6506 == std::string ("errInvalidSymMatDim")))
  {
    {
      return (int)3950;
    }
  }
  {}
  if ((_6506 == std::string ("errInvalidFileFormatForSymMat")))
  {
    {
      return (int)4000;
    }
  }
  {}
  if ((_6506 == std::string ("errInvalidFileFormatForCfix")))
  {
    {
      return (int)4001;
    }
  }
  {}
  if ((_6506 == std::string ("errInvalidFileFormatForRangedConstraints")))
  {
    {
      return (int)4002;
    }
  }
  {}
  if ((_6506 == std::string ("errInvalidFileFormatForFreeConstraints")))
  {
    {
      return (int)4003;
    }
  }
  {}
  if ((_6506 == std::string ("errInvalidFileFormatForCones")))
  {
    {
      return (int)4005;
    }
  }
  {}
  if ((_6506 == std::string ("errInvalidFileFormatForNonlinear")))
  {
    {
      return (int)4010;
    }
  }
  {}
  if ((_6506 == std::string ("errDuplicateConstraintNames")))
  {
    {
      return (int)4500;
    }
  }
  {}
  if ((_6506 == std::string ("errDuplicateVariableNames")))
  {
    {
      return (int)4501;
    }
  }
  {}
  if ((_6506 == std::string ("errDuplicateBarvariableNames")))
  {
    {
      return (int)4502;
    }
  }
  {}
  if ((_6506 == std::string ("errDuplicateConeNames")))
  {
    {
      return (int)4503;
    }
  }
  {}
  if ((_6506 == std::string ("errNonUniqueArray")))
  {
    {
      return (int)5000;
    }
  }
  {}
  if ((_6506 == std::string ("errArgumentIsTooLarge")))
  {
    {
      return (int)5005;
    }
  }
  {}
  if ((_6506 == std::string ("errMioInternal")))
  {
    {
      return (int)5010;
    }
  }
  {}
  if ((_6506 == std::string ("errInvalidProblemType")))
  {
    {
      return (int)6000;
    }
  }
  {}
  if ((_6506 == std::string ("errUnhandledSolutionStatus")))
  {
    {
      return (int)6010;
    }
  }
  {}
  if ((_6506 == std::string ("errUpperTriangle")))
  {
    {
      return (int)6020;
    }
  }
  {}
  if ((_6506 == std::string ("errLauSingularMatrix")))
  {
    {
      return (int)7000;
    }
  }
  {}
  if ((_6506 == std::string ("errLauNotPositiveDefinite")))
  {
    {
      return (int)7001;
    }
  }
  {}
  if ((_6506 == std::string ("errLauInvalidLowerTriangularMatrix")))
  {
    {
      return (int)7002;
    }
  }
  {}
  if ((_6506 == std::string ("errLauUnknown")))
  {
    {
      return (int)7005;
    }
  }
  {}
  if ((_6506 == std::string ("errLauArgM")))
  {
    {
      return (int)7010;
    }
  }
  {}
  if ((_6506 == std::string ("errLauArgN")))
  {
    {
      return (int)7011;
    }
  }
  {}
  if ((_6506 == std::string ("errLauArgK")))
  {
    {
      return (int)7012;
    }
  }
  {}
  if ((_6506 == std::string ("errLauArgTransa")))
  {
    {
      return (int)7015;
    }
  }
  {}
  if ((_6506 == std::string ("errLauArgTransb")))
  {
    {
      return (int)7016;
    }
  }
  {}
  if ((_6506 == std::string ("errLauArgUplo")))
  {
    {
      return (int)7017;
    }
  }
  {}
  if ((_6506 == std::string ("errLauArgTrans")))
  {
    {
      return (int)7018;
    }
  }
  {}
  if ((_6506 == std::string ("errLauInvalidSparseSymmetricMatrix")))
  {
    {
      return (int)7019;
    }
  }
  {}
  if ((_6506 == std::string ("errCbfParse")))
  {
    {
      return (int)7100;
    }
  }
  {}
  if ((_6506 == std::string ("errCbfObjSense")))
  {
    {
      return (int)7101;
    }
  }
  {}
  if ((_6506 == std::string ("errCbfNoVariables")))
  {
    {
      return (int)7102;
    }
  }
  {}
  if ((_6506 == std::string ("errCbfTooManyConstraints")))
  {
    {
      return (int)7103;
    }
  }
  {}
  if ((_6506 == std::string ("errCbfTooManyVariables")))
  {
    {
      return (int)7104;
    }
  }
  {}
  if ((_6506 == std::string ("errCbfNoVersionSpecified")))
  {
    {
      return (int)7105;
    }
  }
  {}
  if ((_6506 == std::string ("errCbfSyntax")))
  {
    {
      return (int)7106;
    }
  }
  {}
  if ((_6506 == std::string ("errCbfDuplicateObj")))
  {
    {
      return (int)7107;
    }
  }
  {}
  if ((_6506 == std::string ("errCbfDuplicateCon")))
  {
    {
      return (int)7108;
    }
  }
  {}
  if ((_6506 == std::string ("errCbfDuplicateVar")))
  {
    {
      return (int)7109;
    }
  }
  {}
  if ((_6506 == std::string ("errCbfDuplicateInt")))
  {
    {
      return (int)7110;
    }
  }
  {}
  if ((_6506 == std::string ("errCbfInvalidVarType")))
  {
    {
      return (int)7111;
    }
  }
  {}
  if ((_6506 == std::string ("errCbfInvalidConType")))
  {
    {
      return (int)7112;
    }
  }
  {}
  if ((_6506 == std::string ("errCbfInvalidDomainDimension")))
  {
    {
      return (int)7113;
    }
  }
  {}
  if ((_6506 == std::string ("errCbfDuplicateObjacoord")))
  {
    {
      return (int)7114;
    }
  }
  {}
  if ((_6506 == std::string ("errCbfDuplicateBcoord")))
  {
    {
      return (int)7115;
    }
  }
  {}
  if ((_6506 == std::string ("errCbfDuplicateAcoord")))
  {
    {
      return (int)7116;
    }
  }
  {}
  if ((_6506 == std::string ("errCbfTooFewVariables")))
  {
    {
      return (int)7117;
    }
  }
  {}
  if ((_6506 == std::string ("errCbfTooFewConstraints")))
  {
    {
      return (int)7118;
    }
  }
  {}
  if ((_6506 == std::string ("errCbfTooFewInts")))
  {
    {
      return (int)7119;
    }
  }
  {}
  if ((_6506 == std::string ("errCbfTooManyInts")))
  {
    {
      return (int)7120;
    }
  }
  {}
  if ((_6506 == std::string ("errCbfInvalidIntIndex")))
  {
    {
      return (int)7121;
    }
  }
  {}
  if ((_6506 == std::string ("errCbfUnsupported")))
  {
    {
      return (int)7122;
    }
  }
  {}
  if ((_6506 == std::string ("errCbfDuplicatePsdvar")))
  {
    {
      return (int)7123;
    }
  }
  {}
  if ((_6506 == std::string ("errCbfInvalidPsdvarDimension")))
  {
    {
      return (int)7124;
    }
  }
  {}
  if ((_6506 == std::string ("errCbfTooFewPsdvar")))
  {
    {
      return (int)7125;
    }
  }
  {}
  if ((_6506 == std::string ("errCbfInvalidExpDimension")))
  {
    {
      return (int)7126;
    }
  }
  {}
  if ((_6506 == std::string ("errCbfDuplicatePowCones")))
  {
    {
      return (int)7130;
    }
  }
  {}
  if ((_6506 == std::string ("errCbfDuplicatePowStarCones")))
  {
    {
      return (int)7131;
    }
  }
  {}
  if ((_6506 == std::string ("errCbfInvalidPower")))
  {
    {
      return (int)7132;
    }
  }
  {}
  if ((_6506 == std::string ("errCbfPowerConeIsTooLong")))
  {
    {
      return (int)7133;
    }
  }
  {}
  if ((_6506 == std::string ("errCbfInvalidPowerConeIndex")))
  {
    {
      return (int)7134;
    }
  }
  {}
  if ((_6506 == std::string ("errCbfInvalidPowerStarConeIndex")))
  {
    {
      return (int)7135;
    }
  }
  {}
  if ((_6506 == std::string ("errCbfUnhandledPowerConeType")))
  {
    {
      return (int)7136;
    }
  }
  {}
  if ((_6506 == std::string ("errCbfUnhandledPowerStarConeType")))
  {
    {
      return (int)7137;
    }
  }
  {}
  if ((_6506 == std::string ("errCbfPowerConeMismatch")))
  {
    {
      return (int)7138;
    }
  }
  {}
  if ((_6506 == std::string ("errCbfPowerStarConeMismatch")))
  {
    {
      return (int)7139;
    }
  }
  {}
  if ((_6506 == std::string ("errCbfInvalidNumberOfCones")))
  {
    {
      return (int)7740;
    }
  }
  {}
  if ((_6506 == std::string ("errCbfInvalidDimensionOfCones")))
  {
    {
      return (int)7741;
    }
  }
  {}
  if ((_6506 == std::string ("errMioInvalidRootOptimizer")))
  {
    {
      return (int)7700;
    }
  }
  {}
  if ((_6506 == std::string ("errMioInvalidNodeOptimizer")))
  {
    {
      return (int)7701;
    }
  }
  {}
  if ((_6506 == std::string ("errToconicConstrQNotPsd")))
  {
    {
      return (int)7800;
    }
  }
  {}
  if ((_6506 == std::string ("errToconicConstraintFx")))
  {
    {
      return (int)7801;
    }
  }
  {}
  if ((_6506 == std::string ("errToconicConstraintRa")))
  {
    {
      return (int)7802;
    }
  }
  {}
  if ((_6506 == std::string ("errToconicConstrNotConic")))
  {
    {
      return (int)7803;
    }
  }
  {}
  if ((_6506 == std::string ("errToconicObjectiveNotPsd")))
  {
    {
      return (int)7804;
    }
  }
  {}
  if ((_6506 == std::string ("errServerConnect")))
  {
    {
      return (int)8000;
    }
  }
  {}
  if ((_6506 == std::string ("errServerProtocol")))
  {
    {
      return (int)8001;
    }
  }
  {}
  if ((_6506 == std::string ("errServerStatus")))
  {
    {
      return (int)8002;
    }
  }
  {}
  if ((_6506 == std::string ("errServerToken")))
  {
    {
      return (int)8003;
    }
  }
  {}
  if ((_6506 == std::string ("trmMaxIterations")))
  {
    {
      return (int)10000;
    }
  }
  {}
  if ((_6506 == std::string ("trmMaxTime")))
  {
    {
      return (int)10001;
    }
  }
  {}
  if ((_6506 == std::string ("trmObjectiveRange")))
  {
    {
      return (int)10002;
    }
  }
  {}
  if ((_6506 == std::string ("trmMioNumRelaxs")))
  {
    {
      return (int)10008;
    }
  }
  {}
  if ((_6506 == std::string ("trmMioNumBranches")))
  {
    {
      return (int)10009;
    }
  }
  {}
  if ((_6506 == std::string ("trmNumMaxNumIntSolutions")))
  {
    {
      return (int)10015;
    }
  }
  {}
  if ((_6506 == std::string ("trmStall")))
  {
    {
      return (int)10006;
    }
  }
  {}
  if ((_6506 == std::string ("trmUserCallback")))
  {
    {
      return (int)10007;
    }
  }
  {}
  if ((_6506 == std::string ("trmMaxNumSetbacks")))
  {
    {
      return (int)10020;
    }
  }
  {}
  if ((_6506 == std::string ("trmNumericalProblem")))
  {
    {
      return (int)10025;
    }
  }
  {}
  if ((_6506 == std::string ("trmInternal")))
  {
    {
      return (int)10030;
    }
  }
  {}
  if ((_6506 == std::string ("trmInternalStop")))
  {
    {
      return (int)10031;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_optimizertype_value(const std::string & _6507){
  if ((_6507 == std::string ("free")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6507 == std::string ("intpnt")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6507 == std::string ("conic")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6507 == std::string ("primalSimplex")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6507 == std::string ("dualSimplex")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6507 == std::string ("freeSimplex")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6507 == std::string ("mixedInt")))
  {
    {
      return (int)5;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_iparam_value(const std::string & _6508){
  if ((_6508 == std::string ("autoUpdateSolInfo")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6508 == std::string ("removeUnusedSolutions")))
  {
    {
      return (int)118;
    }
  }
  {}
  if ((_6508 == std::string ("intpntHotstart")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_6508 == std::string ("intpntPurify")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_6508 == std::string ("numThreads")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_6508 == std::string ("intpntMultiThread")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_6508 == std::string ("timingLevel")))
  {
    {
      return (int)152;
    }
  }
  {}
  if ((_6508 == std::string ("mtSpincount")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_6508 == std::string ("maxNumWarnings")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_6508 == std::string ("optimizer")))
  {
    {
      return (int)97;
    }
  }
  {}
  if ((_6508 == std::string ("biMaxIterations")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_6508 == std::string ("licenseTrhExpiryWrn")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_6508 == std::string ("logIncludeSummary")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_6508 == std::string ("logCutSecondOpt")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_6508 == std::string ("logAnaPro")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_6508 == std::string ("logResponse")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_6508 == std::string ("logLocalInfo")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_6508 == std::string ("logBi")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_6508 == std::string ("logBiFreq")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_6508 == std::string ("biCleanOptimizer")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6508 == std::string ("intpntMaxNumRefinementSteps")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_6508 == std::string ("intpntStartingPoint")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_6508 == std::string ("intpntDiffStep")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_6508 == std::string ("intpntScaling")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_6508 == std::string ("intpntSolveForm")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_6508 == std::string ("logIntpnt")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_6508 == std::string ("intpntMaxIterations")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_6508 == std::string ("intpntOffColTrh")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_6508 == std::string ("intpntOrderMethod")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_6508 == std::string ("intpntOrderGpNumSeeds")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_6508 == std::string ("intpntBasis")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_6508 == std::string ("biIgnoreMaxIter")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6508 == std::string ("biIgnoreNumError")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_6508 == std::string ("intpntMaxNumCor")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_6508 == std::string ("presolveUse")))
  {
    {
      return (int)108;
    }
  }
  {}
  if ((_6508 == std::string ("presolveLevel")))
  {
    {
      return (int)102;
    }
  }
  {}
  if ((_6508 == std::string ("logPresolve")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_6508 == std::string ("presolveLindepUse")))
  {
    {
      return (int)105;
    }
  }
  {}
  if ((_6508 == std::string ("presolveMaxNumPass")))
  {
    {
      return (int)106;
    }
  }
  {}
  if ((_6508 == std::string ("presolveEliminatorMaxNumTries")))
  {
    {
      return (int)101;
    }
  }
  {}
  if ((_6508 == std::string ("presolveEliminatorMaxFill")))
  {
    {
      return (int)100;
    }
  }
  {}
  if ((_6508 == std::string ("presolveMaxNumReductions")))
  {
    {
      return (int)107;
    }
  }
  {}
  if ((_6508 == std::string ("simStabilityPriority")))
  {
    {
      return (int)145;
    }
  }
  {}
  if ((_6508 == std::string ("simPrimalCrash")))
  {
    {
      return (int)134;
    }
  }
  {}
  if ((_6508 == std::string ("logSim")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_6508 == std::string ("logSimMinor")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_6508 == std::string ("logSimFreq")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_6508 == std::string ("simPrimalRestrictSelection")))
  {
    {
      return (int)136;
    }
  }
  {}
  if ((_6508 == std::string ("simPrimalSelection")))
  {
    {
      return (int)137;
    }
  }
  {}
  if ((_6508 == std::string ("simDualRestrictSelection")))
  {
    {
      return (int)126;
    }
  }
  {}
  if ((_6508 == std::string ("simDualSelection")))
  {
    {
      return (int)127;
    }
  }
  {}
  if ((_6508 == std::string ("simMaxIterations")))
  {
    {
      return (int)131;
    }
  }
  {}
  if ((_6508 == std::string ("simHotstartLu")))
  {
    {
      return (int)130;
    }
  }
  {}
  if ((_6508 == std::string ("simRefactorFreq")))
  {
    {
      return (int)138;
    }
  }
  {}
  if ((_6508 == std::string ("simSeed")))
  {
    {
      return (int)143;
    }
  }
  {}
  if ((_6508 == std::string ("mioMode")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_6508 == std::string ("logMio")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_6508 == std::string ("logMioFreq")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_6508 == std::string ("mioMaxNumRelaxs")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_6508 == std::string ("mioMaxNumBranches")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_6508 == std::string ("mioMaxNumRootCutRounds")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_6508 == std::string ("mioMaxNumSolutions")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_6508 == std::string ("mioNodeSelection")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_6508 == std::string ("mioHeuristicLevel")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_6508 == std::string ("mioProbingLevel")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_6508 == std::string ("mioCutSelectionLevel")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_6508 == std::string ("mioVbDetectionLevel")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_6508 == std::string ("mioBranchDir")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_6508 == std::string ("mioRootOptimizer")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_6508 == std::string ("mioNodeOptimizer")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_6508 == std::string ("mioPerspectiveReformulate")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_6508 == std::string ("mioPropagateObjectiveConstraint")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_6508 == std::string ("mioSeed")))
  {
    {
      return (int)84;
    }
  }
  {}
  if ((_6508 == std::string ("mioConicOuterApproximation")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_6508 == std::string ("readKeepFreeCon")))
  {
    {
      return (int)112;
    }
  }
  {}
  if ((_6508 == std::string ("readMpsFormat")))
  {
    {
      return (int)115;
    }
  }
  {}
  if ((_6508 == std::string ("writeMpsFormat")))
  {
    {
      return (int)170;
    }
  }
  {}
  if ((_6508 == std::string ("readMpsWidth")))
  {
    {
      return (int)116;
    }
  }
  {}
  if ((_6508 == std::string ("readDebug")))
  {
    {
      return (int)111;
    }
  }
  {}
  if ((_6508 == std::string ("readLpQuotedNames")))
  {
    {
      return (int)114;
    }
  }
  {}
  if ((_6508 == std::string ("writeDataParam")))
  {
    {
      return (int)157;
    }
  }
  {}
  if ((_6508 == std::string ("writeFreeCon")))
  {
    {
      return (int)158;
    }
  }
  {}
  if ((_6508 == std::string ("writeGenericNames")))
  {
    {
      return (int)159;
    }
  }
  {}
  if ((_6508 == std::string ("writeGenericNamesIo")))
  {
    {
      return (int)160;
    }
  }
  {}
  if ((_6508 == std::string ("writeCompression")))
  {
    {
      return (int)156;
    }
  }
  {}
  if ((_6508 == std::string ("writeMpsInt")))
  {
    {
      return (int)171;
    }
  }
  {}
  if ((_6508 == std::string ("writeLpStrictFormat")))
  {
    {
      return (int)168;
    }
  }
  {}
  if ((_6508 == std::string ("writeLpQuotedNames")))
  {
    {
      return (int)167;
    }
  }
  {}
  if ((_6508 == std::string ("writeLpLineWidth")))
  {
    {
      return (int)166;
    }
  }
  {}
  if ((_6508 == std::string ("writeLpTermsPerLine")))
  {
    {
      return (int)169;
    }
  }
  {}
  if ((_6508 == std::string ("writeLpFullObj")))
  {
    {
      return (int)165;
    }
  }
  {}
  if ((_6508 == std::string ("writePrecision")))
  {
    {
      return (int)172;
    }
  }
  {}
  if ((_6508 == std::string ("writeSolIgnoreInvalidNames")))
  {
    {
      return (int)176;
    }
  }
  {}
  if ((_6508 == std::string ("writeSolHead")))
  {
    {
      return (int)175;
    }
  }
  {}
  if ((_6508 == std::string ("writeSolConstraints")))
  {
    {
      return (int)174;
    }
  }
  {}
  if ((_6508 == std::string ("writeSolVariables")))
  {
    {
      return (int)177;
    }
  }
  {}
  if ((_6508 == std::string ("writeSolBarvariables")))
  {
    {
      return (int)173;
    }
  }
  {}
  if ((_6508 == std::string ("writeBasHead")))
  {
    {
      return (int)154;
    }
  }
  {}
  if ((_6508 == std::string ("writeBasConstraints")))
  {
    {
      return (int)153;
    }
  }
  {}
  if ((_6508 == std::string ("writeBasVariables")))
  {
    {
      return (int)155;
    }
  }
  {}
  if ((_6508 == std::string ("writeIntHead")))
  {
    {
      return (int)163;
    }
  }
  {}
  if ((_6508 == std::string ("writeIntConstraints")))
  {
    {
      return (int)162;
    }
  }
  {}
  if ((_6508 == std::string ("writeIntVariables")))
  {
    {
      return (int)164;
    }
  }
  {}
  if ((_6508 == std::string ("solReadNameWidth")))
  {
    {
      return (int)149;
    }
  }
  {}
  if ((_6508 == std::string ("solReadWidth")))
  {
    {
      return (int)150;
    }
  }
  {}
  if ((_6508 == std::string ("infeasReportAuto")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_6508 == std::string ("infeasReportLevel")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_6508 == std::string ("infeasGenericNames")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_6508 == std::string ("logInfeasAna")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_6508 == std::string ("licenseWait")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_6508 == std::string ("licenseSuppressExpireWrns")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_6508 == std::string ("licensePauseTime")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_6508 == std::string ("licenseDebug")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_6508 == std::string ("solFilterKeepBasic")))
  {
    {
      return (int)147;
    }
  }
  {}
  if ((_6508 == std::string ("solFilterKeepRanged")))
  {
    {
      return (int)148;
    }
  }
  {}
  if ((_6508 == std::string ("log")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_6508 == std::string ("logExpand")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_6508 == std::string ("logFile")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_6508 == std::string ("logOrder")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_6508 == std::string ("logSensitivity")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_6508 == std::string ("logSensitivityOpt")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_6508 == std::string ("readTaskIgnoreParam")))
  {
    {
      return (int)117;
    }
  }
  {}
  if ((_6508 == std::string ("writeTaskIncSol")))
  {
    {
      return (int)178;
    }
  }
  {}
  if ((_6508 == std::string ("paramReadCaseName")))
  {
    {
      return (int)98;
    }
  }
  {}
  if ((_6508 == std::string ("paramReadIgnError")))
  {
    {
      return (int)99;
    }
  }
  {}
  if ((_6508 == std::string ("solutionCallback")))
  {
    {
      return (int)151;
    }
  }
  {}
  if ((_6508 == std::string ("simScaling")))
  {
    {
      return (int)141;
    }
  }
  {}
  if ((_6508 == std::string ("simScalingMethod")))
  {
    {
      return (int)142;
    }
  }
  {}
  if ((_6508 == std::string ("simPrimalPhaseoneMethod")))
  {
    {
      return (int)135;
    }
  }
  {}
  if ((_6508 == std::string ("simDualPhaseoneMethod")))
  {
    {
      return (int)125;
    }
  }
  {}
  if ((_6508 == std::string ("simMaxNumSetbacks")))
  {
    {
      return (int)132;
    }
  }
  {}
  if ((_6508 == std::string ("simHotstart")))
  {
    {
      return (int)129;
    }
  }
  {}
  if ((_6508 == std::string ("simBasisFactorUse")))
  {
    {
      return (int)122;
    }
  }
  {}
  if ((_6508 == std::string ("simDegen")))
  {
    {
      return (int)123;
    }
  }
  {}
  if ((_6508 == std::string ("simReformulation")))
  {
    {
      return (int)139;
    }
  }
  {}
  if ((_6508 == std::string ("simExploitDupvec")))
  {
    {
      return (int)128;
    }
  }
  {}
  if ((_6508 == std::string ("simSaveLu")))
  {
    {
      return (int)140;
    }
  }
  {}
  if ((_6508 == std::string ("simNonSingular")))
  {
    {
      return (int)133;
    }
  }
  {}
  if ((_6508 == std::string ("simDualCrash")))
  {
    {
      return (int)124;
    }
  }
  {}
  if ((_6508 == std::string ("logStorage")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_6508 == std::string ("infeasPreferPrimal")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_6508 == std::string ("readLpDropNewVarsInBou")))
  {
    {
      return (int)113;
    }
  }
  {}
  if ((_6508 == std::string ("opfWriteLineLength")))
  {
    {
      return (int)90;
    }
  }
  {}
  if ((_6508 == std::string ("opfWriteHints")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_6508 == std::string ("opfWriteParameters")))
  {
    {
      return (int)91;
    }
  }
  {}
  if ((_6508 == std::string ("opfWriteProblem")))
  {
    {
      return (int)92;
    }
  }
  {}
  if ((_6508 == std::string ("opfWriteHeader")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_6508 == std::string ("opfWriteSolutions")))
  {
    {
      return (int)96;
    }
  }
  {}
  if ((_6508 == std::string ("opfWriteSolBas")))
  {
    {
      return (int)93;
    }
  }
  {}
  if ((_6508 == std::string ("opfWriteSolItg")))
  {
    {
      return (int)94;
    }
  }
  {}
  if ((_6508 == std::string ("opfWriteSolItr")))
  {
    {
      return (int)95;
    }
  }
  {}
  if ((_6508 == std::string ("ptfWriteTransform")))
  {
    {
      return (int)110;
    }
  }
  {}
  if ((_6508 == std::string ("primalRepairOptimizer")))
  {
    {
      return (int)109;
    }
  }
  {}
  if ((_6508 == std::string ("mioRootRepeatPresolveLevel")))
  {
    {
      return (int)83;
    }
  }
  {}
  if ((_6508 == std::string ("mioCutCmir")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_6508 == std::string ("mioCutClique")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_6508 == std::string ("mioCutImpliedBound")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_6508 == std::string ("mioCutKnapsackCover")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_6508 == std::string ("mioCutGmi")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_6508 == std::string ("sensitivityType")))
  {
    {
      return (int)121;
    }
  }
  {}
  if ((_6508 == std::string ("presolveLindepRelWorkTrh")))
  {
    {
      return (int)104;
    }
  }
  {}
  if ((_6508 == std::string ("presolveLindepAbsWorkTrh")))
  {
    {
      return (int)103;
    }
  }
  {}
  if ((_6508 == std::string ("sensitivityAll")))
  {
    {
      return (int)119;
    }
  }
  {}
  if ((_6508 == std::string ("logFeasRepair")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_6508 == std::string ("cacheLicense")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_6508 == std::string ("intpntRegularizationUse")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_6508 == std::string ("simSolveForm")))
  {
    {
      return (int)144;
    }
  }
  {}
  if ((_6508 == std::string ("simSwitchOptimizer")))
  {
    {
      return (int)146;
    }
  }
  {}
  if ((_6508 == std::string ("writeIgnoreIncompatibleItems")))
  {
    {
      return (int)161;
    }
  }
  {}
  if ((_6508 == std::string ("checkConvexity")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_6508 == std::string ("logCheckConvexity")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_6508 == std::string ("autoSortABeforeOpt")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6508 == std::string ("sensitivityOptimizer")))
  {
    {
      return (int)120;
    }
  }
  {}
  if ((_6508 == std::string ("writeXmlMode")))
  {
    {
      return (int)179;
    }
  }
  {}
  if ((_6508 == std::string ("anaSolBasis")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6508 == std::string ("anaSolPrintViolated")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6508 == std::string ("basisSolveUsePlusOne")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6508 == std::string ("compressStatfile")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_6508 == std::string ("mioRinsMaxNodes")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_6508 == std::string ("mioFeaspumpLevel")))
  {
    {
      return (int)69;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_dparam_value(const std::string & _6509){
  if ((_6509 == std::string ("dataTolCjLarge")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_6509 == std::string ("dataTolCHuge")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_6509 == std::string ("dataTolAijLarge")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_6509 == std::string ("dataTolAijHuge")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_6509 == std::string ("dataSymMatTol")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6509 == std::string ("dataSymMatTolLarge")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_6509 == std::string ("dataSymMatTolHuge")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6509 == std::string ("dataTolBoundInf")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_6509 == std::string ("dataTolBoundWrn")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_6509 == std::string ("dataTolQij")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_6509 == std::string ("dataTolX")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_6509 == std::string ("semidefiniteTolApprox")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_6509 == std::string ("optimizerMaxTime")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_6509 == std::string ("lowerObjCut")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_6509 == std::string ("upperObjCut")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_6509 == std::string ("upperObjCutFiniteTrh")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_6509 == std::string ("lowerObjCutFiniteTrh")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_6509 == std::string ("intpntTolRelGap")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_6509 == std::string ("intpntTolStepSize")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_6509 == std::string ("simLuTolRelPiv")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_6509 == std::string ("intpntTolRelStep")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_6509 == std::string ("intpntTolPath")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_6509 == std::string ("intpntTolPfeas")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_6509 == std::string ("intpntTolDfeas")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_6509 == std::string ("intpntTolMuRed")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_6509 == std::string ("intpntTolInfeas")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_6509 == std::string ("intpntCoTolRelGap")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_6509 == std::string ("intpntCoTolPfeas")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_6509 == std::string ("intpntCoTolDfeas")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_6509 == std::string ("intpntCoTolMuRed")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_6509 == std::string ("intpntCoTolNearRel")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_6509 == std::string ("intpntCoTolInfeas")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_6509 == std::string ("intpntQoTolRelGap")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_6509 == std::string ("intpntQoTolPfeas")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_6509 == std::string ("intpntQoTolDfeas")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_6509 == std::string ("intpntQoTolMuRed")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_6509 == std::string ("intpntQoTolNearRel")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_6509 == std::string ("intpntQoTolInfeas")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_6509 == std::string ("intpntTolPsafe")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_6509 == std::string ("intpntTolDsafe")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_6509 == std::string ("mioMaxTime")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_6509 == std::string ("mioRelGapConst")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_6509 == std::string ("mioTolRelGap")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_6509 == std::string ("mioTolAbsGap")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_6509 == std::string ("mioTolAbsRelaxInt")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_6509 == std::string ("basisTolX")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6509 == std::string ("basisTolS")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6509 == std::string ("basisRelTolS")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6509 == std::string ("presolveTolX")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_6509 == std::string ("presolveTolS")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_6509 == std::string ("presolveTolAij")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_6509 == std::string ("presolveTolAbsLindep")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_6509 == std::string ("presolveTolRelLindep")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_6509 == std::string ("simplexAbsTolPiv")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_6509 == std::string ("mioTolFeas")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_6509 == std::string ("anaSolInfeasTol")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6509 == std::string ("checkConvexityRelTol")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6509 == std::string ("qcqoReformulateRelDropTol")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_6509 == std::string ("mioTolRelDualBoundImprovement")))
  {
    {
      return (int)45;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_mpsformat_value(const std::string & _6510){
  if ((_6510 == std::string ("strict")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6510 == std::string ("relaxed")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6510 == std::string ("free")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6510 == std::string ("cplex")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_simdegen_value(const std::string & _6511){
  if ((_6511 == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6511 == std::string ("free")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6511 == std::string ("aggressive")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6511 == std::string ("moderate")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6511 == std::string ("minimum")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_internal_iinf_value(const std::string & _6512){
  if ((_6512 == std::string ("versionMajor")))
  {
    {
      return (int)95;
    }
  }
  {}
  if ((_6512 == std::string ("versionMinor")))
  {
    {
      return (int)96;
    }
  }
  {}
  if ((_6512 == std::string ("versionRevision")))
  {
    {
      return (int)97;
    }
  }
  {}
  if ((_6512 == std::string ("presolveLindepWork")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_6512 == std::string ("presolveLindepPivots")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_6512 == std::string ("presolveLindepSkipped")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_6512 == std::string ("presolveOutofspace")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_6512 == std::string ("presolveBadPrecision")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_6512 == std::string ("optObjectiveSense")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_6512 == std::string ("optimizer")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_6512 == std::string ("intpntFirRefIter")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_6512 == std::string ("intpntNumRefSteps")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_6512 == std::string ("intpntFactorDim")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6512 == std::string ("intpntFactorSchurNumSingular")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_6512 == std::string ("intpntFactorNumDenseA")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6512 == std::string ("intpntFactorNumDenseADup")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6512 == std::string ("intpntFactorNumDenseW")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6512 == std::string ("intpntNumcon")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_6512 == std::string ("intpntNumvar")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_6512 == std::string ("intpntNumbarvar")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_6512 == std::string ("intpntNumblo")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_6512 == std::string ("intpntNumbup")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_6512 == std::string ("intpntNumbfr")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_6512 == std::string ("intpntNumbfx")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_6512 == std::string ("intpntNumcone")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_6512 == std::string ("intpntNumconevar")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_6512 == std::string ("intpntNumbndcone")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_6512 == std::string ("intpntNumrqcones")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_6512 == std::string ("intpntNumqcones")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_6512 == std::string ("intpntNumpexpcones")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_6512 == std::string ("intpntNumppowcones")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_6512 == std::string ("intpntMinconedim")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_6512 == std::string ("intpntMaxconedim")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_6512 == std::string ("intpntMaxbarvardim")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_6512 == std::string ("presolveNumcon")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_6512 == std::string ("presolveNumcfr")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_6512 == std::string ("presolveNumcfx")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_6512 == std::string ("presolveNumclo")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_6512 == std::string ("presolveNumcup")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_6512 == std::string ("presolveNumcra")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_6512 == std::string ("presolveNumcnl")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_6512 == std::string ("presolveNumvar")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_6512 == std::string ("presolveNumvfr")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_6512 == std::string ("presolveNumvfx")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_6512 == std::string ("presolveNumvlo")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_6512 == std::string ("presolveNumvup")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_6512 == std::string ("presolveNumvra")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_6512 == std::string ("presolveNumvnl")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_6512 == std::string ("presolveNumnza")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_6512 == std::string ("presolveFnumcon")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_6512 == std::string ("presolveFnumcfr")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_6512 == std::string ("presolveFnumcfx")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_6512 == std::string ("presolveFnumclo")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_6512 == std::string ("presolveFnumcup")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_6512 == std::string ("presolveFnumcra")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_6512 == std::string ("presolveFnumcnl")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_6512 == std::string ("presolveFnumvar")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_6512 == std::string ("presolveFnumvfr")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_6512 == std::string ("presolveFnumvfx")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_6512 == std::string ("presolveFnumvlo")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_6512 == std::string ("presolveFnumvup")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_6512 == std::string ("presolveFnumvra")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_6512 == std::string ("presolveFnumvnl")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_6512 == std::string ("presolveFnumnza")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_6512 == std::string ("presolveNumElimns")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_6512 == std::string ("presolveEliNumTries")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_6512 == std::string ("presolveEliNumFreedCon")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_6512 == std::string ("presolveEliNumFreedConTotal")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_6512 == std::string ("presolveLindepNumTries")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_6512 == std::string ("presolveLindepNum")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_6512 == std::string ("presolveForceConNum")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_6512 == std::string ("presolveForceConNumVar")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_6512 == std::string ("presolveForceVarNum")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_6512 == std::string ("presolveForceVarNumCon")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_6512 == std::string ("presolvePivOnConNum")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_6512 == std::string ("presolveNumDouBlocks")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_6512 == std::string ("presolveNumSimplifiedDouBlocks")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_6512 == std::string ("presolveSizeSimplifiedDouBlocks")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_6512 == std::string ("presolveNumQuadConeOrthoTrans")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_6512 == std::string ("intpntFactorNum")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6512 == std::string ("intpntFactorNumSolve")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_6512 == std::string ("simPrimalHotstartNumBasics")))
  {
    {
      return (int)92;
    }
  }
  {}
  if ((_6512 == std::string ("simPrimalHotstartBasisRank")))
  {
    {
      return (int)91;
    }
  }
  {}
  if ((_6512 == std::string ("simDualHotstartNumBasics")))
  {
    {
      return (int)84;
    }
  }
  {}
  if ((_6512 == std::string ("simDualHotstartBasisRank")))
  {
    {
      return (int)83;
    }
  }
  {}
  if ((_6512 == std::string ("intpntGpOrderEmployed")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_6512 == std::string ("numLuFactorizations")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_6512 == std::string ("simPrimalTrust")))
  {
    {
      return (int)94;
    }
  }
  {}
  if ((_6512 == std::string ("simDualTrust")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_6512 == std::string ("simPrimalNumSetbacks")))
  {
    {
      return (int)93;
    }
  }
  {}
  if ((_6512 == std::string ("simDualNumSetbacks")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_6512 == std::string ("simNumDupvec")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_6512 == std::string ("simNumPrimalBoundswaps")))
  {
    {
      return (int)90;
    }
  }
  {}
  if ((_6512 == std::string ("simNumDualBoundswaps")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_6512 == std::string ("simNumDualIntegerPivots")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_6512 == std::string ("biPrimalInfo")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6512 == std::string ("biDualInfo")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6512 == std::string ("presolveLindepNumTruncTries")))
  {
    {
      return (int)57;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_simdupvec_value(const std::string & _6513){
  if ((_6513 == std::string ("on")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6513 == std::string ("off")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6513 == std::string ("free")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_startpointtype_value(const std::string & _6514){
  if ((_6514 == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6514 == std::string ("guess")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6514 == std::string ("constant")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6514 == std::string ("satisfyBounds")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_compresstype_value(const std::string & _6515){
  if ((_6515 == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6515 == std::string ("free")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6515 == std::string ("gzip")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6515 == std::string ("zstd")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_sparam_value(const std::string & _6516){
  if ((_6516 == std::string ("dataFileName")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6516 == std::string ("paramReadFileName")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_6516 == std::string ("paramWriteFileName")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_6516 == std::string ("paramCommentSign")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6516 == std::string ("debugFileName")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6516 == std::string ("basSolFileName")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6516 == std::string ("itrSolFileName")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6516 == std::string ("intSolFileName")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6516 == std::string ("solFilterXcLow")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_6516 == std::string ("solFilterXcUpr")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_6516 == std::string ("solFilterXxLow")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_6516 == std::string ("solFilterXxUpr")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_6516 == std::string ("readMpsObjName")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_6516 == std::string ("readMpsRanName")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_6516 == std::string ("readMpsRhsName")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_6516 == std::string ("readMpsBouName")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_6516 == std::string ("statFileName")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_6516 == std::string ("statName")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_6516 == std::string ("statKey")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_6516 == std::string ("writeLpGenVarName")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_6516 == std::string ("sensitivityResFileName")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_6516 == std::string ("sensitivityFileName")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_6516 == std::string ("mioDebugString")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6516 == std::string ("remoteAccessToken")))
  {
    {
      return (int)13;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_onoffkey_value(const std::string & _6517){
  if ((_6517 == std::string ("on")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6517 == std::string ("off")))
  {
    {
      return (int)0;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_conetype_value(const std::string & _6518){
  if ((_6518 == std::string ("quad")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6518 == std::string ("rquad")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6518 == std::string ("pexp")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6518 == std::string ("dexp")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6518 == std::string ("ppow")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6518 == std::string ("dpow")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6518 == std::string ("zero")))
  {
    {
      return (int)6;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_solsta_value(const std::string & _6519){
  if ((_6519 == std::string ("unknown")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6519 == std::string ("optimal")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6519 == std::string ("primFeas")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6519 == std::string ("dualFeas")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6519 == std::string ("primAndDualFeas")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6519 == std::string ("primInfeasCer")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6519 == std::string ("dualInfeasCer")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6519 == std::string ("primIllposedCer")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_6519 == std::string ("dualIllposedCer")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_6519 == std::string ("integerOptimal")))
  {
    {
      return (int)9;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_rescodetype_value(const std::string & _6520){
  if ((_6520 == std::string ("ok")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6520 == std::string ("wrn")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6520 == std::string ("trm")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6520 == std::string ("err")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6520 == std::string ("unk")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_objsense_value(const std::string & _6521){
  if ((_6521 == std::string ("minimize")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6521 == std::string ("maximize")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_xmlwriteroutputtype_value(const std::string & _6522){
  if ((_6522 == std::string ("row")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6522 == std::string ("col")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_language_value(const std::string & _6523){
  if ((_6523 == std::string ("eng")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6523 == std::string ("dan")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_simseltype_value(const std::string & _6524){
  if ((_6524 == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6524 == std::string ("full")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6524 == std::string ("ase")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6524 == std::string ("devex")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6524 == std::string ("se")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6524 == std::string ("partial")))
  {
    {
      return (int)5;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_internal_liinf_value(const std::string & _6525){
  if ((_6525 == std::string ("intpntLenbarvar")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6525 == std::string ("intpntFactorNumNzBefore")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6525 == std::string ("intpntFactorNumNzAfter")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6525 == std::string ("intpntFactorMlOrderSparseLNz")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6525 == std::string ("intpntFactorGpOrderSparseLNz")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6525 == std::string ("presolveStackSize")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_6525 == std::string ("intpntFactorVNz")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6525 == std::string ("intpntFactorUpdatedVNz")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_transpose_value(const std::string & _6526){
  if ((_6526 == std::string ("no")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6526 == std::string ("yes")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_problemitem_value(const std::string & _6527){
  if ((_6527 == std::string ("var")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6527 == std::string ("con")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6527 == std::string ("cone")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_scopr_value(const std::string & _6528){
  if ((_6528 == std::string ("ent")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6528 == std::string ("exp")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6528 == std::string ("log")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6528 == std::string ("pow")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6528 == std::string ("sqrt")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_value_value(const std::string & _6529){
  if ((_6529 == std::string ("maxStrLen")))
  {
    {
      return (int)1024;
    }
  }
  {}
  if ((_6529 == std::string ("licenseBufferLength")))
  {
    {
      return (int)21;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_uplo_value(const std::string & _6530){
  if ((_6530 == std::string ("lo")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6530 == std::string ("up")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_feature_value(const std::string & _6531){
  if ((_6531 == std::string ("pts")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6531 == std::string ("pton")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_soltype_value(const std::string & _6532){
  if ((_6532 == std::string ("bas")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6532 == std::string ("itr")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6532 == std::string ("itg")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_callbackcode_value(const std::string & _6533){
  if ((_6533 == std::string ("beginRootCutgen")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_6533 == std::string ("imRootCutgen")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_6533 == std::string ("endRootCutgen")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_6533 == std::string ("beginOptimizer")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_6533 == std::string ("endOptimizer")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_6533 == std::string ("beginPresolve")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_6533 == std::string ("updatePresolve")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_6533 == std::string ("imPresolve")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_6533 == std::string ("endPresolve")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_6533 == std::string ("beginIntpnt")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_6533 == std::string ("intpnt")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_6533 == std::string ("imIntpnt")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_6533 == std::string ("endIntpnt")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_6533 == std::string ("beginConic")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6533 == std::string ("conic")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_6533 == std::string ("imConic")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_6533 == std::string ("endConic")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_6533 == std::string ("primalSimplex")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_6533 == std::string ("dualSimplex")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_6533 == std::string ("beginBi")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6533 == std::string ("imBi")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_6533 == std::string ("endBi")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_6533 == std::string ("beginPrimalBi")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_6533 == std::string ("imPrimalBi")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_6533 == std::string ("updatePrimalBi")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_6533 == std::string ("endPrimalBi")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_6533 == std::string ("beginDualBi")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6533 == std::string ("imDualBi")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_6533 == std::string ("updateDualBi")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_6533 == std::string ("endDualBi")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_6533 == std::string ("beginSimplexBi")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_6533 == std::string ("imSimplexBi")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_6533 == std::string ("beginPrimalSimplexBi")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_6533 == std::string ("updatePrimalSimplexBi")))
  {
    {
      return (int)91;
    }
  }
  {}
  if ((_6533 == std::string ("endPrimalSimplexBi")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_6533 == std::string ("beginDualSimplexBi")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6533 == std::string ("updateDualSimplexBi")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_6533 == std::string ("endDualSimplexBi")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_6533 == std::string ("endSimplexBi")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_6533 == std::string ("beginMio")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_6533 == std::string ("imMio")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_6533 == std::string ("newIntMio")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_6533 == std::string ("endMio")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_6533 == std::string ("beginSimplex")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_6533 == std::string ("beginDualSimplex")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6533 == std::string ("imDualSimplex")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_6533 == std::string ("updateDualSimplex")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_6533 == std::string ("endDualSimplex")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_6533 == std::string ("beginPrimalSimplex")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_6533 == std::string ("imPrimalSimplex")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_6533 == std::string ("updatePrimalSimplex")))
  {
    {
      return (int)90;
    }
  }
  {}
  if ((_6533 == std::string ("endPrimalSimplex")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_6533 == std::string ("endSimplex")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_6533 == std::string ("beginInfeasAna")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_6533 == std::string ("endInfeasAna")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_6533 == std::string ("imPrimalSensivity")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_6533 == std::string ("imDualSensivity")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_6533 == std::string ("imMioIntpnt")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_6533 == std::string ("imMioPrimalSimplex")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_6533 == std::string ("imMioDualSimplex")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_6533 == std::string ("beginPrimalSetupBi")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_6533 == std::string ("endPrimalSetupBi")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_6533 == std::string ("beginDualSetupBi")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6533 == std::string ("endDualSetupBi")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_6533 == std::string ("beginPrimalSensitivity")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_6533 == std::string ("endPrimalSensitivity")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_6533 == std::string ("beginDualSensitivity")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6533 == std::string ("endDualSensitivity")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_6533 == std::string ("beginLicenseWait")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_6533 == std::string ("endLicenseWait")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_6533 == std::string ("imLicenseWait")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_6533 == std::string ("beginQcqoReformulate")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_6533 == std::string ("endQcqoReformulate")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_6533 == std::string ("imQoReformulate")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_6533 == std::string ("beginToConic")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_6533 == std::string ("endToConic")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_6533 == std::string ("beginFullConvexityCheck")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_6533 == std::string ("endFullConvexityCheck")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_6533 == std::string ("imFullConvexityCheck")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_6533 == std::string ("beginPrimalRepair")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_6533 == std::string ("endPrimalRepair")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_6533 == std::string ("beginRead")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_6533 == std::string ("imRead")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_6533 == std::string ("endRead")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_6533 == std::string ("beginWrite")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_6533 == std::string ("endWrite")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_6533 == std::string ("readOpfSection")))
  {
    {
      return (int)83;
    }
  }
  {}
  if ((_6533 == std::string ("imLu")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_6533 == std::string ("imOrder")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_6533 == std::string ("imSimplex")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_6533 == std::string ("readOpf")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_6533 == std::string ("writeOpf")))
  {
    {
      return (int)92;
    }
  }
  {}
  if ((_6533 == std::string ("solvingRemote")))
  {
    {
      return (int)84;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_stakey_value(const std::string & _6534){
  if ((_6534 == std::string ("unk")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6534 == std::string ("bas")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6534 == std::string ("supbas")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6534 == std::string ("low")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6534 == std::string ("upr")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6534 == std::string ("fix")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6534 == std::string ("inf")))
  {
    {
      return (int)6;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_mark_value(const std::string & _6535){
  if ((_6535 == std::string ("lo")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6535 == std::string ("up")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_problemtype_value(const std::string & _6536){
  if ((_6536 == std::string ("lo")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6536 == std::string ("qo")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6536 == std::string ("qcqo")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6536 == std::string ("conic")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6536 == std::string ("mixed")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_scalingtype_value(const std::string & _6537){
  if ((_6537 == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6537 == std::string ("none")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6537 == std::string ("moderate")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6537 == std::string ("aggressive")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_mionodeseltype_value(const std::string & _6538){
  if ((_6538 == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6538 == std::string ("first")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6538 == std::string ("best")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6538 == std::string ("pseudo")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_internal_dinf_value(const std::string & _6539){
  if ((_6539 == std::string ("sensitivityPrimalTime")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_6539 == std::string ("sensitivityDualTime")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_6539 == std::string ("intpntGfeas")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_6539 == std::string ("intpntMu")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_6539 == std::string ("intpntInitIterTime")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_6539 == std::string ("intpntFactorTime")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_6539 == std::string ("intpntInitSearchTime")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_6539 == std::string ("intpntFormSearchTime")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_6539 == std::string ("intpntUpdateTime")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_6539 == std::string ("intpntFactorSetupTime")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_6539 == std::string ("intpntFactorSchurTime")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_6539 == std::string ("intpntFactorHatSchurTime")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_6539 == std::string ("intpntFactorHatSchurPushTime")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_6539 == std::string ("intpntFactorHatSchurPullTime")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_6539 == std::string ("intpntFactorBarSchurTime")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_6539 == std::string ("intpntFactorBarSchurDeTabTime")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_6539 == std::string ("intpntFactorBarSchurSpTabTime")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_6539 == std::string ("intpntFactorSparseLTime")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_6539 == std::string ("intpntFactorSparseLUpdateLastTime")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_6539 == std::string ("intpntFactorSparseLFactorLastTime")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_6539 == std::string ("intpntFactorDenseLTime")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_6539 == std::string ("intpntFactorDenseTime")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_6539 == std::string ("intpntFactorDenseDotaTime")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_6539 == std::string ("intpntFactorDenseDotaSolveTime")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_6539 == std::string ("intpntFactorDenseDotatdotaTime")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_6539 == std::string ("intpntFactorDenseDotlInitTime")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_6539 == std::string ("intpntFactorDenseDotlFactorTime")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_6539 == std::string ("intpntIterNonCorrectorFlops")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_6539 == std::string ("intpntIterOneCorrectorFlops")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_6539 == std::string ("intpntSolveTime")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_6539 == std::string ("intpntIterRefTime")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_6539 == std::string ("intpntSolveSparseLTime")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_6539 == std::string ("intpntSolveDenseLTime")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_6539 == std::string ("intpntFactorSetupFlops")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_6539 == std::string ("intpntFactorSetupHatSchurFlops")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_6539 == std::string ("intpntFactorSchurFlops")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_6539 == std::string ("intpntFactorHatSchurFlops")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_6539 == std::string ("intpntFactorHatSchurPushFlops")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_6539 == std::string ("intpntFactorHatSchurPullFlops")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_6539 == std::string ("intpntFactorBarSchurFlops")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_6539 == std::string ("intpntFactorSparseLFlops")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_6539 == std::string ("intpntFactorMlOrderSparseLFlops")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_6539 == std::string ("intpntFactorGpOrderSparseLFlops")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_6539 == std::string ("intpntFactorSparseLUpdateLastFlops")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_6539 == std::string ("intpntFactorSparseLFactorLastFlops")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_6539 == std::string ("intpntFactorDenseLFlops")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_6539 == std::string ("intpntFactorDenseFlops")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_6539 == std::string ("intpntFactorDenseDotaFlops")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_6539 == std::string ("intpntFactorDenseDotatdotaFlops")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_6539 == std::string ("intpntFactorDenseDotlFactor_initFlops")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_6539 == std::string ("intpntFactorDenseDotlFactorFlops")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_6539 == std::string ("intpntFactorDenseDotl11FactorFlops")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_6539 == std::string ("intpntFactorDenseDotl21FactorFlops")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_6539 == std::string ("intpntFactorDenseDotl22FactorFlops")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_6539 == std::string ("presolveAcoltTime")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_6539 == std::string ("presolveSetupTime")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_6539 == std::string ("presolveCheckproTime")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_6539 == std::string ("presolveDupconTime")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_6539 == std::string ("presolveDupvarTime")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_6539 == std::string ("presolveFinalTime")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_6539 == std::string ("presolveSubDomvarTime")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_6539 == std::string ("presolveSubRelaxTime")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_6539 == std::string ("primalSimplexInftime")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_6539 == std::string ("dualSimplexInftime")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_6539 == std::string ("intpntGpOrderSavedFlops")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_6539 == std::string ("intpntFactorSetupDetectDenseTime")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_6539 == std::string ("intpntFactorSetupMlOrderTime")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_6539 == std::string ("intpntFactorSetupGpOrderTime")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_6539 == std::string ("biCrashTime")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6539 == std::string ("biCrashLuTime")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6539 == std::string ("biFactorTime")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6539 == std::string ("biFactorWork")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6539 == std::string ("biPrimalDone")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_6539 == std::string ("biDualDone")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6539 == std::string ("simPrimalObj")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_6539 == std::string ("simPrimalFeas")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_6539 == std::string ("simDualObj")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_6539 == std::string ("simDualFeas")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_6539 == std::string ("biPrimalObj")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_6539 == std::string ("biDualObj")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6539 == std::string ("biPrimalFeas")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_6539 == std::string ("biDualFeas")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6539 == std::string ("intpntPurifyTime")))
  {
    {
      return (int)63;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_intpnthotstart_value(const std::string & _6540){
  if ((_6540 == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6540 == std::string ("primal")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6540 == std::string ("dual")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6540 == std::string ("primalDual")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_checkconvexitytype_value(const std::string & _6541){
  if ((_6541 == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6541 == std::string ("simple")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6541 == std::string ("full")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_solitem_value(const std::string & _6542){
  if ((_6542 == std::string ("xc")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6542 == std::string ("xx")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6542 == std::string ("y")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6542 == std::string ("slc")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6542 == std::string ("suc")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6542 == std::string ("slx")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6542 == std::string ("sux")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6542 == std::string ("snx")))
  {
    {
      return (int)7;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_branchdir_value(const std::string & _6543){
  if ((_6543 == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6543 == std::string ("up")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6543 == std::string ("down")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6543 == std::string ("near")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6543 == std::string ("far")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6543 == std::string ("rootLp")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6543 == std::string ("guided")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6543 == std::string ("pseudocost")))
  {
    {
      return (int)7;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_scalingmethod_value(const std::string & _6544){
  if ((_6544 == std::string ("pow2")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6544 == std::string ("free")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_miocontsoltype_value(const std::string & _6545){
  if ((_6545 == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6545 == std::string ("root")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6545 == std::string ("itg")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6545 == std::string ("itgRel")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_miomode_value(const std::string & _6546){
  if ((_6546 == std::string ("ignored")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6546 == std::string ("satisfied")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_dinfitem_value(const std::string & _6547){
  if ((_6547 == std::string ("biTime")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6547 == std::string ("biPrimalTime")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6547 == std::string ("biDualTime")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6547 == std::string ("biCleanTime")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6547 == std::string ("biCleanPrimalTime")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6547 == std::string ("biCleanDualTime")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6547 == std::string ("intpntTime")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_6547 == std::string ("intpntOrderTime")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_6547 == std::string ("intpntPrimalObj")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_6547 == std::string ("intpntDualObj")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_6547 == std::string ("intpntPrimalFeas")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_6547 == std::string ("intpntDualFeas")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6547 == std::string ("intpntOptStatus")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_6547 == std::string ("simTime")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_6547 == std::string ("simPrimalTime")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_6547 == std::string ("simDualTime")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_6547 == std::string ("simObj")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_6547 == std::string ("simFeas")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_6547 == std::string ("mioTime")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_6547 == std::string ("mioRootPresolveTime")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_6547 == std::string ("mioRootOptimizerTime")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_6547 == std::string ("toConicTime")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_6547 == std::string ("mioConstructSolutionObj")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_6547 == std::string ("mioObjInt")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_6547 == std::string ("mioObjBound")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_6547 == std::string ("mioObjRelGap")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_6547 == std::string ("mioObjAbsGap")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_6547 == std::string ("mioUserObjCut")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_6547 == std::string ("mioCmirSeparationTime")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_6547 == std::string ("mioCliqueSeparationTime")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_6547 == std::string ("mioKnapsackCoverSeparationTime")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_6547 == std::string ("mioGmiSeparationTime")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_6547 == std::string ("mioImpliedBoundTime")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_6547 == std::string ("mioRootCutgenTime")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_6547 == std::string ("mioProbingTime")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_6547 == std::string ("optimizerTime")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_6547 == std::string ("presolveTime")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_6547 == std::string ("mioDualBoundAfterPresolve")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_6547 == std::string ("presolveEliTime")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_6547 == std::string ("presolveLindepTime")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_6547 == std::string ("rdTime")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_6547 == std::string ("solItrPrimalObj")))
  {
    {
      return (int)84;
    }
  }
  {}
  if ((_6547 == std::string ("solItrPviolcon")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_6547 == std::string ("solItrPviolvar")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_6547 == std::string ("solItrPviolbarvar")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_6547 == std::string ("solItrPviolcones")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_6547 == std::string ("solItrDualObj")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_6547 == std::string ("solItrDviolcon")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_6547 == std::string ("solItrDviolvar")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_6547 == std::string ("solItrDviolbarvar")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_6547 == std::string ("solItrDviolcones")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_6547 == std::string ("solItrNrmXc")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_6547 == std::string ("solItrNrmXx")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_6547 == std::string ("solItrNrmBarx")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_6547 == std::string ("solItrNrmY")))
  {
    {
      return (int)83;
    }
  }
  {}
  if ((_6547 == std::string ("solItrNrmSlc")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_6547 == std::string ("solItrNrmSuc")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_6547 == std::string ("solItrNrmSlx")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_6547 == std::string ("solItrNrmSux")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_6547 == std::string ("solItrNrmSnx")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_6547 == std::string ("solItrNrmBars")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_6547 == std::string ("solBasPrimalObj")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_6547 == std::string ("solBasPviolcon")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_6547 == std::string ("solBasPviolvar")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_6547 == std::string ("solBasDualObj")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_6547 == std::string ("solBasDviolcon")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_6547 == std::string ("solBasDviolvar")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_6547 == std::string ("solBasNrmXc")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_6547 == std::string ("solBasNrmXx")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_6547 == std::string ("solBasNrmBarx")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_6547 == std::string ("solBasNrmY")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_6547 == std::string ("solBasNrmSlc")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_6547 == std::string ("solBasNrmSuc")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_6547 == std::string ("solBasNrmSlx")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_6547 == std::string ("solBasNrmSux")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_6547 == std::string ("solItgPrimalObj")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_6547 == std::string ("solItgPviolcon")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_6547 == std::string ("solItgPviolvar")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_6547 == std::string ("solItgPviolbarvar")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_6547 == std::string ("solItgPviolcones")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_6547 == std::string ("solItgPviolitg")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_6547 == std::string ("solItgNrmXc")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_6547 == std::string ("solItgNrmXx")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_6547 == std::string ("solItgNrmBarx")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_6547 == std::string ("intpntFactorNumFlops")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_6547 == std::string ("qcqoReformulateTime")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_6547 == std::string ("qcqoReformulateMaxPerturbation")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_6547 == std::string ("qcqoReformulateWorstCholeskyDiagScaling")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_6547 == std::string ("qcqoReformulateWorstCholeskyColumnScaling")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_6547 == std::string ("primalRepairPenaltyObj")))
  {
    {
      return (int)35;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_parametertype_value(const std::string & _6548){
  if ((_6548 == std::string ("invalidType")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6548 == std::string ("douType")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6548 == std::string ("intType")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6548 == std::string ("strType")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_basindtype_value(const std::string & _6549){
  if ((_6549 == std::string ("never")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6549 == std::string ("always")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6549 == std::string ("noError")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6549 == std::string ("ifFeasible")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6549 == std::string ("reservered")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_orderingtype_value(const std::string & _6550){
  if ((_6550 == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6550 == std::string ("appminloc")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6550 == std::string ("experimental")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6550 == std::string ("tryGraphpar")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6550 == std::string ("forceGraphpar")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6550 == std::string ("none")))
  {
    {
      return (int)5;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_inftype_value(const std::string & _6551){
  if ((_6551 == std::string ("douType")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6551 == std::string ("intType")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6551 == std::string ("lintType")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_liinfitem_value(const std::string & _6552){
  if ((_6552 == std::string ("mioAnz")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_6552 == std::string ("mioPresolvedAnz")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_6552 == std::string ("mioSimplexIter")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_6552 == std::string ("mioIntpntIter")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_6552 == std::string ("biPrimalIter")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6552 == std::string ("biDualIter")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6552 == std::string ("biCleanPrimalIter")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6552 == std::string ("biCleanDualIter")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6552 == std::string ("biCleanPrimalDegIter")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6552 == std::string ("biCleanDualDegIter")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6552 == std::string ("intpntFactorNumNz")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6552 == std::string ("rdNumanz")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_6552 == std::string ("rdNumqnz")))
  {
    {
      return (int)12;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_boundkey_value(const std::string & _6553){
  if ((_6553 == std::string ("lo")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6553 == std::string ("up")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6553 == std::string ("fx")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6553 == std::string ("fr")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6553 == std::string ("ra")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_prosta_value(const std::string & _6554){
  if ((_6554 == std::string ("unknown")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6554 == std::string ("primAndDualFeas")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6554 == std::string ("primFeas")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6554 == std::string ("dualFeas")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6554 == std::string ("primInfeas")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6554 == std::string ("dualInfeas")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6554 == std::string ("primAndDualInfeas")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6554 == std::string ("illPosed")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_6554 == std::string ("primInfeasOrUnbounded")))
  {
    {
      return (int)8;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_dataformat_value(const std::string & _6555){
  if ((_6555 == std::string ("extension")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6555 == std::string ("mps")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6555 == std::string ("lp")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6555 == std::string ("op")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6555 == std::string ("freeMps")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6555 == std::string ("task")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6555 == std::string ("ptf")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6555 == std::string ("cb")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_6555 == std::string ("jsonTask")))
  {
    {
      return (int)8;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_iinfitem_value(const std::string & _6556){
  if ((_6556 == std::string ("anaProNumCon")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6556 == std::string ("anaProNumConLo")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6556 == std::string ("anaProNumConUp")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6556 == std::string ("anaProNumConRa")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6556 == std::string ("anaProNumConEq")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6556 == std::string ("anaProNumConFr")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6556 == std::string ("anaProNumVar")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6556 == std::string ("anaProNumVarLo")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_6556 == std::string ("anaProNumVarUp")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_6556 == std::string ("anaProNumVarRa")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_6556 == std::string ("anaProNumVarEq")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_6556 == std::string ("anaProNumVarFr")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_6556 == std::string ("anaProNumVarCont")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_6556 == std::string ("anaProNumVarBin")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_6556 == std::string ("anaProNumVarInt")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_6556 == std::string ("optimizeResponse")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_6556 == std::string ("intpntIter")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_6556 == std::string ("intpntFactorDimDense")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_6556 == std::string ("intpntSolveDual")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_6556 == std::string ("mioNodeDepth")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_6556 == std::string ("mioNumvar")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_6556 == std::string ("mioNumbin")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_6556 == std::string ("mioNumint")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_6556 == std::string ("mioNumcont")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_6556 == std::string ("mioNumcon")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_6556 == std::string ("mioNumcone")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_6556 == std::string ("mioNumqcones")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_6556 == std::string ("mioNumrqcones")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_6556 == std::string ("mioNumpexpcones")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_6556 == std::string ("mioNumdexpcones")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_6556 == std::string ("mioNumppowcones")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_6556 == std::string ("mioNumdpowcones")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_6556 == std::string ("mioNumconevar")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_6556 == std::string ("mioNumbinconevar")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_6556 == std::string ("mioNumintconevar")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_6556 == std::string ("mioNumcontconevar")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_6556 == std::string ("mioPresolvedNumvar")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_6556 == std::string ("mioPresolvedNumbin")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_6556 == std::string ("mioPresolvedNumint")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_6556 == std::string ("mioPresolvedNumcont")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_6556 == std::string ("mioPresolvedNumcon")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_6556 == std::string ("mioPresolvedNumcone")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_6556 == std::string ("mioPresolvedNumqcones")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_6556 == std::string ("mioPresolvedNumrqcones")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_6556 == std::string ("mioPresolvedNumpexpcones")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_6556 == std::string ("mioPresolvedNumdexpcones")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_6556 == std::string ("mioPresolvedNumppowcones")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_6556 == std::string ("mioPresolvedNumdpowcones")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_6556 == std::string ("mioPresolvedNumconevar")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_6556 == std::string ("mioPresolvedNumbinconevar")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_6556 == std::string ("mioPresolvedNumintconevar")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_6556 == std::string ("mioPresolvedNumcontconevar")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_6556 == std::string ("mioCliqueTableSize")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_6556 == std::string ("mioConstructSolution")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_6556 == std::string ("mioNumIntSolutions")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_6556 == std::string ("mioObjBoundDefined")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_6556 == std::string ("mioNumActiveNodes")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_6556 == std::string ("mioNumRelax")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_6556 == std::string ("mioNumBranch")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_6556 == std::string ("mioTotalNumCuts")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_6556 == std::string ("mioNumCmirCuts")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_6556 == std::string ("mioNumCliqueCuts")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_6556 == std::string ("mioNumImpliedBoundCuts")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_6556 == std::string ("mioNumKnapsackCoverCuts")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_6556 == std::string ("mioNumGomoryCuts")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_6556 == std::string ("mioNumRepeatedPresolve")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_6556 == std::string ("mioUserObjCut")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_6556 == std::string ("mioRelgapSatisfied")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_6556 == std::string ("mioAbsgapSatisfied")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_6556 == std::string ("rdProtype")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_6556 == std::string ("rdNumcon")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_6556 == std::string ("rdNumvar")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_6556 == std::string ("rdNumbarvar")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_6556 == std::string ("rdNumintvar")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_6556 == std::string ("rdNumq")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_6556 == std::string ("simDualDegIter")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_6556 == std::string ("simDualInfIter")))
  {
    {
      return (int)84;
    }
  }
  {}
  if ((_6556 == std::string ("simDualHotstartLu")))
  {
    {
      return (int)83;
    }
  }
  {}
  if ((_6556 == std::string ("simPrimalIter")))
  {
    {
      return (int)92;
    }
  }
  {}
  if ((_6556 == std::string ("simDualIter")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_6556 == std::string ("intpntNumThreads")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_6556 == std::string ("simPrimalInfIter")))
  {
    {
      return (int)91;
    }
  }
  {}
  if ((_6556 == std::string ("simPrimalDegIter")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_6556 == std::string ("simPrimalHotstart")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_6556 == std::string ("simPrimalHotstartLu")))
  {
    {
      return (int)90;
    }
  }
  {}
  if ((_6556 == std::string ("simDualHotstart")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_6556 == std::string ("solItrProsta")))
  {
    {
      return (int)98;
    }
  }
  {}
  if ((_6556 == std::string ("solItrSolsta")))
  {
    {
      return (int)99;
    }
  }
  {}
  if ((_6556 == std::string ("solBasProsta")))
  {
    {
      return (int)94;
    }
  }
  {}
  if ((_6556 == std::string ("solBasSolsta")))
  {
    {
      return (int)95;
    }
  }
  {}
  if ((_6556 == std::string ("solItgProsta")))
  {
    {
      return (int)96;
    }
  }
  {}
  if ((_6556 == std::string ("solItgSolsta")))
  {
    {
      return (int)97;
    }
  }
  {}
  if ((_6556 == std::string ("simNumcon")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_6556 == std::string ("simNumvar")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_6556 == std::string ("optNumcon")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_6556 == std::string ("optNumvar")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_6556 == std::string ("stoNumARealloc")))
  {
    {
      return (int)100;
    }
  }
  {}
  if ((_6556 == std::string ("rdNumcone")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_6556 == std::string ("simSolveDual")))
  {
    {
      return (int)93;
    }
  }
  {}
  if ((_6556 == std::string ("purifyPrimalSuccess")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_6556 == std::string ("purifyDualSuccess")))
  {
    {
      return (int)72;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_symmattype_value(const std::string & _6557){
  if ((_6557 == std::string ("sparse")))
  {
    {
      return (int)0;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_streamtype_value(const std::string & _6558){
  if ((_6558 == std::string ("log")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6558 == std::string ("msg")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6558 == std::string ("err")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6558 == std::string ("wrn")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_simhotstart_value(const std::string & _6559){
  if ((_6559 == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6559 == std::string ("free")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6559 == std::string ("statusKeys")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_simreform_value(const std::string & _6560){
  if ((_6560 == std::string ("on")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6560 == std::string ("off")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6560 == std::string ("free")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6560 == std::string ("aggressive")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_sensitivitytype_value(const std::string & _6561){
  if ((_6561 == std::string ("basis")))
  {
    {
      return (int)0;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_purify_value(const std::string & _6562){
  if ((_6562 == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6562 == std::string ("primal")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6562 == std::string ("dual")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6562 == std::string ("primalDual")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6562 == std::string ("auto")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_solveform_value(const std::string & _6563){
  if ((_6563 == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6563 == std::string ("primal")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6563 == std::string ("dual")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
void mosek::fusion::p_Parameters::destroy(){}void mosek::fusion::Parameters::destroy() { mosek::fusion::p_Parameters::_get_impl(this)->destroy(); }